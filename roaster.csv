ac6629a25c2c043490eda55750f97efa62900e74,George Gastaldi,Refactory.java,MODIFY,"createToStringFromFields -> [JavaClass clazz, List fields] | [JavaClass clazz]","diff --git a/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java b/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java
index af19757..28956b5 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java
@@ -15,9 +15,9 @@
 import org.jboss.forge.parser.java.Method;
 
 /**
- * 
+ *
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
- * 
+ *
  */
 public class Refactory
 {
@@ -36,7 +36,8 @@
                .setPublic()
                .setBody(""return this."" + fieldName + "";"");
 
-      if (!field.isFinal()) {
+      if (!field.isFinal())
+      {
          clazz.addMethod().setReturnTypeVoid().setName(""set"" + methodNameSuffix).setPublic()
                   .setParameters(""final "" + field.getTypeInspector().toString() + "" "" + fieldName)
                   .setBody(""this."" + fieldName + "" = "" + fieldName + "";"");
@@ -76,7 +77,9 @@
 
    public static void createToStringFromFields(final JavaClass clazz, final List<Field<JavaClass>> fields)
    {
-      Method<JavaClass> method = clazz.addMethod().setName(""toString"").setReturnType(String.class).setPublic();
+      Method<JavaClass> method = clazz.addMethod().setName(""toString"").setReturnType(String.class)
+               .setPublic();
+      method.addAnnotation(Override.class);
 
       List<String> list = new ArrayList<String>();
 
@@ -85,21 +88,29 @@
       {
          if (clazz.hasField(field))
          {
-            String line = """";
+            StringBuilder line = new StringBuilder();
 
             if (!field.isPrimitive())
                if (field.isType(String.class))
-                  line += ""if("" + field.getName() + "" != null && !"" + field.getName() + "".trim().isEmpty())\n"";
+               {
+                  line.append(""if("").append(field.getName()).append("" != null && !"").append(field.getName())
+                           .append("".trim().isEmpty())\n"");
+               }
                else
-                  line += ""if("" + field.getName() + "" != null)\n"";
+               {
+                  line.append(""if("").append(field.getName()).append("" != null)\n"");
+               }
 
-            line += "" result += "" + (list.isEmpty() ? """" : ""\"" \"" + "") + field.getName() + "";"";
+            boolean isFirst = list.isEmpty();
 
-            list.add(line);
+            line.append("" result += "").append(isFirst ? ""\"""" : ""\"", "");
+            line.append(field.getName()).append("": \"" + "").append(field.getName()).append("";"");
+
+            list.add(line.toString());
          }
       }
 
-      String body = ""String result = \""\"";\n"" +
+      String body = ""String result = getClass().getSimpleName()+\"" \"";\n"" +
                Strings.join(list, delimeter) + ""\n"" +
                ""return result;"";
       method.setBody(body);
"
ac6629a25c2c043490eda55750f97efa62900e74,George Gastaldi,JavaEnumImpl.java,MODIFY,addEnumConstant -> [String declaration] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
index 88ac74e..bab2421 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
@@ -41,7 +41,7 @@
       for (Object o : (((EnumDeclaration) getBodyDeclaration()).enumConstants()))
       {
          EnumConstantDeclaration field = (EnumConstantDeclaration) o;
-         result.add(new EnumConstantImpl<JavaEnum>((JavaEnum) this, field));
+         result.add(new EnumConstantImpl<JavaEnum>(this, field));
       }
 
       return Collections.unmodifiableList(result);
"
4a5e4ee0e5073eb79d58794fcebd0be42bf6c858,Yann Albou,AnnotationAccessor.java,MODIFY,"addAnnotation -> [AnnotationTarget target, List modifiers, String className] | [AnnotationTarget target, ASTNode body]","diff --git a/impl/src/main/java/org/jboss/forge/parser/java/ast/AnnotationAccessor.java b/impl/src/main/java/org/jboss/forge/parser/java/ast/AnnotationAccessor.java
index bec58aa..f528252 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/ast/AnnotationAccessor.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/ast/AnnotationAccessor.java
@@ -12,8 +12,10 @@
 import java.util.List;
 import java.util.ListIterator;
 
+import org.eclipse.jdt.core.dom.ASTNode;
 import org.eclipse.jdt.core.dom.BodyDeclaration;
 import org.eclipse.jdt.core.dom.IExtendedModifier;
+import org.eclipse.jdt.core.dom.PackageDeclaration;
 import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
 import org.jboss.forge.parser.java.Annotation;
 import org.jboss.forge.parser.java.AnnotationTarget;
@@ -27,9 +29,9 @@
 public class AnnotationAccessor<O extends JavaSource<O>, T>
 {
 
-   public Annotation<O> addAnnotation(final AnnotationTarget<O, T> target, final BodyDeclaration body)
+   public Annotation<O> addAnnotation(final AnnotationTarget<O, T> target, final ASTNode body)
    {
-      return addAnnotation(target, body.modifiers());
+      return addAnnotation(target, getModifiers(body));
    }
 
    public Annotation<O> addAnnotation(final AnnotationTarget<O, T> target,
@@ -55,10 +57,10 @@
       return annotation;
    }
 
-   public Annotation<O> addAnnotation(final AnnotationTarget<O, T> target, final BodyDeclaration body,
+   public Annotation<O> addAnnotation(final AnnotationTarget<O, T> target, final ASTNode body,
             final Class<?> clazz)
    {
-      return addAnnotation(target, body.modifiers(), clazz.getName());
+      return addAnnotation(target, getModifiers(body), clazz.getName());
    }
 
    public Annotation<O> addAnnotation(final AnnotationTarget<O, T> target,
@@ -68,10 +70,10 @@
       return addAnnotation(target, variableDeclaration.modifiers(), clazz.getName());
    }
 
-   public Annotation<O> addAnnotation(final AnnotationTarget<O, T> target, final BodyDeclaration body,
+   public Annotation<O> addAnnotation(final AnnotationTarget<O, T> target, final ASTNode body,
             final String className)
    {
-      return addAnnotation(target, body.modifiers(), className);
+      return addAnnotation(target, getModifiers(body), className);
    }
 
    public Annotation<O> addAnnotation(final AnnotationTarget<O, T> target,
@@ -91,9 +93,9 @@
       return addAnnotation(target, modifiers).setName(Types.toSimpleName(className));
    }
 
-   public List<Annotation<O>> getAnnotations(final AnnotationTarget<O, T> target, final BodyDeclaration body)
+   public List<Annotation<O>> getAnnotations(final AnnotationTarget<O, T> target, final ASTNode body)
    {
-      return getAnnotations(target, body.modifiers());
+      return getAnnotations(target, getModifiers(body));
    }
 
    public List<Annotation<O>> getAnnotations(final AnnotationTarget<O, T> target,
@@ -118,10 +120,10 @@
       return Collections.unmodifiableList(result);
    }
 
-   public <E extends AnnotationTarget<O, T>> E removeAnnotation(final E target, final BodyDeclaration body,
+   public <E extends AnnotationTarget<O, T>> E removeAnnotation(final E target, final ASTNode body,
             final Annotation<O> annotation)
    {
-      return removeAnnotation(target, body.modifiers(), annotation);
+      return removeAnnotation(target, getModifiers(body), annotation);
    }
 
    public <E extends AnnotationTarget<O, T>> E removeAnnotation(final E target,
@@ -145,10 +147,10 @@
       return target;
    }
 
-   public <E extends AnnotationTarget<O, T>> boolean hasAnnotation(final E target, final BodyDeclaration body,
+   public <E extends AnnotationTarget<O, T>> boolean hasAnnotation(final E target, final ASTNode body,
             final String type)
    {
-      return hasAnnotation(target, body.modifiers(), type);
+      return hasAnnotation(target, getModifiers(body), type);
    }
 
    public <E extends AnnotationTarget<O, T>> boolean hasAnnotation(final E target,
@@ -176,10 +178,10 @@
       return false;
    }
 
-   public Annotation<O> getAnnotation(final AnnotationTarget<O, T> target, final BodyDeclaration body,
+   public Annotation<O> getAnnotation(final AnnotationTarget<O, T> target, final ASTNode body,
             final Class<? extends java.lang.annotation.Annotation> type)
    {
-      return getAnnotation(target, body.modifiers(), type.getName());
+      return getAnnotation(target, getModifiers(body), type.getName());
    }
 
    public Annotation<O> getAnnotation(final AnnotationTarget<O, T> target,
@@ -189,9 +191,9 @@
       return getAnnotation(target, variableDeclaration.modifiers(), type.getName());
    }
 
-   public Annotation<O> getAnnotation(final AnnotationTarget<O, T> target, final BodyDeclaration body, final String type)
+   public Annotation<O> getAnnotation(final AnnotationTarget<O, T> target, final ASTNode body, final String type)
    {
-      return getAnnotation(target, body.modifiers(), type);
+      return getAnnotation(target, getModifiers(body), type);
    }
 
    public Annotation<O> getAnnotation(final AnnotationTarget<O, T> target,
@@ -212,4 +214,17 @@
       }
       return null;
    }
+
+   private List<?> getModifiers(final ASTNode body)
+   {
+      if (body instanceof BodyDeclaration)
+      {
+         return ((BodyDeclaration) body).modifiers();
+      }
+      else if (body instanceof PackageDeclaration)
+      {
+         return ((PackageDeclaration) body).annotations();
+      }
+      return Collections.emptyList();
+   }
 }
"
4a5e4ee0e5073eb79d58794fcebd0be42bf6c858,Yann Albou,ModifierAccessor.java,MODIFY,"hasModifier -> [BodyDeclaration body, ModifierKeyword modifier] | [ASTNode body, ModifierKeyword modifier]","diff --git a/impl/src/main/java/org/jboss/forge/parser/java/ast/ModifierAccessor.java b/impl/src/main/java/org/jboss/forge/parser/java/ast/ModifierAccessor.java
index 8e4f791..9089e1f 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/ast/ModifierAccessor.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/ast/ModifierAccessor.java
@@ -7,15 +7,17 @@
 package org.jboss.forge.parser.java.ast;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
+import org.eclipse.jdt.core.dom.ASTNode;
 import org.eclipse.jdt.core.dom.BodyDeclaration;
 import org.eclipse.jdt.core.dom.Modifier;
 import org.eclipse.jdt.core.dom.Modifier.ModifierKeyword;
 
 public class ModifierAccessor
 {
-   public boolean hasModifier(BodyDeclaration body, final ModifierKeyword modifier)
+   public boolean hasModifier(ASTNode body, final ModifierKeyword modifier)
    {
       boolean result = false;
       List<Modifier> modifiers = getModifiers(body);
@@ -29,10 +31,10 @@
       return result;
    }
 
-   private List<Modifier> getModifiers(BodyDeclaration body)
+   private List<Modifier> getModifiers(ASTNode body)
    {
       List<Modifier> result = new ArrayList<Modifier>();
-      List<?> modifiers = body.modifiers();
+      List<?> modifiers = getInternalModifiers(body);
       for (Object m : modifiers)
       {
          if (m instanceof Modifier)
@@ -44,8 +46,7 @@
       return result;
    }
 
-   @SuppressWarnings(""unchecked"")
-   public List<Modifier> clearVisibility(BodyDeclaration body)
+   public List<Modifier> clearVisibility(ASTNode body)
    {
       List<Modifier> modifiers = getModifiers(body);
 
@@ -58,18 +59,16 @@
          }
       }
 
-      body.modifiers().removeAll(toBeRemoved);
+      getInternalModifiers(body).removeAll(toBeRemoved);
       return modifiers;
    }
 
-   @SuppressWarnings(""unchecked"")
-   public void addModifier(BodyDeclaration body, ModifierKeyword keyword)
+   public void addModifier(ASTNode body, ModifierKeyword keyword)
    {
-      body.modifiers().add(body.getAST().newModifier(keyword));
+      getInternalModifiers(body).add(body.getAST().newModifier(keyword));
    }
 
-   @SuppressWarnings(""unchecked"")
-   public void removeModifier(BodyDeclaration body, ModifierKeyword keyword)
+   public void removeModifier(ASTNode body, ModifierKeyword keyword)
    {
       List<Modifier> modifiers = getModifiers(body);
 
@@ -82,6 +81,19 @@
          }
       }
 
-      body.modifiers().removeAll(toBeRemoved);
+      getInternalModifiers(body).removeAll(toBeRemoved);
+   }
+
+   @SuppressWarnings(""unchecked"")
+   private List<Modifier> getInternalModifiers(final ASTNode body)
+   {
+      if (body instanceof BodyDeclaration)
+      {
+         return ((BodyDeclaration) body).modifiers();
+      }
+      else
+      {
+         return Collections.emptyList();
+      }
    }
 }
"
4a5e4ee0e5073eb79d58794fcebd0be42bf6c858,Yann Albou,TypeDeclarationFinderVisitor.java,MODIFY,visit -> [EnumDeclaration node] | [TypeDeclaration node],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/ast/TypeDeclarationFinderVisitor.java b/impl/src/main/java/org/jboss/forge/parser/java/ast/TypeDeclarationFinderVisitor.java
index c61329a..819590c 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/ast/TypeDeclarationFinderVisitor.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/ast/TypeDeclarationFinderVisitor.java
@@ -13,6 +13,7 @@
 import org.eclipse.jdt.core.dom.AbstractTypeDeclaration;
 import org.eclipse.jdt.core.dom.AnnotationTypeDeclaration;
 import org.eclipse.jdt.core.dom.EnumDeclaration;
+import org.eclipse.jdt.core.dom.PackageDeclaration;
 import org.eclipse.jdt.core.dom.TypeDeclaration;
 
 /**
@@ -22,6 +23,8 @@
 {
    private List<AbstractTypeDeclaration> declarations = new ArrayList<AbstractTypeDeclaration>();
 
+   private PackageDeclaration packageDeclaration;
+
    @Override
    public boolean visit(final TypeDeclaration node)
    {
@@ -43,6 +46,18 @@
       return super.visit(node);
    }
 
+   @Override
+   public boolean visit(PackageDeclaration node)
+   {
+      packageDeclaration = node;
+      return super.visit(node);
+   }
+
+   public PackageDeclaration getPackageDeclaration()
+   {
+      return packageDeclaration;
+   }
+
    public List<AbstractTypeDeclaration> getTypeDeclarations()
    {
       return declarations;
"
4a5e4ee0e5073eb79d58794fcebd0be42bf6c858,Yann Albou,JavaParserImpl.java,MODIFY,"parse -> [Class type, File file] | [File file]","diff --git a/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java b/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
index fac70db..d180cdb 100644
--- a/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
@@ -18,12 +18,13 @@
 
 import org.eclipse.jdt.core.JavaCore;
 import org.eclipse.jdt.core.dom.AST;
+import org.eclipse.jdt.core.dom.ASTNode;
 import org.eclipse.jdt.core.dom.ASTParser;
 import org.eclipse.jdt.core.dom.AbstractTypeDeclaration;
 import org.eclipse.jdt.core.dom.AnnotationTypeDeclaration;
-import org.eclipse.jdt.core.dom.BodyDeclaration;
 import org.eclipse.jdt.core.dom.CompilationUnit;
 import org.eclipse.jdt.core.dom.EnumDeclaration;
+import org.eclipse.jdt.core.dom.PackageDeclaration;
 import org.eclipse.jdt.core.dom.TypeDeclaration;
 import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
 import org.eclipse.jdt.internal.compiler.util.Util;
@@ -39,6 +40,7 @@
 import org.jboss.forge.parser.java.impl.JavaClassImpl;
 import org.jboss.forge.parser.java.impl.JavaEnumImpl;
 import org.jboss.forge.parser.java.impl.JavaInterfaceImpl;
+import org.jboss.forge.parser.java.impl.JavaPackageInfoImpl;
 
 /**
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
@@ -112,6 +114,11 @@
          AbstractTypeDeclaration declaration = declarations.get(0);
          return getJavaSource(null, document, unit, declaration);
       }
+      else if (visitor.getPackageDeclaration() != null)
+      {
+         return getJavaSource(null, document, unit, visitor.getPackageDeclaration());
+
+      }
       throw new ParserException(""Could not find type declaration in Java source - is this actually code?"");
    }
 
@@ -120,26 +127,34 @@
     * {@link TypeDeclaration}, and enclosing {@link JavaSource} type.
     */
    public static JavaSource<?> getJavaSource(JavaSource<?> enclosingType, Document document, CompilationUnit unit,
-            BodyDeclaration declaration)
+            ASTNode declaration)
    {
       if (declaration instanceof TypeDeclaration)
       {
-         if (((TypeDeclaration) declaration).isInterface())
+         TypeDeclaration typeDeclaration = (TypeDeclaration) declaration;
+         if (typeDeclaration.isInterface())
          {
-            return new JavaInterfaceImpl(enclosingType, document, unit, declaration);
+            return new JavaInterfaceImpl(enclosingType, document, unit, typeDeclaration);
          }
          else
          {
-            return new JavaClassImpl(enclosingType, document, unit, declaration);
+            return new JavaClassImpl(enclosingType, document, unit, typeDeclaration);
          }
       }
       else if (declaration instanceof EnumDeclaration)
       {
-         return new JavaEnumImpl(enclosingType, document, unit, declaration);
+         EnumDeclaration enumDeclaration = (EnumDeclaration) declaration;
+         return new JavaEnumImpl(enclosingType, document, unit, enumDeclaration);
       }
       else if (declaration instanceof AnnotationTypeDeclaration)
       {
-         return new JavaAnnotationImpl(enclosingType, document, unit, declaration);
+         AnnotationTypeDeclaration annotationTypeDeclaration = (AnnotationTypeDeclaration) declaration;
+         return new JavaAnnotationImpl(enclosingType, document, unit, annotationTypeDeclaration);
+      }
+      else if (declaration instanceof PackageDeclaration)
+      {
+         PackageDeclaration packageDeclaration = (PackageDeclaration) declaration;
+         return new JavaPackageInfoImpl(enclosingType, document, unit, packageDeclaration);
       }
       else
       {
"
5041225cb24be8fa2e925a90c1688aa222fdb43e,George Gastaldi,Refactory.java,MODIFY,"createHashCodeAndEquals -> [JavaClass clazz] | [JavaClass clazz, Field fields]","diff --git a/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java b/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java
index 28956b5..df0fcba 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java
@@ -44,23 +44,56 @@
       }
    }
 
-   public static void createHashCodeAndEquals(final JavaClass clazz)
+   public static void createHashCodeAndEquals(final JavaClass clazz, final Field<?>... fields)
    {
+      if(fields == null || fields.length < 1)
+      {
+         throw new IllegalArgumentException(""fields cannot be null or empty."");
+      }
+      
+      StringBuilder fieldEqualityChecks = new StringBuilder();
+      StringBuilder hashCodeComputation = new StringBuilder();
+      for (Field<?> field : fields)
+      {
+         String fieldName = field.getName();
+
+         if (field.isPrimitive())
+         {
+            fieldEqualityChecks.append(""if ("").append(fieldName).append("" != that."").append(fieldName).append("") { "");
+            fieldEqualityChecks.append("" return false;"");
+            fieldEqualityChecks.append(""} "");
+            
+            hashCodeComputation.append(""result = prime * result + "").append(fieldName).append("";"");
+         }
+         else
+         {
+            fieldEqualityChecks.append(""if ("").append(fieldName).append("" != null) { "");
+            fieldEqualityChecks.append("" return "").append(fieldName).append("".equals((("");
+            fieldEqualityChecks.append(clazz.getName());
+            fieldEqualityChecks.append("") that)."").append(fieldName);
+            fieldEqualityChecks.append(""); } "");
+
+            hashCodeComputation.append(""result = prime * result + (("").append(fieldName).append("" == null) ? 0 : "")
+                     .append(fieldName).append("".hashCode());"");
+         }
+      }
+      
       clazz.addMethod(
                ""public boolean equals(Object that) { "" +
                         ""if (this == that) { return true; } "" +
                         ""if (that == null) { return false; } "" +
                         ""if (getClass() != that.getClass()) { return false; } "" +
-                        ""if (id != null) { return id.equals(((""
-                        + clazz.getName() + "") that).id); } "" +
-                        ""return super.equals(that); "" +
+                        fieldEqualityChecks.toString() +
+                        ""return true; "" +
                         ""}"")
                .addAnnotation(Override.class);
 
       clazz.addMethod(
                ""public int hashCode() { "" +
-                        ""if (id != null) { return id.hashCode(); } "" +
-                        ""return super.hashCode(); }"")
+                        ""final int prime = 31;"" +
+                        ""int result = 1;"" +
+                        hashCodeComputation.toString() +
+                        ""return result; }"")
                .addAnnotation(Override.class);
    }
 
"
560f2607cd26ae6482900f65295f35e145d87dfb,George Gastaldi,Refactory.java,MODIFY,"createHashCodeAndEquals -> [JavaClass clazz, Field fields] | [JavaClass clazz]","diff --git a/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java b/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java
index df0fcba..fd2e569 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java
@@ -15,9 +15,9 @@
 import org.jboss.forge.parser.java.Method;
 
 /**
- *
+ * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
- *
+ * 
  */
 public class Refactory
 {
@@ -44,13 +44,30 @@
       }
    }
 
+   public static void createHashCodeAndEquals(final JavaClass clazz)
+   {
+      final Field<?>[] fields;
+      Field<JavaClass> idField = clazz.getField(""id"");
+      // FORGE-995: Retained this for backwards compatibility
+      if (idField != null)
+      {
+         fields = new Field[] { idField };
+      }
+      else
+      {
+         List<Field<JavaClass>> classFields = clazz.getFields();
+         fields = classFields.toArray(new Field[classFields.size()]);
+      }
+      createHashCodeAndEquals(clazz, fields);
+   }
+
    public static void createHashCodeAndEquals(final JavaClass clazz, final Field<?>... fields)
    {
-      if(fields == null || fields.length < 1)
+      if (fields == null || fields.length < 1)
       {
          throw new IllegalArgumentException(""fields cannot be null or empty."");
       }
-      
+
       StringBuilder fieldEqualityChecks = new StringBuilder();
       StringBuilder hashCodeComputation = new StringBuilder();
       for (Field<?> field : fields)
@@ -62,7 +79,7 @@
             fieldEqualityChecks.append(""if ("").append(fieldName).append("" != that."").append(fieldName).append("") { "");
             fieldEqualityChecks.append("" return false;"");
             fieldEqualityChecks.append(""} "");
-            
+
             hashCodeComputation.append(""result = prime * result + "").append(fieldName).append("";"");
          }
          else
@@ -77,7 +94,7 @@
                      .append(fieldName).append("".hashCode());"");
          }
       }
-      
+
       clazz.addMethod(
                ""public boolean equals(Object that) { "" +
                         ""if (this == that) { return true; } "" +
"
26a32eab55ec60278441588b7dc8d63b1766c6aa,George Gastaldi,Refactory.java,MODIFY,"createHashCodeAndEquals -> [JavaClass clazz, Field fields] | [JavaClass clazz]","diff --git a/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java b/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java
index fd2e569..eb5c2ee 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java
@@ -15,12 +15,20 @@
 import org.jboss.forge.parser.java.Method;
 
 /**
+ * Utility refactory methods for {@link JavaClass} objects
  * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
- * 
+ * @author <a href=""mailto:ggastald@redhat.com"">George Gastaldi</a>
+ * @author <a href=""mailto:vreynolds@redhat.com"">Vineet Reynolds</a>
  */
 public class Refactory
 {
+   /**
+    * Generates a getXXX and setXXX method for the supplied field
+    * 
+    * @param clazz
+    * @param field
+    */
    public static void createGetterAndSetter(final JavaClass clazz, final Field<JavaClass> field)
    {
       if (!clazz.hasField(field))
@@ -44,6 +52,13 @@
       }
    }
 
+   /**
+    * Create a <i>hashCode</i> and <i>equals</i> implementation for the given class and fields
+    * 
+    * @deprecated Use {@link Refactory#createHashCodeAndEquals(JavaClass, Field...)} instead, since this method relies
+    *             on the existence of the id field
+    */
+   @Deprecated
    public static void createHashCodeAndEquals(final JavaClass clazz)
    {
       final Field<?>[] fields;
@@ -61,6 +76,12 @@
       createHashCodeAndEquals(clazz, fields);
    }
 
+   /**
+    * Create a <i>hashCode</i> and <i>equals</i> implementation for the given class and fields
+    * 
+    * @param clazz class to be changed
+    * @param fields fields to be used in the equals/hashCode methods
+    */
    public static void createHashCodeAndEquals(final JavaClass clazz, final Field<?>... fields)
    {
       if (fields == null || fields.length < 1)
@@ -114,17 +135,34 @@
                .addAnnotation(Override.class);
    }
 
+   /**
+    * Create a <i>toString</i> implementation using all the fields in this class
+    * 
+    * @param clazz
+    */
    public static void createToStringFromFields(final JavaClass clazz)
    {
       List<Field<JavaClass>> fields = clazz.getFields();
       createToStringFromFields(clazz, fields);
    }
 
+   /**
+    * Create a <i>toString</i> implementation using the supplied fields
+    * 
+    * @param clazz
+    * @param fields
+    */
    public static void createToStringFromFields(final JavaClass clazz, final Field<JavaClass>... fields)
    {
       createToStringFromFields(clazz, Arrays.asList(fields));
    }
 
+   /**
+    * Create a <i>toString</i> implementation using the supplied fields
+    * 
+    * @param clazz
+    * @param fields
+    */
    public static void createToStringFromFields(final JavaClass clazz, final List<Field<JavaClass>> fields)
    {
       Method<JavaClass> method = clazz.addMethod().setName(""toString"").setReturnType(String.class)
"
5cfd3961e475aa17c3b3251f765c283406d9fdd4,George Gastaldi,JavaParser.java,MODIFY,"parse -> [Class type, String data] | [File file]","diff --git a/api/src/main/java/org/jboss/forge/parser/JavaParser.java b/api/src/main/java/org/jboss/forge/parser/JavaParser.java
index 884af48..eaf7737 100644
--- a/api/src/main/java/org/jboss/forge/parser/JavaParser.java
+++ b/api/src/main/java/org/jboss/forge/parser/JavaParser.java
@@ -9,7 +9,9 @@
 
 import java.io.File;
 import java.io.FileNotFoundException;
+import java.io.IOException;
 import java.io.InputStream;
+import java.net.URL;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.ServiceLoader;
@@ -55,6 +57,14 @@
    }
 
    /**
+    * Parse the given {@link URL} data into a new {@link JavaSource} instance.
+    */
+   public static JavaSource<?> parse(final URL data) throws IOException
+   {
+      return getParser().parse(data);
+   }
+
+   /**
     * Read the given {@link InputStream} and parse the data into a new {@link JavaClass} instance.
     */
    public static JavaSource<?> parse(final InputStream data)
@@ -87,6 +97,16 @@
    }
 
    /**
+    * Read the given {@link URL} and parse its data into a new {@link JavaSource} instance of the given type.
+    * 
+    * @throws FileNotFoundException
+    */
+   public static <T extends JavaSource<?>> T parse(final Class<T> type, final URL url) throws IOException
+   {
+      return getParser().parse(type, url);
+   }
+
+   /**
     * Read the given {@link File} and parse its data into a new {@link JavaSource} instance of the given type.
     * 
     * @throws FileNotFoundException
"
5cfd3961e475aa17c3b3251f765c283406d9fdd4,George Gastaldi,JavaParserProvider.java,MODIFY,"parse -> [Class type, String data] | [File file]","diff --git a/api/src/main/java/org/jboss/forge/parser/spi/JavaParserProvider.java b/api/src/main/java/org/jboss/forge/parser/spi/JavaParserProvider.java
index 3aebb5b..f53febe 100644
--- a/api/src/main/java/org/jboss/forge/parser/spi/JavaParserProvider.java
+++ b/api/src/main/java/org/jboss/forge/parser/spi/JavaParserProvider.java
@@ -8,7 +8,9 @@
 
 import java.io.File;
 import java.io.FileNotFoundException;
+import java.io.IOException;
 import java.io.InputStream;
+import java.net.URL;
 
 import org.jboss.forge.parser.java.JavaClass;
 import org.jboss.forge.parser.java.JavaSource;
@@ -27,6 +29,13 @@
    public JavaSource<?> parse(final File file) throws FileNotFoundException;
 
    /**
+    * Open the given {@link URL}, parsing its contents into a new {@link JavaSource} instance.
+    * 
+    * @throws FileNotFoundException
+    */
+   public JavaSource<?> parse(final URL url) throws IOException;
+
+   /**
     * Read the given {@link InputStream} and parse the data into a new {@link JavaSource} instance.
     */
    public JavaSource<?> parse(final InputStream data);
@@ -54,6 +63,13 @@
    public <T extends JavaSource<?>> T parse(final Class<T> type, final File file) throws FileNotFoundException;
 
    /**
+    * Read the given {@link URL} and parse its data into a new {@link JavaSource} instance of the given type.
+    * 
+    * @throws FileNotFoundException
+    */
+   public <T extends JavaSource<?>> T parse(final Class<T> type, final URL url) throws IOException;
+
+   /**
     * Read the given {@link InputStream} and parse its data into a new {@link JavaSource} instance of the given type.
     */
    public <T extends JavaSource<?>> T parse(final Class<T> type, final InputStream data);
@@ -67,4 +83,4 @@
     * Read the given string and parse its data into a new {@link JavaSource} instance of the given type.
     */
    public <T extends JavaSource<?>> T parse(final Class<T> type, final String data);
-}
+}
\ No newline at end of file
"
5cfd3961e475aa17c3b3251f765c283406d9fdd4,George Gastaldi,AbstractJavaSourceMemberHolder.java,MODIFY,addField -> [Field field] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java
index 8e42a81..46daa6f 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java
@@ -29,7 +29,7 @@
 
 /**
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
- *
+ * 
  */
 public abstract class AbstractJavaSourceMemberHolder<O extends JavaSource<O>> extends AbstractJavaSource<O> implements
          MethodHolder<O>, FieldHolder<O>
@@ -202,21 +202,23 @@
          if (local.getName().equals(name))
          {
             List<Parameter<O>> localParams = local.getParameters();
-            if (((paramTypes != null) && (localParams.size() == 0))
-                     || (localParams.size() == paramTypes.length))
+            if (paramTypes != null)
             {
-               boolean matches = true;
-               for (int i = 0; i < localParams.size(); i++)
+               if (localParams.isEmpty() || (localParams.size() == paramTypes.length))
                {
-                  Parameter<O> localParam = localParams.get(i);
-                  String type = paramTypes[i];
-                  if (!Types.areEquivalent(localParam.getType(), type))
+                  boolean matches = true;
+                  for (int i = 0; i < localParams.size(); i++)
                   {
-                     matches = false;
+                     Parameter<O> localParam = localParams.get(i);
+                     String type = paramTypes[i];
+                     if (!Types.areEquivalent(localParam.getType(), type))
+                     {
+                        matches = false;
+                     }
                   }
+                  if (matches)
+                     return local;
                }
-               if (matches)
-                  return local;
             }
          }
       }
"
5cfd3961e475aa17c3b3251f765c283406d9fdd4,George Gastaldi,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
index c59ee52..448ad58 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
@@ -44,11 +44,13 @@
       this.pkg = pkg;
    }
 
+   @Override
    public SourceType getSourceType()
    {
       return SourceType.PACKAGEINFO;
    }
 
+   @Override
    public String getName()
    {
       return ""package-info"";
@@ -65,6 +67,7 @@
    public static ServiceLoader<WildcardImportResolver> loader = ServiceLoader.load(WildcardImportResolver.class);
    private static List<WildcardImportResolver> resolvers;
 
+   @Override
    public JavaSource<?> getEnclosingType()
    {
       return enclosingType;
@@ -73,46 +76,55 @@
    /*
     * Annotation modifiers
     */
+   @Override
    public Annotation<JavaPackageInfo> addAnnotation()
    {
       return annotations.addAnnotation(this, getPackageDeclaration());
    }
 
+   @Override
    public Annotation<JavaPackageInfo> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
    {
       return annotations.addAnnotation(this, getPackageDeclaration(), clazz.getName());
    }
 
+   @Override
    public Annotation<JavaPackageInfo> addAnnotation(final String className)
    {
       return annotations.addAnnotation(this, getPackageDeclaration(), className);
    }
 
+   @Override
    public List<Annotation<JavaPackageInfo>> getAnnotations()
    {
       return annotations.getAnnotations(this, getPackageDeclaration());
    }
 
+   @Override
    public boolean hasAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
    {
       return annotations.hasAnnotation(this, getPackageDeclaration(), type.getName());
    }
 
+   @Override
    public boolean hasAnnotation(final String type)
    {
       return annotations.hasAnnotation(this, getPackageDeclaration(), type);
    }
 
+   @Override
    public JavaPackageInfo removeAnnotation(final Annotation<JavaPackageInfo> annotation)
    {
-      return (JavaPackageInfo) annotations.removeAnnotation(this, getPackageDeclaration(), annotation);
+      return annotations.removeAnnotation(this, getPackageDeclaration(), annotation);
    }
 
+   @Override
    public Annotation<JavaPackageInfo> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
    {
       return annotations.getAnnotation(this, getPackageDeclaration(), type);
    }
 
+   @Override
    public Annotation<JavaPackageInfo> getAnnotation(final String type)
    {
       return annotations.getAnnotation(this, getPackageDeclaration(), type);
@@ -122,22 +134,26 @@
     * Import modifiers
     */
 
+   @Override
    public Import addImport(final Class<?> type)
    {
       return addImport(type.getCanonicalName());
    }
 
+   @Override
    public <T extends JavaSource<?>> Import addImport(final T type)
    {
       String qualifiedName = type.getQualifiedName();
       return this.addImport(qualifiedName);
    }
 
+   @Override
    public Import addImport(final Import imprt)
    {
       return addImport(imprt.getQualifiedName()).setStatic(imprt.isStatic());
    }
 
+   @Override
    @SuppressWarnings(""unchecked"")
    public Import addImport(final String className)
    {
@@ -164,6 +180,7 @@
       return imprt;
    }
 
+   @Override
    public Import getImport(final String className)
    {
       List<Import> imports = getImports();
@@ -177,21 +194,25 @@
       return null;
    }
 
+   @Override
    public Import getImport(final Class<?> type)
    {
       return getImport(type.getName());
    }
 
+   @Override
    public <T extends JavaSource<?>> Import getImport(final T type)
    {
       return getImport(type.getQualifiedName());
    }
 
+   @Override
    public Import getImport(final Import imprt)
    {
       return getImport(imprt.getQualifiedName());
    }
 
+   @Override
    @SuppressWarnings(""unchecked"")
    public List<Import> getImports()
    {
@@ -205,21 +226,25 @@
       return Collections.unmodifiableList(results);
    }
 
+   @Override
    public boolean hasImport(final Class<?> type)
    {
       return hasImport(type.getName());
    }
 
+   @Override
    public <T extends JavaSource<T>> boolean hasImport(final T type)
    {
       return hasImport(type.getQualifiedName());
    }
 
+   @Override
    public boolean hasImport(final Import imprt)
    {
       return hasImport(imprt.getQualifiedName());
    }
 
+   @Override
    public boolean hasImport(final String type)
    {
       String resultType = type;
@@ -234,11 +259,13 @@
       return getImport(resultType) != null;
    }
 
+   @Override
    public boolean requiresImport(final Class<?> type)
    {
       return requiresImport(type.getName());
    }
 
+   @Override
    public boolean requiresImport(final String type)
    {
       String resultType = type;
@@ -259,6 +286,7 @@
       return true;
    }
 
+   @Override
    public String resolveType(final String type)
    {
       String original = type;
@@ -355,6 +383,7 @@
       return !Strings.isNullOrEmpty(type) && !Types.isPrimitive(type);
    }
 
+   @Override
    public JavaPackageInfo removeImport(final String name)
    {
       for (Import i : getImports())
@@ -368,16 +397,19 @@
       return this;
    }
 
+   @Override
    public JavaPackageInfo removeImport(final Class<?> clazz)
    {
       return removeImport(clazz.getName());
    }
 
+   @Override
    public <T extends JavaSource<?>> JavaPackageInfo removeImport(final T type)
    {
       return removeImport(type.getQualifiedName());
    }
 
+   @Override
    public JavaPackageInfo removeImport(final Import imprt)
    {
       Object internal = imprt.getInternal();
@@ -388,6 +420,7 @@
       return this;
    }
 
+   @Override
    public List<Member<JavaPackageInfo, ?>> getMembers()
    {
       List<Member<JavaPackageInfo, ?>> result = new ArrayList<Member<JavaPackageInfo, ?>>();
@@ -402,12 +435,14 @@
       throw new ParserException(""Source body was not of the expected type (PackageDeclaration)."");
    }
 
+   @Override
    public JavaPackageInfo setName(final String name)
    {
       getPackageDeclaration().setName(unit.getAST().newSimpleName(name));
-      return (JavaPackageInfo) this;
+      return this;
    }
 
+   @Override
    public String getCanonicalName()
    {
       String result = getName();
@@ -426,6 +461,7 @@
       return result;
    }
 
+   @Override
    public String getQualifiedName()
    {
       String result = getName();
@@ -447,6 +483,7 @@
    /*
     * Package modifiers
     */
+   @Override
    public String getPackage()
    {
       PackageDeclaration pkg = unit.getPackage();
@@ -460,6 +497,7 @@
       }
    }
 
+   @Override
    public JavaPackageInfo setPackage(final String name)
    {
       if (unit.getPackage() == null)
@@ -470,12 +508,14 @@
       return this;
    }
 
+   @Override
    public JavaPackageInfo setDefaultPackage()
    {
       unit.setPackage(null);
       return this;
    }
 
+   @Override
    public boolean isDefaultPackage()
    {
       return unit.getPackage() == null;
@@ -484,22 +524,26 @@
    /*
     * Visibility modifiers
     */
+   @Override
    public boolean isPackagePrivate()
    {
       return (!isPublic() && !isPrivate() && !isProtected());
    }
 
+   @Override
    public JavaPackageInfo setPackagePrivate()
    {
       modifiers.clearVisibility(getPackageDeclaration());
       return this;
    }
 
+   @Override
    public boolean isPublic()
    {
       return modifiers.hasModifier(getPackageDeclaration(), ModifierKeyword.PUBLIC_KEYWORD);
    }
 
+   @Override
    public JavaPackageInfo setPublic()
    {
       modifiers.clearVisibility(getPackageDeclaration());
@@ -507,11 +551,13 @@
       return this;
    }
 
+   @Override
    public boolean isPrivate()
    {
       return modifiers.hasModifier(getPackageDeclaration(), ModifierKeyword.PRIVATE_KEYWORD);
    }
 
+   @Override
    public JavaPackageInfo setPrivate()
    {
       modifiers.clearVisibility(getPackageDeclaration());
@@ -519,11 +565,13 @@
       return this;
    }
 
+   @Override
    public boolean isProtected()
    {
       return modifiers.hasModifier(getPackageDeclaration(), ModifierKeyword.PROTECTED_KEYWORD);
    }
 
+   @Override
    public JavaPackageInfo setProtected()
    {
       modifiers.clearVisibility(getPackageDeclaration());
@@ -531,11 +579,13 @@
       return this;
    }
 
+   @Override
    public Visibility getVisibility()
    {
       return Visibility.getFrom(this);
    }
 
+   @Override
    public JavaPackageInfo setVisibility(final Visibility scope)
    {
       return Visibility.set(this, scope);
@@ -565,11 +615,13 @@
       return Formatter.format(document.get());
    }
 
+   @Override
    public Object getInternal()
    {
       return unit;
    }
 
+   @Override
    public JavaPackageInfo getOrigin()
    {
       return this;
@@ -628,6 +680,7 @@
       return true;
    }
 
+   @Override
    public List<SyntaxError> getSyntaxErrors()
    {
       List<SyntaxError> result = new ArrayList<SyntaxError>();
@@ -643,31 +696,37 @@
       return result;
    }
 
+   @Override
    public boolean hasSyntaxErrors()
    {
       return !getSyntaxErrors().isEmpty();
    }
 
+   @Override
    public boolean isClass()
    {
       return false;
    }
 
+   @Override
    public boolean isEnum()
    {
       return false;
    }
 
+   @Override
    public boolean isInterface()
    {
       return false;
    }
 
+   @Override
    public boolean isAnnotation()
    {
       return false;
    }
 
+   @Override
    public List<JavaSource<?>> getNestedClasses()
    {
       List<AbstractTypeDeclaration> declarations = getNestedDeclarations(pkg);
"
5cfd3961e475aa17c3b3251f765c283406d9fdd4,George Gastaldi,JavaParserImpl.java,MODIFY,"parse -> [Class type, File file] | [File file]","diff --git a/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java b/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
index d180cdb..128386a 100644
--- a/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
@@ -13,6 +13,7 @@
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
+import java.net.URL;
 import java.util.List;
 import java.util.Map;
 
@@ -64,6 +65,12 @@
    }
 
    @Override
+   public JavaSource<?> parse(URL url) throws IOException
+   {
+      return parse(url.openStream());
+   }
+
+   @Override
    public JavaSource<?> parse(final InputStream data)
    {
       try
@@ -233,4 +240,18 @@
       throw new ParserException(""Source does not represent a ["" + type.getSimpleName() + ""], instead was [""
                + source.getClass().getSimpleName() + ""] - Cannot convert."");
    }
+
+   @Override
+   @SuppressWarnings(""unchecked"")
+   public <T extends JavaSource<?>> T parse(final Class<T> type, final URL url) throws IOException
+   {
+      JavaSource<?> source = parse(url.openStream());
+      if (type.isAssignableFrom(source.getClass()))
+      {
+         return (T) source;
+      }
+      throw new ParserException(""Source does not represent a ["" + type.getSimpleName() + ""], instead was [""
+               + source.getClass().getSimpleName() + ""] - Cannot convert."");
+   }
+
 }
"
9b87cdb3a537faa49a65b84e2c2456df01d16bee,Vineet Reynolds,Field.java,MODIFY,isType -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/Field.java b/api/src/main/java/org/jboss/forge/parser/java/Field.java
index d50e0b8..d12048e 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/Field.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/Field.java
@@ -67,5 +67,22 @@
 
    Field<O> setStringInitializer(String value);
 
+   /**
+    * 
+    * @return True if the type of the field is a primitive type 
+    */
    boolean isPrimitive();
+   
+   /**
+    * 
+    * @return True if the field is transient
+    */
+   boolean isTransient();
+   
+   /**
+    * 
+    * @return True if the field is volatile
+    */
+   boolean isVolatile();
+   
 }
"
9b87cdb3a537faa49a65b84e2c2456df01d16bee,Vineet Reynolds,Refactory.java,MODIFY,"createHashCodeAndEquals -> [JavaClass clazz, Field fields] | [JavaClass clazz]","diff --git a/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java b/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java
index eb5c2ee..43a7be0 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java
@@ -77,50 +77,172 @@
    }
 
    /**
-    * Create a <i>hashCode</i> and <i>equals</i> implementation for the given class and fields
+    * Create a <i>hashCode</i> and <i>equals</i> implementation for the given class and fields. Callers must verify that
+    * the types of the fields override the default identity based equals and hashcode implementations. No warnings are
+    * issued in an event where the field type uses the implementation of java.lang.Object.
+    * 
+    * This method ignores static fields for generating the equals and hashCode methods, since they are ideally not meant
+    * to be used in these cases. Although transient fields could also be ignored, they are not since there is no
+    * mechanism to convey warnings (not errors) in this case.
     * 
     * @param clazz class to be changed
     * @param fields fields to be used in the equals/hashCode methods
     */
    public static void createHashCodeAndEquals(final JavaClass clazz, final Field<?>... fields)
    {
+      if (clazz == null)
+      {
+         throw new IllegalArgumentException(""The provided class cannot be null."");
+      }
       if (fields == null || fields.length < 1)
       {
-         throw new IllegalArgumentException(""fields cannot be null or empty."");
+         throw new IllegalArgumentException(""The provided fields cannot be null or empty."");
       }
 
+      String superEqualsCheck = """";
+      String defaultHashcode = ""int result = 1;"";
+      if (!clazz.getSuperType().equals(""java.lang.Object""))
+      {
+         superEqualsCheck = ""if (!super.equals(obj)) { return false;} "";
+         defaultHashcode = ""int result = super.hashCode();"";
+      }
+
+      boolean isTempFieldCreated = false;
       StringBuilder fieldEqualityChecks = new StringBuilder();
       StringBuilder hashCodeComputation = new StringBuilder();
       for (Field<?> field : fields)
       {
-         String fieldName = field.getName();
+         if(field == null)
+         {
+            throw new IllegalArgumentException(""A supplied field was null. The equals and hashCode computation will be aborted."");
+         }
+         if (field.isStatic())
+         {
+            throw new IllegalArgumentException(""A static field was detected. The equals and hashCode computation will be aborted."");
+         }
 
+         String fieldName = field.getName();
          if (field.isPrimitive())
          {
-            fieldEqualityChecks.append(""if ("").append(fieldName).append("" != that."").append(fieldName).append("") { "");
-            fieldEqualityChecks.append("" return false;"");
-            fieldEqualityChecks.append(""} "");
+            if (field.isType(""float""))
+            {
+               // if(Float.floatToIntBits(floatValue) != Float.floatToIntBits(other.floatValue)) {
+               //   return false;
+               // }
+               fieldEqualityChecks.append(""if (Float.floatToIntBits("").append(fieldName)
+                        .append("") != Float.floatToIntBits(other."").append(fieldName)
+                        .append("")) { "");
+               fieldEqualityChecks.append("" return false;"");
+               fieldEqualityChecks.append(""} "");
 
-            hashCodeComputation.append(""result = prime * result + "").append(fieldName).append("";"");
+               // result = prime * result + Float.floatToIntBits(floatValue);
+               hashCodeComputation.append(""result = prime * result + "").append(""Float.floatToIntBits("")
+                        .append(fieldName).append("");"");
+            }
+            else if (field.isType(""double""))
+            {
+               // if(Double.doubleToLongBits(doubleValue) != Double.doubleToLongBits(other.doubleValue)) {
+               //   return false;
+               // }
+               fieldEqualityChecks.append(""if (Double.doubleToLongBits("").append(fieldName)
+                        .append("") != Double.doubleToLongBits(other."").append(fieldName)
+                        .append("")) { "");
+               fieldEqualityChecks.append("" return false;"");
+               fieldEqualityChecks.append(""} "");
+
+               // long temp;
+               // temp = Double.doubleToLongBits(doubleValue);
+               // result = prime * result + (int) (temp ^ (temp >>> 32));
+               if (!isTempFieldCreated)
+               {
+                  hashCodeComputation.append(""long temp;"");
+                  isTempFieldCreated = true;
+               }
+               hashCodeComputation.append(""temp = Double.doubleToLongBits("").append(fieldName).append("");"");
+               hashCodeComputation.append(""result = prime * result + (int) (temp ^ (temp >>> 32));"");
+            }
+            else
+            {
+               // if(value != other.value) {
+               //   return false;
+               // }
+               fieldEqualityChecks.append(""if ("").append(fieldName).append("" != other."").append(fieldName)
+                        .append("") { "");
+               fieldEqualityChecks.append("" return false;"");
+               fieldEqualityChecks.append(""} "");
+
+               if (field.isType(""long""))
+               {
+                  // result = prime * result + (int) (longValue ^ (longValue >>> 32));
+                  hashCodeComputation.append(""result = prime * result + (int) ("").append(fieldName).append("" ^ ("")
+                           .append(fieldName).append("" >>> 32));"");
+               }
+               else if (field.isType(""boolean""))
+               {
+                  // result = prime * result + (booleanValue : 1231 : 1237);
+                  hashCodeComputation.append(""result = prime * result + ("").append(fieldName)
+                           .append("" ? 1231 : 1237);"");
+               }
+               else
+               {
+                  // For byte, char, short, int
+                  // result = prime * result + fieldValue;
+                  hashCodeComputation.append(""result = prime * result + "").append(fieldName).append("";"");
+               }
+            }
+         }
+         else if (field.getTypeInspector().isArray())
+         {
+            // if(!Arrays.equals(array, other.array)) {
+            //    return false;
+            // }
+            fieldEqualityChecks.append(""if (!Arrays.equals("").append(fieldName).append("", other."").append(fieldName)
+                     .append("")) {"");
+            fieldEqualityChecks.append("" return false; }"");
+
+            // result = prime * result + Arrays.hashCode(array);
+            hashCodeComputation.append(""result = prime * result + Arrays.hashCode("").append(fieldName).append("");"");
          }
          else
          {
+            // if(value != null) {
+            //    if(!value.equals(other.value)) {
+            //       return false;
+            //    }
+            // }
             fieldEqualityChecks.append(""if ("").append(fieldName).append("" != null) { "");
-            fieldEqualityChecks.append("" return "").append(fieldName).append("".equals((("");
-            fieldEqualityChecks.append(clazz.getName());
-            fieldEqualityChecks.append("") that)."").append(fieldName);
-            fieldEqualityChecks.append(""); } "");
+            fieldEqualityChecks.append("" if(!"").append(fieldName).append("".equals("");
+            fieldEqualityChecks.append(""other."").append(fieldName);
+            fieldEqualityChecks.append("")) { return false;} } "");
 
+            // result = prime * result + (( obj == null) ? 0 : obj.hashCode());
             hashCodeComputation.append(""result = prime * result + (("").append(fieldName).append("" == null) ? 0 : "")
                      .append(fieldName).append("".hashCode());"");
          }
       }
 
+      if (fieldEqualityChecks.length() < 1 || hashCodeComputation.length() < 1)
+      {
+         throw new IllegalArgumentException(
+                  ""A failure was detected when generating the equals and hashCode methods. Verify the type and modifiers of the provided fields."");
+      }
+
+      StringBuilder typeCheckAndAssignment = new StringBuilder();
+      String klassName = clazz.getName();
+
+      // if (!(obj instanceof Type)) {
+      //    return false;
+      // }
+      // Type other = (Type) obj;
+      typeCheckAndAssignment.append(""if (!(obj instanceof "").append(klassName).append("")) {"");
+      typeCheckAndAssignment.append("" return false;}"");
+      typeCheckAndAssignment.append(klassName).append("" other = ("").append(klassName).append("") obj;"");
+
       clazz.addMethod(
-               ""public boolean equals(Object that) { "" +
-                        ""if (this == that) { return true; } "" +
-                        ""if (that == null) { return false; } "" +
-                        ""if (getClass() != that.getClass()) { return false; } "" +
+               ""public boolean equals(Object obj) { "" +
+                        ""if (this == obj) { return true; } "" +
+                        superEqualsCheck.toString() +
+                        typeCheckAndAssignment.toString() +
                         fieldEqualityChecks.toString() +
                         ""return true; "" +
                         ""}"")
@@ -129,7 +251,7 @@
       clazz.addMethod(
                ""public int hashCode() { "" +
                         ""final int prime = 31;"" +
-                        ""int result = 1;"" +
+                        defaultHashcode +
                         hashCodeComputation.toString() +
                         ""return result; }"")
                .addAnnotation(Override.class);
"
9b87cdb3a537faa49a65b84e2c2456df01d16bee,Vineet Reynolds,Strings.java,MODIFY,"getLevenshteinDistance -> [CharSequence s, CharSequence t, int threshold] | [CharSequence s, CharSequence t]","diff --git a/api/src/main/java/org/jboss/forge/parser/java/util/Strings.java b/api/src/main/java/org/jboss/forge/parser/java/util/Strings.java
index f5c5c46..aa4c44e 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/util/Strings.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/util/Strings.java
@@ -411,4 +411,22 @@
          return -1;
       }
    }
+
+   public static int countNumberOfOccurences(String text, String toMatch)
+   {
+      int count = 0;
+      if(toMatch == null || toMatch.length() < 1)
+      {
+         return count;
+      }
+      
+      String wholeText = text;
+      int idx = 0;
+      while((idx = wholeText.indexOf(toMatch, idx)) != -1)
+      {
+         count++;
+         idx = idx + toMatch.length();
+      }
+      return count;
+   }
 }
"
9b87cdb3a537faa49a65b84e2c2456df01d16bee,Vineet Reynolds,FieldImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
index aeef05b..db5b1e7 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
@@ -539,4 +539,17 @@
       }
       return result;
    }
+   
+   @Override
+   public boolean isTransient()
+   {
+      return modifiers.hasModifier(field, ModifierKeyword.TRANSIENT_KEYWORD);
+   }
+
+   @Override
+   public boolean isVolatile()
+   {
+      return modifiers.hasModifier(field, ModifierKeyword.VOLATILE_KEYWORD);
+   }
+
 }
"
852c8888e81571825aa0c9e7deb5722ecde66368,Vineet Reynolds,Refactory.java,MODIFY,"createHashCodeAndEquals -> [JavaClass clazz, Field fields] | [JavaClass clazz]","diff --git a/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java b/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java
index 43a7be0..d39cb48 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java
@@ -61,19 +61,22 @@
    @Deprecated
    public static void createHashCodeAndEquals(final JavaClass clazz)
    {
-      final Field<?>[] fields;
-      Field<JavaClass> idField = clazz.getField(""id"");
-      // FORGE-995: Retained this for backwards compatibility
-      if (idField != null)
-      {
-         fields = new Field[] { idField };
-      }
-      else
-      {
-         List<Field<JavaClass>> classFields = clazz.getFields();
-         fields = classFields.toArray(new Field[classFields.size()]);
-      }
-      createHashCodeAndEquals(clazz, fields);
+      clazz.addMethod(
+               ""public boolean equals(Object that) { "" +
+                        ""if (this == that) { return true; } "" +
+                        ""if (that == null) { return false; } "" +
+                        ""if (getClass() != that.getClass()) { return false; } "" +
+                        ""if (id != null) { return id.equals(((""
+                        + clazz.getName() + "") that).id); } "" +
+                        ""return super.equals(that); "" +
+                        ""}"")
+               .addAnnotation(Override.class);
+
+      clazz.addMethod(
+               ""public int hashCode() { "" +
+                        ""if (id != null) { return id.hashCode(); } "" +
+                        ""return super.hashCode(); }"")
+               .addAnnotation(Override.class);
    }
 
    /**
"
d76afcda5cd441543f1a4c7cfaf97aa2cd847ef5,Vineet Reynolds,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
index d5c13e7..8942be0 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
@@ -317,7 +317,7 @@
       // Check for direct import matches first since they are the fastest and least work-intensive
       if (Types.isSimpleName(result))
       {
-         if (!hasImport(type) && Types.isJavaLang(type))
+         if (!hasImport(result) && Types.isJavaLang(result))
          {
             result = ""java.lang."" + result;
          }
"
d76afcda5cd441543f1a4c7cfaf97aa2cd847ef5,Vineet Reynolds,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java
index e1e670a..c8f38cd 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java
@@ -12,6 +12,7 @@
 
 import org.eclipse.jdt.core.dom.AST;
 import org.eclipse.jdt.core.dom.ASTNode;
+import org.eclipse.jdt.core.dom.ArrayType;
 import org.eclipse.jdt.core.dom.Block;
 import org.eclipse.jdt.core.dom.CompilationUnit;
 import org.eclipse.jdt.core.dom.MethodDeclaration;
@@ -235,6 +236,17 @@
       }
 
       result = parent.resolveType(result);
+      if (returnType != null && returnType.isArrayType())
+      {
+         // FIXME: This is a hack and needs fixing in the design of the Forge parser.
+         // The resolved type lacks information about arrays since arrays would be stripped from it
+         // We recreate it using the dimensions in the JDT Type to ensure that arrays are not lost in the return type.
+         int dimensions = ((ArrayType) returnType).getDimensions();
+         for (int ctr = 0; ctr < dimensions; ctr++)
+         {
+            result += ""[]"";
+         }
+      }
 
       return result;
    }
"
694f0b7fcc79ca4fce3d295e4aad727c703b116b,George Gastaldi,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
index d5c13e7..8942be0 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
@@ -317,7 +317,7 @@
       // Check for direct import matches first since they are the fastest and least work-intensive
       if (Types.isSimpleName(result))
       {
-         if (!hasImport(type) && Types.isJavaLang(type))
+         if (!hasImport(result) && Types.isJavaLang(result))
          {
             result = ""java.lang."" + result;
          }
"
694f0b7fcc79ca4fce3d295e4aad727c703b116b,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java
index e1e670a..c8f38cd 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java
@@ -12,6 +12,7 @@
 
 import org.eclipse.jdt.core.dom.AST;
 import org.eclipse.jdt.core.dom.ASTNode;
+import org.eclipse.jdt.core.dom.ArrayType;
 import org.eclipse.jdt.core.dom.Block;
 import org.eclipse.jdt.core.dom.CompilationUnit;
 import org.eclipse.jdt.core.dom.MethodDeclaration;
@@ -235,6 +236,17 @@
       }
 
       result = parent.resolveType(result);
+      if (returnType != null && returnType.isArrayType())
+      {
+         // FIXME: This is a hack and needs fixing in the design of the Forge parser.
+         // The resolved type lacks information about arrays since arrays would be stripped from it
+         // We recreate it using the dimensions in the JDT Type to ensure that arrays are not lost in the return type.
+         int dimensions = ((ArrayType) returnType).getDimensions();
+         for (int ctr = 0; ctr < dimensions; ctr++)
+         {
+            result += ""[]"";
+         }
+      }
 
       return result;
    }
"
5342dc1c833b452f037293a626bff6895d0e45f4,Matt Benson,JavaParserProvider.java,MODIFY,"parse -> [Class type, String data] | [InputStream data]","diff --git a/api/src/main/java/org/jboss/forge/parser/spi/JavaParserProvider.java b/api/src/main/java/org/jboss/forge/parser/spi/JavaParserProvider.java
index f53febe..ccdaba1 100644
--- a/api/src/main/java/org/jboss/forge/parser/spi/JavaParserProvider.java
+++ b/api/src/main/java/org/jboss/forge/parser/spi/JavaParserProvider.java
@@ -6,11 +6,7 @@
  */
 package org.jboss.forge.parser.spi;
 
-import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.IOException;
 import java.io.InputStream;
-import java.net.URL;
 
 import org.jboss.forge.parser.java.JavaClass;
 import org.jboss.forge.parser.java.JavaSource;
@@ -22,65 +18,20 @@
 public interface JavaParserProvider
 {
    /**
-    * Open the given {@link File}, parsing its contents into a new {@link JavaSource} instance.
+    * Create a new empty {@link JavaClass} instance.
     * 
-    * @throws FileNotFoundException
+    * @param type desired source type
+    * @return instance of {@code T}, {@code null} if the {@link JavaSource} type is not supported by this
+    *         {@link JavaParserProvider}.
     */
-   public JavaSource<?> parse(final File file) throws FileNotFoundException;
-
-   /**
-    * Open the given {@link URL}, parsing its contents into a new {@link JavaSource} instance.
-    * 
-    * @throws FileNotFoundException
-    */
-   public JavaSource<?> parse(final URL url) throws IOException;
-
+   public <T extends JavaSource<?>> T create(final Class<T> type);
+   
    /**
     * Read the given {@link InputStream} and parse the data into a new {@link JavaSource} instance.
+    * 
+    * @param data to parse
+    * @return {@link JavaSource}, {@code null} if the data format is not recognized by this {@link JavaParserProvider}.
     */
    public JavaSource<?> parse(final InputStream data);
 
-   /**
-    * Parse the given character array into a new {@link JavaSource} instance.
-    */
-   public JavaSource<?> parse(final char[] data);
-
-   /**
-    * Parse the given String data into a new {@link JavaSource} instance.
-    */
-   public JavaSource<?> parse(final String data);
-
-   /**
-    * Create a new empty {@link JavaClass} instance.
-    */
-   public <T extends JavaSource<?>> T create(final Class<T> type);
-
-   /**
-    * Read the given {@link File} and parse its data into a new {@link JavaSource} instance of the given type.
-    * 
-    * @throws FileNotFoundException
-    */
-   public <T extends JavaSource<?>> T parse(final Class<T> type, final File file) throws FileNotFoundException;
-
-   /**
-    * Read the given {@link URL} and parse its data into a new {@link JavaSource} instance of the given type.
-    * 
-    * @throws FileNotFoundException
-    */
-   public <T extends JavaSource<?>> T parse(final Class<T> type, final URL url) throws IOException;
-
-   /**
-    * Read the given {@link InputStream} and parse its data into a new {@link JavaSource} instance of the given type.
-    */
-   public <T extends JavaSource<?>> T parse(final Class<T> type, final InputStream data);
-
-   /**
-    * Read the given character array and parse its data into a new {@link JavaSource} instance of the given type.
-    */
-   public <T extends JavaSource<?>> T parse(final Class<T> type, final char[] data);
-
-   /**
-    * Read the given string and parse its data into a new {@link JavaSource} instance of the given type.
-    */
-   public <T extends JavaSource<?>> T parse(final Class<T> type, final String data);
 }
\ No newline at end of file
"
5342dc1c833b452f037293a626bff6895d0e45f4,Matt Benson,JavaParserImpl.java,MODIFY,"parse -> [Class type, URL url] | [InputStream data]","diff --git a/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java b/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
index 128386a..3642464 100644
--- a/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
@@ -7,13 +7,8 @@
 
 package org.jboss.forge.parser.spi;
 
-import java.io.BufferedInputStream;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
-import java.net.URL;
 import java.util.List;
 import java.util.Map;
 
@@ -50,24 +45,22 @@
 {
 
    @Override
-   public JavaSource<?> parse(final File file) throws FileNotFoundException
+   @SuppressWarnings(""unchecked"")
+   public <T extends JavaSource<?>> T create(final Class<T> type)
    {
-      FileInputStream stream = null;
-      try
-      {
-         stream = new FileInputStream(file);
-         return parse(new BufferedInputStream(stream));
-      }
-      finally
-      {
-         Streams.closeQuietly(stream);
-      }
-   }
+      if (JavaClass.class.isAssignableFrom(type))
+         return (T) parse(""public class JavaClass { }"");
 
-   @Override
-   public JavaSource<?> parse(URL url) throws IOException
-   {
-      return parse(url.openStream());
+      if (JavaEnum.class.isAssignableFrom(type))
+         return (T) parse(""public enum JavaEnum { }"");
+
+      if (JavaAnnotation.class.isAssignableFrom(type))
+         return (T) parse(""public @interface JavaAnnotation { }"");
+
+      if (JavaInterface.class.isAssignableFrom(type))
+         return (T) parse(""public interface JavaInterface { }"");
+
+      throw new ParserException(""Unknown JavaSource type ["" + type.getName() + ""]"");
    }
 
    @Override
@@ -76,11 +69,11 @@
       try
       {
          char[] source = Util.getInputStreamAsCharArray(data, data.available(), ""ISO8859_1"");
-         return parse(source);
+         return parse(new String(source));
       }
       catch (IOException e)
       {
-         throw new IllegalArgumentException(""InputStream must be a parsable java file: "", e);
+         return null;
       }
       finally
       {
@@ -88,15 +81,8 @@
       }
    }
 
-   @Override
-   public JavaSource<?> parse(final char[] data)
-   {
-      return parse(new String(data));
-   }
-
-   @Override
    @SuppressWarnings({ ""rawtypes"", ""unchecked"" })
-   public JavaSource<?> parse(final String data)
+   private JavaSource<?> parse(final String data)
    {
       Document document = new Document(data);
       ASTParser parser = ASTParser.newParser(AST.JLS4);
@@ -169,89 +155,4 @@
       }
    }
 
-   @Override
-   @SuppressWarnings(""unchecked"")
-   public <T extends JavaSource<?>> T create(final Class<T> type)
-   {
-      if (JavaClass.class.isAssignableFrom(type))
-         return (T) parse(""public class JavaClass { }"");
-
-      if (JavaEnum.class.isAssignableFrom(type))
-         return (T) parse(""public enum JavaEnum { }"");
-
-      if (JavaAnnotation.class.isAssignableFrom(type))
-         return (T) parse(""public @interface JavaAnnotation { }"");
-
-      if (JavaInterface.class.isAssignableFrom(type))
-         return (T) parse(""public interface JavaInterface { }"");
-
-      throw new ParserException(""Unknown JavaSource type ["" + type.getName() + ""]"");
-   }
-
-   @Override
-   @SuppressWarnings(""unchecked"")
-   public <T extends JavaSource<?>> T parse(final Class<T> type, final InputStream data)
-   {
-
-      JavaSource<?> source = parse(data);
-      if (type.isAssignableFrom(source.getClass()))
-      {
-         return (T) source;
-      }
-      throw new ParserException(""Source does not represent a ["" + type.getSimpleName() + ""], instead was [""
-               + source.getClass().getSimpleName() + ""] - Cannot convert."");
-   }
-
-   @Override
-   @SuppressWarnings(""unchecked"")
-   public <T extends JavaSource<?>> T parse(final Class<T> type, final char[] data)
-   {
-      JavaSource<?> source = parse(data);
-      if (type.isAssignableFrom(source.getClass()))
-      {
-         return (T) source;
-      }
-      throw new ParserException(""Source does not represent a ["" + type.getSimpleName() + ""], instead was [""
-               + source.getClass().getSimpleName() + ""] - Cannot convert."");
-   }
-
-   @Override
-   @SuppressWarnings(""unchecked"")
-   public <T extends JavaSource<?>> T parse(final Class<T> type, final String data)
-   {
-      JavaSource<?> source = parse(data);
-      if (type.isAssignableFrom(source.getClass()))
-      {
-         return (T) source;
-      }
-      throw new ParserException(""Source does not represent a ["" + type.getSimpleName() + ""], instead was [""
-               + source.getClass().getSimpleName() + ""] - Cannot convert."");
-   }
-
-   @Override
-   @SuppressWarnings(""unchecked"")
-   public <T extends JavaSource<?>> T parse(final Class<T> type, final File file) throws FileNotFoundException
-   {
-      JavaSource<?> source = parse(file);
-      if (type.isAssignableFrom(source.getClass()))
-      {
-         return (T) source;
-      }
-      throw new ParserException(""Source does not represent a ["" + type.getSimpleName() + ""], instead was [""
-               + source.getClass().getSimpleName() + ""] - Cannot convert."");
-   }
-
-   @Override
-   @SuppressWarnings(""unchecked"")
-   public <T extends JavaSource<?>> T parse(final Class<T> type, final URL url) throws IOException
-   {
-      JavaSource<?> source = parse(url.openStream());
-      if (type.isAssignableFrom(source.getClass()))
-      {
-         return (T) source;
-      }
-      throw new ParserException(""Source does not represent a ["" + type.getSimpleName() + ""], instead was [""
-               + source.getClass().getSimpleName() + ""] - Cannot convert."");
-   }
-
 }
"
7e4e892ebba1e83aaa65e63e6fd5c083f8ea9ce3,Matt Benson,JavaEnum.java,MODIFY,addEnumConstant -> [String declaration] | [],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/JavaEnum.java b/api/src/main/java/org/jboss/forge/parser/java/JavaEnum.java
index e0ea53b..7099141 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/JavaEnum.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/JavaEnum.java
@@ -23,22 +23,22 @@
    /**
     * Add a new {@link EnumConstant}
     */
-   EnumConstant<JavaEnum> addEnumConstant();
+   EnumConstant addEnumConstant();
    
    /**
     * Add a new {@link EnumConstant} using the given declaration.
     */
-   EnumConstant<JavaEnum> addEnumConstant(String declaration);
+   EnumConstant addEnumConstant(String declaration);
    
    /**
     * Return the {@link EnumConstant} with the given name, or return null if no such constant exists.
     * @param name
     * @return
     */
-   EnumConstant<JavaEnum> getEnumConstant(String name);
+   EnumConstant getEnumConstant(String name);
 
    /**
     * Return all declared {@link EnumConstant} types for this {@link JavaEnum}
     */
-   List<EnumConstant<JavaEnum>> getEnumConstants();
+   List<EnumConstant> getEnumConstants();
 }
\ No newline at end of file
"
7e4e892ebba1e83aaa65e63e6fd5c083f8ea9ce3,Matt Benson,EnumConstantImpl.java,MODIFY,init -> [O parent] | [JavaEnum parent],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java
index 8a78fe9..0f65b76 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java
@@ -14,38 +14,37 @@
 import org.jboss.forge.parser.JavaParser;
 import org.jboss.forge.parser.java.EnumConstant;
 import org.jboss.forge.parser.java.JavaEnum;
-import org.jboss.forge.parser.java.JavaSource;
 
-public class EnumConstantImpl<O extends JavaSource<O>> implements EnumConstant<O>
+public class EnumConstantImpl implements EnumConstant
 {
-   private O parent;
+   private JavaEnum parent;
    private AST ast;
    private EnumConstantDeclaration enumConstant;
 
-   private void init(final O parent)
+   private void init(final JavaEnum parent)
    {
       this.parent = parent;
       this.ast = ((ASTNode)parent.getInternal()).getAST();
    }
    
-   public EnumConstantImpl(final O parent) {
+   public EnumConstantImpl(final JavaEnum parent) {
       init(parent);
       this.enumConstant = ast.newEnumConstantDeclaration();
    }
    
-   public EnumConstantImpl(final O parent, final String declaration)
+   public EnumConstantImpl(final JavaEnum parent, final String declaration)
    {
       init(parent);
 
       String stub = ""public enum Stub { "" + declaration + "" }"";
       JavaEnum temp = (JavaEnum) JavaParser.parse(stub);
-      List<EnumConstant<JavaEnum>> constants = temp.getEnumConstants();
+      List<EnumConstant> constants = temp.getEnumConstants();
       EnumConstantDeclaration newField = (EnumConstantDeclaration) constants.get(0).getInternal();
       EnumConstantDeclaration subtree = (EnumConstantDeclaration) ASTNode.copySubtree(ast, newField);
       this.enumConstant = subtree;
    }
    
-   public EnumConstantImpl(final O parent, final Object internal)
+   public EnumConstantImpl(final JavaEnum parent, final Object internal)
    {
       init(parent);
       this.enumConstant = (EnumConstantDeclaration) internal;
@@ -58,7 +57,7 @@
    }
 
    @Override
-   public EnumConstant<O> setName(String name)
+   public EnumConstant setName(String name)
    {
       this.enumConstant.setName(ast.newSimpleName(name));
       return this;
@@ -71,7 +70,7 @@
    }
 
    @Override
-   public O getOrigin()
+   public JavaEnum getOrigin()
    {
       return parent;
    }
"
7e4e892ebba1e83aaa65e63e6fd5c083f8ea9ce3,Matt Benson,JavaEnumImpl.java,MODIFY,addEnumConstant -> [String declaration] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
index bab2421..b6f3f6c 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
@@ -34,14 +34,14 @@
    }
 
    @Override
-   public List<EnumConstant<JavaEnum>> getEnumConstants()
+   public List<EnumConstant> getEnumConstants()
    {
-      List<EnumConstant<JavaEnum>> result = new ArrayList<EnumConstant<JavaEnum>>();
+      List<EnumConstant> result = new ArrayList<EnumConstant>();
 
       for (Object o : (((EnumDeclaration) getBodyDeclaration()).enumConstants()))
       {
          EnumConstantDeclaration field = (EnumConstantDeclaration) o;
-         result.add(new EnumConstantImpl<JavaEnum>(this, field));
+         result.add(new EnumConstantImpl(this, field));
       }
 
       return Collections.unmodifiableList(result);
@@ -49,9 +49,9 @@
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public EnumConstant<JavaEnum> addEnumConstant()
+   public EnumConstant addEnumConstant()
    {
-      EnumConstantImpl<JavaEnum> enumConst = new EnumConstantImpl<JavaEnum>(this);
+      EnumConstantImpl enumConst = new EnumConstantImpl(this);
       getBodyDeclaration().bodyDeclarations().add(enumConst.getInternal());
 
       return enumConst;
@@ -59,9 +59,9 @@
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public EnumConstant<JavaEnum> addEnumConstant(final String declaration)
+   public EnumConstant addEnumConstant(final String declaration)
    {
-      EnumConstantImpl<JavaEnum> enumConst = new EnumConstantImpl<JavaEnum>(this, declaration);
+      EnumConstantImpl enumConst = new EnumConstantImpl(this, declaration);
 
       EnumDeclaration enumDeclaration = (EnumDeclaration) getBodyDeclaration();
       List<EnumConstantDeclaration> constants = enumDeclaration.enumConstants();
@@ -71,9 +71,9 @@
    }
 
    @Override
-   public EnumConstant<JavaEnum> getEnumConstant(String name)
+   public EnumConstant getEnumConstant(String name)
    {
-      for (EnumConstant<JavaEnum> enumConst : getEnumConstants())
+      for (EnumConstant enumConst : getEnumConstants())
       {
          if (enumConst.getName().equals(name))
          {
"
7198d5c9cb40eec23b222057f2acc037e0acb053,Matt Benson,JavaEnumImpl.java,MODIFY,addEnumConstant -> [String declaration] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
index b6f3f6c..98eb14a 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
@@ -40,8 +40,8 @@
 
       for (Object o : (((EnumDeclaration) getBodyDeclaration()).enumConstants()))
       {
-         EnumConstantDeclaration field = (EnumConstantDeclaration) o;
-         result.add(new EnumConstantImpl(this, field));
+         EnumConstantDeclaration constant = (EnumConstantDeclaration) o;
+         result.add(new EnumConstantImpl(this, constant));
       }
 
       return Collections.unmodifiableList(result);
@@ -52,7 +52,9 @@
    public EnumConstant addEnumConstant()
    {
       EnumConstantImpl enumConst = new EnumConstantImpl(this);
-      getBodyDeclaration().bodyDeclarations().add(enumConst.getInternal());
+      EnumDeclaration enumDeclaration = (EnumDeclaration) getBodyDeclaration();
+      List<EnumConstantDeclaration> constants = enumDeclaration.enumConstants();
+      constants.add((EnumConstantDeclaration) enumConst.getInternal());
 
       return enumConst;
    }
"
7ec717c5b6bebf7b586446c79e7455175752bfa9,Matt Benson,JavaEnumImpl.java,MODIFY,addEnumConstant -> [String declaration] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
index bab2421..273246e 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
@@ -40,8 +40,8 @@
 
       for (Object o : (((EnumDeclaration) getBodyDeclaration()).enumConstants()))
       {
-         EnumConstantDeclaration field = (EnumConstantDeclaration) o;
-         result.add(new EnumConstantImpl<JavaEnum>(this, field));
+         EnumConstantDeclaration constant = (EnumConstantDeclaration) o;
+         result.add(new EnumConstantImpl<JavaEnum>(this, constant));
       }
 
       return Collections.unmodifiableList(result);
@@ -52,7 +52,10 @@
    public EnumConstant<JavaEnum> addEnumConstant()
    {
       EnumConstantImpl<JavaEnum> enumConst = new EnumConstantImpl<JavaEnum>(this);
-      getBodyDeclaration().bodyDeclarations().add(enumConst.getInternal());
+      EnumConstantImpl enumConst = new EnumConstantImpl(this);
+      EnumDeclaration enumDeclaration = (EnumDeclaration) getBodyDeclaration();
+      List<EnumConstantDeclaration> constants = enumDeclaration.enumConstants();
+      constants.add((EnumConstantDeclaration) enumConst.getInternal());
 
       return enumConst;
    }
"
4e581a5171e5329c79da116541f7e82599a74d39,Matt Benson,JavaEnumImpl.java,MODIFY,addEnumConstant -> [String declaration] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
index 273246e..94745b1 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
@@ -52,7 +52,6 @@
    public EnumConstant<JavaEnum> addEnumConstant()
    {
       EnumConstantImpl<JavaEnum> enumConst = new EnumConstantImpl<JavaEnum>(this);
-      EnumConstantImpl enumConst = new EnumConstantImpl(this);
       EnumDeclaration enumDeclaration = (EnumDeclaration) getBodyDeclaration();
       List<EnumConstantDeclaration> constants = enumDeclaration.enumConstants();
       constants.add((EnumConstantDeclaration) enumConst.getInternal());
"
a54fdb035695ed5a5512eee7b70257a97a778616,Matt Benson,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
index 8942be0..aa953d1 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
@@ -878,6 +878,12 @@
       return result;
    }
 
+   @Override
+   public boolean isEditable()
+   {
+      return true;
+   }
+
    private List<AbstractTypeDeclaration> getNestedDeclarations(BodyDeclaration body)
    {
 
"
a54fdb035695ed5a5512eee7b70257a97a778616,Matt Benson,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
index 448ad58..85471d9 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
@@ -739,6 +739,12 @@
       return result;
    }
 
+   @Override
+   public boolean isEditable()
+   {
+      return true;
+   }
+
    private List<AbstractTypeDeclaration> getNestedDeclarations(ASTNode body)
    {
 
"
3bdd62960ac976d1bcb66df9b28dab2096307512,Matt Benson,AnnotationElement.java,MODIFY,isType -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/AnnotationElement.java b/api/src/main/java/org/jboss/forge/parser/java/AnnotationElement.java
index 59a8e1b..82c8422 100755
--- a/api/src/main/java/org/jboss/forge/parser/java/AnnotationElement.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/AnnotationElement.java
@@ -15,6 +15,9 @@
  */
 public interface AnnotationElement extends AnnotationTarget<JavaAnnotation, AnnotationElement>, Origin<JavaAnnotation>
 {
+   /**
+    * Represents the default value of a given annotation element and provides mechanisms to set that value.
+    */
    public interface DefaultValue
    {
       String getString();
"
13c7ddedae9ddec62a57722774a6416b9f6356cb,Vineet Reynolds,FieldImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
index db5b1e7..0fbe100 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
@@ -11,6 +11,7 @@
 
 import org.eclipse.jdt.core.dom.AST;
 import org.eclipse.jdt.core.dom.ASTNode;
+import org.eclipse.jdt.core.dom.ArrayType;
 import org.eclipse.jdt.core.dom.Expression;
 import org.eclipse.jdt.core.dom.FieldDeclaration;
 import org.eclipse.jdt.core.dom.Modifier.ModifierKeyword;
@@ -298,8 +299,19 @@
    @Override
    public String getQualifiedType()
    {
-      Object type = field.getStructuralProperty(FieldDeclaration.TYPE_PROPERTY);
-      return parent.resolveType(type.toString());
+      Type fieldType = field.getType();
+      String result = parent.resolveType(fieldType.toString());
+      if (fieldType != null && fieldType.isArrayType())
+      {
+         // The resolved type lacks information about arrays since arrays would be stripped from it
+         // We recreate it using the dimensions in the JDT Type to ensure that arrays are not lost in the return type.
+         int dimensions = ((ArrayType) fieldType).getDimensions();
+         for (int ctr = 0; ctr < dimensions; ctr++)
+         {
+            result += ""[]"";
+         }
+      }
+      return result;
    }
 
    @Override
"
e31de8d6d7b79dde4438dba775b9345106ff828c,George Gastaldi,FieldImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
index db5b1e7..0fbe100 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
@@ -11,6 +11,7 @@
 
 import org.eclipse.jdt.core.dom.AST;
 import org.eclipse.jdt.core.dom.ASTNode;
+import org.eclipse.jdt.core.dom.ArrayType;
 import org.eclipse.jdt.core.dom.Expression;
 import org.eclipse.jdt.core.dom.FieldDeclaration;
 import org.eclipse.jdt.core.dom.Modifier.ModifierKeyword;
@@ -298,8 +299,19 @@
    @Override
    public String getQualifiedType()
    {
-      Object type = field.getStructuralProperty(FieldDeclaration.TYPE_PROPERTY);
-      return parent.resolveType(type.toString());
+      Type fieldType = field.getType();
+      String result = parent.resolveType(fieldType.toString());
+      if (fieldType != null && fieldType.isArrayType())
+      {
+         // The resolved type lacks information about arrays since arrays would be stripped from it
+         // We recreate it using the dimensions in the JDT Type to ensure that arrays are not lost in the return type.
+         int dimensions = ((ArrayType) fieldType).getDimensions();
+         for (int ctr = 0; ctr < dimensions; ctr++)
+         {
+            result += ""[]"";
+         }
+      }
+      return result;
    }
 
    @Override
"
816c028cd5fb0c7411d33beff92a86f2bd7814f1,Matt Benson,EnumConstantImpl.java,MODIFY,init -> [JavaEnum parent] | [O parent],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java
index 8a78fe9..8ebf475 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java
@@ -12,12 +12,15 @@
 import org.eclipse.jdt.core.dom.ASTNode;
 import org.eclipse.jdt.core.dom.EnumConstantDeclaration;
 import org.jboss.forge.parser.JavaParser;
+import org.jboss.forge.parser.java.Annotation;
 import org.jboss.forge.parser.java.EnumConstant;
 import org.jboss.forge.parser.java.JavaEnum;
 import org.jboss.forge.parser.java.JavaSource;
+import org.jboss.forge.parser.java.ast.AnnotationAccessor;
 
 public class EnumConstantImpl<O extends JavaSource<O>> implements EnumConstant<O>
 {
+   private final AnnotationAccessor<O, EnumConstant<O>> annotations = new AnnotationAccessor<O, EnumConstant<O>>();
    private O parent;
    private AST ast;
    private EnumConstantDeclaration enumConstant;
@@ -75,4 +78,72 @@
    {
       return parent;
    }
+
+   /*
+    * Annotation<O> Modifiers
+    */
+
+   @Override
+   public Annotation<O> addAnnotation()
+   {
+      return annotations.addAnnotation(this, enumConstant);
+   }
+
+   @Override
+   public Annotation<O> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
+   {
+      if (!parent.hasImport(clazz))
+      {
+         parent.addImport(clazz);
+      }
+      return annotations.addAnnotation(this, enumConstant, clazz.getSimpleName());
+   }
+
+   @Override
+   public Annotation<O> addAnnotation(final String className)
+   {
+      return annotations.addAnnotation(this, enumConstant, className);
+   }
+
+   @Override
+   public List<Annotation<O>> getAnnotations()
+   {
+      return annotations.getAnnotations(this, enumConstant);
+   }
+
+   @Override
+   public boolean hasAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
+   {
+      return annotations.hasAnnotation(this, enumConstant, type.getName());
+   }
+
+   @Override
+   public boolean hasAnnotation(final String type)
+   {
+      return annotations.hasAnnotation(this, enumConstant, type);
+   }
+
+   @Override
+   public EnumConstant<O> removeAnnotation(final Annotation<O> annotation)
+   {
+      return annotations.removeAnnotation(this, enumConstant, annotation);
+   }
+
+   @Override
+   public Annotation<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
+   {
+      return annotations.getAnnotation(this, enumConstant, type);
+   }
+
+   @Override
+   public Annotation<O> getAnnotation(final String type)
+   {
+      return annotations.getAnnotation(this, enumConstant, type);
+   }
+
+   @Override
+   public String toString()
+   {
+      return enumConstant.toString();
+   }
 }
"
31d9cb3a09bcef680adc4d997689ed140c7daefc,Matt Benson,EnumConstantImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java
index 8ebf475..91d96eb 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java
@@ -141,6 +141,32 @@
       return annotations.getAnnotation(this, enumConstant, type);
    }
 
+   public boolean equals(Object obj)
+   {
+      if (obj == this)
+      {
+         return true;
+      }
+      if (obj == null)
+      {
+         return false;
+      }
+      if (!obj.getClass().equals(getClass()))
+      {
+         return false;
+      }
+      final EnumConstantImpl<?> other = (EnumConstantImpl<?>) obj;
+      return other.enumConstant == enumConstant || other.enumConstant != null
+               && other.enumConstant.equals(enumConstant);
+   }
+
+   @Override
+   public int hashCode()
+   {
+      int result = 57 << 4;
+      return result | (enumConstant == null ? 0 : enumConstant.hashCode());
+   }
+
    @Override
    public String toString()
    {
"
6e6209e70084f2b04c21be3b370605ea98db2c2a,Matt Benson,MethodFinderVisitor.java,MODIFY,visit -> [AnnotationTypeDeclaration node] | [TypeDeclaration node],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/ast/MethodFinderVisitor.java b/impl/src/main/java/org/jboss/forge/parser/java/ast/MethodFinderVisitor.java
index 63cd6ea..6b77e29 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/ast/MethodFinderVisitor.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/ast/MethodFinderVisitor.java
@@ -14,6 +14,7 @@
 import org.eclipse.jdt.core.dom.ASTVisitor;
 import org.eclipse.jdt.core.dom.AbstractTypeDeclaration;
 import org.eclipse.jdt.core.dom.AnnotationTypeDeclaration;
+import org.eclipse.jdt.core.dom.AnonymousClassDeclaration;
 import org.eclipse.jdt.core.dom.BodyDeclaration;
 import org.eclipse.jdt.core.dom.EnumDeclaration;
 import org.eclipse.jdt.core.dom.MethodDeclaration;
@@ -51,6 +52,16 @@
       return super.visit(node);
    }
 
+   @Override
+   public boolean visit(AnonymousClassDeclaration node)
+   {
+      parent = node;
+      @SuppressWarnings(""unchecked"")
+      final List<BodyDeclaration> bodyDeclarations = node.bodyDeclarations();
+      addMethods(bodyDeclarations);
+      return super.visit(node);
+   }
+
    public List<MethodDeclaration> getMethods()
    {
       return Collections.unmodifiableList(methods);
@@ -65,6 +76,11 @@
    {
       @SuppressWarnings(""unchecked"")
       final List<BodyDeclaration> bodyDeclarations = node.bodyDeclarations();
+      addMethods(bodyDeclarations);
+   }
+
+   private void addMethods(final List<BodyDeclaration> bodyDeclarations)
+   {
       for (BodyDeclaration bodyDeclaration : bodyDeclarations)
       {
          if (bodyDeclaration instanceof MethodDeclaration) {
"
2eee41accaeb1781dc3d9649c57f40a421a87176,Matt Benson,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
index 448ad58..cb29f0d 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
@@ -423,9 +423,7 @@
    @Override
    public List<Member<JavaPackageInfo, ?>> getMembers()
    {
-      List<Member<JavaPackageInfo, ?>> result = new ArrayList<Member<JavaPackageInfo, ?>>();
-
-      return result;
+      return Collections.emptyList();
    }
 
    protected PackageDeclaration getPackageDeclaration()
"
31b11ca79635c401e56f4808f5dfd65bb8e3c25b,Matt Benson,Field.java,MODIFY,isType -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/Field.java b/api/src/main/java/org/jboss/forge/parser/java/Field.java
index d12048e..fe6a48c 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/Field.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/Field.java
@@ -13,8 +13,6 @@
  */
 public interface Field<O extends JavaSource<O>> extends Member<O, Field<O>>
 {
-   Field<O> setName(String name);
-
    /**
     * Get this field's type.
     */
"
31b11ca79635c401e56f4808f5dfd65bb8e3c25b,Matt Benson,Method.java,MODIFY,setReturnType -> [JavaSource type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/Method.java b/api/src/main/java/org/jboss/forge/parser/java/Method.java
index 3e13705..00fd0c7 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/Method.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/Method.java
@@ -41,11 +41,6 @@
    public boolean isConstructor();
 
    /**
-    * Set the name of this {@link Method}
-    */
-   public Method<O> setName(final String name);
-
-   /**
     * Get the return type of this {@link Method} or return null if the return type is void.
     */
    public String getReturnType();
"
187d9cdacfcca97575d57442d354983dcf34d97d,Matt Benson,AnnotationElement.java,MODIFY,isType -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/AnnotationElement.java b/api/src/main/java/org/jboss/forge/parser/java/AnnotationElement.java
index 82c8422..27a7d48 100755
--- a/api/src/main/java/org/jboss/forge/parser/java/AnnotationElement.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/AnnotationElement.java
@@ -13,7 +13,7 @@
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * @author Matt Benson
  */
-public interface AnnotationElement extends AnnotationTarget<JavaAnnotation, AnnotationElement>, Origin<JavaAnnotation>
+public interface AnnotationElement extends AnnotationTarget<JavaAnnotation, AnnotationElement>, Origin<JavaAnnotation>, Named<AnnotationElement>
 {
    /**
     * Represents the default value of a given annotation element and provides mechanisms to set that value.
@@ -50,10 +50,6 @@
 
    }
 
-   String getName();
-
-   AnnotationElement setName(String name);
-
    /**
     * Get this annotation element's type.
     */
"
33ef7c63f10782c148dc75475c917a925ae73baa,Vineet Reynolds,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
index 8942be0..decde2e 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
@@ -9,8 +9,10 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
+import java.util.Map;
 import java.util.ServiceLoader;
 
+import org.eclipse.jdt.core.JavaCore;
 import org.eclipse.jdt.core.compiler.IProblem;
 import org.eclipse.jdt.core.dom.ASTNode;
 import org.eclipse.jdt.core.dom.AbstractTypeDeclaration;
@@ -23,6 +25,7 @@
 import org.eclipse.jdt.core.dom.PackageDeclaration;
 import org.eclipse.jdt.core.dom.Type;
 import org.eclipse.jdt.core.dom.TypeDeclaration;
+import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
 import org.eclipse.jface.text.Document;
 import org.eclipse.text.edits.TextEdit;
 import org.jboss.forge.parser.JavaParser;
@@ -622,7 +625,11 @@
 
       try
       {
-         TextEdit edit = unit.rewrite(document, null);
+         @SuppressWarnings(""rawtypes"")
+         Map options = JavaCore.getOptions();
+         options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_7);
+         options.put(CompilerOptions.OPTION_Encoding, ""UTF-8"");
+         TextEdit edit = unit.rewrite(document, options);
          edit.apply(document);
       }
       catch (Exception e)
"
5fff96e8b8ca9c58c12d42ca3b1ac571da75236e,George Gastaldi,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
index 8942be0..decde2e 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
@@ -9,8 +9,10 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
+import java.util.Map;
 import java.util.ServiceLoader;
 
+import org.eclipse.jdt.core.JavaCore;
 import org.eclipse.jdt.core.compiler.IProblem;
 import org.eclipse.jdt.core.dom.ASTNode;
 import org.eclipse.jdt.core.dom.AbstractTypeDeclaration;
@@ -23,6 +25,7 @@
 import org.eclipse.jdt.core.dom.PackageDeclaration;
 import org.eclipse.jdt.core.dom.Type;
 import org.eclipse.jdt.core.dom.TypeDeclaration;
+import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
 import org.eclipse.jface.text.Document;
 import org.eclipse.text.edits.TextEdit;
 import org.jboss.forge.parser.JavaParser;
@@ -622,7 +625,11 @@
 
       try
       {
-         TextEdit edit = unit.rewrite(document, null);
+         @SuppressWarnings(""rawtypes"")
+         Map options = JavaCore.getOptions();
+         options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_7);
+         options.put(CompilerOptions.OPTION_Encoding, ""UTF-8"");
+         TextEdit edit = unit.rewrite(document, options);
          edit.apply(document);
       }
       catch (Exception e)
"
04396e9c97579ea987afb7bf984877a3f53476a4,Vineet Reynolds,FieldImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
index 0fbe100..be29c46 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
@@ -301,12 +301,29 @@
    {
       Type fieldType = field.getType();
       String result = parent.resolveType(fieldType.toString());
-      if (fieldType != null && fieldType.isArrayType())
+      int extraDimensions = 0;
+      for (Object f : field.fragments())
       {
-         // The resolved type lacks information about arrays since arrays would be stripped from it
-         // We recreate it using the dimensions in the JDT Type to ensure that arrays are not lost in the return type.
-         int dimensions = ((ArrayType) fieldType).getDimensions();
-         for (int ctr = 0; ctr < dimensions; ctr++)
+         if (f instanceof VariableDeclarationFragment)
+         {
+            VariableDeclarationFragment frag = (VariableDeclarationFragment) f;
+            extraDimensions = frag.getExtraDimensions();
+            break;
+         }
+      }
+      if (fieldType != null)
+      {
+         if (fieldType.isArrayType())
+         {
+            // The resolved type lacks information about arrays since arrays would be stripped from it
+            // We recreate it using the dimensions in the JDT Type to ensure that arrays are not lost in the return value.
+            int dimensions = ((ArrayType) fieldType).getDimensions();
+            for (int ctr = 0; ctr < dimensions; ctr++)
+            {
+               result += ""[]"";
+            }
+         }
+         for(int dimensionsToAdd = 0; dimensionsToAdd < extraDimensions; dimensionsToAdd++)
          {
             result += ""[]"";
          }
"
414d29f066636c17fbedc595d53d627cec89b747,George Gastaldi,AbstractJavaSourceMemberHolder.java,MODIFY,addField -> [Field field] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java
index 46daa6f..ea4b1f4 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java
@@ -15,9 +15,12 @@
 import org.eclipse.jdt.core.dom.CompilationUnit;
 import org.eclipse.jdt.core.dom.FieldDeclaration;
 import org.eclipse.jdt.core.dom.MethodDeclaration;
+import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
 import org.eclipse.jface.text.Document;
+import org.jboss.forge.parser.JavaParser;
 import org.jboss.forge.parser.java.Field;
 import org.jboss.forge.parser.java.FieldHolder;
+import org.jboss.forge.parser.java.JavaClass;
 import org.jboss.forge.parser.java.JavaSource;
 import org.jboss.forge.parser.java.Member;
 import org.jboss.forge.parser.java.Method;
@@ -56,9 +59,21 @@
    @SuppressWarnings(""unchecked"")
    public Field<O> addField(final String declaration)
    {
-      Field<O> field = new FieldImpl<O>((O) this, declaration);
-      addField(field);
-      return field;
+      String stub = ""public class Stub { "" + declaration + "" }"";
+      JavaClass temp = (JavaClass) JavaParser.parse(stub);
+      List<Field<JavaClass>> fields = temp.getFields();
+      Field<O> result = null;
+      for (Field<JavaClass> stubField : fields)
+      {
+         Object variableDeclaration = stubField.getInternal();
+         Field<O> field = new FieldImpl<O>((O) this, variableDeclaration, true);
+         addField(field);
+         if (result == null)
+         {
+            result = field;
+         }
+      }
+      return result;
    }
 
    @SuppressWarnings(""unchecked"")
@@ -74,7 +89,7 @@
          }
          idx++;
       }
-      bodyDeclarations.add(idx, field.getInternal());
+      bodyDeclarations.add(idx, ((VariableDeclarationFragment) field.getInternal()).getParent());
    }
 
    @Override
@@ -99,7 +114,12 @@
       {
          if (bodyDeclaration instanceof FieldDeclaration)
          {
-            result.add(new FieldImpl<O>((O) this, bodyDeclaration));
+            FieldDeclaration fieldDeclaration = (FieldDeclaration) bodyDeclaration;
+            List<VariableDeclarationFragment> fragments = fieldDeclaration.fragments();
+            for (VariableDeclarationFragment fragment : fragments)
+            {
+               result.add(new FieldImpl<O>((O) this, fragment));
+            }
          }
       }
 
@@ -142,7 +162,32 @@
    @SuppressWarnings(""unchecked"")
    public O removeField(final Field<O> field)
    {
-      getBodyDeclaration().bodyDeclarations().remove(field.getInternal());
+      VariableDeclarationFragment fragment = (VariableDeclarationFragment) field.getInternal();
+      Iterator<Object> declarationsIterator = getBodyDeclaration().bodyDeclarations().iterator();
+      while (declarationsIterator.hasNext())
+      {
+         Object next = declarationsIterator.next();
+         if (next instanceof FieldDeclaration)
+         {
+            FieldDeclaration declaration = (FieldDeclaration) next;
+            if (declaration.equals(fragment.getParent()))
+            {
+               List<VariableDeclarationFragment> fragments = declaration.fragments();
+               if (fragments.contains(fragment))
+               {
+                  if (fragments.size() == 1)
+                  {
+                     declarationsIterator.remove();
+                  }
+                  else
+                  {
+                     fragments.remove(fragment);
+                  }
+                  break;
+               }
+            }
+         }
+      }
       return (O) this;
    }
 
"
414d29f066636c17fbedc595d53d627cec89b747,George Gastaldi,EnumConstantBodyImpl.java,MODIFY,addImport -> [JavaSource type] | [String className],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java
index 64eadaf..3510738 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java
@@ -20,12 +20,15 @@
 import org.eclipse.jdt.core.dom.EnumConstantDeclaration;
 import org.eclipse.jdt.core.dom.FieldDeclaration;
 import org.eclipse.jdt.core.dom.MethodDeclaration;
+import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
 import org.eclipse.jface.text.Document;
 import org.jboss.forge.parser.JavaParser;
 import org.jboss.forge.parser.java.Annotation;
 import org.jboss.forge.parser.java.EnumConstant;
+import org.jboss.forge.parser.java.EnumConstant.Body;
 import org.jboss.forge.parser.java.Field;
 import org.jboss.forge.parser.java.Import;
+import org.jboss.forge.parser.java.JavaClass;
 import org.jboss.forge.parser.java.JavaEnum;
 import org.jboss.forge.parser.java.JavaSource;
 import org.jboss.forge.parser.java.Member;
@@ -34,7 +37,6 @@
 import org.jboss.forge.parser.java.SourceType;
 import org.jboss.forge.parser.java.SyntaxError;
 import org.jboss.forge.parser.java.Visibility;
-import org.jboss.forge.parser.java.EnumConstant.Body;
 import org.jboss.forge.parser.java.ast.MethodFinderVisitor;
 import org.jboss.forge.parser.java.ast.TypeDeclarationFinderVisitor;
 import org.jboss.forge.parser.java.util.Strings;
@@ -480,9 +482,21 @@
    @Override
    public Field<Body> addField(final String declaration)
    {
-      Field<Body> field = new FieldImpl<Body>(this, declaration);
-      addField(field);
-      return field;
+      String stub = ""public class Stub { "" + declaration + "" }"";
+      JavaClass temp = (JavaClass) JavaParser.parse(stub);
+      List<Field<JavaClass>> fields = temp.getFields();
+      Field<Body> result = null;
+      for (Field<JavaClass> stubField : fields)
+      {
+         Object variableDeclaration = stubField.getInternal();
+         Field<Body> field = new FieldImpl<Body>(this, variableDeclaration, true);
+         addField(field);
+         if (result == null)
+         {
+            result = field;
+         }
+      }
+      return result;
    }
 
    @SuppressWarnings(""unchecked"")
@@ -498,7 +512,7 @@
          }
          idx++;
       }
-      bodyDeclarations.add(idx, (BodyDeclaration) field.getInternal());
+      bodyDeclarations.add(idx, (BodyDeclaration) ((VariableDeclarationFragment) field.getInternal()).getParent());
    }
 
    @Override
@@ -512,10 +526,14 @@
       {
          if (bodyDeclaration instanceof FieldDeclaration)
          {
-            result.add(new FieldImpl<Body>(this, bodyDeclaration));
+            FieldDeclaration fieldDeclaration = (FieldDeclaration) bodyDeclaration;
+            List<VariableDeclarationFragment> fragments = fieldDeclaration.fragments();
+            for (VariableDeclarationFragment fragment : fragments)
+            {
+               result.add(new FieldImpl<Body>(this, fragment));
+            }
          }
       }
-
       return Collections.unmodifiableList(result);
    }
 
@@ -551,10 +569,36 @@
       return getFields().contains(field);
    }
 
+   @SuppressWarnings(""unchecked"")
    @Override
    public Body removeField(final Field<Body> field)
    {
-      getBody().bodyDeclarations().remove(field.getInternal());
+      VariableDeclarationFragment fragment = (VariableDeclarationFragment) field.getInternal();
+      Iterator<Object> declarationsIterator = getBody().bodyDeclarations().iterator();
+      while (declarationsIterator.hasNext())
+      {
+         Object next = declarationsIterator.next();
+         if (next instanceof FieldDeclaration)
+         {
+            FieldDeclaration declaration = (FieldDeclaration) next;
+            if (declaration.equals(fragment.getParent()))
+            {
+               List<VariableDeclarationFragment> fragments = declaration.fragments();
+               if (fragments.contains(fragment))
+               {
+                  if (fragments.size() == 1)
+                  {
+                     declarationsIterator.remove();
+                  }
+                  else
+                  {
+                     fragments.remove(fragment);
+                  }
+                  break;
+               }
+            }
+         }
+      }
       return this;
    }
 
"
414d29f066636c17fbedc595d53d627cec89b747,George Gastaldi,FieldImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
index be29c46..d65b95f 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
@@ -7,6 +7,7 @@
 
 package org.jboss.forge.parser.java.impl;
 
+import java.util.Iterator;
 import java.util.List;
 
 import org.eclipse.jdt.core.dom.AST;
@@ -42,6 +43,7 @@
    private O parent;
    private AST ast;
    private final FieldDeclaration field;
+   private final VariableDeclarationFragment fragment;
 
    private void init(final O parent)
    {
@@ -52,25 +54,46 @@
    public FieldImpl(final O parent)
    {
       init(parent);
-      this.field = ast.newFieldDeclaration(ast.newVariableDeclarationFragment());
-   }
-
-   public FieldImpl(final O parent, final String declaration)
-   {
-      init(parent);
-
-      String stub = ""public class Stub { "" + declaration + "" }"";
-      JavaClass temp = (JavaClass) JavaParser.parse(stub);
-      List<Field<JavaClass>> fields = temp.getFields();
-      FieldDeclaration newField = (FieldDeclaration) fields.get(0).getInternal();
-      FieldDeclaration subtree = (FieldDeclaration) ASTNode.copySubtree(ast, newField);
-      this.field = subtree;
+      this.fragment = ast.newVariableDeclarationFragment();
+      this.field = ast.newFieldDeclaration(this.fragment);
    }
 
    public FieldImpl(final O parent, final Object internal)
    {
+      this(parent, internal, false);
+   }
+
+   @SuppressWarnings(""unchecked"")
+   public FieldImpl(final O parent, final Object internal, boolean copy)
+   {
       init(parent);
-      this.field = (FieldDeclaration) internal;
+      if (copy)
+      {
+         VariableDeclarationFragment newFieldFragment = (VariableDeclarationFragment) internal;
+         FieldDeclaration newFieldDeclaration = (FieldDeclaration) newFieldFragment.getParent();
+         this.field = (FieldDeclaration) ASTNode.copySubtree(ast, newFieldDeclaration);
+         Iterator<VariableDeclarationFragment> fragmentsIterator = this.field.fragments().iterator();
+         VariableDeclarationFragment temp = null;
+         while (fragmentsIterator.hasNext())
+         {
+            VariableDeclarationFragment variableDeclarationFragment = fragmentsIterator.next();
+            if (newFieldFragment.getName().getFullyQualifiedName()
+                     .equals(variableDeclarationFragment.getName().getFullyQualifiedName()))
+            {
+               temp = variableDeclarationFragment;
+            }
+            else
+            {
+               fragmentsIterator.remove();
+            }
+         }
+         this.fragment = temp;
+      }
+      else
+      {
+         this.fragment = (VariableDeclarationFragment) internal;
+         this.field = (FieldDeclaration) this.fragment.getParent();
+      }
    }
 
    @Override
@@ -82,7 +105,7 @@
    @Override
    public Object getInternal()
    {
-      return field;
+      return fragment;
    }
 
    /*
@@ -278,15 +301,7 @@
    @Override
    public Field<O> setName(final String name)
    {
-      for (Object f : field.fragments())
-      {
-         if (f instanceof VariableDeclarationFragment)
-         {
-            VariableDeclarationFragment frag = (VariableDeclarationFragment) f;
-            frag.setName(ast.newSimpleName(name));
-            break;
-         }
-      }
+      fragment.setName(ast.newSimpleName(name));
       return this;
    }
 
@@ -301,29 +316,21 @@
    {
       Type fieldType = field.getType();
       String result = parent.resolveType(fieldType.toString());
-      int extraDimensions = 0;
-      for (Object f : field.fragments())
-      {
-         if (f instanceof VariableDeclarationFragment)
-         {
-            VariableDeclarationFragment frag = (VariableDeclarationFragment) f;
-            extraDimensions = frag.getExtraDimensions();
-            break;
-         }
-      }
+      int extraDimensions = fragment.getExtraDimensions();
       if (fieldType != null)
       {
          if (fieldType.isArrayType())
          {
             // The resolved type lacks information about arrays since arrays would be stripped from it
-            // We recreate it using the dimensions in the JDT Type to ensure that arrays are not lost in the return value.
+            // We recreate it using the dimensions in the JDT Type to ensure that arrays are not lost in the return
+            // value.
             int dimensions = ((ArrayType) fieldType).getDimensions();
             for (int ctr = 0; ctr < dimensions; ctr++)
             {
                result += ""[]"";
             }
          }
-         for(int dimensionsToAdd = 0; dimensionsToAdd < extraDimensions; dimensionsToAdd++)
+         for (int dimensionsToAdd = 0; dimensionsToAdd < extraDimensions; dimensionsToAdd++)
          {
             result += ""[]"";
          }
@@ -445,32 +452,14 @@
    @Override
    public String getLiteralInitializer()
    {
-      String result = null;
-      for (Object f : field.fragments())
-      {
-         if (f instanceof VariableDeclarationFragment)
-         {
-            VariableDeclarationFragment frag = (VariableDeclarationFragment) f;
-            result = frag.getInitializer().toString();
-            break;
-         }
-      }
+      String result = fragment.getInitializer().toString();
       return result;
    }
 
    @Override
    public String getStringInitializer()
    {
-      String result = null;
-      for (Object f : field.fragments())
-      {
-         if (f instanceof VariableDeclarationFragment)
-         {
-            VariableDeclarationFragment frag = (VariableDeclarationFragment) f;
-            result = Strings.unquote(frag.getInitializer().toString());
-            break;
-         }
-      }
+      String result = Strings.unquote(fragment.getInitializer().toString());
       return result;
    }
 
@@ -479,19 +468,8 @@
    {
       String stub = ""public class Stub { private String stub = "" + value + "" }"";
       JavaClass temp = (JavaClass) JavaParser.parse(stub);
-      FieldDeclaration internal = (FieldDeclaration) temp.getFields().get(0).getInternal();
-
-      for (Object f : internal.fragments())
-      {
-         if (f instanceof VariableDeclarationFragment)
-         {
-            VariableDeclarationFragment tempFrag = (VariableDeclarationFragment) f;
-            VariableDeclarationFragment localFrag = getFragment(field);
-            localFrag.setInitializer((Expression) ASTNode.copySubtree(ast, tempFrag.getInitializer()));
-            break;
-         }
-      }
-
+      VariableDeclarationFragment tempFrag = (VariableDeclarationFragment) temp.getFields().get(0).getInternal();
+      fragment.setInitializer((Expression) ASTNode.copySubtree(ast, tempFrag.getInitializer()));
       return this;
    }
 
@@ -501,56 +479,40 @@
       return setLiteralInitializer(Strings.enquote(value));
    }
 
-   private VariableDeclarationFragment getFragment(final FieldDeclaration field)
-   {
-      VariableDeclarationFragment result = null;
-      for (Object f : field.fragments())
-      {
-         if (f instanceof VariableDeclarationFragment)
-         {
-            result = (VariableDeclarationFragment) f;
-            break;
-         }
-      }
-      return result;
-   }
-
    @Override
    public int hashCode()
    {
       final int prime = 31;
       int result = 1;
-      result = (prime * result) + ((field == null) ? 0 : field.hashCode());
+      result = prime * result + ((field == null) ? 0 : field.hashCode());
+      result = prime * result + ((fragment == null) ? 0 : fragment.hashCode());
       return result;
    }
 
    @Override
-   public boolean equals(final Object obj)
+   public boolean equals(Object obj)
    {
       if (this == obj)
-      {
          return true;
-      }
       if (obj == null)
-      {
          return false;
-      }
       if (getClass() != obj.getClass())
-      {
          return false;
-      }
       FieldImpl<?> other = (FieldImpl<?>) obj;
       if (field == null)
       {
          if (other.field != null)
-         {
             return false;
-         }
       }
       else if (!field.equals(other.field))
-      {
          return false;
+      if (fragment == null)
+      {
+         if (other.fragment != null)
+            return false;
       }
+      else if (!fragment.equals(other.fragment))
+         return false;
       return true;
    }
 
@@ -568,7 +530,7 @@
       }
       return result;
    }
-   
+
    @Override
    public boolean isTransient()
    {
"
b1abb73c248a5e0755d8ea700c71a3d9d001b311,Matt Benson,AnnotationElement.java,MODIFY,isType -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/AnnotationElement.java b/api/src/main/java/org/jboss/forge/parser/java/AnnotationElement.java
index 59a8e1b..27a7d48 100755
--- a/api/src/main/java/org/jboss/forge/parser/java/AnnotationElement.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/AnnotationElement.java
@@ -13,8 +13,11 @@
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * @author Matt Benson
  */
-public interface AnnotationElement extends AnnotationTarget<JavaAnnotation, AnnotationElement>, Origin<JavaAnnotation>
+public interface AnnotationElement extends AnnotationTarget<JavaAnnotation, AnnotationElement>, Origin<JavaAnnotation>, Named<AnnotationElement>
 {
+   /**
+    * Represents the default value of a given annotation element and provides mechanisms to set that value.
+    */
    public interface DefaultValue
    {
       String getString();
@@ -47,10 +50,6 @@
 
    }
 
-   String getName();
-
-   AnnotationElement setName(String name);
-
    /**
     * Get this annotation element's type.
     */
"
b1abb73c248a5e0755d8ea700c71a3d9d001b311,Matt Benson,Field.java,MODIFY,isType -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/Field.java b/api/src/main/java/org/jboss/forge/parser/java/Field.java
index d12048e..fe6a48c 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/Field.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/Field.java
@@ -13,8 +13,6 @@
  */
 public interface Field<O extends JavaSource<O>> extends Member<O, Field<O>>
 {
-   Field<O> setName(String name);
-
    /**
     * Get this field's type.
     */
"
b1abb73c248a5e0755d8ea700c71a3d9d001b311,Matt Benson,Method.java,MODIFY,setReturnType -> [JavaSource type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/Method.java b/api/src/main/java/org/jboss/forge/parser/java/Method.java
index 3e13705..00fd0c7 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/Method.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/Method.java
@@ -41,11 +41,6 @@
    public boolean isConstructor();
 
    /**
-    * Set the name of this {@link Method}
-    */
-   public Method<O> setName(final String name);
-
-   /**
     * Get the return type of this {@link Method} or return null if the return type is void.
     */
    public String getReturnType();
"
b1abb73c248a5e0755d8ea700c71a3d9d001b311,Matt Benson,MethodFinderVisitor.java,MODIFY,visit -> [AnonymousClassDeclaration node] | [TypeDeclaration node],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/ast/MethodFinderVisitor.java b/impl/src/main/java/org/jboss/forge/parser/java/ast/MethodFinderVisitor.java
index 63cd6ea..6b77e29 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/ast/MethodFinderVisitor.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/ast/MethodFinderVisitor.java
@@ -14,6 +14,7 @@
 import org.eclipse.jdt.core.dom.ASTVisitor;
 import org.eclipse.jdt.core.dom.AbstractTypeDeclaration;
 import org.eclipse.jdt.core.dom.AnnotationTypeDeclaration;
+import org.eclipse.jdt.core.dom.AnonymousClassDeclaration;
 import org.eclipse.jdt.core.dom.BodyDeclaration;
 import org.eclipse.jdt.core.dom.EnumDeclaration;
 import org.eclipse.jdt.core.dom.MethodDeclaration;
@@ -51,6 +52,16 @@
       return super.visit(node);
    }
 
+   @Override
+   public boolean visit(AnonymousClassDeclaration node)
+   {
+      parent = node;
+      @SuppressWarnings(""unchecked"")
+      final List<BodyDeclaration> bodyDeclarations = node.bodyDeclarations();
+      addMethods(bodyDeclarations);
+      return super.visit(node);
+   }
+
    public List<MethodDeclaration> getMethods()
    {
       return Collections.unmodifiableList(methods);
@@ -65,6 +76,11 @@
    {
       @SuppressWarnings(""unchecked"")
       final List<BodyDeclaration> bodyDeclarations = node.bodyDeclarations();
+      addMethods(bodyDeclarations);
+   }
+
+   private void addMethods(final List<BodyDeclaration> bodyDeclarations)
+   {
       for (BodyDeclaration bodyDeclaration : bodyDeclarations)
       {
          if (bodyDeclaration instanceof MethodDeclaration) {
"
b1abb73c248a5e0755d8ea700c71a3d9d001b311,Matt Benson,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
index aa953d1..7c89749 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
@@ -9,8 +9,10 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
+import java.util.Map;
 import java.util.ServiceLoader;
 
+import org.eclipse.jdt.core.JavaCore;
 import org.eclipse.jdt.core.compiler.IProblem;
 import org.eclipse.jdt.core.dom.ASTNode;
 import org.eclipse.jdt.core.dom.AbstractTypeDeclaration;
@@ -23,6 +25,7 @@
 import org.eclipse.jdt.core.dom.PackageDeclaration;
 import org.eclipse.jdt.core.dom.Type;
 import org.eclipse.jdt.core.dom.TypeDeclaration;
+import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
 import org.eclipse.jface.text.Document;
 import org.eclipse.text.edits.TextEdit;
 import org.jboss.forge.parser.JavaParser;
@@ -622,7 +625,11 @@
 
       try
       {
-         TextEdit edit = unit.rewrite(document, null);
+         @SuppressWarnings(""rawtypes"")
+         Map options = JavaCore.getOptions();
+         options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_7);
+         options.put(CompilerOptions.OPTION_Encoding, ""UTF-8"");
+         TextEdit edit = unit.rewrite(document, options);
          edit.apply(document);
       }
       catch (Exception e)
"
b1abb73c248a5e0755d8ea700c71a3d9d001b311,Matt Benson,AbstractJavaSourceMemberHolder.java,MODIFY,addField -> [Field field] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java
index 46daa6f..ea4b1f4 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java
@@ -15,9 +15,12 @@
 import org.eclipse.jdt.core.dom.CompilationUnit;
 import org.eclipse.jdt.core.dom.FieldDeclaration;
 import org.eclipse.jdt.core.dom.MethodDeclaration;
+import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
 import org.eclipse.jface.text.Document;
+import org.jboss.forge.parser.JavaParser;
 import org.jboss.forge.parser.java.Field;
 import org.jboss.forge.parser.java.FieldHolder;
+import org.jboss.forge.parser.java.JavaClass;
 import org.jboss.forge.parser.java.JavaSource;
 import org.jboss.forge.parser.java.Member;
 import org.jboss.forge.parser.java.Method;
@@ -56,9 +59,21 @@
    @SuppressWarnings(""unchecked"")
    public Field<O> addField(final String declaration)
    {
-      Field<O> field = new FieldImpl<O>((O) this, declaration);
-      addField(field);
-      return field;
+      String stub = ""public class Stub { "" + declaration + "" }"";
+      JavaClass temp = (JavaClass) JavaParser.parse(stub);
+      List<Field<JavaClass>> fields = temp.getFields();
+      Field<O> result = null;
+      for (Field<JavaClass> stubField : fields)
+      {
+         Object variableDeclaration = stubField.getInternal();
+         Field<O> field = new FieldImpl<O>((O) this, variableDeclaration, true);
+         addField(field);
+         if (result == null)
+         {
+            result = field;
+         }
+      }
+      return result;
    }
 
    @SuppressWarnings(""unchecked"")
@@ -74,7 +89,7 @@
          }
          idx++;
       }
-      bodyDeclarations.add(idx, field.getInternal());
+      bodyDeclarations.add(idx, ((VariableDeclarationFragment) field.getInternal()).getParent());
    }
 
    @Override
@@ -99,7 +114,12 @@
       {
          if (bodyDeclaration instanceof FieldDeclaration)
          {
-            result.add(new FieldImpl<O>((O) this, bodyDeclaration));
+            FieldDeclaration fieldDeclaration = (FieldDeclaration) bodyDeclaration;
+            List<VariableDeclarationFragment> fragments = fieldDeclaration.fragments();
+            for (VariableDeclarationFragment fragment : fragments)
+            {
+               result.add(new FieldImpl<O>((O) this, fragment));
+            }
          }
       }
 
@@ -142,7 +162,32 @@
    @SuppressWarnings(""unchecked"")
    public O removeField(final Field<O> field)
    {
-      getBodyDeclaration().bodyDeclarations().remove(field.getInternal());
+      VariableDeclarationFragment fragment = (VariableDeclarationFragment) field.getInternal();
+      Iterator<Object> declarationsIterator = getBodyDeclaration().bodyDeclarations().iterator();
+      while (declarationsIterator.hasNext())
+      {
+         Object next = declarationsIterator.next();
+         if (next instanceof FieldDeclaration)
+         {
+            FieldDeclaration declaration = (FieldDeclaration) next;
+            if (declaration.equals(fragment.getParent()))
+            {
+               List<VariableDeclarationFragment> fragments = declaration.fragments();
+               if (fragments.contains(fragment))
+               {
+                  if (fragments.size() == 1)
+                  {
+                     declarationsIterator.remove();
+                  }
+                  else
+                  {
+                     fragments.remove(fragment);
+                  }
+                  break;
+               }
+            }
+         }
+      }
       return (O) this;
    }
 
"
b1abb73c248a5e0755d8ea700c71a3d9d001b311,Matt Benson,EnumConstantImpl.java,MODIFY,init -> [O parent] | [JavaEnum parent],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java
index 0f65b76..60b697c 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java
@@ -6,17 +6,25 @@
  */
 package org.jboss.forge.parser.java.impl;
 
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
 import java.util.List;
 
 import org.eclipse.jdt.core.dom.AST;
 import org.eclipse.jdt.core.dom.ASTNode;
 import org.eclipse.jdt.core.dom.EnumConstantDeclaration;
+import org.eclipse.jdt.core.dom.Expression;
 import org.jboss.forge.parser.JavaParser;
+import org.jboss.forge.parser.java.Annotation;
 import org.jboss.forge.parser.java.EnumConstant;
 import org.jboss.forge.parser.java.JavaEnum;
+import org.jboss.forge.parser.java.ast.AnnotationAccessor;
+import org.jboss.forge.parser.java.util.Strings;
 
 public class EnumConstantImpl implements EnumConstant
 {
+   private final AnnotationAccessor<JavaEnum, EnumConstant> annotations = new AnnotationAccessor<JavaEnum, EnumConstant>();
    private JavaEnum parent;
    private AST ast;
    private EnumConstantDeclaration enumConstant;
@@ -24,7 +32,7 @@
    private void init(final JavaEnum parent)
    {
       this.parent = parent;
-      this.ast = ((ASTNode)parent.getInternal()).getAST();
+      this.ast = ((ASTNode) parent.getInternal()).getAST();
    }
    
    public EnumConstantImpl(final JavaEnum parent) {
@@ -74,4 +82,143 @@
    {
       return parent;
    }
+
+   @Override
+   public List<String> getConstructorArguments()
+   {
+      final List<String> result = new ArrayList<String>();
+      for (Object o : enumConstant.arguments()) {
+         result.add(o.toString());
+      }
+      return Collections.unmodifiableList(result);
+   }
+
+   @SuppressWarnings(""unchecked"")
+   @Override
+   public EnumConstant setConstructorArguments(String... literalArguments)
+   {
+      enumConstant.arguments().clear();
+      if (literalArguments != null && literalArguments.length > 0)
+      {
+         final String stub = ""public enum Stub { FOO("" + Strings.join(Arrays.asList(literalArguments), "", "") + ""); }"";
+         final JavaEnum temp = JavaParser.parse(JavaEnum.class, stub);
+         final List<EnumConstant> constants = temp.getEnumConstants();
+         final EnumConstantDeclaration newConstant = (EnumConstantDeclaration) constants.get(0).getInternal();
+         final List<Expression> arguments = newConstant.arguments();
+         for (Expression argument : arguments)
+         {
+            final Expression subtree = (Expression) ASTNode.copySubtree(ast, argument);
+            enumConstant.arguments().add(subtree);
+         }
+      }
+      return this;
+   }
+
+   @Override
+   public Body getBody()
+   {
+      return new EnumConstantBodyImpl(this);
+   }
+
+   @Override
+   public EnumConstant removeBody()
+   {
+      enumConstant.setAnonymousClassDeclaration(null);
+      return this;
+   }
+
+   /*
+    * Annotation<O> Modifiers
+    */
+
+   @Override
+   public Annotation<JavaEnum> addAnnotation()
+   {
+      return annotations.addAnnotation(this, enumConstant);
+   }
+
+   @Override
+   public Annotation<JavaEnum> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
+   {
+      if (!parent.hasImport(clazz))
+      {
+         parent.addImport(clazz);
+      }
+      return annotations.addAnnotation(this, enumConstant, clazz.getSimpleName());
+   }
+
+   @Override
+   public Annotation<JavaEnum> addAnnotation(final String className)
+   {
+      return annotations.addAnnotation(this, enumConstant, className);
+   }
+
+   @Override
+   public List<Annotation<JavaEnum>> getAnnotations()
+   {
+      return annotations.getAnnotations(this, enumConstant);
+   }
+
+   @Override
+   public boolean hasAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
+   {
+      return annotations.hasAnnotation(this, enumConstant, type.getName());
+   }
+
+   @Override
+   public boolean hasAnnotation(final String type)
+   {
+      return annotations.hasAnnotation(this, enumConstant, type);
+   }
+
+   @Override
+   public EnumConstant removeAnnotation(final Annotation<JavaEnum> annotation)
+   {
+      return annotations.removeAnnotation(this, enumConstant, annotation);
+   }
+
+   @Override
+   public Annotation<JavaEnum> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
+   {
+      return annotations.getAnnotation(this, enumConstant, type);
+   }
+
+   @Override
+   public Annotation<JavaEnum> getAnnotation(final String type)
+   {
+      return annotations.getAnnotation(this, enumConstant, type);
+   }
+
+   @Override
+   public boolean equals(Object obj)
+   {
+      if (obj == this)
+      {
+         return true;
+      }
+      if (obj == null)
+      {
+         return false;
+      }
+      if (!obj.getClass().equals(getClass()))
+      {
+         return false;
+      }
+      final EnumConstantImpl other = (EnumConstantImpl) obj;
+      return other.enumConstant == enumConstant || other.enumConstant != null
+               && other.enumConstant.equals(enumConstant);
+   }
+
+   @Override
+   public int hashCode()
+   {
+      int result = 57 << 4;
+      return result | (enumConstant == null ? 0 : enumConstant.hashCode());
+   }
+
+   @Override
+   public String toString()
+   {
+      return enumConstant.toString();
+   }
 }
"
b1abb73c248a5e0755d8ea700c71a3d9d001b311,Matt Benson,FieldImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
index db5b1e7..d65b95f 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
@@ -7,10 +7,12 @@
 
 package org.jboss.forge.parser.java.impl;
 
+import java.util.Iterator;
 import java.util.List;
 
 import org.eclipse.jdt.core.dom.AST;
 import org.eclipse.jdt.core.dom.ASTNode;
+import org.eclipse.jdt.core.dom.ArrayType;
 import org.eclipse.jdt.core.dom.Expression;
 import org.eclipse.jdt.core.dom.FieldDeclaration;
 import org.eclipse.jdt.core.dom.Modifier.ModifierKeyword;
@@ -41,6 +43,7 @@
    private O parent;
    private AST ast;
    private final FieldDeclaration field;
+   private final VariableDeclarationFragment fragment;
 
    private void init(final O parent)
    {
@@ -51,25 +54,46 @@
    public FieldImpl(final O parent)
    {
       init(parent);
-      this.field = ast.newFieldDeclaration(ast.newVariableDeclarationFragment());
-   }
-
-   public FieldImpl(final O parent, final String declaration)
-   {
-      init(parent);
-
-      String stub = ""public class Stub { "" + declaration + "" }"";
-      JavaClass temp = (JavaClass) JavaParser.parse(stub);
-      List<Field<JavaClass>> fields = temp.getFields();
-      FieldDeclaration newField = (FieldDeclaration) fields.get(0).getInternal();
-      FieldDeclaration subtree = (FieldDeclaration) ASTNode.copySubtree(ast, newField);
-      this.field = subtree;
+      this.fragment = ast.newVariableDeclarationFragment();
+      this.field = ast.newFieldDeclaration(this.fragment);
    }
 
    public FieldImpl(final O parent, final Object internal)
    {
+      this(parent, internal, false);
+   }
+
+   @SuppressWarnings(""unchecked"")
+   public FieldImpl(final O parent, final Object internal, boolean copy)
+   {
       init(parent);
-      this.field = (FieldDeclaration) internal;
+      if (copy)
+      {
+         VariableDeclarationFragment newFieldFragment = (VariableDeclarationFragment) internal;
+         FieldDeclaration newFieldDeclaration = (FieldDeclaration) newFieldFragment.getParent();
+         this.field = (FieldDeclaration) ASTNode.copySubtree(ast, newFieldDeclaration);
+         Iterator<VariableDeclarationFragment> fragmentsIterator = this.field.fragments().iterator();
+         VariableDeclarationFragment temp = null;
+         while (fragmentsIterator.hasNext())
+         {
+            VariableDeclarationFragment variableDeclarationFragment = fragmentsIterator.next();
+            if (newFieldFragment.getName().getFullyQualifiedName()
+                     .equals(variableDeclarationFragment.getName().getFullyQualifiedName()))
+            {
+               temp = variableDeclarationFragment;
+            }
+            else
+            {
+               fragmentsIterator.remove();
+            }
+         }
+         this.fragment = temp;
+      }
+      else
+      {
+         this.fragment = (VariableDeclarationFragment) internal;
+         this.field = (FieldDeclaration) this.fragment.getParent();
+      }
    }
 
    @Override
@@ -81,7 +105,7 @@
    @Override
    public Object getInternal()
    {
-      return field;
+      return fragment;
    }
 
    /*
@@ -277,15 +301,7 @@
    @Override
    public Field<O> setName(final String name)
    {
-      for (Object f : field.fragments())
-      {
-         if (f instanceof VariableDeclarationFragment)
-         {
-            VariableDeclarationFragment frag = (VariableDeclarationFragment) f;
-            frag.setName(ast.newSimpleName(name));
-            break;
-         }
-      }
+      fragment.setName(ast.newSimpleName(name));
       return this;
    }
 
@@ -298,8 +314,28 @@
    @Override
    public String getQualifiedType()
    {
-      Object type = field.getStructuralProperty(FieldDeclaration.TYPE_PROPERTY);
-      return parent.resolveType(type.toString());
+      Type fieldType = field.getType();
+      String result = parent.resolveType(fieldType.toString());
+      int extraDimensions = fragment.getExtraDimensions();
+      if (fieldType != null)
+      {
+         if (fieldType.isArrayType())
+         {
+            // The resolved type lacks information about arrays since arrays would be stripped from it
+            // We recreate it using the dimensions in the JDT Type to ensure that arrays are not lost in the return
+            // value.
+            int dimensions = ((ArrayType) fieldType).getDimensions();
+            for (int ctr = 0; ctr < dimensions; ctr++)
+            {
+               result += ""[]"";
+            }
+         }
+         for (int dimensionsToAdd = 0; dimensionsToAdd < extraDimensions; dimensionsToAdd++)
+         {
+            result += ""[]"";
+         }
+      }
+      return result;
    }
 
    @Override
@@ -416,32 +452,14 @@
    @Override
    public String getLiteralInitializer()
    {
-      String result = null;
-      for (Object f : field.fragments())
-      {
-         if (f instanceof VariableDeclarationFragment)
-         {
-            VariableDeclarationFragment frag = (VariableDeclarationFragment) f;
-            result = frag.getInitializer().toString();
-            break;
-         }
-      }
+      String result = fragment.getInitializer().toString();
       return result;
    }
 
    @Override
    public String getStringInitializer()
    {
-      String result = null;
-      for (Object f : field.fragments())
-      {
-         if (f instanceof VariableDeclarationFragment)
-         {
-            VariableDeclarationFragment frag = (VariableDeclarationFragment) f;
-            result = Strings.unquote(frag.getInitializer().toString());
-            break;
-         }
-      }
+      String result = Strings.unquote(fragment.getInitializer().toString());
       return result;
    }
 
@@ -450,19 +468,8 @@
    {
       String stub = ""public class Stub { private String stub = "" + value + "" }"";
       JavaClass temp = (JavaClass) JavaParser.parse(stub);
-      FieldDeclaration internal = (FieldDeclaration) temp.getFields().get(0).getInternal();
-
-      for (Object f : internal.fragments())
-      {
-         if (f instanceof VariableDeclarationFragment)
-         {
-            VariableDeclarationFragment tempFrag = (VariableDeclarationFragment) f;
-            VariableDeclarationFragment localFrag = getFragment(field);
-            localFrag.setInitializer((Expression) ASTNode.copySubtree(ast, tempFrag.getInitializer()));
-            break;
-         }
-      }
-
+      VariableDeclarationFragment tempFrag = (VariableDeclarationFragment) temp.getFields().get(0).getInternal();
+      fragment.setInitializer((Expression) ASTNode.copySubtree(ast, tempFrag.getInitializer()));
       return this;
    }
 
@@ -472,56 +479,40 @@
       return setLiteralInitializer(Strings.enquote(value));
    }
 
-   private VariableDeclarationFragment getFragment(final FieldDeclaration field)
-   {
-      VariableDeclarationFragment result = null;
-      for (Object f : field.fragments())
-      {
-         if (f instanceof VariableDeclarationFragment)
-         {
-            result = (VariableDeclarationFragment) f;
-            break;
-         }
-      }
-      return result;
-   }
-
    @Override
    public int hashCode()
    {
       final int prime = 31;
       int result = 1;
-      result = (prime * result) + ((field == null) ? 0 : field.hashCode());
+      result = prime * result + ((field == null) ? 0 : field.hashCode());
+      result = prime * result + ((fragment == null) ? 0 : fragment.hashCode());
       return result;
    }
 
    @Override
-   public boolean equals(final Object obj)
+   public boolean equals(Object obj)
    {
       if (this == obj)
-      {
          return true;
-      }
       if (obj == null)
-      {
          return false;
-      }
       if (getClass() != obj.getClass())
-      {
          return false;
-      }
       FieldImpl<?> other = (FieldImpl<?>) obj;
       if (field == null)
       {
          if (other.field != null)
-         {
             return false;
-         }
       }
       else if (!field.equals(other.field))
-      {
          return false;
+      if (fragment == null)
+      {
+         if (other.fragment != null)
+            return false;
       }
+      else if (!fragment.equals(other.fragment))
+         return false;
       return true;
    }
 
@@ -539,7 +530,7 @@
       }
       return result;
    }
-   
+
    @Override
    public boolean isTransient()
    {
"
b1abb73c248a5e0755d8ea700c71a3d9d001b311,Matt Benson,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
index 85471d9..91bd27b 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
@@ -423,9 +423,7 @@
    @Override
    public List<Member<JavaPackageInfo, ?>> getMembers()
    {
-      List<Member<JavaPackageInfo, ?>> result = new ArrayList<Member<JavaPackageInfo, ?>>();
-
-      return result;
+      return Collections.emptyList();
    }
 
    protected PackageDeclaration getPackageDeclaration()
"
19f75492bdd11b1f9596afc88015329f63d1f38a,"Lincoln Baxter, III",Importer.java,MODIFY,addImport -> [JavaSource type] | [String className],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/Importer.java b/api/src/main/java/org/jboss/forge/parser/java/Importer.java
index 32e14bc..038ce35 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/Importer.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/Importer.java
@@ -13,7 +13,7 @@
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * 
  */
-public interface Importer<O extends JavaSource<?>>
+public interface Importer<O extends JavaSource<O>>
 {
    /**
     * Add an import by qualified class name. (E.g: ""com.example.Imported"") unless it is in the provided 'java.lang.*'
"
19f75492bdd11b1f9596afc88015329f63d1f38a,"Lincoln Baxter, III",JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
index cb29f0d..4ac1fec 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
@@ -436,8 +436,7 @@
    @Override
    public JavaPackageInfo setName(final String name)
    {
-      getPackageDeclaration().setName(unit.getAST().newSimpleName(name));
-      return this;
+      throw new UnsupportedOperationException(""Changing name of ["" + getQualifiedName() + ""] not supported."");
    }
 
    @Override
"
19f75492bdd11b1f9596afc88015329f63d1f38a,"Lincoln Baxter, III",JavaParserImpl.java,MODIFY,parse -> [String data] | [File file],"diff --git a/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java b/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
index 128386a..5900cce 100644
--- a/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
@@ -35,6 +35,7 @@
 import org.jboss.forge.parser.java.JavaClass;
 import org.jboss.forge.parser.java.JavaEnum;
 import org.jboss.forge.parser.java.JavaInterface;
+import org.jboss.forge.parser.java.JavaPackageInfo;
 import org.jboss.forge.parser.java.JavaSource;
 import org.jboss.forge.parser.java.ast.TypeDeclarationFinderVisitor;
 import org.jboss.forge.parser.java.impl.JavaAnnotationImpl;
@@ -124,7 +125,6 @@
       else if (visitor.getPackageDeclaration() != null)
       {
          return getJavaSource(null, document, unit, visitor.getPackageDeclaration());
-
       }
       throw new ParserException(""Could not find type declaration in Java source - is this actually code?"");
    }
@@ -185,6 +185,9 @@
       if (JavaInterface.class.isAssignableFrom(type))
          return (T) parse(""public interface JavaInterface { }"");
 
+      if (JavaPackageInfo.class.isAssignableFrom(type))
+         return (T) parse(""package org.example;"");
+
       throw new ParserException(""Unknown JavaSource type ["" + type.getName() + ""]"");
    }
 
"
5c0f0c5afde5c05ad50ec4d5586589661e51aa98,Matt Benson,Importer.java,MODIFY,addImport -> [JavaSource type] | [String className],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/Importer.java b/api/src/main/java/org/jboss/forge/parser/java/Importer.java
index 32e14bc..038ce35 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/Importer.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/Importer.java
@@ -13,7 +13,7 @@
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * 
  */
-public interface Importer<O extends JavaSource<?>>
+public interface Importer<O extends JavaSource<O>>
 {
    /**
     * Add an import by qualified class name. (E.g: ""com.example.Imported"") unless it is in the provided 'java.lang.*'
"
5c0f0c5afde5c05ad50ec4d5586589661e51aa98,Matt Benson,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
index 91bd27b..9311c81 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
@@ -436,8 +436,7 @@
    @Override
    public JavaPackageInfo setName(final String name)
    {
-      getPackageDeclaration().setName(unit.getAST().newSimpleName(name));
-      return this;
+      throw new UnsupportedOperationException(""Changing name of ["" + getQualifiedName() + ""] not supported."");
    }
 
    @Override
"
5c0f0c5afde5c05ad50ec4d5586589661e51aa98,Matt Benson,JavaParserImpl.java,MODIFY,"parse -> [Class type, URL url] | [InputStream data]","diff --git a/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java b/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
index 3642464..a9a01be 100644
--- a/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
@@ -30,6 +30,7 @@
 import org.jboss.forge.parser.java.JavaClass;
 import org.jboss.forge.parser.java.JavaEnum;
 import org.jboss.forge.parser.java.JavaInterface;
+import org.jboss.forge.parser.java.JavaPackageInfo;
 import org.jboss.forge.parser.java.JavaSource;
 import org.jboss.forge.parser.java.ast.TypeDeclarationFinderVisitor;
 import org.jboss.forge.parser.java.impl.JavaAnnotationImpl;
@@ -45,25 +46,6 @@
 {
 
    @Override
-   @SuppressWarnings(""unchecked"")
-   public <T extends JavaSource<?>> T create(final Class<T> type)
-   {
-      if (JavaClass.class.isAssignableFrom(type))
-         return (T) parse(""public class JavaClass { }"");
-
-      if (JavaEnum.class.isAssignableFrom(type))
-         return (T) parse(""public enum JavaEnum { }"");
-
-      if (JavaAnnotation.class.isAssignableFrom(type))
-         return (T) parse(""public @interface JavaAnnotation { }"");
-
-      if (JavaInterface.class.isAssignableFrom(type))
-         return (T) parse(""public interface JavaInterface { }"");
-
-      throw new ParserException(""Unknown JavaSource type ["" + type.getName() + ""]"");
-   }
-
-   @Override
    public JavaSource<?> parse(final InputStream data)
    {
       try
@@ -110,7 +92,6 @@
       else if (visitor.getPackageDeclaration() != null)
       {
          return getJavaSource(null, document, unit, visitor.getPackageDeclaration());
-
       }
       throw new ParserException(""Could not find type declaration in Java source - is this actually code?"");
    }
@@ -155,4 +136,26 @@
       }
    }
 
+   @Override
+   @SuppressWarnings(""unchecked"")
+   public <T extends JavaSource<?>> T create(final Class<T> type)
+   {
+      if (JavaClass.class.isAssignableFrom(type))
+         return (T) parse(""public class JavaClass { }"");
+
+      if (JavaEnum.class.isAssignableFrom(type))
+         return (T) parse(""public enum JavaEnum { }"");
+
+      if (JavaAnnotation.class.isAssignableFrom(type))
+         return (T) parse(""public @interface JavaAnnotation { }"");
+
+      if (JavaInterface.class.isAssignableFrom(type))
+         return (T) parse(""public interface JavaInterface { }"");
+
+      if (JavaPackageInfo.class.isAssignableFrom(type))
+         return (T) parse(""package org.example;"");
+
+      throw new ParserException(""Unknown JavaSource type ["" + type.getName() + ""]"");
+   }
+
 }
"
27ce7b8e3d218bfc2f32e3154454c1711ffec0a0,Matt Benson,JavaParser.java,MODIFY,"parse -> [Class type, InputStream data] | [File file]","diff --git a/api/src/main/java/org/jboss/forge/parser/JavaParser.java b/api/src/main/java/org/jboss/forge/parser/JavaParser.java
index c512fd0..c221ea9 100644
--- a/api/src/main/java/org/jboss/forge/parser/JavaParser.java
+++ b/api/src/main/java/org/jboss/forge/parser/JavaParser.java
@@ -17,12 +17,13 @@
 import java.util.List;
 import java.util.ServiceLoader;
 
-import org.jboss.forge.parser.java.JavaClass;
-import org.jboss.forge.parser.java.JavaSource;
+import org.jboss.forge.parser.java.ReadJavaClass;
+import org.jboss.forge.parser.java.ReadJavaSource;
+import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
 import org.jboss.forge.parser.spi.JavaParserProvider;
 
 /**
- * Responsible for parsing data into new {@link JavaClass} instances.
+ * Responsible for parsing data into new {@link ReadJavaClass} instances.
  * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
@@ -69,90 +70,90 @@
    }
 
    /**
-    * Open the given {@link File}, parsing its contents into a new {@link JavaClass} instance.
+    * Open the given {@link File}, parsing its contents into a new {@link ReadJavaClass} instance.
     */
-   public static JavaSource<?> parse(final File file) throws FileNotFoundException
+   public static ReadJavaSource<?> parse(final File file) throws FileNotFoundException
    {
-      return parse(JavaSource.class, file);
+      return parse(ReadJavaSource.class, file);
    }
 
    /**
-    * Parse the given {@link URL} data into a new {@link JavaSource} instance.
+    * Parse the given {@link URL} data into a new {@link ReadJavaSource} instance.
     */
-   public static JavaSource<?> parse(final URL data) throws IOException
+   public static ReadJavaSource<?> parse(final URL data) throws IOException
    {
-      return parse(JavaSource.class, data);
+      return parse(ReadJavaSource.class, data);
    }
 
    /**
-    * Read the given {@link InputStream} and parse the data into a new {@link JavaClass} instance.
+    * Read the given {@link InputStream} and parse the data into a new {@link ReadJavaClass} instance.
     */
-   public static JavaSource<?> parse(final InputStream data)
+   public static ReadJavaSource<?> parse(final InputStream data)
    {
-      return parse(JavaSource.class, data);
+      return parse(ReadJavaSource.class, data);
    }
 
    /**
-    * Parse the given character array into a new {@link JavaClass} instance.
+    * Parse the given character array into a new {@link ReadJavaClass} instance.
     */
-   public static JavaSource<?> parse(final char[] data)
+   public static ReadJavaSource<?> parse(final char[] data)
    {
-      return parse(JavaSource.class, data);
+      return parse(ReadJavaSource.class, data);
    }
 
    /**
-    * Parse the given String data into a new {@link JavaClass} instance.
+    * Parse the given String data into a new {@link ReadJavaClass} instance.
     */
-   public static JavaSource<?> parse(final String data)
+   public static ReadJavaSource<?> parse(final String data)
    {
-      return parse(JavaSource.class, data);
+      return parse(ReadJavaSource.class, data);
    }
 
    /**
-    * Read the given {@link URL} and parse its data into a new {@link JavaSource} instance of the given type.
+    * Read the given {@link URL} and parse its data into a new {@link ReadJavaSource} instance of the given type.
     * 
     * @throws FileNotFoundException
     */
-   public static <T extends JavaSource<?>> T parse(final Class<T> type, final URL url) throws IOException
+   public static <T extends ReadJavaSource<?>> T parse(final Class<T> type, final URL url) throws IOException
    {
       return internalParse(type, url.openStream());
    }
 
    /**
-    * Read the given {@link File} and parse its data into a new {@link JavaSource} instance of the given type.
+    * Read the given {@link File} and parse its data into a new {@link ReadJavaSource} instance of the given type.
     * 
     * @throws FileNotFoundException
     */
-   public static <T extends JavaSource<?>> T parse(final Class<T> type, final File file) throws FileNotFoundException
+   public static <T extends ReadJavaSource<?>> T parse(final Class<T> type, final File file) throws FileNotFoundException
    {
       return internalParse(type, new FileInputStream(file));
    }
 
    /**
-    * Read the given character array and parse its data into a new {@link JavaSource} instance of the given type.
+    * Read the given character array and parse its data into a new {@link ReadJavaSource} instance of the given type.
     */
-   public static <T extends JavaSource<?>> T parse(final Class<T> type, final char[] data)
+   public static <T extends ReadJavaSource<?>> T parse(final Class<T> type, final char[] data)
    {
       return parse(type, new String(data));
    }
 
    /**
-    * Read the given string and parse its data into a new {@link JavaSource} instance of the given type.
+    * Read the given string and parse its data into a new {@link ReadJavaSource} instance of the given type.
     */
-   public static <T extends JavaSource<?>> T parse(final Class<T> type, final String data)
+   public static <T extends ReadJavaSource<?>> T parse(final Class<T> type, final String data)
    {
       return parse(type, Streams.fromString(data));
    }
 
    /**
-    * Read the given {@link InputStream} and parse its data into a new {@link JavaSource} instance of the given type.
+    * Read the given {@link InputStream} and parse its data into a new {@link ReadJavaSource} instance of the given type.
     * The caller is responsible for closing the stream.
     */
-   public static <T extends JavaSource<?>> T parse(final Class<T> type, final InputStream data)
+   public static <T extends ReadJavaSource<?>> T parse(final Class<T> type, final InputStream data)
    {
       for (JavaParserProvider parser : getParsers())
       {
-         final JavaSource<?> source = parser.parse(data);
+         final ReadJavaSource<?> source = parser.parse(data);
 
          if (type.isInstance(source))
          {
@@ -169,7 +170,7 @@
       throw new ParserException(""Cannot find JavaParserProvider capable of parsing the requested data"");
    }
 
-   private static <T extends JavaSource<?>> T internalParse(final Class<T> type, final InputStream data)
+   private static <T extends ReadJavaSource<?>> T internalParse(final Class<T> type, final InputStream data)
    {
       try
       {
"
27ce7b8e3d218bfc2f32e3154454c1711ffec0a0,Matt Benson,Visibility.java,MODIFY,getFrom -> [VisibilityScoped target] | [ReadVisibilityScoped target],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/Visibility.java b/api/src/main/java/org/jboss/forge/parser/java/Visibility.java
index f30dd3d..d3b4401 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/Visibility.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/Visibility.java
@@ -7,6 +7,7 @@
 
 package org.jboss.forge.parser.java;
 
+import org.jboss.forge.parser.java.ReadVisibilityScoped.VisibilityScoped;
 import org.jboss.forge.parser.java.util.Assert;
 
 /**
@@ -35,7 +36,7 @@
       return scope;
    }
 
-   public static Visibility getFrom(VisibilityScoped<?> target)
+   public static Visibility getFrom(ReadVisibilityScoped target)
    {
       Assert.notNull(target, ""VisibilityScoped<T> target must not be null."");
 
@@ -50,7 +51,7 @@
 
       else
       {
-         throw new IllegalStateException(VisibilityScoped.class.getSimpleName()
+         throw new IllegalStateException(ReadVisibilityScoped.class.getSimpleName()
                   + "" target does not comply with visibility scoping. Must be one of "" + Visibility.values() + ""[ ""
                   + target + ""]"");
       }
@@ -67,20 +68,23 @@
       Assert.notNull(target, ""VisibilityScoped<T> target must not be null."");
       Assert.notNull(scope, ""Visibility scope must not be null"");
 
-      if (PRIVATE.equals(scope))
-         target.setPrivate();
-      else if (PACKAGE_PRIVATE.equals(scope))
-         target.setPackagePrivate();
-      else if (PROTECTED.equals(scope))
-         target.setProtected();
-      else if (PUBLIC.equals(scope))
-         target.setPublic();
-
-      else
+      switch (scope)
       {
+      case PRIVATE:
+         target.setPrivate();
+         break;
+      case PACKAGE_PRIVATE:
+         target.setPackagePrivate();
+         break;
+      case PROTECTED:
+         target.setProtected();
+         break;
+      case PUBLIC:
+         target.setPublic();
+         break;
+      default:
          throw new IllegalStateException(""Unknown Visibility scope."");
       }
-
       return target;
    }
 }
"
27ce7b8e3d218bfc2f32e3154454c1711ffec0a0,Matt Benson,Refactory.java,MODIFY,"createHashCodeAndEquals -> [JavaClass clazz, Field fields] | [JavaClass clazz]","diff --git a/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java b/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java
index d39cb48..58bf075 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java
@@ -10,9 +10,9 @@
 import java.util.Arrays;
 import java.util.List;
 
-import org.jboss.forge.parser.java.Field;
-import org.jboss.forge.parser.java.JavaClass;
-import org.jboss.forge.parser.java.Method;
+import org.jboss.forge.parser.java.ReadField.Field;
+import org.jboss.forge.parser.java.ReadJavaClass.JavaClass;
+import org.jboss.forge.parser.java.ReadMethod.Method;
 
 /**
  * Utility refactory methods for {@link JavaClass} objects
"
27ce7b8e3d218bfc2f32e3154454c1711ffec0a0,Matt Benson,WildcardImportResolver.java,MODIFY,"resolve -> [JavaSource source, String type] | [ReadJavaSource source, String type]","diff --git a/api/src/main/java/org/jboss/forge/parser/spi/WildcardImportResolver.java b/api/src/main/java/org/jboss/forge/parser/spi/WildcardImportResolver.java
index a090e33..40f5790 100644
--- a/api/src/main/java/org/jboss/forge/parser/spi/WildcardImportResolver.java
+++ b/api/src/main/java/org/jboss/forge/parser/spi/WildcardImportResolver.java
@@ -6,7 +6,7 @@
  */
 package org.jboss.forge.parser.spi;
 
-import org.jboss.forge.parser.java.JavaSource;
+import org.jboss.forge.parser.java.ReadJavaSource;
 
 /**
  * Responsible for providing additional import resolution functionality for situations where classes have referenced a
@@ -17,5 +17,5 @@
  */
 public interface WildcardImportResolver
 {
-   public String resolve(JavaSource<?> source, String type);
+   public String resolve(ReadJavaSource<?> source, String type);
 }
"
27ce7b8e3d218bfc2f32e3154454c1711ffec0a0,Matt Benson,AnnotationAccessor.java,MODIFY,"addAnnotation -> [AnnotationTarget target, List modifiers, String className] | [AnnotationTarget target, ASTNode body]","diff --git a/impl/src/main/java/org/jboss/forge/parser/java/ast/AnnotationAccessor.java b/impl/src/main/java/org/jboss/forge/parser/java/ast/AnnotationAccessor.java
index f528252..675bb6b 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/ast/AnnotationAccessor.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/ast/AnnotationAccessor.java
@@ -17,9 +17,10 @@
 import org.eclipse.jdt.core.dom.IExtendedModifier;
 import org.eclipse.jdt.core.dom.PackageDeclaration;
 import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
-import org.jboss.forge.parser.java.Annotation;
-import org.jboss.forge.parser.java.AnnotationTarget;
-import org.jboss.forge.parser.java.JavaSource;
+import org.jboss.forge.parser.java.ReadAnnotation;
+import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
+import org.jboss.forge.parser.java.ReadAnnotationTarget.AnnotationTarget;
+import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
 import org.jboss.forge.parser.java.impl.AnnotationImpl;
 import org.jboss.forge.parser.java.util.Types;
 
@@ -121,20 +122,20 @@
    }
 
    public <E extends AnnotationTarget<O, T>> E removeAnnotation(final E target, final ASTNode body,
-            final Annotation<O> annotation)
+            final ReadAnnotation<O> annotation)
    {
       return removeAnnotation(target, getModifiers(body), annotation);
    }
 
    public <E extends AnnotationTarget<O, T>> E removeAnnotation(final E target,
             final SingleVariableDeclaration variableDeclaration,
-            final Annotation<O> annotation)
+            final ReadAnnotation<O> annotation)
    {
       return removeAnnotation(target, variableDeclaration.modifiers(), annotation);
    }
 
    private <E extends AnnotationTarget<O, T>> E removeAnnotation(final E target, final List<?> modifiers,
-            final Annotation<O> annotation)
+            final ReadAnnotation<O> annotation)
    {
       for (Object object : modifiers)
       {
"
27ce7b8e3d218bfc2f32e3154454c1711ffec0a0,Matt Benson,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
index 7c89749..1e0569e 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
@@ -30,12 +30,15 @@
 import org.eclipse.text.edits.TextEdit;
 import org.jboss.forge.parser.JavaParser;
 import org.jboss.forge.parser.ParserException;
-import org.jboss.forge.parser.java.Annotation;
-import org.jboss.forge.parser.java.Import;
-import org.jboss.forge.parser.java.InterfaceCapable;
-import org.jboss.forge.parser.java.JavaInterface;
-import org.jboss.forge.parser.java.JavaSource;
-import org.jboss.forge.parser.java.Member;
+import org.jboss.forge.parser.java.ReadAnnotation;
+import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
+import org.jboss.forge.parser.java.ReadImport;
+import org.jboss.forge.parser.java.ReadImport.Import;
+import org.jboss.forge.parser.java.ReadInterfaceCapable.InterfaceCapable;
+import org.jboss.forge.parser.java.ReadJavaInterface;
+import org.jboss.forge.parser.java.ReadJavaSource;
+import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
+import org.jboss.forge.parser.java.ReadMember.Member;
 import org.jboss.forge.parser.java.SyntaxError;
 import org.jboss.forge.parser.java.Visibility;
 import org.jboss.forge.parser.java.ast.AnnotationAccessor;
@@ -122,7 +125,7 @@
    }
 
    @Override
-   public O removeAnnotation(final Annotation<O> annotation)
+   public O removeAnnotation(final ReadAnnotation<O> annotation)
    {
       return (O) annotations.removeAnnotation(this, getBodyDeclaration(), annotation);
    }
@@ -150,14 +153,14 @@
    }
 
    @Override
-   public <T extends JavaSource<?>> Import addImport(final T type)
+   public <T extends ReadJavaSource<?>> Import addImport(final T type)
    {
       String qualifiedName = type.getQualifiedName();
       return this.addImport(qualifiedName);
    }
 
    @Override
-   public Import addImport(final Import imprt)
+   public Import addImport(final ReadImport imprt)
    {
       return addImport(imprt.getQualifiedName()).setStatic(imprt.isStatic());
    }
@@ -209,13 +212,13 @@
    }
 
    @Override
-   public <T extends JavaSource<?>> Import getImport(final T type)
+   public <T extends ReadJavaSource<?>> Import getImport(final T type)
    {
       return getImport(type.getQualifiedName());
    }
 
    @Override
-   public Import getImport(final Import imprt)
+   public Import getImport(final ReadImport imprt)
    {
       return getImport(imprt.getQualifiedName());
    }
@@ -240,13 +243,13 @@
    }
 
    @Override
-   public <T extends JavaSource<T>> boolean hasImport(final T type)
+   public <T extends ReadJavaSource<T>> boolean hasImport(final T type)
    {
       return hasImport(type.getQualifiedName());
    }
 
    @Override
-   public boolean hasImport(final Import imprt)
+   public boolean hasImport(final ReadImport imprt)
    {
       return hasImport(imprt.getQualifiedName());
    }
@@ -327,7 +330,7 @@
 
          if (result.equals(original))
          {
-            for (Import imprt : getImports())
+            for (ReadImport imprt : getImports())
             {
                if (Types.areEquivalent(result, imprt.getQualifiedName()))
                {
@@ -341,7 +344,7 @@
       // If we didn't match any imports directly, we might have a wild-card/on-demand import.
       if (Types.isSimpleName(result))
       {
-         for (Import imprt : getImports())
+         for (ReadImport imprt : getImports())
          {
             if (imprt.isWildcard())
             {
@@ -393,7 +396,7 @@
    @Override
    public O removeImport(final String name)
    {
-      for (Import i : getImports())
+      for (ReadImport i : getImports())
       {
          if (i.getQualifiedName().equals(name))
          {
@@ -411,13 +414,13 @@
    }
 
    @Override
-   public <T extends JavaSource<?>> O removeImport(final T type)
+   public <T extends ReadJavaSource<?>> O removeImport(final T type)
    {
       return removeImport(type.getQualifiedName());
    }
 
    @Override
-   public O removeImport(final Import imprt)
+   public O removeImport(final ReadImport imprt)
    {
       Object internal = imprt.getInternal();
       if (unit.imports().contains(internal))
@@ -463,7 +466,7 @@
    {
       String result = getName();
 
-      JavaSource<?> enclosingType = this;
+      ReadJavaSource<?> enclosingType = this;
       while (enclosingType != enclosingType.getEnclosingType())
       {
          enclosingType = getEnclosingType();
@@ -487,7 +490,7 @@
    {
       String result = getName();
 
-      JavaSource<?> enclosingType = this;
+      ReadJavaSource<?> enclosingType = this;
       while (enclosingType != enclosingType.getEnclosingType())
       {
          enclosingType = getEnclosingType();
@@ -616,7 +619,7 @@
     * Non-manipulation methods.
     */
    /**
-    * Return this {@link JavaSource} file as a String
+    * Return this {@link ReadJavaSource} file as a String
     */
    @Override
    public String toString()
@@ -772,7 +775,7 @@
          String name = JDTHelper.getTypeName(type);
          if (Types.isSimpleName(name) && this.hasImport(name))
          {
-            Import imprt = this.getImport(name);
+            ReadImport imprt = this.getImport(name);
             String pkg = imprt.getPackage();
             if (!Strings.isNullOrEmpty(pkg))
             {
@@ -815,7 +818,7 @@
    }
 
    @Override
-   public O addInterface(final JavaInterface type)
+   public O addInterface(final ReadJavaInterface<?> type)
    {
       return addInterface(type.getQualifiedName());
    }
@@ -840,7 +843,7 @@
    }
 
    @Override
-   public boolean hasInterface(final JavaInterface type)
+   public boolean hasInterface(final ReadJavaInterface<?> type)
    {
       return hasInterface(type.getQualifiedName());
    }
@@ -867,7 +870,7 @@
    }
 
    @Override
-   public O removeInterface(final JavaInterface type)
+   public O removeInterface(final ReadJavaInterface<?> type)
    {
       return removeInterface(type.getQualifiedName());
    }
@@ -885,12 +888,6 @@
       return result;
    }
 
-   @Override
-   public boolean isEditable()
-   {
-      return true;
-   }
-
    private List<AbstractTypeDeclaration> getNestedDeclarations(BodyDeclaration body)
    {
 
"
27ce7b8e3d218bfc2f32e3154454c1711ffec0a0,Matt Benson,AbstractJavaSourceMemberHolder.java,MODIFY,addField -> [Field field] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java
index ea4b1f4..ef83f9e 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java
@@ -18,14 +18,18 @@
 import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
 import org.eclipse.jface.text.Document;
 import org.jboss.forge.parser.JavaParser;
-import org.jboss.forge.parser.java.Field;
-import org.jboss.forge.parser.java.FieldHolder;
-import org.jboss.forge.parser.java.JavaClass;
-import org.jboss.forge.parser.java.JavaSource;
-import org.jboss.forge.parser.java.Member;
-import org.jboss.forge.parser.java.Method;
-import org.jboss.forge.parser.java.MethodHolder;
-import org.jboss.forge.parser.java.Parameter;
+import org.jboss.forge.parser.java.ReadField;
+import org.jboss.forge.parser.java.ReadField.Field;
+import org.jboss.forge.parser.java.ReadFieldHolder.FieldHolder;
+import org.jboss.forge.parser.java.ReadJavaClass.JavaClass;
+import org.jboss.forge.parser.java.ReadJavaSource;
+import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
+import org.jboss.forge.parser.java.ReadMember.Member;
+import org.jboss.forge.parser.java.ReadMethod;
+import org.jboss.forge.parser.java.ReadMethod.Method;
+import org.jboss.forge.parser.java.ReadMethodHolder.MethodHolder;
+import org.jboss.forge.parser.java.ReadParameter;
+import org.jboss.forge.parser.java.ReadParameter.Parameter;
 import org.jboss.forge.parser.java.ast.MethodFinderVisitor;
 import org.jboss.forge.parser.java.util.Strings;
 import org.jboss.forge.parser.java.util.Types;
@@ -77,7 +81,7 @@
    }
 
    @SuppressWarnings(""unchecked"")
-   private void addField(Field<O> field)
+   private void addField(ReadField<O> field)
    {
       List<Object> bodyDeclarations = getBodyDeclaration().bodyDeclarations();
       int idx = 0;
@@ -153,14 +157,14 @@
    }
 
    @Override
-   public boolean hasField(final Field<O> field)
+   public boolean hasField(final ReadField<O> field)
    {
       return getFields().contains(field);
    }
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public O removeField(final Field<O> field)
+   public O removeField(final ReadField<O> field)
    {
       VariableDeclarationFragment fragment = (VariableDeclarationFragment) field.getInternal();
       Iterator<Object> declarationsIterator = getBodyDeclaration().bodyDeclarations().iterator();
@@ -192,7 +196,7 @@
    }
 
    @Override
-   public boolean hasMethod(final Method<O> method)
+   public boolean hasMethod(final ReadMethod<O, ?> method)
    {
       return getMethods().contains(method);
    }
@@ -288,14 +292,14 @@
    }
 
    @Override
-   public boolean hasMethodSignature(final Method<?> method)
+   public boolean hasMethodSignature(final ReadMethod<?, ?> method)
    {
       for (Method<O> local : getMethods())
       {
          if (local.getName().equals(method.getName()))
          {
             Iterator<Parameter<O>> localParams = local.getParameters().iterator();
-            for (Parameter<? extends JavaSource<?>> methodParam : method.getParameters())
+            for (ReadParameter<? extends ReadJavaSource<?>> methodParam : method.getParameters())
             {
                if (localParams.hasNext() && Strings.areEqual(localParams.next().getType(), methodParam.getType()))
                {
@@ -311,7 +315,7 @@
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public O removeMethod(final Method<O> method)
+   public O removeMethod(final ReadMethod<O, ?> method)
    {
       getBodyDeclaration().bodyDeclarations().remove(method.getInternal());
       return (O) this;
"
27ce7b8e3d218bfc2f32e3154454c1711ffec0a0,Matt Benson,AnnotationElementImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationElementImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationElementImpl.java
index e849b56..e94369d 100755
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationElementImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationElementImpl.java
@@ -21,10 +21,11 @@
 import org.eclipse.jdt.core.dom.PrimitiveType.Code;
 import org.eclipse.jdt.core.dom.TypeLiteral;
 import org.jboss.forge.parser.JavaParser;
-import org.jboss.forge.parser.java.Annotation;
-import org.jboss.forge.parser.java.AnnotationElement;
-import org.jboss.forge.parser.java.JavaAnnotation;
-import org.jboss.forge.parser.java.JavaSource;
+import org.jboss.forge.parser.java.ReadAnnotation;
+import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
+import org.jboss.forge.parser.java.ReadAnnotationElement.AnnotationElement;
+import org.jboss.forge.parser.java.ReadJavaAnnotation.JavaAnnotation;
+import org.jboss.forge.parser.java.ReadJavaSource;
 import org.jboss.forge.parser.java.Type;
 import org.jboss.forge.parser.java.ast.AnnotationAccessor;
 import org.jboss.forge.parser.java.util.Assert;
@@ -390,7 +391,7 @@
    }
 
    @Override
-   public AnnotationElement removeAnnotation(final Annotation<JavaAnnotation> annotation)
+   public AnnotationElement removeAnnotation(final ReadAnnotation<JavaAnnotation> annotation)
    {
       return annotations.removeAnnotation(this, member, annotation);
    }
@@ -487,7 +488,7 @@
    }
 
    @Override
-   public AnnotationElement setType(final JavaSource<?> source)
+   public AnnotationElement setType(final ReadJavaSource<?> source)
    {
       return setType(source.getQualifiedName());
    }
"
27ce7b8e3d218bfc2f32e3154454c1711ffec0a0,Matt Benson,AnnotationImpl.java,MODIFY,getLiteralValue -> [String name] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationImpl.java
index 2a0fd92..76d6622 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationImpl.java
@@ -24,10 +24,10 @@
 import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
 import org.eclipse.jdt.core.dom.TypeLiteral;
 import org.jboss.forge.parser.JavaParser;
-import org.jboss.forge.parser.java.Annotation;
-import org.jboss.forge.parser.java.AnnotationTarget;
-import org.jboss.forge.parser.java.JavaClass;
-import org.jboss.forge.parser.java.JavaSource;
+import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
+import org.jboss.forge.parser.java.ReadAnnotationTarget.AnnotationTarget;
+import org.jboss.forge.parser.java.ReadJavaClass;
+import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
 import org.jboss.forge.parser.java.Type;
 import org.jboss.forge.parser.java.ValuePair;
 import org.jboss.forge.parser.java.util.Assert;
@@ -292,7 +292,7 @@
          SingleMemberAnnotation sa = (SingleMemberAnnotation) annotation;
 
          String stub = ""@"" + getName() + ""("" + value + "") public class Stub { }"";
-         JavaClass temp = (JavaClass) JavaParser.parse(stub);
+         ReadJavaClass<?> temp = JavaParser.parse(ReadJavaClass.class, stub);
 
          SingleMemberAnnotation anno = (SingleMemberAnnotation) temp.getAnnotations().get(0).getInternal();
 
@@ -329,7 +329,7 @@
       NormalAnnotation na = (NormalAnnotation) annotation;
 
       String stub = ""@"" + getName() + ""("" + name + ""="" + value + "" ) public class Stub { }"";
-      JavaClass temp = (JavaClass) JavaParser.parse(stub);
+      ReadJavaClass<?> temp = JavaParser.parse(ReadJavaClass.class, stub);
 
       NormalAnnotation anno = (NormalAnnotation) temp.getAnnotations().get(0).getInternal();
       MemberValuePair mvp = (MemberValuePair) anno.values().get(0);
@@ -559,7 +559,7 @@
       Annotation<O> result = new Nested(this);
       
       String stub = ""@"" + getName() + ""("" + name + ""= 0 ) public class Stub { }"";
-      JavaClass temp = (JavaClass) JavaParser.parse(stub);
+      ReadJavaClass<?> temp = JavaParser.parse(ReadJavaClass.class, stub);
 
       NormalAnnotation anno = (NormalAnnotation) temp.getAnnotations().get(0).getInternal();
       MemberValuePair mvp = (MemberValuePair) anno.values().get(0);
"
27ce7b8e3d218bfc2f32e3154454c1711ffec0a0,Matt Benson,EnumConstantBodyImpl.java,MODIFY,addImport -> [JavaSource type] | [String className],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java
index 3acd5f4..d9d722c 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java
@@ -23,17 +23,22 @@
 import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
 import org.eclipse.jface.text.Document;
 import org.jboss.forge.parser.JavaParser;
-import org.jboss.forge.parser.java.Annotation;
-import org.jboss.forge.parser.java.EnumConstant;
-import org.jboss.forge.parser.java.EnumConstant.Body;
-import org.jboss.forge.parser.java.Field;
-import org.jboss.forge.parser.java.Import;
-import org.jboss.forge.parser.java.JavaClass;
-import org.jboss.forge.parser.java.JavaEnum;
-import org.jboss.forge.parser.java.JavaSource;
-import org.jboss.forge.parser.java.Member;
-import org.jboss.forge.parser.java.Method;
-import org.jboss.forge.parser.java.Parameter;
+import org.jboss.forge.parser.java.ReadAnnotation;
+import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
+import org.jboss.forge.parser.java.ReadEnumConstant.EnumConstant;
+import org.jboss.forge.parser.java.ReadEnumConstant.EnumConstant.Body;
+import org.jboss.forge.parser.java.ReadField;
+import org.jboss.forge.parser.java.ReadField.Field;
+import org.jboss.forge.parser.java.ReadImport;
+import org.jboss.forge.parser.java.ReadImport.Import;
+import org.jboss.forge.parser.java.ReadJavaClass.JavaClass;
+import org.jboss.forge.parser.java.ReadJavaEnum.JavaEnum;
+import org.jboss.forge.parser.java.ReadJavaSource;
+import org.jboss.forge.parser.java.ReadMember.Member;
+import org.jboss.forge.parser.java.ReadMethod;
+import org.jboss.forge.parser.java.ReadMethod.Method;
+import org.jboss.forge.parser.java.ReadParameter;
+import org.jboss.forge.parser.java.ReadParameter.Parameter;
 import org.jboss.forge.parser.java.SourceType;
 import org.jboss.forge.parser.java.SyntaxError;
 import org.jboss.forge.parser.java.Visibility;
@@ -174,13 +179,13 @@
    }
 
    @Override
-   public Import addImport(Import imprt)
+   public Import addImport(ReadImport imprt)
    {
       return javaEnum.addImport(imprt);
    }
 
    @Override
-   public <T extends JavaSource<?>> Import addImport(T type)
+   public <T extends ReadJavaSource<?>> Import addImport(T type)
    {
       return javaEnum.addImport(type);
    }
@@ -210,13 +215,13 @@
    }
 
    @Override
-   public <T extends JavaSource<T>> boolean hasImport(T type)
+   public <T extends ReadJavaSource<T>> boolean hasImport(T type)
    {
       return javaEnum.hasImport(type);
    }
 
    @Override
-   public boolean hasImport(Import imprt)
+   public boolean hasImport(ReadImport imprt)
    {
       return javaEnum.hasImport(imprt);
    }
@@ -234,13 +239,13 @@
    }
 
    @Override
-   public <T extends JavaSource<?>> Import getImport(T type)
+   public <T extends ReadJavaSource<?>> Import getImport(T type)
    {
       return javaEnum.getImport(type);
    }
 
    @Override
-   public Import getImport(Import imprt)
+   public Import getImport(ReadImport imprt)
    {
       return javaEnum.getImport(imprt);
    }
@@ -260,14 +265,14 @@
    }
 
    @Override
-   public <T extends JavaSource<?>> Body removeImport(T type)
+   public <T extends ReadJavaSource<?>> Body removeImport(T type)
    {
       javaEnum.removeImport(type);
       return this;
    }
 
    @Override
-   public Body removeImport(Import imprt)
+   public Body removeImport(ReadImport imprt)
    {
       javaEnum.removeImport(imprt);
       return this;
@@ -423,7 +428,7 @@
    }
 
    @Override
-   public Body removeAnnotation(Annotation<Body> annotation)
+   public Body removeAnnotation(ReadAnnotation<Body> annotation)
    {
       // could pass through to enumConstant, but would require then pretending its Annotation was ours
       // which should cause no problem at the moment, but could theoretically do so in the future
@@ -500,7 +505,7 @@
    }
 
    @SuppressWarnings(""unchecked"")
-   private void addField(Field<Body> field)
+   private void addField(ReadField<Body> field)
    {
       final List<BodyDeclaration> bodyDeclarations = getBody().bodyDeclarations();
       int idx = 0;
@@ -553,7 +558,7 @@
    @Override
    public boolean hasField(final String name)
    {
-      for (Field<Body> field : getFields())
+      for (ReadField<Body> field : getFields())
       {
          if (field.getName().equals(name))
          {
@@ -564,14 +569,14 @@
    }
 
    @Override
-   public boolean hasField(final Field<Body> field)
+   public boolean hasField(final ReadField<Body> field)
    {
       return getFields().contains(field);
    }
 
    @SuppressWarnings(""unchecked"")
    @Override
-   public Body removeField(final Field<Body> field)
+   public Body removeField(final ReadField<Body> field)
    {
       VariableDeclarationFragment fragment = (VariableDeclarationFragment) field.getInternal();
       Iterator<Object> declarationsIterator = getBody().bodyDeclarations().iterator();
@@ -603,7 +608,7 @@
    }
 
    @Override
-   public boolean hasMethod(final Method<Body> method)
+   public boolean hasMethod(final ReadMethod<Body, ?> method)
    {
       return getMethods().contains(method);
    }
@@ -689,14 +694,14 @@
    }
 
    @Override
-   public boolean hasMethodSignature(final Method<?> method)
+   public boolean hasMethodSignature(final ReadMethod<?, ?> method)
    {
       for (Method<Body> local : getMethods())
       {
          if (local.getName().equals(method.getName()))
          {
             final Iterator<Parameter<Body>> localParams = local.getParameters().iterator();
-            for (Parameter<? extends JavaSource<?>> methodParam : method.getParameters())
+            for (ReadParameter<? extends ReadJavaSource<?>> methodParam : method.getParameters())
             {
                if (localParams.hasNext() && Strings.areEqual(localParams.next().getType(), methodParam.getType()))
                {
@@ -711,7 +716,7 @@
    }
 
    @Override
-   public Body removeMethod(final Method<Body> method)
+   public Body removeMethod(final ReadMethod<Body, ?> method)
    {
       getBody().bodyDeclarations().remove(method.getInternal());
       return this;
@@ -770,9 +775,4 @@
       return result;
    }
 
-   @Override
-   public boolean isEditable()
-   {
-      return true;
-   }
 }
\ No newline at end of file
"
27ce7b8e3d218bfc2f32e3154454c1711ffec0a0,Matt Benson,EnumConstantImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java
index 60b697c..1907a8b 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java
@@ -16,9 +16,10 @@
 import org.eclipse.jdt.core.dom.EnumConstantDeclaration;
 import org.eclipse.jdt.core.dom.Expression;
 import org.jboss.forge.parser.JavaParser;
-import org.jboss.forge.parser.java.Annotation;
-import org.jboss.forge.parser.java.EnumConstant;
-import org.jboss.forge.parser.java.JavaEnum;
+import org.jboss.forge.parser.java.ReadAnnotation;
+import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
+import org.jboss.forge.parser.java.ReadEnumConstant.EnumConstant;
+import org.jboss.forge.parser.java.ReadJavaEnum.JavaEnum;
 import org.jboss.forge.parser.java.ast.AnnotationAccessor;
 import org.jboss.forge.parser.java.util.Strings;
 
@@ -172,7 +173,7 @@
    }
 
    @Override
-   public EnumConstant removeAnnotation(final Annotation<JavaEnum> annotation)
+   public EnumConstant removeAnnotation(final ReadAnnotation<JavaEnum> annotation)
    {
       return annotations.removeAnnotation(this, enumConstant, annotation);
    }
"
27ce7b8e3d218bfc2f32e3154454c1711ffec0a0,Matt Benson,FieldImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
index d65b95f..2559310 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
@@ -22,10 +22,12 @@
 import org.eclipse.jdt.core.dom.Type;
 import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
 import org.jboss.forge.parser.JavaParser;
-import org.jboss.forge.parser.java.Annotation;
-import org.jboss.forge.parser.java.Field;
-import org.jboss.forge.parser.java.JavaClass;
-import org.jboss.forge.parser.java.JavaSource;
+import org.jboss.forge.parser.java.ReadAnnotation;
+import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
+import org.jboss.forge.parser.java.ReadField.Field;
+import org.jboss.forge.parser.java.ReadJavaClass;
+import org.jboss.forge.parser.java.ReadJavaSource;
+import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
 import org.jboss.forge.parser.java.Visibility;
 import org.jboss.forge.parser.java.ast.AnnotationAccessor;
 import org.jboss.forge.parser.java.ast.ModifierAccessor;
@@ -164,7 +166,7 @@
    }
 
    @Override
-   public Field<O> removeAnnotation(final Annotation<O> annotation)
+   public Field<O> removeAnnotation(final ReadAnnotation<O> annotation)
    {
       return annotations.removeAnnotation(this, field, annotation);
    }
@@ -393,7 +395,7 @@
    }
 
    @Override
-   public Field<O> setType(final JavaSource<?> source)
+   public Field<O> setType(final ReadJavaSource<?> source)
    {
       return setType(source.getQualifiedName());
    }
@@ -467,7 +469,7 @@
    public Field<O> setLiteralInitializer(final String value)
    {
       String stub = ""public class Stub { private String stub = "" + value + "" }"";
-      JavaClass temp = (JavaClass) JavaParser.parse(stub);
+      ReadJavaClass<?> temp = JavaParser.parse(ReadJavaClass.class, stub);
       VariableDeclarationFragment tempFrag = (VariableDeclarationFragment) temp.getFields().get(0).getInternal();
       fragment.setInitializer((Expression) ASTNode.copySubtree(ast, tempFrag.getInitializer()));
       return this;
"
27ce7b8e3d218bfc2f32e3154454c1711ffec0a0,Matt Benson,JavaAnnotationImpl.java,MODIFY,addAnnotationElement -> [String declaration] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaAnnotationImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaAnnotationImpl.java
index 6aedc74..76fa94b 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaAnnotationImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaAnnotationImpl.java
@@ -15,9 +15,9 @@
 import org.eclipse.jdt.core.dom.BodyDeclaration;
 import org.eclipse.jdt.core.dom.CompilationUnit;
 import org.eclipse.jface.text.Document;
-import org.jboss.forge.parser.java.AnnotationElement;
-import org.jboss.forge.parser.java.JavaAnnotation;
-import org.jboss.forge.parser.java.JavaSource;
+import org.jboss.forge.parser.java.ReadAnnotationElement;
+import org.jboss.forge.parser.java.ReadAnnotationElement.AnnotationElement;
+import org.jboss.forge.parser.java.ReadJavaAnnotation.JavaAnnotation;
 import org.jboss.forge.parser.java.SourceType;
 import org.jboss.forge.parser.java.util.Strings;
 
@@ -100,7 +100,7 @@
    }
 
    @Override
-   public boolean hasAnnotationElement(AnnotationElement annotationElement)
+   public boolean hasAnnotationElement(ReadAnnotationElement<?> annotationElement)
    {
       return getAnnotationElements().contains(annotationElement);
    }
@@ -136,7 +136,7 @@
    }
 
    @Override
-   public JavaAnnotation removeAnnotationElement(AnnotationElement annotationElement)
+   public JavaAnnotation removeAnnotationElement(ReadAnnotationElement<?> annotationElement)
    {
       getBodyDeclaration().bodyDeclarations().remove(annotationElement.getInternal());
       return this;
"
27ce7b8e3d218bfc2f32e3154454c1711ffec0a0,Matt Benson,JavaClassImpl.java,MODIFY,setSuperType -> [String type] | [ReadJavaSource type],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaClassImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaClassImpl.java
index 466a0b4..05697fc 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaClassImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaClassImpl.java
@@ -12,9 +12,9 @@
 import org.eclipse.jdt.core.dom.SimpleType;
 import org.eclipse.jdt.core.dom.TypeDeclaration;
 import org.eclipse.jface.text.Document;
-import org.jboss.forge.parser.java.JavaClass;
-import org.jboss.forge.parser.java.JavaSource;
-import org.jboss.forge.parser.java.Method;
+import org.jboss.forge.parser.java.ReadJavaClass.JavaClass;
+import org.jboss.forge.parser.java.ReadJavaSource;
+import org.jboss.forge.parser.java.ReadMethod.Method;
 import org.jboss.forge.parser.java.SourceType;
 import org.jboss.forge.parser.java.ast.ModifierAccessor;
 import org.jboss.forge.parser.java.util.Types;
@@ -97,7 +97,7 @@
    }
 
    @Override
-   public JavaClass setSuperType(final JavaClass type)
+   public JavaClass setSuperType(final ReadJavaSource<?> type)
    {
       return setSuperType(type.getQualifiedName());
    }
"
27ce7b8e3d218bfc2f32e3154454c1711ffec0a0,Matt Benson,JavaEnumImpl.java,MODIFY,addEnumConstant -> [String declaration] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
index 98eb14a..3aa1db4 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
@@ -15,9 +15,8 @@
 import org.eclipse.jdt.core.dom.EnumConstantDeclaration;
 import org.eclipse.jdt.core.dom.EnumDeclaration;
 import org.eclipse.jface.text.Document;
-import org.jboss.forge.parser.java.EnumConstant;
-import org.jboss.forge.parser.java.JavaEnum;
-import org.jboss.forge.parser.java.JavaSource;
+import org.jboss.forge.parser.java.ReadEnumConstant.EnumConstant;
+import org.jboss.forge.parser.java.ReadJavaEnum.JavaEnum;
 import org.jboss.forge.parser.java.SourceType;
 
 /**
"
27ce7b8e3d218bfc2f32e3154454c1711ffec0a0,Matt Benson,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
index 9311c81..1205c62 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
@@ -15,11 +15,13 @@
 import org.eclipse.jface.text.Document;
 import org.eclipse.text.edits.TextEdit;
 import org.jboss.forge.parser.ParserException;
-import org.jboss.forge.parser.java.Annotation;
-import org.jboss.forge.parser.java.Import;
-import org.jboss.forge.parser.java.JavaPackageInfo;
-import org.jboss.forge.parser.java.JavaSource;
-import org.jboss.forge.parser.java.Member;
+import org.jboss.forge.parser.java.ReadAnnotation;
+import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
+import org.jboss.forge.parser.java.ReadImport;
+import org.jboss.forge.parser.java.ReadImport.Import;
+import org.jboss.forge.parser.java.ReadJavaPackageInfo.JavaPackageInfo;
+import org.jboss.forge.parser.java.ReadJavaSource;
+import org.jboss.forge.parser.java.ReadMember.Member;
 import org.jboss.forge.parser.java.SourceType;
 import org.jboss.forge.parser.java.SyntaxError;
 import org.jboss.forge.parser.java.Visibility;
@@ -113,7 +115,7 @@
    }
 
    @Override
-   public JavaPackageInfo removeAnnotation(final Annotation<JavaPackageInfo> annotation)
+   public JavaPackageInfo removeAnnotation(final ReadAnnotation<JavaPackageInfo> annotation)
    {
       return annotations.removeAnnotation(this, getPackageDeclaration(), annotation);
    }
@@ -141,14 +143,14 @@
    }
 
    @Override
-   public <T extends JavaSource<?>> Import addImport(final T type)
+   public <T extends ReadJavaSource<?>> Import addImport(final T type)
    {
       String qualifiedName = type.getQualifiedName();
       return this.addImport(qualifiedName);
    }
 
    @Override
-   public Import addImport(final Import imprt)
+   public Import addImport(final ReadImport imprt)
    {
       return addImport(imprt.getQualifiedName()).setStatic(imprt.isStatic());
    }
@@ -201,13 +203,13 @@
    }
 
    @Override
-   public <T extends JavaSource<?>> Import getImport(final T type)
+   public <T extends ReadJavaSource<?>> Import getImport(final T type)
    {
       return getImport(type.getQualifiedName());
    }
 
    @Override
-   public Import getImport(final Import imprt)
+   public Import getImport(final ReadImport imprt)
    {
       return getImport(imprt.getQualifiedName());
    }
@@ -233,13 +235,13 @@
    }
 
    @Override
-   public <T extends JavaSource<T>> boolean hasImport(final T type)
+   public <T extends ReadJavaSource<T>> boolean hasImport(final T type)
    {
       return hasImport(type.getQualifiedName());
    }
 
    @Override
-   public boolean hasImport(final Import imprt)
+   public boolean hasImport(final ReadImport imprt)
    {
       return hasImport(imprt.getQualifiedName());
    }
@@ -320,7 +322,7 @@
 
          if (result.equals(original))
          {
-            for (Import imprt : getImports())
+            for (ReadImport imprt : getImports())
             {
                if (Types.areEquivalent(result, imprt.getQualifiedName()))
                {
@@ -334,7 +336,7 @@
       // If we didn't match any imports directly, we might have a wild-card/on-demand import.
       if (Types.isSimpleName(result))
       {
-         for (Import imprt : getImports())
+         for (ReadImport imprt : getImports())
          {
             if (imprt.isWildcard())
             {
@@ -386,7 +388,7 @@
    @Override
    public JavaPackageInfo removeImport(final String name)
    {
-      for (Import i : getImports())
+      for (ReadImport i : getImports())
       {
          if (i.getQualifiedName().equals(name))
          {
@@ -404,13 +406,13 @@
    }
 
    @Override
-   public <T extends JavaSource<?>> JavaPackageInfo removeImport(final T type)
+   public <T extends ReadJavaSource<?>> JavaPackageInfo removeImport(final T type)
    {
       return removeImport(type.getQualifiedName());
    }
 
    @Override
-   public JavaPackageInfo removeImport(final Import imprt)
+   public JavaPackageInfo removeImport(final ReadImport imprt)
    {
       Object internal = imprt.getInternal();
       if (unit.imports().contains(internal))
@@ -444,7 +446,7 @@
    {
       String result = getName();
 
-      JavaSource<?> enclosingType = this;
+      ReadJavaSource<?> enclosingType = this;
       while (enclosingType != enclosingType.getEnclosingType())
       {
          enclosingType = getEnclosingType();
@@ -463,7 +465,7 @@
    {
       String result = getName();
 
-      JavaSource<?> enclosingType = this;
+      ReadJavaSource<?> enclosingType = this;
       while (enclosingType != enclosingType.getEnclosingType())
       {
          enclosingType = getEnclosingType();
@@ -592,7 +594,7 @@
     * Non-manipulation methods.
     */
    /**
-    * Return this {@link JavaSource} file as a String
+    * Return this {@link ReadJavaSource} file as a String
     */
    @Override
    public String toString()
@@ -736,12 +738,6 @@
       return result;
    }
 
-   @Override
-   public boolean isEditable()
-   {
-      return true;
-   }
-
    private List<AbstractTypeDeclaration> getNestedDeclarations(ASTNode body)
    {
 
"
27ce7b8e3d218bfc2f32e3154454c1711ffec0a0,Matt Benson,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java
index c8f38cd..04c7b6c 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java
@@ -22,11 +22,13 @@
 import org.eclipse.jdt.core.dom.Statement;
 import org.eclipse.jdt.core.dom.VariableDeclaration;
 import org.jboss.forge.parser.JavaParser;
-import org.jboss.forge.parser.java.Annotation;
-import org.jboss.forge.parser.java.JavaClass;
-import org.jboss.forge.parser.java.JavaSource;
-import org.jboss.forge.parser.java.Method;
-import org.jboss.forge.parser.java.Parameter;
+import org.jboss.forge.parser.java.ReadAnnotation;
+import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
+import org.jboss.forge.parser.java.ReadJavaClass.JavaClass;
+import org.jboss.forge.parser.java.ReadJavaSource;
+import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
+import org.jboss.forge.parser.java.ReadMethod.Method;
+import org.jboss.forge.parser.java.ReadParameter.Parameter;
 import org.jboss.forge.parser.java.Type;
 import org.jboss.forge.parser.java.Visibility;
 import org.jboss.forge.parser.java.ast.AnnotationAccessor;
@@ -144,7 +146,7 @@
    }
 
    @Override
-   public Method<O> removeAnnotation(final Annotation<O> annotation)
+   public Method<O> removeAnnotation(final ReadAnnotation<O> annotation)
    {
       return annotations.removeAnnotation(this, method, annotation);
    }
@@ -278,7 +280,7 @@
    }
 
    @Override
-   public Method<O> setReturnType(final JavaSource<?> type)
+   public Method<O> setReturnType(final ReadJavaSource<?> type)
    {
       return setReturnType(type.getName());
    }
"
27ce7b8e3d218bfc2f32e3154454c1711ffec0a0,Matt Benson,ParameterImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/ParameterImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/ParameterImpl.java
index 5664287..9357763 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/ParameterImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/ParameterImpl.java
@@ -10,9 +10,10 @@
 
 import org.eclipse.jdt.core.dom.SimpleName;
 import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
-import org.jboss.forge.parser.java.Annotation;
-import org.jboss.forge.parser.java.JavaSource;
-import org.jboss.forge.parser.java.Parameter;
+import org.jboss.forge.parser.java.ReadAnnotation;
+import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
+import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
+import org.jboss.forge.parser.java.ReadParameter.Parameter;
 import org.jboss.forge.parser.java.Type;
 import org.jboss.forge.parser.java.ast.AnnotationAccessor;
 
@@ -115,7 +116,7 @@
    }
 
    @Override
-   public Parameter<O> removeAnnotation(final Annotation<O> annotation)
+   public Parameter<O> removeAnnotation(final ReadAnnotation<O> annotation)
    {
       return annotations.removeAnnotation(this, param, annotation);
    }
"
27ce7b8e3d218bfc2f32e3154454c1711ffec0a0,Matt Benson,Formatter.java,MODIFY,format -> [String source] | [ReadJavaClass javaClass],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/util/Formatter.java b/impl/src/main/java/org/jboss/forge/parser/java/util/Formatter.java
index 946f8cc..deb3bcd 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/util/Formatter.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/util/Formatter.java
@@ -17,14 +17,14 @@
 import org.eclipse.jface.text.Document;
 import org.eclipse.jface.text.IDocument;
 import org.eclipse.text.edits.TextEdit;
-import org.jboss.forge.parser.java.JavaClass;
+import org.jboss.forge.parser.java.ReadJavaClass;
 
 /**
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
 public abstract class Formatter
 {
-   public static String format(JavaClass javaClass)
+   public static String format(ReadJavaClass javaClass)
    {
       return format(javaClass.toString());
    }
"
27ce7b8e3d218bfc2f32e3154454c1711ffec0a0,Matt Benson,JavaParserImpl.java,MODIFY,parse -> [String data] | [InputStream data],"diff --git a/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java b/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
index a9a01be..32050a7 100644
--- a/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
@@ -26,12 +26,13 @@
 import org.eclipse.jdt.internal.compiler.util.Util;
 import org.eclipse.jface.text.Document;
 import org.jboss.forge.parser.ParserException;
-import org.jboss.forge.parser.java.JavaAnnotation;
-import org.jboss.forge.parser.java.JavaClass;
-import org.jboss.forge.parser.java.JavaEnum;
-import org.jboss.forge.parser.java.JavaInterface;
-import org.jboss.forge.parser.java.JavaPackageInfo;
-import org.jboss.forge.parser.java.JavaSource;
+import org.jboss.forge.parser.java.ReadJavaAnnotation.JavaAnnotation;
+import org.jboss.forge.parser.java.ReadJavaClass.JavaClass;
+import org.jboss.forge.parser.java.ReadJavaEnum.JavaEnum;
+import org.jboss.forge.parser.java.ReadJavaInterface.JavaInterface;
+import org.jboss.forge.parser.java.ReadJavaPackageInfo.JavaPackageInfo;
+import org.jboss.forge.parser.java.ReadJavaSource;
+import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
 import org.jboss.forge.parser.java.ast.TypeDeclarationFinderVisitor;
 import org.jboss.forge.parser.java.impl.JavaAnnotationImpl;
 import org.jboss.forge.parser.java.impl.JavaClassImpl;
@@ -46,7 +47,7 @@
 {
 
    @Override
-   public JavaSource<?> parse(final InputStream data)
+   public ReadJavaSource<?> parse(final InputStream data)
    {
       try
       {
@@ -64,7 +65,7 @@
    }
 
    @SuppressWarnings({ ""rawtypes"", ""unchecked"" })
-   private JavaSource<?> parse(final String data)
+   private ReadJavaSource<?> parse(final String data)
    {
       Document document = new Document(data);
       ASTParser parser = ASTParser.newParser(AST.JLS4);
@@ -97,8 +98,8 @@
    }
 
    /**
-    * Create a {@link JavaSource} instance from the given {@link Document}, {@link CompilationUnit},
-    * {@link TypeDeclaration}, and enclosing {@link JavaSource} type.
+    * Create a {@link ReadJavaSource} instance from the given {@link Document}, {@link CompilationUnit},
+    * {@link TypeDeclaration}, and enclosing {@link ReadJavaSource} type.
     */
    public static JavaSource<?> getJavaSource(JavaSource<?> enclosingType, Document document, CompilationUnit unit,
             ASTNode declaration)
@@ -140,22 +141,24 @@
    @SuppressWarnings(""unchecked"")
    public <T extends JavaSource<?>> T create(final Class<T> type)
    {
-      if (JavaClass.class.isAssignableFrom(type))
-         return (T) parse(""public class JavaClass { }"");
-
-      if (JavaEnum.class.isAssignableFrom(type))
-         return (T) parse(""public enum JavaEnum { }"");
-
-      if (JavaAnnotation.class.isAssignableFrom(type))
-         return (T) parse(""public @interface JavaAnnotation { }"");
-
-      if (JavaInterface.class.isAssignableFrom(type))
-         return (T) parse(""public interface JavaInterface { }"");
-
-      if (JavaPackageInfo.class.isAssignableFrom(type))
-         return (T) parse(""package org.example;"");
-
-      throw new ParserException(""Unknown JavaSource type ["" + type.getName() + ""]"");
+      if (type != null)
+      {
+         if (type.isAssignableFrom(JavaClass.class))
+            return (T) parse(""public class JavaClass { }"");
+   
+         if (type.isAssignableFrom(JavaEnum.class))
+            return (T) parse(""public enum JavaEnum { }"");
+   
+         if (type.isAssignableFrom(JavaAnnotation.class))
+            return (T) parse(""public @interface JavaAnnotation { }"");
+   
+         if (type.isAssignableFrom(JavaInterface.class))
+            return (T) parse(""public interface JavaInterface { }"");
+   
+         if (type.isAssignableFrom(JavaPackageInfo.class))
+            return (T) parse(""package org.example;"");
+      }
+      return null;
    }
 
 }
"
27ce7b8e3d218bfc2f32e3154454c1711ffec0a0,Matt Benson,MethodSignatureTest.java,MODIFY,"assertVisibility -> [String visibility, Method method] | [Visibility visibility, Method method]","diff --git a/impl/src/test/java/org/jboss/forge/test/parser/java/MethodSignatureTest.java b/impl/src/test/java/org/jboss/forge/test/parser/java/MethodSignatureTest.java
index b7e78eb..1c29cbf 100644
--- a/impl/src/test/java/org/jboss/forge/test/parser/java/MethodSignatureTest.java
+++ b/impl/src/test/java/org/jboss/forge/test/parser/java/MethodSignatureTest.java
@@ -11,9 +11,9 @@
 import java.util.List;
 
 import org.jboss.forge.parser.JavaParser;
-import org.jboss.forge.parser.java.JavaClass;
-import org.jboss.forge.parser.java.Method;
-import org.jboss.forge.parser.java.Parameter;
+import org.jboss.forge.parser.java.ReadJavaClass.JavaClass;
+import org.jboss.forge.parser.java.ReadMethod.Method;
+import org.jboss.forge.parser.java.ReadParameter.Parameter;
 import org.jboss.forge.parser.java.Visibility;
 import org.junit.Assert;
 import org.junit.Test;
"
b4d45df7825d5558864c6fa7fb196ed53e7968a6,Matt Benson,JavaParser.java,MODIFY,"parse -> [Class type, InputStream data] | [File file]","diff --git a/api/src/main/java/org/jboss/forge/parser/JavaParser.java b/api/src/main/java/org/jboss/forge/parser/JavaParser.java
index c221ea9..fe13c12 100644
--- a/api/src/main/java/org/jboss/forge/parser/JavaParser.java
+++ b/api/src/main/java/org/jboss/forge/parser/JavaParser.java
@@ -17,13 +17,12 @@
 import java.util.List;
 import java.util.ServiceLoader;
 
-import org.jboss.forge.parser.java.ReadJavaClass;
 import org.jboss.forge.parser.java.ReadJavaSource;
 import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
 import org.jboss.forge.parser.spi.JavaParserProvider;
 
 /**
- * Responsible for parsing data into new {@link ReadJavaClass} instances.
+ * Responsible for parsing data into new {@link ReadJavaSource} instances.
  * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
@@ -70,7 +69,7 @@
    }
 
    /**
-    * Open the given {@link File}, parsing its contents into a new {@link ReadJavaClass} instance.
+    * Open the given {@link File}, parsing its contents into a new {@link ReadJavaSource} instance.
     */
    public static ReadJavaSource<?> parse(final File file) throws FileNotFoundException
    {
@@ -86,7 +85,7 @@
    }
 
    /**
-    * Read the given {@link InputStream} and parse the data into a new {@link ReadJavaClass} instance.
+    * Read the given {@link InputStream} and parse the data into a new {@link ReadJavaSource} instance.
     */
    public static ReadJavaSource<?> parse(final InputStream data)
    {
@@ -94,7 +93,7 @@
    }
 
    /**
-    * Parse the given character array into a new {@link ReadJavaClass} instance.
+    * Parse the given character array into a new {@link ReadJavaSource} instance.
     */
    public static ReadJavaSource<?> parse(final char[] data)
    {
@@ -102,7 +101,7 @@
    }
 
    /**
-    * Parse the given String data into a new {@link ReadJavaClass} instance.
+    * Parse the given String data into a new {@link ReadJavaSource} instance.
     */
    public static ReadJavaSource<?> parse(final String data)
    {
"
ee07169748645ca28097992b31d96ee1d79a67b8,Matt Benson,Importer.java,MODIFY,addImport -> [JavaSource type] | [String className],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/Importer.java b/api/src/main/java/org/jboss/forge/parser/java/Importer.java
index 32e14bc..038ce35 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/Importer.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/Importer.java
@@ -13,7 +13,7 @@
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * 
  */
-public interface Importer<O extends JavaSource<?>>
+public interface Importer<O extends JavaSource<O>>
 {
    /**
     * Add an import by qualified class name. (E.g: ""com.example.Imported"") unless it is in the provided 'java.lang.*'
"
ee07169748645ca28097992b31d96ee1d79a67b8,Matt Benson,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
index cb29f0d..4ac1fec 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
@@ -436,8 +436,7 @@
    @Override
    public JavaPackageInfo setName(final String name)
    {
-      getPackageDeclaration().setName(unit.getAST().newSimpleName(name));
-      return this;
+      throw new UnsupportedOperationException(""Changing name of ["" + getQualifiedName() + ""] not supported."");
    }
 
    @Override
"
ee07169748645ca28097992b31d96ee1d79a67b8,Matt Benson,JavaParserImpl.java,MODIFY,parse -> [String data] | [File file],"diff --git a/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java b/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
index 128386a..5900cce 100644
--- a/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
@@ -35,6 +35,7 @@
 import org.jboss.forge.parser.java.JavaClass;
 import org.jboss.forge.parser.java.JavaEnum;
 import org.jboss.forge.parser.java.JavaInterface;
+import org.jboss.forge.parser.java.JavaPackageInfo;
 import org.jboss.forge.parser.java.JavaSource;
 import org.jboss.forge.parser.java.ast.TypeDeclarationFinderVisitor;
 import org.jboss.forge.parser.java.impl.JavaAnnotationImpl;
@@ -124,7 +125,6 @@
       else if (visitor.getPackageDeclaration() != null)
       {
          return getJavaSource(null, document, unit, visitor.getPackageDeclaration());
-
       }
       throw new ParserException(""Could not find type declaration in Java source - is this actually code?"");
    }
@@ -185,6 +185,9 @@
       if (JavaInterface.class.isAssignableFrom(type))
          return (T) parse(""public interface JavaInterface { }"");
 
+      if (JavaPackageInfo.class.isAssignableFrom(type))
+         return (T) parse(""package org.example;"");
+
       throw new ParserException(""Unknown JavaSource type ["" + type.getName() + ""]"");
    }
 
"
d0c4db2a1942880e9a5dcc64bc347cb6b44373de,Matt Benson,Importer.java,MODIFY,addImport -> [JavaSource type] | [String className],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/Importer.java b/api/src/main/java/org/jboss/forge/parser/java/Importer.java
index 32e14bc..038ce35 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/Importer.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/Importer.java
@@ -13,7 +13,7 @@
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * 
  */
-public interface Importer<O extends JavaSource<?>>
+public interface Importer<O extends JavaSource<O>>
 {
    /**
     * Add an import by qualified class name. (E.g: ""com.example.Imported"") unless it is in the provided 'java.lang.*'
"
d0c4db2a1942880e9a5dcc64bc347cb6b44373de,Matt Benson,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
index cb29f0d..4ac1fec 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
@@ -436,8 +436,7 @@
    @Override
    public JavaPackageInfo setName(final String name)
    {
-      getPackageDeclaration().setName(unit.getAST().newSimpleName(name));
-      return this;
+      throw new UnsupportedOperationException(""Changing name of ["" + getQualifiedName() + ""] not supported."");
    }
 
    @Override
"
d0c4db2a1942880e9a5dcc64bc347cb6b44373de,Matt Benson,JavaParserImpl.java,MODIFY,"parse -> [Class type, URL url] | [File file]","diff --git a/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java b/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
index 128386a..5900cce 100644
--- a/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
@@ -35,6 +35,7 @@
 import org.jboss.forge.parser.java.JavaClass;
 import org.jboss.forge.parser.java.JavaEnum;
 import org.jboss.forge.parser.java.JavaInterface;
+import org.jboss.forge.parser.java.JavaPackageInfo;
 import org.jboss.forge.parser.java.JavaSource;
 import org.jboss.forge.parser.java.ast.TypeDeclarationFinderVisitor;
 import org.jboss.forge.parser.java.impl.JavaAnnotationImpl;
@@ -124,7 +125,6 @@
       else if (visitor.getPackageDeclaration() != null)
       {
          return getJavaSource(null, document, unit, visitor.getPackageDeclaration());
-
       }
       throw new ParserException(""Could not find type declaration in Java source - is this actually code?"");
    }
@@ -185,6 +185,9 @@
       if (JavaInterface.class.isAssignableFrom(type))
          return (T) parse(""public interface JavaInterface { }"");
 
+      if (JavaPackageInfo.class.isAssignableFrom(type))
+         return (T) parse(""package org.example;"");
+
       throw new ParserException(""Unknown JavaSource type ["" + type.getName() + ""]"");
    }
 
"
9e68f61362d5577e3445ba91f3d0a1ec2ff51bb3,Matt Benson,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
index 1e0569e..759d8cd 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
@@ -32,8 +32,7 @@
 import org.jboss.forge.parser.ParserException;
 import org.jboss.forge.parser.java.ReadAnnotation;
 import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
-import org.jboss.forge.parser.java.ReadImport;
-import org.jboss.forge.parser.java.ReadImport.Import;
+import org.jboss.forge.parser.java.Import;
 import org.jboss.forge.parser.java.ReadInterfaceCapable.InterfaceCapable;
 import org.jboss.forge.parser.java.ReadJavaInterface;
 import org.jboss.forge.parser.java.ReadJavaSource;
@@ -160,7 +159,7 @@
    }
 
    @Override
-   public Import addImport(final ReadImport imprt)
+   public Import addImport(final Import imprt)
    {
       return addImport(imprt.getQualifiedName()).setStatic(imprt.isStatic());
    }
@@ -218,7 +217,7 @@
    }
 
    @Override
-   public Import getImport(final ReadImport imprt)
+   public Import getImport(final Import imprt)
    {
       return getImport(imprt.getQualifiedName());
    }
@@ -249,7 +248,7 @@
    }
 
    @Override
-   public boolean hasImport(final ReadImport imprt)
+   public boolean hasImport(final Import imprt)
    {
       return hasImport(imprt.getQualifiedName());
    }
@@ -330,7 +329,7 @@
 
          if (result.equals(original))
          {
-            for (ReadImport imprt : getImports())
+            for (Import imprt : getImports())
             {
                if (Types.areEquivalent(result, imprt.getQualifiedName()))
                {
@@ -344,7 +343,7 @@
       // If we didn't match any imports directly, we might have a wild-card/on-demand import.
       if (Types.isSimpleName(result))
       {
-         for (ReadImport imprt : getImports())
+         for (Import imprt : getImports())
          {
             if (imprt.isWildcard())
             {
@@ -396,7 +395,7 @@
    @Override
    public O removeImport(final String name)
    {
-      for (ReadImport i : getImports())
+      for (Import i : getImports())
       {
          if (i.getQualifiedName().equals(name))
          {
@@ -420,7 +419,7 @@
    }
 
    @Override
-   public O removeImport(final ReadImport imprt)
+   public O removeImport(final Import imprt)
    {
       Object internal = imprt.getInternal();
       if (unit.imports().contains(internal))
@@ -775,7 +774,7 @@
          String name = JDTHelper.getTypeName(type);
          if (Types.isSimpleName(name) && this.hasImport(name))
          {
-            ReadImport imprt = this.getImport(name);
+            Import imprt = this.getImport(name);
             String pkg = imprt.getPackage();
             if (!Strings.isNullOrEmpty(pkg))
             {
"
9e68f61362d5577e3445ba91f3d0a1ec2ff51bb3,Matt Benson,EnumConstantBodyImpl.java,MODIFY,addImport -> [ReadJavaSource type] | [String className],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java
index d9d722c..b58e2c8 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java
@@ -29,8 +29,7 @@
 import org.jboss.forge.parser.java.ReadEnumConstant.EnumConstant.Body;
 import org.jboss.forge.parser.java.ReadField;
 import org.jboss.forge.parser.java.ReadField.Field;
-import org.jboss.forge.parser.java.ReadImport;
-import org.jboss.forge.parser.java.ReadImport.Import;
+import org.jboss.forge.parser.java.Import;
 import org.jboss.forge.parser.java.ReadJavaClass.JavaClass;
 import org.jboss.forge.parser.java.ReadJavaEnum.JavaEnum;
 import org.jboss.forge.parser.java.ReadJavaSource;
@@ -179,7 +178,7 @@
    }
 
    @Override
-   public Import addImport(ReadImport imprt)
+   public Import addImport(Import imprt)
    {
       return javaEnum.addImport(imprt);
    }
@@ -221,7 +220,7 @@
    }
 
    @Override
-   public boolean hasImport(ReadImport imprt)
+   public boolean hasImport(Import imprt)
    {
       return javaEnum.hasImport(imprt);
    }
@@ -245,7 +244,7 @@
    }
 
    @Override
-   public Import getImport(ReadImport imprt)
+   public Import getImport(Import imprt)
    {
       return javaEnum.getImport(imprt);
    }
@@ -272,7 +271,7 @@
    }
 
    @Override
-   public Body removeImport(ReadImport imprt)
+   public Body removeImport(Import imprt)
    {
       javaEnum.removeImport(imprt);
       return this;
"
9e68f61362d5577e3445ba91f3d0a1ec2ff51bb3,Matt Benson,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
index 1205c62..e6964fb 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
@@ -17,8 +17,7 @@
 import org.jboss.forge.parser.ParserException;
 import org.jboss.forge.parser.java.ReadAnnotation;
 import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
-import org.jboss.forge.parser.java.ReadImport;
-import org.jboss.forge.parser.java.ReadImport.Import;
+import org.jboss.forge.parser.java.Import;
 import org.jboss.forge.parser.java.ReadJavaPackageInfo.JavaPackageInfo;
 import org.jboss.forge.parser.java.ReadJavaSource;
 import org.jboss.forge.parser.java.ReadMember.Member;
@@ -150,7 +149,7 @@
    }
 
    @Override
-   public Import addImport(final ReadImport imprt)
+   public Import addImport(final Import imprt)
    {
       return addImport(imprt.getQualifiedName()).setStatic(imprt.isStatic());
    }
@@ -209,7 +208,7 @@
    }
 
    @Override
-   public Import getImport(final ReadImport imprt)
+   public Import getImport(final Import imprt)
    {
       return getImport(imprt.getQualifiedName());
    }
@@ -241,7 +240,7 @@
    }
 
    @Override
-   public boolean hasImport(final ReadImport imprt)
+   public boolean hasImport(final Import imprt)
    {
       return hasImport(imprt.getQualifiedName());
    }
@@ -322,7 +321,7 @@
 
          if (result.equals(original))
          {
-            for (ReadImport imprt : getImports())
+            for (Import imprt : getImports())
             {
                if (Types.areEquivalent(result, imprt.getQualifiedName()))
                {
@@ -336,7 +335,7 @@
       // If we didn't match any imports directly, we might have a wild-card/on-demand import.
       if (Types.isSimpleName(result))
       {
-         for (ReadImport imprt : getImports())
+         for (Import imprt : getImports())
          {
             if (imprt.isWildcard())
             {
@@ -388,7 +387,7 @@
    @Override
    public JavaPackageInfo removeImport(final String name)
    {
-      for (ReadImport i : getImports())
+      for (Import i : getImports())
       {
          if (i.getQualifiedName().equals(name))
          {
@@ -412,7 +411,7 @@
    }
 
    @Override
-   public JavaPackageInfo removeImport(final ReadImport imprt)
+   public JavaPackageInfo removeImport(final Import imprt)
    {
       Object internal = imprt.getInternal();
       if (unit.imports().contains(internal))
"
240cf70244ad297715ca181e9aec7c1c5c118c36,Matt Benson,ReadAnnotation.java,MODIFY,"getEnumValue -> [Class type, String name] | [Class type]","diff --git a/api/src/main/java/org/jboss/forge/parser/java/ReadAnnotation.java b/api/src/main/java/org/jboss/forge/parser/java/ReadAnnotation.java
index ac00822..90bd40d 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/ReadAnnotation.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/ReadAnnotation.java
@@ -12,6 +12,8 @@
 import org.jboss.forge.parser.Origin;
 
 /**
+ * Represents an annotation on some Java element.
+ * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
 public interface ReadAnnotation<O extends ReadJavaSource<O>> extends Internal, Origin<O>
@@ -56,6 +58,11 @@
 
    Class<?>[] getClassArrayValue(String name);
 
+   /**
+    * Represents an annotation on some Java source element.
+    * 
+    * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
+    */
    public interface Annotation<O extends ReadJavaSource<O>> extends ReadAnnotation<O>
    {
 
"
240cf70244ad297715ca181e9aec7c1c5c118c36,Matt Benson,ReadAnnotationElement.java,MODIFY,isType -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/ReadAnnotationElement.java b/api/src/main/java/org/jboss/forge/parser/java/ReadAnnotationElement.java
index 5525755..7f468c3 100755
--- a/api/src/main/java/org/jboss/forge/parser/java/ReadAnnotationElement.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/ReadAnnotationElement.java
@@ -12,6 +12,8 @@
 import org.jboss.forge.parser.java.ReadJavaAnnotation.JavaAnnotation;
 
 /**
+ * Represents an element definition of a {@link ReadJavaAnnotation}.
+ * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * @author Matt Benson
  */
@@ -38,26 +40,6 @@
       Class<?>[] getClassArray();
    }
 
-   public interface DefaultValue extends ReadDefaultValue<JavaAnnotation>
-   {
-      Annotation<JavaAnnotation> getAnnotation();
-
-      DefaultValue setLiteral(String value);
-
-      DefaultValue setString(String value);
-
-      <T extends Enum<T>> DefaultValue setEnum(T value);
-
-      <T extends Enum<T>> DefaultValue setEnumArray(T... values);
-
-      Annotation<JavaAnnotation> setAnnotation();
-
-      DefaultValue setSingleClass(Class<?> value);
-
-      DefaultValue setClassArray(Class<?>... values);
-
-   }
-
    /**
     * Get this annotation element's type.
     */
@@ -89,6 +71,32 @@
             AnnotationTarget<JavaAnnotation, AnnotationElement>, Named<AnnotationElement>
    {
       /**
+       * Represents an element definition of a {@link JavaAnnotation}.
+       * 
+       * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
+       * @author Matt Benson
+       */
+      public interface DefaultValue extends ReadDefaultValue<JavaAnnotation>
+      {
+         Annotation<JavaAnnotation> getAnnotation();
+
+         DefaultValue setLiteral(String value);
+
+         DefaultValue setString(String value);
+
+         <T extends Enum<T>> DefaultValue setEnum(T value);
+
+         <T extends Enum<T>> DefaultValue setEnumArray(T... values);
+
+         Annotation<JavaAnnotation> setAnnotation();
+
+         DefaultValue setSingleClass(Class<?> value);
+
+         DefaultValue setClassArray(Class<?>... values);
+
+      }
+
+      /**
        * Set the type of this {@link ReadAnnotationElement} to the given {@link Class} type. Attempt to add an import
        * statement to this annotation element's base {@link O} if required.
        */
"
240cf70244ad297715ca181e9aec7c1c5c118c36,Matt Benson,ReadAnnotationTarget.java,MODIFY,hasAnnotation -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/ReadAnnotationTarget.java b/api/src/main/java/org/jboss/forge/parser/java/ReadAnnotationTarget.java
index b4d210e..2b804b8 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/ReadAnnotationTarget.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/ReadAnnotationTarget.java
@@ -15,6 +15,8 @@
 import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
 
 /**
+ * Represents a Java element that may carry annotations.
+ * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
 public interface ReadAnnotationTarget<O extends ReadJavaSource<O>> extends Internal, Origin<O>
@@ -29,6 +31,11 @@
 
    public ReadAnnotation<O> getAnnotation(final String type);
 
+   /**
+    * Represents a Java source element that may carry annotations.
+    * 
+    * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
+    */
    public interface AnnotationTarget<O extends JavaSource<O>, T> extends ReadAnnotationTarget<O>
    {
       public List<Annotation<O>> getAnnotations();
"
240cf70244ad297715ca181e9aec7c1c5c118c36,Matt Benson,ReadField.java,MODIFY,isType -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/ReadField.java b/api/src/main/java/org/jboss/forge/parser/java/ReadField.java
index 46b43ff..d5f096e 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/ReadField.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/ReadField.java
@@ -7,9 +7,12 @@
 
 package org.jboss.forge.parser.java;
 
+import org.jboss.forge.parser.java.ReadJavaClass.JavaClass;
 import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
 
 /**
+ * Represents a field of a {@link ReadJavaClass}, {@link ReadJavaInterface}, or {@link ReadJavaEnum}.
+ * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * 
  */
@@ -62,6 +65,12 @@
     */
    boolean isVolatile();
 
+   /**
+    * Represents a field of a {@link JavaClass}, {@link JavaInterface}, or {@link JavaEnum}.
+    * 
+    * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
+    * 
+    */
    public interface Field<O extends JavaSource<O>> extends ReadField<O>, Member<O, Field<O>>
    {
 
"
240cf70244ad297715ca181e9aec7c1c5c118c36,Matt Benson,ReadFieldHolder.java,MODIFY,hasField -> [ReadField field] | [String name],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/ReadFieldHolder.java b/api/src/main/java/org/jboss/forge/parser/java/ReadFieldHolder.java
index 058f559..91fe70e 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/ReadFieldHolder.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/ReadFieldHolder.java
@@ -13,6 +13,8 @@
 import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
 
 /**
+ * Represents a {@link ReadJavaSource} that may contain field definitions.
+ * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * 
  */
@@ -39,6 +41,12 @@
     */
    public List<? extends ReadField<O>> getFields();
 
+   /**
+    * Represents a {@link JavaSource} that may contain field definitions.
+    * 
+    * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
+    * 
+    */
    public interface FieldHolder<O extends JavaSource<O>> extends ReadFieldHolder<O>, MemberHolder<O>
    {
 
"
240cf70244ad297715ca181e9aec7c1c5c118c36,Matt Benson,ReadInterfaceCapable.java,MODIFY,hasInterface -> [ReadJavaInterface type] | [String type],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/ReadInterfaceCapable.java b/api/src/main/java/org/jboss/forge/parser/java/ReadInterfaceCapable.java
index c4de1fb..192a4fe 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/ReadInterfaceCapable.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/ReadInterfaceCapable.java
@@ -8,7 +8,11 @@
 
 import java.util.List;
 
+import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
+
 /**
+ * Represents a {@link ReadJavaSource} that may implement one or more interfaces.
+ * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * 
  */
@@ -22,7 +26,13 @@
 
    boolean hasInterface(ReadJavaInterface<?> type);
 
-   public interface InterfaceCapable<T extends ReadJavaSource<T>> extends ReadInterfaceCapable
+   /**
+    * Represents a {@link JavaSource} that may implement one or more interfaces.
+    * 
+    * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
+    * 
+    */
+   public interface InterfaceCapable<T extends JavaSource<T>> extends ReadInterfaceCapable
    {
       T addInterface(String type);
 
"
240cf70244ad297715ca181e9aec7c1c5c118c36,Matt Benson,ReadJavaAnnotation.java,MODIFY,hasAnnotationElement -> [ReadAnnotationElement annotationElement] | [String name],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/ReadJavaAnnotation.java b/api/src/main/java/org/jboss/forge/parser/java/ReadJavaAnnotation.java
index d4f252d..42959a9 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/ReadJavaAnnotation.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/ReadJavaAnnotation.java
@@ -7,15 +7,14 @@
 
 package org.jboss.forge.parser.java;
 
-import java.lang.annotation.Annotation;
 import java.util.List;
 
 import org.jboss.forge.parser.JavaParser;
 import org.jboss.forge.parser.java.ReadAnnotationElement.AnnotationElement;
 
 /**
- * Represents a Java {@link Annotation} source file as an in-memory modifiable element. See {@link JavaParser} for
- * various options in generating {@link ReadJavaAnnotation} instances.
+ * Represents a Java {@code @interface} annotation type. See {@link JavaParser} for various options in generating
+ * {@link ReadJavaAnnotation} instances.
  * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
@@ -44,6 +43,12 @@
     */
    public List<? extends ReadAnnotationElement<O>> getAnnotationElements();
 
+   /**
+    * Represents a Java {@code @interface} annotation source file as an in-memory modifiable element. See
+    * {@link JavaParser} for various options in generating {@link JavaAnnotation} instances.
+    * 
+    * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
+    */
    public interface JavaAnnotation extends ReadJavaAnnotation<JavaAnnotation>, JavaSource<JavaAnnotation>
    {
       /**
"
240cf70244ad297715ca181e9aec7c1c5c118c36,Matt Benson,ReadMethodHolder.java,MODIFY,"hasMethodSignature -> [String name, Class paramTypes] | [ReadMethod method]","diff --git a/api/src/main/java/org/jboss/forge/parser/java/ReadMethodHolder.java b/api/src/main/java/org/jboss/forge/parser/java/ReadMethodHolder.java
index cdf580b..ad6945e 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/ReadMethodHolder.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/ReadMethodHolder.java
@@ -13,6 +13,8 @@
 import org.jboss.forge.parser.java.ReadMethod.Method;
 
 /**
+ * Represents a {@link ReadJavaSource} that may declare methods.
+ * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * 
  */
@@ -64,6 +66,12 @@
     */
    public List<? extends ReadMethod<O, ?>> getMethods();
 
+   /**
+    * Represents a {@link JavaSource} that may declare methods.
+    * 
+    * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
+    * 
+    */
    public interface MethodHolder<O extends JavaSource<O>> extends ReadMethodHolder<O>, MemberHolder<O>
    {
 
"
d3f0b23a7e02b80bb6994b17c96efc99f66d75e1,Matt Benson,JavaParser.java,MODIFY,"parse -> [Class type, InputStream data] | [File file]","diff --git a/api/src/main/java/org/jboss/forge/parser/JavaParser.java b/api/src/main/java/org/jboss/forge/parser/JavaParser.java
index fe13c12..e81f217 100644
--- a/api/src/main/java/org/jboss/forge/parser/JavaParser.java
+++ b/api/src/main/java/org/jboss/forge/parser/JavaParser.java
@@ -17,12 +17,12 @@
 import java.util.List;
 import java.util.ServiceLoader;
 
-import org.jboss.forge.parser.java.ReadJavaSource;
-import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
+import org.jboss.forge.parser.java.JavaType;
+import org.jboss.forge.parser.java.source.JavaSource;
 import org.jboss.forge.parser.spi.JavaParserProvider;
 
 /**
- * Responsible for parsing data into new {@link ReadJavaSource} instances.
+ * Responsible for parsing data into new {@link JavaType} instances.
  * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
@@ -69,90 +69,90 @@
    }
 
    /**
-    * Open the given {@link File}, parsing its contents into a new {@link ReadJavaSource} instance.
+    * Open the given {@link File}, parsing its contents into a new {@link JavaType} instance.
     */
-   public static ReadJavaSource<?> parse(final File file) throws FileNotFoundException
+   public static JavaType<?> parse(final File file) throws FileNotFoundException
    {
-      return parse(ReadJavaSource.class, file);
+      return parse(JavaType.class, file);
    }
 
    /**
-    * Parse the given {@link URL} data into a new {@link ReadJavaSource} instance.
+    * Parse the given {@link URL} data into a new {@link JavaType} instance.
     */
-   public static ReadJavaSource<?> parse(final URL data) throws IOException
+   public static JavaType<?> parse(final URL data) throws IOException
    {
-      return parse(ReadJavaSource.class, data);
+      return parse(JavaType.class, data);
    }
 
    /**
-    * Read the given {@link InputStream} and parse the data into a new {@link ReadJavaSource} instance.
+    * Read the given {@link InputStream} and parse the data into a new {@link JavaType} instance.
     */
-   public static ReadJavaSource<?> parse(final InputStream data)
+   public static JavaType<?> parse(final InputStream data)
    {
-      return parse(ReadJavaSource.class, data);
+      return parse(JavaType.class, data);
    }
 
    /**
-    * Parse the given character array into a new {@link ReadJavaSource} instance.
+    * Parse the given character array into a new {@link JavaType} instance.
     */
-   public static ReadJavaSource<?> parse(final char[] data)
+   public static JavaType<?> parse(final char[] data)
    {
-      return parse(ReadJavaSource.class, data);
+      return parse(JavaType.class, data);
    }
 
    /**
-    * Parse the given String data into a new {@link ReadJavaSource} instance.
+    * Parse the given String data into a new {@link JavaType} instance.
     */
-   public static ReadJavaSource<?> parse(final String data)
+   public static JavaType<?> parse(final String data)
    {
-      return parse(ReadJavaSource.class, data);
+      return parse(JavaType.class, data);
    }
 
    /**
-    * Read the given {@link URL} and parse its data into a new {@link ReadJavaSource} instance of the given type.
+    * Read the given {@link URL} and parse its data into a new {@link JavaType} instance of the given type.
     * 
     * @throws FileNotFoundException
     */
-   public static <T extends ReadJavaSource<?>> T parse(final Class<T> type, final URL url) throws IOException
+   public static <T extends JavaType<?>> T parse(final Class<T> type, final URL url) throws IOException
    {
       return internalParse(type, url.openStream());
    }
 
    /**
-    * Read the given {@link File} and parse its data into a new {@link ReadJavaSource} instance of the given type.
+    * Read the given {@link File} and parse its data into a new {@link JavaType} instance of the given type.
     * 
     * @throws FileNotFoundException
     */
-   public static <T extends ReadJavaSource<?>> T parse(final Class<T> type, final File file) throws FileNotFoundException
+   public static <T extends JavaType<?>> T parse(final Class<T> type, final File file) throws FileNotFoundException
    {
       return internalParse(type, new FileInputStream(file));
    }
 
    /**
-    * Read the given character array and parse its data into a new {@link ReadJavaSource} instance of the given type.
+    * Read the given character array and parse its data into a new {@link JavaType} instance of the given type.
     */
-   public static <T extends ReadJavaSource<?>> T parse(final Class<T> type, final char[] data)
+   public static <T extends JavaType<?>> T parse(final Class<T> type, final char[] data)
    {
       return parse(type, new String(data));
    }
 
    /**
-    * Read the given string and parse its data into a new {@link ReadJavaSource} instance of the given type.
+    * Read the given string and parse its data into a new {@link JavaType} instance of the given type.
     */
-   public static <T extends ReadJavaSource<?>> T parse(final Class<T> type, final String data)
+   public static <T extends JavaType<?>> T parse(final Class<T> type, final String data)
    {
       return parse(type, Streams.fromString(data));
    }
 
    /**
-    * Read the given {@link InputStream} and parse its data into a new {@link ReadJavaSource} instance of the given type.
+    * Read the given {@link InputStream} and parse its data into a new {@link JavaType} instance of the given type.
     * The caller is responsible for closing the stream.
     */
-   public static <T extends ReadJavaSource<?>> T parse(final Class<T> type, final InputStream data)
+   public static <T extends JavaType<?>> T parse(final Class<T> type, final InputStream data)
    {
       for (JavaParserProvider parser : getParsers())
       {
-         final ReadJavaSource<?> source = parser.parse(data);
+         final JavaType<?> source = parser.parse(data);
 
          if (type.isInstance(source))
          {
@@ -169,7 +169,7 @@
       throw new ParserException(""Cannot find JavaParserProvider capable of parsing the requested data"");
    }
 
-   private static <T extends ReadJavaSource<?>> T internalParse(final Class<T> type, final InputStream data)
+   private static <T extends JavaType<?>> T internalParse(final Class<T> type, final InputStream data)
    {
       try
       {
"
d3f0b23a7e02b80bb6994b17c96efc99f66d75e1,Matt Benson,Visibility.java,MODIFY,getFrom -> [ReadVisibilityScoped target] | [VisibilityScoped target],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/Visibility.java b/api/src/main/java/org/jboss/forge/parser/java/Visibility.java
index d3b4401..943701e 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/Visibility.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/Visibility.java
@@ -7,7 +7,7 @@
 
 package org.jboss.forge.parser.java;
 
-import org.jboss.forge.parser.java.ReadVisibilityScoped.VisibilityScoped;
+import org.jboss.forge.parser.java.source.VisibilityScopedSource;
 import org.jboss.forge.parser.java.util.Assert;
 
 /**
@@ -36,7 +36,7 @@
       return scope;
    }
 
-   public static Visibility getFrom(ReadVisibilityScoped target)
+   public static Visibility getFrom(VisibilityScoped target)
    {
       Assert.notNull(target, ""VisibilityScoped<T> target must not be null."");
 
@@ -51,7 +51,7 @@
 
       else
       {
-         throw new IllegalStateException(ReadVisibilityScoped.class.getSimpleName()
+         throw new IllegalStateException(VisibilityScoped.class.getSimpleName()
                   + "" target does not comply with visibility scoping. Must be one of "" + Visibility.values() + ""[ ""
                   + target + ""]"");
       }
@@ -63,7 +63,7 @@
       return scope;
    }
 
-   public static <T extends VisibilityScoped<?>> T set(T target, Visibility scope)
+   public static <T extends VisibilityScopedSource<?>> T set(T target, Visibility scope)
    {
       Assert.notNull(target, ""VisibilityScoped<T> target must not be null."");
       Assert.notNull(scope, ""Visibility scope must not be null"");
"
d3f0b23a7e02b80bb6994b17c96efc99f66d75e1,Matt Benson,Refactory.java,MODIFY,"createGetterAndSetter -> [JavaClass clazz, Field field] | [JavaClassSource clazz, FieldSource field]","diff --git a/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java b/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java
index 58bf075..80d77ae 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java
@@ -10,12 +10,12 @@
 import java.util.Arrays;
 import java.util.List;
 
-import org.jboss.forge.parser.java.ReadField.Field;
-import org.jboss.forge.parser.java.ReadJavaClass.JavaClass;
-import org.jboss.forge.parser.java.ReadMethod.Method;
+import org.jboss.forge.parser.java.source.FieldSource;
+import org.jboss.forge.parser.java.source.JavaClassSource;
+import org.jboss.forge.parser.java.source.MethodSource;
 
 /**
- * Utility refactory methods for {@link JavaClass} objects
+ * Utility refactory methods for {@link JavaClassSource} objects
  * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * @author <a href=""mailto:ggastald@redhat.com"">George Gastaldi</a>
@@ -29,7 +29,7 @@
     * @param clazz
     * @param field
     */
-   public static void createGetterAndSetter(final JavaClass clazz, final Field<JavaClass> field)
+   public static void createGetterAndSetter(final JavaClassSource clazz, final FieldSource<JavaClassSource> field)
    {
       if (!clazz.hasField(field))
       {
@@ -55,11 +55,11 @@
    /**
     * Create a <i>hashCode</i> and <i>equals</i> implementation for the given class and fields
     * 
-    * @deprecated Use {@link Refactory#createHashCodeAndEquals(JavaClass, Field...)} instead, since this method relies
+    * @deprecated Use {@link Refactory#createHashCodeAndEquals(JavaClass, Field<O>...)} instead, since this method relies
     *             on the existence of the id field
     */
    @Deprecated
-   public static void createHashCodeAndEquals(final JavaClass clazz)
+   public static void createHashCodeAndEquals(final JavaClassSource clazz)
    {
       clazz.addMethod(
                ""public boolean equals(Object that) { "" +
@@ -91,7 +91,7 @@
     * @param clazz class to be changed
     * @param fields fields to be used in the equals/hashCode methods
     */
-   public static void createHashCodeAndEquals(final JavaClass clazz, final Field<?>... fields)
+   public static void createHashCodeAndEquals(final JavaClassSource clazz, final FieldSource<?>... fields)
    {
       if (clazz == null)
       {
@@ -113,7 +113,7 @@
       boolean isTempFieldCreated = false;
       StringBuilder fieldEqualityChecks = new StringBuilder();
       StringBuilder hashCodeComputation = new StringBuilder();
-      for (Field<?> field : fields)
+      for (FieldSource<?> field : fields)
       {
          if(field == null)
          {
@@ -265,9 +265,9 @@
     * 
     * @param clazz
     */
-   public static void createToStringFromFields(final JavaClass clazz)
+   public static void createToStringFromFields(final JavaClassSource clazz)
    {
-      List<Field<JavaClass>> fields = clazz.getFields();
+      List<FieldSource<JavaClassSource>> fields = clazz.getFields();
       createToStringFromFields(clazz, fields);
    }
 
@@ -277,7 +277,7 @@
     * @param clazz
     * @param fields
     */
-   public static void createToStringFromFields(final JavaClass clazz, final Field<JavaClass>... fields)
+   public static void createToStringFromFields(final JavaClassSource clazz, final FieldSource<JavaClassSource>... fields)
    {
       createToStringFromFields(clazz, Arrays.asList(fields));
    }
@@ -288,16 +288,16 @@
     * @param clazz
     * @param fields
     */
-   public static void createToStringFromFields(final JavaClass clazz, final List<Field<JavaClass>> fields)
+   public static void createToStringFromFields(final JavaClassSource clazz, final List<FieldSource<JavaClassSource>> fields)
    {
-      Method<JavaClass> method = clazz.addMethod().setName(""toString"").setReturnType(String.class)
+      MethodSource<JavaClassSource> method = clazz.addMethod().setName(""toString"").setReturnType(String.class)
                .setPublic();
       method.addAnnotation(Override.class);
 
       List<String> list = new ArrayList<String>();
 
       String delimeter = ""\n"";
-      for (Field<JavaClass> field : fields)
+      for (FieldSource<JavaClassSource> field : fields)
       {
          if (clazz.hasField(field))
          {
"
d3f0b23a7e02b80bb6994b17c96efc99f66d75e1,Matt Benson,WildcardImportResolver.java,MODIFY,"resolve -> [ReadJavaSource source, String type] | [JavaType source, String type]","diff --git a/api/src/main/java/org/jboss/forge/parser/spi/WildcardImportResolver.java b/api/src/main/java/org/jboss/forge/parser/spi/WildcardImportResolver.java
index 40f5790..ad2b86c 100644
--- a/api/src/main/java/org/jboss/forge/parser/spi/WildcardImportResolver.java
+++ b/api/src/main/java/org/jboss/forge/parser/spi/WildcardImportResolver.java
@@ -6,7 +6,7 @@
  */
 package org.jboss.forge.parser.spi;
 
-import org.jboss.forge.parser.java.ReadJavaSource;
+import org.jboss.forge.parser.java.JavaType;
 
 /**
  * Responsible for providing additional import resolution functionality for situations where classes have referenced a
@@ -17,5 +17,5 @@
  */
 public interface WildcardImportResolver
 {
-   public String resolve(ReadJavaSource<?> source, String type);
+   public String resolve(JavaType<?> source, String type);
 }
"
d3f0b23a7e02b80bb6994b17c96efc99f66d75e1,Matt Benson,AnnotationAccessor.java,MODIFY,"addAnnotation -> [AnnotationTarget target, List modifiers, String className] | [AnnotationTargetSource target, ASTNode body]","diff --git a/impl/src/main/java/org/jboss/forge/parser/java/ast/AnnotationAccessor.java b/impl/src/main/java/org/jboss/forge/parser/java/ast/AnnotationAccessor.java
index 675bb6b..3def7e9 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/ast/AnnotationAccessor.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/ast/AnnotationAccessor.java
@@ -17,11 +17,11 @@
 import org.eclipse.jdt.core.dom.IExtendedModifier;
 import org.eclipse.jdt.core.dom.PackageDeclaration;
 import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
-import org.jboss.forge.parser.java.ReadAnnotation;
-import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
-import org.jboss.forge.parser.java.ReadAnnotationTarget.AnnotationTarget;
-import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
+import org.jboss.forge.parser.java.Annotation;
 import org.jboss.forge.parser.java.impl.AnnotationImpl;
+import org.jboss.forge.parser.java.source.AnnotationSource;
+import org.jboss.forge.parser.java.source.AnnotationTargetSource;
+import org.jboss.forge.parser.java.source.JavaSource;
 import org.jboss.forge.parser.java.util.Types;
 
 /**
@@ -30,18 +30,18 @@
 public class AnnotationAccessor<O extends JavaSource<O>, T>
 {
 
-   public Annotation<O> addAnnotation(final AnnotationTarget<O, T> target, final ASTNode body)
+   public AnnotationSource<O> addAnnotation(final AnnotationTargetSource<O, T> target, final ASTNode body)
    {
       return addAnnotation(target, getModifiers(body));
    }
 
-   public Annotation<O> addAnnotation(final AnnotationTarget<O, T> target,
+   public AnnotationSource<O> addAnnotation(final AnnotationTargetSource<O, T> target,
             final SingleVariableDeclaration variableDeclaration)
    {
       return addAnnotation(target, variableDeclaration.modifiers());
    }
 
-   private Annotation<O> addAnnotation(final AnnotationTarget<O, T> target, final List<?> modifiers)
+   private AnnotationSource<O> addAnnotation(final AnnotationTargetSource<O, T> target, final List<?> modifiers)
    {
       @SuppressWarnings(""unchecked"")
       ListIterator<IExtendedModifier> iter = (ListIterator<IExtendedModifier>) modifiers.listIterator();
@@ -53,38 +53,38 @@
       {
          iter.next();
       }
-      Annotation<O> annotation = new AnnotationImpl<O, T>(target);
+      AnnotationSource<O> annotation = new AnnotationImpl<O, T>(target);
       iter.add((IExtendedModifier) annotation.getInternal());
       return annotation;
    }
 
-   public Annotation<O> addAnnotation(final AnnotationTarget<O, T> target, final ASTNode body,
+   public AnnotationSource<O> addAnnotation(final AnnotationTargetSource<O, T> target, final ASTNode body,
             final Class<?> clazz)
    {
       return addAnnotation(target, getModifiers(body), clazz.getName());
    }
 
-   public Annotation<O> addAnnotation(final AnnotationTarget<O, T> target,
+   public AnnotationSource<O> addAnnotation(final AnnotationTargetSource<O, T> target,
             final SingleVariableDeclaration variableDeclaration,
             final Class<?> clazz)
    {
       return addAnnotation(target, variableDeclaration.modifiers(), clazz.getName());
    }
 
-   public Annotation<O> addAnnotation(final AnnotationTarget<O, T> target, final ASTNode body,
+   public AnnotationSource<O> addAnnotation(final AnnotationTargetSource<O, T> target, final ASTNode body,
             final String className)
    {
       return addAnnotation(target, getModifiers(body), className);
    }
 
-   public Annotation<O> addAnnotation(final AnnotationTarget<O, T> target,
+   public AnnotationSource<O> addAnnotation(final AnnotationTargetSource<O, T> target,
             final SingleVariableDeclaration variableDeclaration,
             final String className)
    {
       return addAnnotation(target, variableDeclaration.modifiers(), className);
    }
 
-   private Annotation<O> addAnnotation(final AnnotationTarget<O, T> target, final List<?> modifiers,
+   private AnnotationSource<O> addAnnotation(final AnnotationTargetSource<O, T> target, final List<?> modifiers,
             final String className)
    {
       if (!target.getOrigin().hasImport(className) && Types.isQualified(className))
@@ -94,26 +94,26 @@
       return addAnnotation(target, modifiers).setName(Types.toSimpleName(className));
    }
 
-   public List<Annotation<O>> getAnnotations(final AnnotationTarget<O, T> target, final ASTNode body)
+   public List<AnnotationSource<O>> getAnnotations(final AnnotationTargetSource<O, T> target, final ASTNode body)
    {
       return getAnnotations(target, getModifiers(body));
    }
 
-   public List<Annotation<O>> getAnnotations(final AnnotationTarget<O, T> target,
+   public List<AnnotationSource<O>> getAnnotations(final AnnotationTargetSource<O, T> target,
             final SingleVariableDeclaration variableDeclaration)
    {
       return getAnnotations(target, variableDeclaration.modifiers());
    }
 
-   private List<Annotation<O>> getAnnotations(final AnnotationTarget<O, T> target, final List<?> modifiers)
+   private List<AnnotationSource<O>> getAnnotations(final AnnotationTargetSource<O, T> target, final List<?> modifiers)
    {
-      List<Annotation<O>> result = new ArrayList<Annotation<O>>();
+      List<AnnotationSource<O>> result = new ArrayList<AnnotationSource<O>>();
 
       for (Object object : modifiers)
       {
          if (object instanceof org.eclipse.jdt.core.dom.Annotation)
          {
-            Annotation<O> annotation = new AnnotationImpl<O, T>(target, object);
+            AnnotationSource<O> annotation = new AnnotationImpl<O, T>(target, object);
             result.add(annotation);
          }
       }
@@ -121,21 +121,21 @@
       return Collections.unmodifiableList(result);
    }
 
-   public <E extends AnnotationTarget<O, T>> E removeAnnotation(final E target, final ASTNode body,
-            final ReadAnnotation<O> annotation)
+   public <E extends AnnotationTargetSource<O, T>> E removeAnnotation(final E target, final ASTNode body,
+            final Annotation<O> annotation)
    {
       return removeAnnotation(target, getModifiers(body), annotation);
    }
 
-   public <E extends AnnotationTarget<O, T>> E removeAnnotation(final E target,
+   public <E extends AnnotationTargetSource<O, T>> E removeAnnotation(final E target,
             final SingleVariableDeclaration variableDeclaration,
-            final ReadAnnotation<O> annotation)
+            final Annotation<O> annotation)
    {
       return removeAnnotation(target, variableDeclaration.modifiers(), annotation);
    }
 
-   private <E extends AnnotationTarget<O, T>> E removeAnnotation(final E target, final List<?> modifiers,
-            final ReadAnnotation<O> annotation)
+   private <E extends AnnotationTargetSource<O, T>> E removeAnnotation(final E target, final List<?> modifiers,
+            final Annotation<O> annotation)
    {
       for (Object object : modifiers)
       {
@@ -148,27 +148,27 @@
       return target;
    }
 
-   public <E extends AnnotationTarget<O, T>> boolean hasAnnotation(final E target, final ASTNode body,
+   public <E extends AnnotationTargetSource<O, T>> boolean hasAnnotation(final E target, final ASTNode body,
             final String type)
    {
       return hasAnnotation(target, getModifiers(body), type);
    }
 
-   public <E extends AnnotationTarget<O, T>> boolean hasAnnotation(final E target,
+   public <E extends AnnotationTargetSource<O, T>> boolean hasAnnotation(final E target,
             final SingleVariableDeclaration variableDeclaration,
             final String type)
    {
       return hasAnnotation(target, variableDeclaration.modifiers(), type);
    }
 
-   private <E extends AnnotationTarget<O, T>> boolean hasAnnotation(final E target, final List<?> modifiers,
+   private <E extends AnnotationTargetSource<O, T>> boolean hasAnnotation(final E target, final List<?> modifiers,
             final String type)
    {
       for (Object object : modifiers)
       {
          if (object instanceof org.eclipse.jdt.core.dom.Annotation)
          {
-            Annotation<O> annotation = new AnnotationImpl<O, T>(target, object);
+            AnnotationSource<O> annotation = new AnnotationImpl<O, T>(target, object);
             String annotationType = annotation.getName();
             if (Types.areEquivalent(type, annotationType))
             {
@@ -179,34 +179,34 @@
       return false;
    }
 
-   public Annotation<O> getAnnotation(final AnnotationTarget<O, T> target, final ASTNode body,
+   public AnnotationSource<O> getAnnotation(final AnnotationTargetSource<O, T> target, final ASTNode body,
             final Class<? extends java.lang.annotation.Annotation> type)
    {
       return getAnnotation(target, getModifiers(body), type.getName());
    }
 
-   public Annotation<O> getAnnotation(final AnnotationTarget<O, T> target,
+   public AnnotationSource<O> getAnnotation(final AnnotationTargetSource<O, T> target,
             final SingleVariableDeclaration variableDeclaration,
             final Class<? extends java.lang.annotation.Annotation> type)
    {
       return getAnnotation(target, variableDeclaration.modifiers(), type.getName());
    }
 
-   public Annotation<O> getAnnotation(final AnnotationTarget<O, T> target, final ASTNode body, final String type)
+   public AnnotationSource<O> getAnnotation(final AnnotationTargetSource<O, T> target, final ASTNode body, final String type)
    {
       return getAnnotation(target, getModifiers(body), type);
    }
 
-   public Annotation<O> getAnnotation(final AnnotationTarget<O, T> target,
+   public AnnotationSource<O> getAnnotation(final AnnotationTargetSource<O, T> target,
             final SingleVariableDeclaration variableDeclaration, final String type)
    {
       return getAnnotation(target, variableDeclaration.modifiers(), type);
    }
 
-   private Annotation<O> getAnnotation(final AnnotationTarget<O, T> target, final List<?> modifiers, final String type)
+   private AnnotationSource<O> getAnnotation(final AnnotationTargetSource<O, T> target, final List<?> modifiers, final String type)
    {
-      List<Annotation<O>> annotations = getAnnotations(target, modifiers);
-      for (Annotation<O> annotation : annotations)
+      List<AnnotationSource<O>> annotations = getAnnotations(target, modifiers);
+      for (AnnotationSource<O> annotation : annotations)
       {
          if (Types.areEquivalent(type, annotation.getName()))
          {
"
d3f0b23a7e02b80bb6994b17c96efc99f66d75e1,Matt Benson,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
index 759d8cd..16251aa 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
@@ -30,19 +30,19 @@
 import org.eclipse.text.edits.TextEdit;
 import org.jboss.forge.parser.JavaParser;
 import org.jboss.forge.parser.ParserException;
-import org.jboss.forge.parser.java.ReadAnnotation;
-import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
-import org.jboss.forge.parser.java.Import;
-import org.jboss.forge.parser.java.ReadInterfaceCapable.InterfaceCapable;
-import org.jboss.forge.parser.java.ReadJavaInterface;
-import org.jboss.forge.parser.java.ReadJavaSource;
-import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
-import org.jboss.forge.parser.java.ReadMember.Member;
+import org.jboss.forge.parser.java.Annotation;
+import org.jboss.forge.parser.java.JavaInterface;
+import org.jboss.forge.parser.java.JavaType;
 import org.jboss.forge.parser.java.SyntaxError;
 import org.jboss.forge.parser.java.Visibility;
 import org.jboss.forge.parser.java.ast.AnnotationAccessor;
 import org.jboss.forge.parser.java.ast.ModifierAccessor;
 import org.jboss.forge.parser.java.ast.TypeDeclarationFinderVisitor;
+import org.jboss.forge.parser.java.source.AnnotationSource;
+import org.jboss.forge.parser.java.source.Import;
+import org.jboss.forge.parser.java.source.InterfaceCapableSource;
+import org.jboss.forge.parser.java.source.JavaSource;
+import org.jboss.forge.parser.java.source.MemberSource;
 import org.jboss.forge.parser.java.util.Formatter;
 import org.jboss.forge.parser.java.util.Strings;
 import org.jboss.forge.parser.java.util.Types;
@@ -51,12 +51,12 @@
 
 /**
  * Represents a Java Source File
- *
+ * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
 @SuppressWarnings(""unchecked"")
 public abstract class AbstractJavaSource<O extends JavaSource<O>> implements
-         JavaSource<O>, InterfaceCapable<O>
+         JavaSource<O>, InterfaceCapableSource<O>
 {
    private final AnnotationAccessor<O, O> annotations = new AnnotationAccessor<O, O>();
    private final ModifierAccessor modifiers = new ModifierAccessor();
@@ -88,25 +88,25 @@
     * Annotation modifiers
     */
    @Override
-   public Annotation<O> addAnnotation()
+   public AnnotationSource<O> addAnnotation()
    {
       return annotations.addAnnotation(this, getBodyDeclaration());
    }
 
    @Override
-   public Annotation<O> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
+   public AnnotationSource<O> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
    {
       return annotations.addAnnotation(this, getBodyDeclaration(), clazz.getName());
    }
 
    @Override
-   public Annotation<O> addAnnotation(final String className)
+   public AnnotationSource<O> addAnnotation(final String className)
    {
       return annotations.addAnnotation(this, getBodyDeclaration(), className);
    }
 
    @Override
-   public List<Annotation<O>> getAnnotations()
+   public List<AnnotationSource<O>> getAnnotations()
    {
       return annotations.getAnnotations(this, getBodyDeclaration());
    }
@@ -124,19 +124,19 @@
    }
 
    @Override
-   public O removeAnnotation(final ReadAnnotation<O> annotation)
+   public O removeAnnotation(final Annotation<O> annotation)
    {
       return (O) annotations.removeAnnotation(this, getBodyDeclaration(), annotation);
    }
 
    @Override
-   public Annotation<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
+   public AnnotationSource<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
    {
       return annotations.getAnnotation(this, getBodyDeclaration(), type);
    }
 
    @Override
-   public Annotation<O> getAnnotation(final String type)
+   public AnnotationSource<O> getAnnotation(final String type)
    {
       return annotations.getAnnotation(this, getBodyDeclaration(), type);
    }
@@ -152,7 +152,7 @@
    }
 
    @Override
-   public <T extends ReadJavaSource<?>> Import addImport(final T type)
+   public <T extends JavaType<?>> Import addImport(final T type)
    {
       String qualifiedName = type.getQualifiedName();
       return this.addImport(qualifiedName);
@@ -211,7 +211,7 @@
    }
 
    @Override
-   public <T extends ReadJavaSource<?>> Import getImport(final T type)
+   public <T extends JavaType<?>> Import getImport(final T type)
    {
       return getImport(type.getQualifiedName());
    }
@@ -242,7 +242,7 @@
    }
 
    @Override
-   public <T extends ReadJavaSource<T>> boolean hasImport(final T type)
+   public <T extends JavaType<T>> boolean hasImport(final T type)
    {
       return hasImport(type.getQualifiedName());
    }
@@ -413,7 +413,7 @@
    }
 
    @Override
-   public <T extends ReadJavaSource<?>> O removeImport(final T type)
+   public <T extends JavaType<?>> O removeImport(final T type)
    {
       return removeImport(type.getQualifiedName());
    }
@@ -430,9 +430,9 @@
    }
 
    @Override
-   public List<Member<O, ?>> getMembers()
+   public List<MemberSource<O, ?>> getMembers()
    {
-      List<Member<O, ?>> result = new ArrayList<Member<O, ?>>();
+      List<MemberSource<O, ?>> result = new ArrayList<MemberSource<O, ?>>();
 
       return result;
    }
@@ -465,7 +465,7 @@
    {
       String result = getName();
 
-      ReadJavaSource<?> enclosingType = this;
+      JavaType<?> enclosingType = this;
       while (enclosingType != enclosingType.getEnclosingType())
       {
          enclosingType = getEnclosingType();
@@ -489,7 +489,7 @@
    {
       String result = getName();
 
-      ReadJavaSource<?> enclosingType = this;
+      JavaType<?> enclosingType = this;
       while (enclosingType != enclosingType.getEnclosingType())
       {
          enclosingType = getEnclosingType();
@@ -618,7 +618,7 @@
     * Non-manipulation methods.
     */
    /**
-    * Return this {@link ReadJavaSource} file as a String
+    * Return this {@link JavaType} file as a String
     */
    @Override
    public String toString()
@@ -817,7 +817,7 @@
    }
 
    @Override
-   public O addInterface(final ReadJavaInterface<?> type)
+   public O addInterface(final JavaInterface<?> type)
    {
       return addInterface(type.getQualifiedName());
    }
@@ -842,7 +842,7 @@
    }
 
    @Override
-   public boolean hasInterface(final ReadJavaInterface<?> type)
+   public boolean hasInterface(final JavaInterface<?> type)
    {
       return hasInterface(type.getQualifiedName());
    }
@@ -869,7 +869,7 @@
    }
 
    @Override
-   public O removeInterface(final ReadJavaInterface<?> type)
+   public O removeInterface(final JavaInterface<?> type)
    {
       return removeInterface(type.getQualifiedName());
    }
"
d3f0b23a7e02b80bb6994b17c96efc99f66d75e1,Matt Benson,AbstractJavaSourceMemberHolder.java,MODIFY,addField -> [ReadField field] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java
index ef83f9e..dacc03a 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java
@@ -18,19 +18,19 @@
 import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
 import org.eclipse.jface.text.Document;
 import org.jboss.forge.parser.JavaParser;
-import org.jboss.forge.parser.java.ReadField;
-import org.jboss.forge.parser.java.ReadField.Field;
-import org.jboss.forge.parser.java.ReadFieldHolder.FieldHolder;
-import org.jboss.forge.parser.java.ReadJavaClass.JavaClass;
-import org.jboss.forge.parser.java.ReadJavaSource;
-import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
-import org.jboss.forge.parser.java.ReadMember.Member;
-import org.jboss.forge.parser.java.ReadMethod;
-import org.jboss.forge.parser.java.ReadMethod.Method;
-import org.jboss.forge.parser.java.ReadMethodHolder.MethodHolder;
-import org.jboss.forge.parser.java.ReadParameter;
-import org.jboss.forge.parser.java.ReadParameter.Parameter;
+import org.jboss.forge.parser.java.Field;
+import org.jboss.forge.parser.java.JavaType;
+import org.jboss.forge.parser.java.Method;
+import org.jboss.forge.parser.java.Parameter;
 import org.jboss.forge.parser.java.ast.MethodFinderVisitor;
+import org.jboss.forge.parser.java.source.FieldSource;
+import org.jboss.forge.parser.java.source.FieldHolderSource;
+import org.jboss.forge.parser.java.source.JavaClassSource;
+import org.jboss.forge.parser.java.source.JavaSource;
+import org.jboss.forge.parser.java.source.MemberSource;
+import org.jboss.forge.parser.java.source.MethodSource;
+import org.jboss.forge.parser.java.source.MethodHolderSource;
+import org.jboss.forge.parser.java.source.ParameterSource;
 import org.jboss.forge.parser.java.util.Strings;
 import org.jboss.forge.parser.java.util.Types;
 
@@ -39,7 +39,7 @@
  * 
  */
 public abstract class AbstractJavaSourceMemberHolder<O extends JavaSource<O>> extends AbstractJavaSource<O> implements
-         MethodHolder<O>, FieldHolder<O>
+         MethodHolderSource<O>, FieldHolderSource<O>
 {
    public AbstractJavaSourceMemberHolder(JavaSource<?> enclosingType, final Document document,
             final CompilationUnit unit, BodyDeclaration declaration)
@@ -52,25 +52,25 @@
     */
    @Override
    @SuppressWarnings(""unchecked"")
-   public Field<O> addField()
+   public FieldSource<O> addField()
    {
-      Field<O> field = new FieldImpl<O>((O) this);
+      FieldSource<O> field = new FieldImpl<O>((O) this);
       addField(field);
       return field;
    }
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public Field<O> addField(final String declaration)
+   public FieldSource<O> addField(final String declaration)
    {
       String stub = ""public class Stub { "" + declaration + "" }"";
-      JavaClass temp = (JavaClass) JavaParser.parse(stub);
-      List<Field<JavaClass>> fields = temp.getFields();
-      Field<O> result = null;
-      for (Field<JavaClass> stubField : fields)
+      JavaClassSource temp = (JavaClassSource) JavaParser.parse(stub);
+      List<FieldSource<JavaClassSource>> fields = temp.getFields();
+      FieldSource<O> result = null;
+      for (FieldSource<JavaClassSource> stubField : fields)
       {
          Object variableDeclaration = stubField.getInternal();
-         Field<O> field = new FieldImpl<O>((O) this, variableDeclaration, true);
+         FieldSource<O> field = new FieldImpl<O>((O) this, variableDeclaration, true);
          addField(field);
          if (result == null)
          {
@@ -81,7 +81,7 @@
    }
 
    @SuppressWarnings(""unchecked"")
-   private void addField(ReadField<O> field)
+   private void addField(Field<O> field)
    {
       List<Object> bodyDeclarations = getBodyDeclaration().bodyDeclarations();
       int idx = 0;
@@ -97,9 +97,9 @@
    }
 
    @Override
-   public List<Member<O, ?>> getMembers()
+   public List<MemberSource<O, ?>> getMembers()
    {
-      List<Member<O, ?>> result = new ArrayList<Member<O, ?>>();
+      List<MemberSource<O, ?>> result = new ArrayList<MemberSource<O, ?>>();
 
       result.addAll(getFields());
       result.addAll(getMethods());
@@ -109,9 +109,9 @@
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public List<Field<O>> getFields()
+   public List<FieldSource<O>> getFields()
    {
-      List<Field<O>> result = new ArrayList<Field<O>>();
+      List<FieldSource<O>> result = new ArrayList<FieldSource<O>>();
 
       List<BodyDeclaration> bodyDeclarations = getBodyDeclaration().bodyDeclarations();
       for (BodyDeclaration bodyDeclaration : bodyDeclarations)
@@ -131,9 +131,9 @@
    }
 
    @Override
-   public Field<O> getField(final String name)
+   public FieldSource<O> getField(final String name)
    {
-      for (Field<O> field : getFields())
+      for (FieldSource<O> field : getFields())
       {
          if (field.getName().equals(name))
          {
@@ -146,7 +146,7 @@
    @Override
    public boolean hasField(final String name)
    {
-      for (Field<O> field : getFields())
+      for (FieldSource<O> field : getFields())
       {
          if (field.getName().equals(name))
          {
@@ -157,14 +157,14 @@
    }
 
    @Override
-   public boolean hasField(final ReadField<O> field)
+   public boolean hasField(final Field<O> field)
    {
       return getFields().contains(field);
    }
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public O removeField(final ReadField<O> field)
+   public O removeField(final Field<O> field)
    {
       VariableDeclarationFragment fragment = (VariableDeclarationFragment) field.getInternal();
       Iterator<Object> declarationsIterator = getBodyDeclaration().bodyDeclarations().iterator();
@@ -196,7 +196,7 @@
    }
 
    @Override
-   public boolean hasMethod(final ReadMethod<O, ?> method)
+   public boolean hasMethod(final Method<O, ?> method)
    {
       return getMethods().contains(method);
    }
@@ -231,9 +231,9 @@
    }
 
    @Override
-   public Method<O> getMethod(final String name)
+   public MethodSource<O> getMethod(final String name)
    {
-      for (Method<O> method : getMethods())
+      for (MethodSource<O> method : getMethods())
       {
          if (method.getName().equals(name) && (method.getParameters().size() == 0))
          {
@@ -244,13 +244,13 @@
    }
 
    @Override
-   public Method<O> getMethod(final String name, final String... paramTypes)
+   public MethodSource<O> getMethod(final String name, final String... paramTypes)
    {
-      for (Method<O> local : getMethods())
+      for (MethodSource<O> local : getMethods())
       {
          if (local.getName().equals(name))
          {
-            List<Parameter<O>> localParams = local.getParameters();
+            List<ParameterSource<O>> localParams = local.getParameters();
             if (paramTypes != null)
             {
                if (localParams.isEmpty() || (localParams.size() == paramTypes.length))
@@ -258,7 +258,7 @@
                   boolean matches = true;
                   for (int i = 0; i < localParams.size(); i++)
                   {
-                     Parameter<O> localParam = localParams.get(i);
+                     ParameterSource<O> localParam = localParams.get(i);
                      String type = paramTypes[i];
                      if (!Types.areEquivalent(localParam.getType(), type))
                      {
@@ -275,7 +275,7 @@
    }
 
    @Override
-   public Method<O> getMethod(final String name, Class<?>... paramTypes)
+   public MethodSource<O> getMethod(final String name, Class<?>... paramTypes)
    {
       if (paramTypes == null)
       {
@@ -292,14 +292,14 @@
    }
 
    @Override
-   public boolean hasMethodSignature(final ReadMethod<?, ?> method)
+   public boolean hasMethodSignature(final Method<?, ?> method)
    {
-      for (Method<O> local : getMethods())
+      for (MethodSource<O> local : getMethods())
       {
          if (local.getName().equals(method.getName()))
          {
-            Iterator<Parameter<O>> localParams = local.getParameters().iterator();
-            for (ReadParameter<? extends ReadJavaSource<?>> methodParam : method.getParameters())
+            Iterator<ParameterSource<O>> localParams = local.getParameters().iterator();
+            for (Parameter<? extends JavaType<?>> methodParam : method.getParameters())
             {
                if (localParams.hasNext() && Strings.areEqual(localParams.next().getType(), methodParam.getType()))
                {
@@ -315,7 +315,7 @@
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public O removeMethod(final ReadMethod<O, ?> method)
+   public O removeMethod(final Method<O, ?> method)
    {
       getBodyDeclaration().bodyDeclarations().remove(method.getInternal());
       return (O) this;
@@ -323,27 +323,27 @@
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public Method<O> addMethod()
+   public MethodSource<O> addMethod()
    {
-      Method<O> m = new MethodImpl<O>((O) this);
+      MethodSource<O> m = new MethodImpl<O>((O) this);
       getBodyDeclaration().bodyDeclarations().add(m.getInternal());
       return m;
    }
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public Method<O> addMethod(final String method)
+   public MethodSource<O> addMethod(final String method)
    {
-      Method<O> m = new MethodImpl<O>((O) this, method);
+      MethodSource<O> m = new MethodImpl<O>((O) this, method);
       getBodyDeclaration().bodyDeclarations().add(m.getInternal());
       return m;
    }
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public List<Method<O>> getMethods()
+   public List<MethodSource<O>> getMethods()
    {
-      List<Method<O>> result = new ArrayList<Method<O>>();
+      List<MethodSource<O>> result = new ArrayList<MethodSource<O>>();
 
       MethodFinderVisitor methodFinderVisitor = new MethodFinderVisitor();
       body.accept(methodFinderVisitor);
"
d3f0b23a7e02b80bb6994b17c96efc99f66d75e1,Matt Benson,AnnotationElementImpl.java,MODIFY,"parseElement -> [JavaAnnotation parent, String declaration] | [JavaAnnotationSource parent, String declaration]","diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationElementImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationElementImpl.java
index e94369d..acb4530 100755
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationElementImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationElementImpl.java
@@ -21,13 +21,13 @@
 import org.eclipse.jdt.core.dom.PrimitiveType.Code;
 import org.eclipse.jdt.core.dom.TypeLiteral;
 import org.jboss.forge.parser.JavaParser;
-import org.jboss.forge.parser.java.ReadAnnotation;
-import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
-import org.jboss.forge.parser.java.ReadAnnotationElement.AnnotationElement;
-import org.jboss.forge.parser.java.ReadJavaAnnotation.JavaAnnotation;
-import org.jboss.forge.parser.java.ReadJavaSource;
+import org.jboss.forge.parser.java.Annotation;
+import org.jboss.forge.parser.java.JavaType;
 import org.jboss.forge.parser.java.Type;
 import org.jboss.forge.parser.java.ast.AnnotationAccessor;
+import org.jboss.forge.parser.java.source.AnnotationSource;
+import org.jboss.forge.parser.java.source.AnnotationElementSource;
+import org.jboss.forge.parser.java.source.JavaAnnotationSource;
 import org.jboss.forge.parser.java.util.Assert;
 import org.jboss.forge.parser.java.util.Strings;
 import org.jboss.forge.parser.java.util.Types;
@@ -36,17 +36,17 @@
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * @author Matt Benson
  */
-public class AnnotationElementImpl implements AnnotationElement
+public class AnnotationElementImpl implements AnnotationElementSource
 {
-   private class AnnotationValue extends AnnotationImpl<JavaAnnotation, JavaAnnotation>
+   private class AnnotationValue extends AnnotationImpl<JavaAnnotationSource, JavaAnnotationSource>
    {
 
-      AnnotationValue(JavaAnnotation parent)
+      AnnotationValue(JavaAnnotationSource parent)
       {
          super(parent);
       }
 
-      AnnotationValue(JavaAnnotation parent, Object internal)
+      AnnotationValue(JavaAnnotationSource parent, Object internal)
       {
          super(parent, internal);
       }
@@ -81,7 +81,7 @@
       }
 
       @Override
-      public Annotation<JavaAnnotation> getAnnotation()
+      public AnnotationSource<JavaAnnotationSource> getAnnotation()
       {
          Expression expr = member.getDefault();
          if (expr instanceof org.eclipse.jdt.core.dom.Annotation)
@@ -101,7 +101,7 @@
          else
          {
             String stub = ""public @interface Stub { String stub() default "" + value + ""; }"";
-            JavaAnnotation temp = (JavaAnnotation) JavaParser.parse(stub);
+            JavaAnnotationSource temp = (JavaAnnotationSource) JavaParser.parse(stub);
             AnnotationTypeMemberDeclaration internal = (AnnotationTypeMemberDeclaration) temp.getAnnotationElements()
                      .get(0).getInternal();
             member.setDefault((Expression) ASTNode.copySubtree(ast, internal.getDefault()));
@@ -142,7 +142,7 @@
       }
 
       @Override
-      public Annotation<JavaAnnotation> setAnnotation()
+      public AnnotationSource<JavaAnnotationSource> setAnnotation()
       {
          AnnotationValue result = new AnnotationValue(parent);
          member.setDefault((Expression) result.getInternal());
@@ -259,7 +259,7 @@
       
       private Class<?> resolveTypeLiteral(TypeLiteral typeLiteral)
       {
-         final Type<JavaAnnotation> type = new TypeImpl<JavaAnnotation>(getOrigin(), typeLiteral.getType());
+         final Type<JavaAnnotationSource> type = new TypeImpl<JavaAnnotationSource>(getOrigin(), typeLiteral.getType());
          if (type.isPrimitive())
          {
             final Class<?>[] primitiveTypes = { boolean.class, byte.class, short.class, int.class, long.class,
@@ -287,44 +287,44 @@
       }
    }
 
-   private final AnnotationAccessor<JavaAnnotation, AnnotationElement> annotations = new AnnotationAccessor<JavaAnnotation, AnnotationElement>();
+   private final AnnotationAccessor<JavaAnnotationSource, AnnotationElementSource> annotations = new AnnotationAccessor<JavaAnnotationSource, AnnotationElementSource>();
 
-   private JavaAnnotation parent;
+   private JavaAnnotationSource parent;
    private AST ast;
    private final AnnotationTypeMemberDeclaration member;
 
-   public AnnotationElementImpl(final JavaAnnotation parent)
+   public AnnotationElementImpl(final JavaAnnotationSource parent)
    {
       this(parent, ((ASTNode) parent.getInternal()).getAST().newAnnotationTypeMemberDeclaration());
    }
 
-   public AnnotationElementImpl(final JavaAnnotation parent, final String declaration)
+   public AnnotationElementImpl(final JavaAnnotationSource parent, final String declaration)
    {
       this(parent, parseElement(parent, declaration));
    }
 
-   public AnnotationElementImpl(final JavaAnnotation parent, final Object internal)
+   public AnnotationElementImpl(final JavaAnnotationSource parent, final Object internal)
    {
       this.parent = parent;
       ast = ((ASTNode) parent.getInternal()).getAST();
       member = (AnnotationTypeMemberDeclaration) internal;
    }
 
-   private static AnnotationTypeMemberDeclaration parseElement(JavaAnnotation parent, String declaration)
+   private static AnnotationTypeMemberDeclaration parseElement(JavaAnnotationSource parent, String declaration)
    {
       if (!declaration.trim().endsWith("";""))
       {
          declaration = declaration + "";"";
       }
       String stub = ""public @interface Stub { "" + declaration + "" }"";
-      JavaAnnotation temp = (JavaAnnotation) JavaParser.parse(stub);
-      List<AnnotationElement> fields = temp.getAnnotationElements();
+      JavaAnnotationSource temp = (JavaAnnotationSource) JavaParser.parse(stub);
+      List<AnnotationElementSource> fields = temp.getAnnotationElements();
       AnnotationTypeMemberDeclaration newField = (AnnotationTypeMemberDeclaration) fields.get(0).getInternal();
       return (AnnotationTypeMemberDeclaration) ASTNode.copySubtree(((ASTNode) parent.getInternal()).getAST(), newField);
    }
 
    @Override
-   public JavaAnnotation getOrigin()
+   public JavaAnnotationSource getOrigin()
    {
       return parent.getOrigin();
    }
@@ -339,13 +339,13 @@
     * Annotation<O> Modifiers
     */
    @Override
-   public Annotation<JavaAnnotation> addAnnotation()
+   public AnnotationSource<JavaAnnotationSource> addAnnotation()
    {
       return annotations.addAnnotation(this, member);
    }
 
    @Override
-   public Annotation<JavaAnnotation> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
+   public AnnotationSource<JavaAnnotationSource> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
    {
       if (parent.requiresImport(clazz))
       {
@@ -355,13 +355,13 @@
    }
 
    @Override
-   public Annotation<JavaAnnotation> addAnnotation(final String className)
+   public AnnotationSource<JavaAnnotationSource> addAnnotation(final String className)
    {
       return annotations.addAnnotation(this, member, className);
    }
 
    @Override
-   public List<Annotation<JavaAnnotation>> getAnnotations()
+   public List<AnnotationSource<JavaAnnotationSource>> getAnnotations()
    {
       return annotations.getAnnotations(this, member);
    }
@@ -379,19 +379,19 @@
    }
 
    @Override
-   public Annotation<JavaAnnotation> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
+   public AnnotationSource<JavaAnnotationSource> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
    {
       return annotations.getAnnotation(this, member, type);
    }
 
    @Override
-   public Annotation<JavaAnnotation> getAnnotation(final String type)
+   public AnnotationSource<JavaAnnotationSource> getAnnotation(final String type)
    {
       return annotations.getAnnotation(this, member, type);
    }
 
    @Override
-   public AnnotationElement removeAnnotation(final ReadAnnotation<JavaAnnotation> annotation)
+   public AnnotationElementSource removeAnnotation(final Annotation<JavaAnnotationSource> annotation)
    {
       return annotations.removeAnnotation(this, member, annotation);
    }
@@ -413,7 +413,7 @@
    }
 
    @Override
-   public AnnotationElement setName(final String name)
+   public AnnotationElementSource setName(final String name)
    {
       member.setName(ast.newSimpleName(name));
       return this;
@@ -433,9 +433,9 @@
    }
 
    @Override
-   public org.jboss.forge.parser.java.Type<JavaAnnotation> getTypeInspector()
+   public org.jboss.forge.parser.java.Type<JavaAnnotationSource> getTypeInspector()
    {
-      return new TypeImpl<JavaAnnotation>(parent,
+      return new TypeImpl<JavaAnnotationSource>(parent,
                member.getStructuralProperty(AnnotationTypeMemberDeclaration.TYPE_PROPERTY));
    }
 
@@ -478,7 +478,7 @@
    }
 
    @Override
-   public AnnotationElement setType(final Class<?> clazz)
+   public AnnotationElementSource setType(final Class<?> clazz)
    {
       if (parent.requiresImport(clazz))
       {
@@ -488,17 +488,17 @@
    }
 
    @Override
-   public AnnotationElement setType(final ReadJavaSource<?> source)
+   public AnnotationElementSource setType(final JavaType<?> source)
    {
       return setType(source.getQualifiedName());
    }
 
    @Override
-   public AnnotationElement setType(final String typeName)
+   public AnnotationElementSource setType(final String typeName)
    {
       String simpleName = Types.toSimpleName(typeName);
 
-      JavaAnnotation origin = getOrigin();
+      JavaAnnotationSource origin = getOrigin();
       if (!Strings.areEqual(typeName, simpleName) && origin.requiresImport(typeName))
       {
          origin.addImport(typeName);
"
d3f0b23a7e02b80bb6994b17c96efc99f66d75e1,Matt Benson,AnnotationImpl.java,MODIFY,"createAnnotation -> [AnnotationTarget parent, AnnotationType type] | [AnnotationTargetSource parent, AnnotationType type]","diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationImpl.java
index 76d6622..5cee92d 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationImpl.java
@@ -24,19 +24,19 @@
 import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
 import org.eclipse.jdt.core.dom.TypeLiteral;
 import org.jboss.forge.parser.JavaParser;
-import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
-import org.jboss.forge.parser.java.ReadAnnotationTarget.AnnotationTarget;
-import org.jboss.forge.parser.java.ReadJavaClass;
-import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
+import org.jboss.forge.parser.java.JavaClass;
 import org.jboss.forge.parser.java.Type;
 import org.jboss.forge.parser.java.ValuePair;
+import org.jboss.forge.parser.java.source.AnnotationSource;
+import org.jboss.forge.parser.java.source.AnnotationTargetSource;
+import org.jboss.forge.parser.java.source.JavaSource;
 import org.jboss.forge.parser.java.util.Assert;
 import org.jboss.forge.parser.java.util.Strings;
 
 /**
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
-public class AnnotationImpl<O extends JavaSource<O>, T> implements Annotation<O>
+public class AnnotationImpl<O extends JavaSource<O>, T> implements AnnotationSource<O>
 {
    private class Nested extends AnnotationImpl<O, T>
    {
@@ -66,7 +66,7 @@
 
    private static final String DEFAULT_VALUE = ""value"";
 
-   private AnnotationTarget<O, T> parent = null;
+   private AnnotationTargetSource<O, T> parent = null;
    private AST ast = null;
    private org.eclipse.jdt.core.dom.Annotation annotation;
 
@@ -75,24 +75,24 @@
       MARKER, SINGLE, NORMAL
    }
 
-   public AnnotationImpl(final AnnotationTarget<O, T> parent)
+   public AnnotationImpl(final AnnotationTargetSource<O, T> parent)
    {
       this(parent, AnnotationType.MARKER);
    }
 
-   public AnnotationImpl(final AnnotationTarget<O, T> parent, final Object internal)
+   public AnnotationImpl(final AnnotationTargetSource<O, T> parent, final Object internal)
    {
       this.parent = parent;
       ast = ((ASTNode) parent.getInternal()).getAST();
       annotation = (org.eclipse.jdt.core.dom.Annotation) internal;
    }
 
-   public AnnotationImpl(final AnnotationTarget<O, T> parent, final AnnotationType type)
+   public AnnotationImpl(final AnnotationTargetSource<O, T> parent, final AnnotationType type)
    {
       this(parent, createAnnotation(parent, type));
    }
 
-   private static org.eclipse.jdt.core.dom.Annotation createAnnotation(final AnnotationTarget<?, ?> parent,
+   private static org.eclipse.jdt.core.dom.Annotation createAnnotation(final AnnotationTargetSource<?, ?> parent,
             final AnnotationType type)
    {
       AST ast = ((ASTNode) parent.getInternal()).getAST();
@@ -226,7 +226,7 @@
    }
 
    @Override
-   public Annotation<O> removeAllValues()
+   public AnnotationSource<O> removeAllValues()
    {
       convertTo(AnnotationType.MARKER);
       return this;
@@ -234,7 +234,7 @@
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public Annotation<O> removeValue(final String name)
+   public AnnotationSource<O> removeValue(final String name)
    {
       if (annotation.isNormalAnnotation())
       {
@@ -271,14 +271,14 @@
    }
 
    @Override
-   public Annotation<O> setName(final String className)
+   public AnnotationSource<O> setName(final String className)
    {
       annotation.setTypeName(ast.newName(className));
       return this;
    }
 
    @Override
-   public Annotation<O> setLiteralValue(final String value)
+   public AnnotationSource<O> setLiteralValue(final String value)
    {
       Assert.notNull(value, ""null not accepted"");
 
@@ -292,7 +292,7 @@
          SingleMemberAnnotation sa = (SingleMemberAnnotation) annotation;
 
          String stub = ""@"" + getName() + ""("" + value + "") public class Stub { }"";
-         ReadJavaClass<?> temp = JavaParser.parse(ReadJavaClass.class, stub);
+         JavaClass<?> temp = JavaParser.parse(JavaClass.class, stub);
 
          SingleMemberAnnotation anno = (SingleMemberAnnotation) temp.getAnnotations().get(0).getInternal();
 
@@ -309,7 +309,7 @@
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public Annotation<O> setLiteralValue(final String name, final String value)
+   public AnnotationSource<O> setLiteralValue(final String name, final String value)
    {
       Assert.notNull(value, ""null not accepted"");
 
@@ -329,7 +329,7 @@
       NormalAnnotation na = (NormalAnnotation) annotation;
 
       String stub = ""@"" + getName() + ""("" + name + ""="" + value + "" ) public class Stub { }"";
-      ReadJavaClass<?> temp = JavaParser.parse(ReadJavaClass.class, stub);
+      JavaClass<?> temp = JavaParser.parse(JavaClass.class, stub);
 
       NormalAnnotation anno = (NormalAnnotation) temp.getAnnotations().get(0).getInternal();
       MemberValuePair mvp = (MemberValuePair) anno.values().get(0);
@@ -350,13 +350,13 @@
    }
 
    @Override
-   public Annotation<O> setStringValue(final String value)
+   public AnnotationSource<O> setStringValue(final String value)
    {
       return setLiteralValue(Strings.enquote(value));
    }
 
    @Override
-   public Annotation<O> setStringValue(final String name, final String value)
+   public AnnotationSource<O> setStringValue(final String name, final String value)
    {
       return setLiteralValue(name, Strings.enquote(value));
    }
@@ -396,25 +396,25 @@
    }
 
    @Override
-   public Annotation<O> setEnumValue(final String name, final Enum<?> value)
+   public AnnotationSource<O> setEnumValue(final String name, final Enum<?> value)
    {
       return setEnumArrayValue(name, value);
    }
 
    @Override
-   public Annotation<O> setEnumValue(final Enum<?>... values)
+   public AnnotationSource<O> setEnumValue(final Enum<?>... values)
    {
       return setEnumArrayValue(values);
    }
 
    @Override
-   public Annotation<O> setEnumArrayValue(Enum<?>... values)
+   public AnnotationSource<O> setEnumArrayValue(Enum<?>... values)
    {
       return setEnumArrayValue(DEFAULT_VALUE, values);
    }
 
    @Override
-   public Annotation<O> setEnumArrayValue(String name, final Enum<?>... values)
+   public AnnotationSource<O> setEnumArrayValue(String name, final Enum<?>... values)
    {
       Assert.notNull(values, ""null array not accepted"");
 
@@ -530,7 +530,7 @@
    }
 
    @Override
-   public Annotation<O> setAnnotationValue()
+   public AnnotationSource<O> setAnnotationValue()
    {
       if (isMarker())
       {
@@ -539,7 +539,7 @@
 
       if (isSingleValue())
       {
-         final Annotation<O> result = new Nested(this);
+         final AnnotationSource<O> result = new Nested(this);
          ((SingleMemberAnnotation) annotation).setValue((Expression) result.getInternal());
          return result;
       }
@@ -547,7 +547,7 @@
    }
 
    @Override
-   public Annotation<O> setAnnotationValue(String name)
+   public AnnotationSource<O> setAnnotationValue(String name)
    {
       if (!isNormal() && DEFAULT_VALUE.equals(name)) {
          return setAnnotationValue();
@@ -556,10 +556,10 @@
       {
          convertTo(AnnotationType.NORMAL);
       }
-      Annotation<O> result = new Nested(this);
+      AnnotationSource<O> result = new Nested(this);
       
       String stub = ""@"" + getName() + ""("" + name + ""= 0 ) public class Stub { }"";
-      ReadJavaClass<?> temp = JavaParser.parse(ReadJavaClass.class, stub);
+      JavaClass<?> temp = JavaParser.parse(JavaClass.class, stub);
 
       NormalAnnotation anno = (NormalAnnotation) temp.getAnnotations().get(0).getInternal();
       MemberValuePair mvp = (MemberValuePair) anno.values().get(0);
@@ -583,7 +583,7 @@
    }
 
    @Override
-   public Annotation<O> getAnnotationValue()
+   public AnnotationSource<O> getAnnotationValue()
    {
       if (isSingleValue())
       {
@@ -602,7 +602,7 @@
    }
 
    @Override
-   public Annotation<O> getAnnotationValue(String name)
+   public AnnotationSource<O> getAnnotationValue(String name)
    {
       if (isNormal())
       {
@@ -705,7 +705,7 @@
    }
 
    @Override
-   public Annotation<O> setClassValue(String name, Class<?> value)
+   public AnnotationSource<O> setClassValue(String name, Class<?> value)
    {
       Assert.notNull(value, ""null not accepted"");
 
@@ -717,19 +717,19 @@
    }
 
    @Override
-   public Annotation<O> setClassValue(Class<?> value)
+   public AnnotationSource<O> setClassValue(Class<?> value)
    {
       return setClassValue(DEFAULT_VALUE, value);
    }
 
    @Override
-   public Annotation<O> setClassArrayValue(Class<?>... values)
+   public AnnotationSource<O> setClassArrayValue(Class<?>... values)
    {
       return setClassArrayValue(DEFAULT_VALUE, values);
    }
 
    @Override
-   public Annotation<O> setClassArrayValue(String name, Class<?>... values)
+   public AnnotationSource<O> setClassArrayValue(String name, Class<?>... values)
    {
       Assert.notNull(values, ""null array not accepted"");
 
"
d3f0b23a7e02b80bb6994b17c96efc99f66d75e1,Matt Benson,EnumConstantBodyImpl.java,MODIFY,addImport -> [ReadJavaSource type] | [String className],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java
index b58e2c8..ce82922 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java
@@ -23,36 +23,37 @@
 import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
 import org.eclipse.jface.text.Document;
 import org.jboss.forge.parser.JavaParser;
-import org.jboss.forge.parser.java.ReadAnnotation;
-import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
-import org.jboss.forge.parser.java.ReadEnumConstant.EnumConstant;
-import org.jboss.forge.parser.java.ReadEnumConstant.EnumConstant.Body;
-import org.jboss.forge.parser.java.ReadField;
-import org.jboss.forge.parser.java.ReadField.Field;
-import org.jboss.forge.parser.java.Import;
-import org.jboss.forge.parser.java.ReadJavaClass.JavaClass;
-import org.jboss.forge.parser.java.ReadJavaEnum.JavaEnum;
-import org.jboss.forge.parser.java.ReadJavaSource;
-import org.jboss.forge.parser.java.ReadMember.Member;
-import org.jboss.forge.parser.java.ReadMethod;
-import org.jboss.forge.parser.java.ReadMethod.Method;
-import org.jboss.forge.parser.java.ReadParameter;
-import org.jboss.forge.parser.java.ReadParameter.Parameter;
+import org.jboss.forge.parser.java.Annotation;
+import org.jboss.forge.parser.java.Field;
+import org.jboss.forge.parser.java.JavaType;
+import org.jboss.forge.parser.java.Method;
+import org.jboss.forge.parser.java.Parameter;
 import org.jboss.forge.parser.java.SourceType;
 import org.jboss.forge.parser.java.SyntaxError;
 import org.jboss.forge.parser.java.Visibility;
 import org.jboss.forge.parser.java.ast.MethodFinderVisitor;
 import org.jboss.forge.parser.java.ast.TypeDeclarationFinderVisitor;
+import org.jboss.forge.parser.java.source.AnnotationSource;
+import org.jboss.forge.parser.java.source.EnumConstantSource;
+import org.jboss.forge.parser.java.source.FieldSource;
+import org.jboss.forge.parser.java.source.Import;
+import org.jboss.forge.parser.java.source.JavaClassSource;
+import org.jboss.forge.parser.java.source.JavaEnumSource;
+import org.jboss.forge.parser.java.source.JavaSource;
+import org.jboss.forge.parser.java.source.MemberSource;
+import org.jboss.forge.parser.java.source.MethodSource;
+import org.jboss.forge.parser.java.source.ParameterSource;
+import org.jboss.forge.parser.java.source.EnumConstantSource.Body;
 import org.jboss.forge.parser.java.util.Strings;
 import org.jboss.forge.parser.java.util.Types;
 import org.jboss.forge.parser.spi.JavaParserImpl;
 
-class EnumConstantBodyImpl implements EnumConstant.Body
+class EnumConstantBodyImpl implements EnumConstantSource.Body
 {
-   private final EnumConstant enumConstant;
-   private final JavaEnum javaEnum;
+   private final EnumConstantSource enumConstant;
+   private final JavaEnumSource javaEnum;
 
-   EnumConstantBodyImpl(EnumConstant enumConstant)
+   EnumConstantBodyImpl(EnumConstantSource enumConstant)
    {
       this.enumConstant = enumConstant;
       this.javaEnum = enumConstant.getOrigin();
@@ -184,7 +185,7 @@
    }
 
    @Override
-   public <T extends ReadJavaSource<?>> Import addImport(T type)
+   public <T extends JavaType<?>> Import addImport(T type)
    {
       return javaEnum.addImport(type);
    }
@@ -214,7 +215,7 @@
    }
 
    @Override
-   public <T extends ReadJavaSource<T>> boolean hasImport(T type)
+   public <T extends JavaType<T>> boolean hasImport(T type)
    {
       return javaEnum.hasImport(type);
    }
@@ -238,7 +239,7 @@
    }
 
    @Override
-   public <T extends ReadJavaSource<?>> Import getImport(T type)
+   public <T extends JavaType<?>> Import getImport(T type)
    {
       return javaEnum.getImport(type);
    }
@@ -264,7 +265,7 @@
    }
 
    @Override
-   public <T extends ReadJavaSource<?>> Body removeImport(T type)
+   public <T extends JavaType<?>> Body removeImport(T type)
    {
       javaEnum.removeImport(type);
       return this;
@@ -363,7 +364,7 @@
    }
 
    @Override
-   public Annotation<Body> addAnnotation()
+   public AnnotationSource<Body> addAnnotation()
    {
       // could pass through to enumConstant, but would require then pretending its Annotation was ours
       // which should cause no problem at the moment, but could theoretically do so in the future
@@ -371,7 +372,7 @@
    }
 
    @Override
-   public Annotation<Body> addAnnotation(Class<? extends java.lang.annotation.Annotation> type)
+   public AnnotationSource<Body> addAnnotation(Class<? extends java.lang.annotation.Annotation> type)
    {
       // could pass through to enumConstant, but would require then pretending its Annotation was ours
       // which should cause no problem at the moment, but could theoretically do so in the future
@@ -379,7 +380,7 @@
    }
 
    @Override
-   public Annotation<Body> addAnnotation(String className)
+   public AnnotationSource<Body> addAnnotation(String className)
    {
       // could pass through to enumConstant, but would require then pretending its Annotation was ours
       // which should cause no problem at the moment, but could theoretically do so in the future
@@ -387,7 +388,7 @@
    }
 
    @Override
-   public List<Annotation<Body>> getAnnotations()
+   public List<AnnotationSource<Body>> getAnnotations()
    {
       // could pass through to enumConstant, but would require then pretending its Annotation was ours
       // which should cause no problem at the moment, but could theoretically do so in the future
@@ -411,7 +412,7 @@
    }
 
    @Override
-   public Annotation<Body> getAnnotation(Class<? extends java.lang.annotation.Annotation> type)
+   public AnnotationSource<Body> getAnnotation(Class<? extends java.lang.annotation.Annotation> type)
    {
       // could pass through to enumConstant, but would require then pretending its Annotation was ours
       // which should cause no problem at the moment, but could theoretically do so in the future
@@ -419,7 +420,7 @@
    }
 
    @Override
-   public Annotation<Body> getAnnotation(String type)
+   public AnnotationSource<Body> getAnnotation(String type)
    {
       // could pass through to enumConstant, but would require then pretending its Annotation was ours
       // which should cause no problem at the moment, but could theoretically do so in the future
@@ -427,7 +428,7 @@
    }
 
    @Override
-   public Body removeAnnotation(ReadAnnotation<Body> annotation)
+   public Body removeAnnotation(Annotation<Body> annotation)
    {
       // could pass through to enumConstant, but would require then pretending its Annotation was ours
       // which should cause no problem at the moment, but could theoretically do so in the future
@@ -449,7 +450,7 @@
          if (result == null)
          {
             final String stub = ""enum StubEnum { FOO() {}; }"";
-            final JavaEnum temp = JavaParser.parse(JavaEnum.class, stub);
+            final JavaEnumSource temp = JavaParser.parse(JavaEnumSource.class, stub);
             final AnonymousClassDeclaration body = ((EnumConstantBodyImpl) temp.getEnumConstants().get(0).getBody())
                      .getBody();
             final AST ast = ((ASTNode) javaEnum.getInternal()).getAST();
@@ -467,33 +468,33 @@
    }
 
    @Override
-   public List<Member<Body, ?>> getMembers()
+   public List<MemberSource<Body, ?>> getMembers()
    {
-      final List<Member<Body, ?>> result = new ArrayList<Member<Body, ?>>();
+      final List<MemberSource<Body, ?>> result = new ArrayList<MemberSource<Body, ?>>();
       result.addAll(getFields());
       result.addAll(getMethods());
       return Collections.unmodifiableList(result);
    }
 
    @Override
-   public Field<Body> addField()
+   public FieldSource<Body> addField()
    {
-      Field<Body> field = new FieldImpl<Body>(this);
+      FieldSource<Body> field = new FieldImpl<Body>(this);
       addField(field);
       return field;
    }
 
    @Override
-   public Field<Body> addField(final String declaration)
+   public FieldSource<Body> addField(final String declaration)
    {
       String stub = ""public class Stub { "" + declaration + "" }"";
-      JavaClass temp = (JavaClass) JavaParser.parse(stub);
-      List<Field<JavaClass>> fields = temp.getFields();
-      Field<Body> result = null;
-      for (Field<JavaClass> stubField : fields)
+      JavaClassSource temp = (JavaClassSource) JavaParser.parse(stub);
+      List<FieldSource<JavaClassSource>> fields = temp.getFields();
+      FieldSource<Body> result = null;
+      for (FieldSource<JavaClassSource> stubField : fields)
       {
          Object variableDeclaration = stubField.getInternal();
-         Field<Body> field = new FieldImpl<Body>(this, variableDeclaration, true);
+         FieldSource<Body> field = new FieldImpl<Body>(this, variableDeclaration, true);
          addField(field);
          if (result == null)
          {
@@ -504,7 +505,7 @@
    }
 
    @SuppressWarnings(""unchecked"")
-   private void addField(ReadField<Body> field)
+   private void addField(Field<Body> field)
    {
       final List<BodyDeclaration> bodyDeclarations = getBody().bodyDeclarations();
       int idx = 0;
@@ -521,9 +522,9 @@
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public List<Field<Body>> getFields()
+   public List<FieldSource<Body>> getFields()
    {
-      final List<Field<Body>> result = new ArrayList<Field<Body>>();
+      final List<FieldSource<Body>> result = new ArrayList<FieldSource<Body>>();
 
       final List<BodyDeclaration> bodyDeclarations = getBody().bodyDeclarations();
       for (BodyDeclaration bodyDeclaration : bodyDeclarations)
@@ -542,9 +543,9 @@
    }
 
    @Override
-   public Field<Body> getField(final String name)
+   public FieldSource<Body> getField(final String name)
    {
-      for (Field<Body> field : getFields())
+      for (FieldSource<Body> field : getFields())
       {
          if (field.getName().equals(name))
          {
@@ -557,7 +558,7 @@
    @Override
    public boolean hasField(final String name)
    {
-      for (ReadField<Body> field : getFields())
+      for (Field<Body> field : getFields())
       {
          if (field.getName().equals(name))
          {
@@ -568,14 +569,14 @@
    }
 
    @Override
-   public boolean hasField(final ReadField<Body> field)
+   public boolean hasField(final Field<Body> field)
    {
       return getFields().contains(field);
    }
 
    @SuppressWarnings(""unchecked"")
    @Override
-   public Body removeField(final ReadField<Body> field)
+   public Body removeField(final Field<Body> field)
    {
       VariableDeclarationFragment fragment = (VariableDeclarationFragment) field.getInternal();
       Iterator<Object> declarationsIterator = getBody().bodyDeclarations().iterator();
@@ -607,7 +608,7 @@
    }
 
    @Override
-   public boolean hasMethod(final ReadMethod<Body, ?> method)
+   public boolean hasMethod(final Method<Body, ?> method)
    {
       return getMethods().contains(method);
    }
@@ -637,9 +638,9 @@
    }
 
    @Override
-   public Method<Body> getMethod(final String name)
+   public MethodSource<Body> getMethod(final String name)
    {
-      for (Method<Body> method : getMethods())
+      for (MethodSource<Body> method : getMethods())
       {
          if (method.getName().equals(name) && (method.getParameters().isEmpty()))
          {
@@ -650,13 +651,13 @@
    }
 
    @Override
-   public Method<Body> getMethod(final String name, final String... paramTypes)
+   public MethodSource<Body> getMethod(final String name, final String... paramTypes)
    {
-      for (Method<Body> local : getMethods())
+      for (MethodSource<Body> local : getMethods())
       {
          if (local.getName().equals(name))
          {
-            final List<Parameter<Body>> localParams = local.getParameters();
+            final List<ParameterSource<Body>> localParams = local.getParameters();
             if (paramTypes != null)
             {
                if (localParams.isEmpty() || (localParams.size() == paramTypes.length))
@@ -681,7 +682,7 @@
    }
 
    @Override
-   public Method<Body> getMethod(final String name, Class<?>... paramTypes)
+   public MethodSource<Body> getMethod(final String name, Class<?>... paramTypes)
    {
       final String[] types = new String[paramTypes == null ? 0 : paramTypes.length];
       for (int i = 0; i < types.length; i++)
@@ -693,14 +694,14 @@
    }
 
    @Override
-   public boolean hasMethodSignature(final ReadMethod<?, ?> method)
+   public boolean hasMethodSignature(final Method<?, ?> method)
    {
-      for (Method<Body> local : getMethods())
+      for (MethodSource<Body> local : getMethods())
       {
          if (local.getName().equals(method.getName()))
          {
-            final Iterator<Parameter<Body>> localParams = local.getParameters().iterator();
-            for (ReadParameter<? extends ReadJavaSource<?>> methodParam : method.getParameters())
+            final Iterator<ParameterSource<Body>> localParams = local.getParameters().iterator();
+            for (Parameter<? extends JavaType<?>> methodParam : method.getParameters())
             {
                if (localParams.hasNext() && Strings.areEqual(localParams.next().getType(), methodParam.getType()))
                {
@@ -715,7 +716,7 @@
    }
 
    @Override
-   public Body removeMethod(final ReadMethod<Body, ?> method)
+   public Body removeMethod(final Method<Body, ?> method)
    {
       getBody().bodyDeclarations().remove(method.getInternal());
       return this;
@@ -723,26 +724,26 @@
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public Method<Body> addMethod()
+   public MethodSource<Body> addMethod()
    {
-      final Method<Body> m = new MethodImpl<Body>(this);
+      final MethodSource<Body> m = new MethodImpl<Body>(this);
       getBody().bodyDeclarations().add(m.getInternal());
       return m;
    }
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public Method<Body> addMethod(final String method)
+   public MethodSource<Body> addMethod(final String method)
    {
-      final Method<Body> m = new MethodImpl<Body>(this, method);
+      final MethodSource<Body> m = new MethodImpl<Body>(this, method);
       getBody().bodyDeclarations().add(m.getInternal());
       return m;
    }
 
    @Override
-   public List<Method<Body>> getMethods()
+   public List<MethodSource<Body>> getMethods()
    {
-      final List<Method<Body>> result = new ArrayList<Method<Body>>();
+      final List<MethodSource<Body>> result = new ArrayList<MethodSource<Body>>();
 
       final MethodFinderVisitor methodFinderVisitor = new MethodFinderVisitor();
       getBody().accept(methodFinderVisitor);
"
d3f0b23a7e02b80bb6994b17c96efc99f66d75e1,Matt Benson,EnumConstantImpl.java,MODIFY,init -> [JavaEnum parent] | [JavaEnumSource parent],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java
index 1907a8b..94819cf 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java
@@ -16,44 +16,44 @@
 import org.eclipse.jdt.core.dom.EnumConstantDeclaration;
 import org.eclipse.jdt.core.dom.Expression;
 import org.jboss.forge.parser.JavaParser;
-import org.jboss.forge.parser.java.ReadAnnotation;
-import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
-import org.jboss.forge.parser.java.ReadEnumConstant.EnumConstant;
-import org.jboss.forge.parser.java.ReadJavaEnum.JavaEnum;
+import org.jboss.forge.parser.java.Annotation;
 import org.jboss.forge.parser.java.ast.AnnotationAccessor;
+import org.jboss.forge.parser.java.source.AnnotationSource;
+import org.jboss.forge.parser.java.source.EnumConstantSource;
+import org.jboss.forge.parser.java.source.JavaEnumSource;
 import org.jboss.forge.parser.java.util.Strings;
 
-public class EnumConstantImpl implements EnumConstant
+public class EnumConstantImpl implements EnumConstantSource
 {
-   private final AnnotationAccessor<JavaEnum, EnumConstant> annotations = new AnnotationAccessor<JavaEnum, EnumConstant>();
-   private JavaEnum parent;
+   private final AnnotationAccessor<JavaEnumSource, EnumConstantSource> annotations = new AnnotationAccessor<JavaEnumSource, EnumConstantSource>();
+   private JavaEnumSource parent;
    private AST ast;
    private EnumConstantDeclaration enumConstant;
 
-   private void init(final JavaEnum parent)
+   private void init(final JavaEnumSource parent)
    {
       this.parent = parent;
       this.ast = ((ASTNode) parent.getInternal()).getAST();
    }
    
-   public EnumConstantImpl(final JavaEnum parent) {
+   public EnumConstantImpl(final JavaEnumSource parent) {
       init(parent);
       this.enumConstant = ast.newEnumConstantDeclaration();
    }
    
-   public EnumConstantImpl(final JavaEnum parent, final String declaration)
+   public EnumConstantImpl(final JavaEnumSource parent, final String declaration)
    {
       init(parent);
 
       String stub = ""public enum Stub { "" + declaration + "" }"";
-      JavaEnum temp = (JavaEnum) JavaParser.parse(stub);
-      List<EnumConstant> constants = temp.getEnumConstants();
+      JavaEnumSource temp = (JavaEnumSource) JavaParser.parse(stub);
+      List<EnumConstantSource> constants = temp.getEnumConstants();
       EnumConstantDeclaration newField = (EnumConstantDeclaration) constants.get(0).getInternal();
       EnumConstantDeclaration subtree = (EnumConstantDeclaration) ASTNode.copySubtree(ast, newField);
       this.enumConstant = subtree;
    }
    
-   public EnumConstantImpl(final JavaEnum parent, final Object internal)
+   public EnumConstantImpl(final JavaEnumSource parent, final Object internal)
    {
       init(parent);
       this.enumConstant = (EnumConstantDeclaration) internal;
@@ -66,7 +66,7 @@
    }
 
    @Override
-   public EnumConstant setName(String name)
+   public EnumConstantSource setName(String name)
    {
       this.enumConstant.setName(ast.newSimpleName(name));
       return this;
@@ -79,7 +79,7 @@
    }
 
    @Override
-   public JavaEnum getOrigin()
+   public JavaEnumSource getOrigin()
    {
       return parent;
    }
@@ -96,14 +96,14 @@
 
    @SuppressWarnings(""unchecked"")
    @Override
-   public EnumConstant setConstructorArguments(String... literalArguments)
+   public EnumConstantSource setConstructorArguments(String... literalArguments)
    {
       enumConstant.arguments().clear();
       if (literalArguments != null && literalArguments.length > 0)
       {
          final String stub = ""public enum Stub { FOO("" + Strings.join(Arrays.asList(literalArguments), "", "") + ""); }"";
-         final JavaEnum temp = JavaParser.parse(JavaEnum.class, stub);
-         final List<EnumConstant> constants = temp.getEnumConstants();
+         final JavaEnumSource temp = JavaParser.parse(JavaEnumSource.class, stub);
+         final List<EnumConstantSource> constants = temp.getEnumConstants();
          final EnumConstantDeclaration newConstant = (EnumConstantDeclaration) constants.get(0).getInternal();
          final List<Expression> arguments = newConstant.arguments();
          for (Expression argument : arguments)
@@ -122,7 +122,7 @@
    }
 
    @Override
-   public EnumConstant removeBody()
+   public EnumConstantSource removeBody()
    {
       enumConstant.setAnonymousClassDeclaration(null);
       return this;
@@ -133,13 +133,13 @@
     */
 
    @Override
-   public Annotation<JavaEnum> addAnnotation()
+   public AnnotationSource<JavaEnumSource> addAnnotation()
    {
       return annotations.addAnnotation(this, enumConstant);
    }
 
    @Override
-   public Annotation<JavaEnum> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
+   public AnnotationSource<JavaEnumSource> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
    {
       if (!parent.hasImport(clazz))
       {
@@ -149,13 +149,13 @@
    }
 
    @Override
-   public Annotation<JavaEnum> addAnnotation(final String className)
+   public AnnotationSource<JavaEnumSource> addAnnotation(final String className)
    {
       return annotations.addAnnotation(this, enumConstant, className);
    }
 
    @Override
-   public List<Annotation<JavaEnum>> getAnnotations()
+   public List<AnnotationSource<JavaEnumSource>> getAnnotations()
    {
       return annotations.getAnnotations(this, enumConstant);
    }
@@ -173,19 +173,19 @@
    }
 
    @Override
-   public EnumConstant removeAnnotation(final ReadAnnotation<JavaEnum> annotation)
+   public EnumConstantSource removeAnnotation(final Annotation<JavaEnumSource> annotation)
    {
       return annotations.removeAnnotation(this, enumConstant, annotation);
    }
 
    @Override
-   public Annotation<JavaEnum> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
+   public AnnotationSource<JavaEnumSource> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
    {
       return annotations.getAnnotation(this, enumConstant, type);
    }
 
    @Override
-   public Annotation<JavaEnum> getAnnotation(final String type)
+   public AnnotationSource<JavaEnumSource> getAnnotation(final String type)
    {
       return annotations.getAnnotation(this, enumConstant, type);
    }
"
d3f0b23a7e02b80bb6994b17c96efc99f66d75e1,Matt Benson,FieldImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
index 2559310..94bd7b0 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
@@ -22,24 +22,24 @@
 import org.eclipse.jdt.core.dom.Type;
 import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
 import org.jboss.forge.parser.JavaParser;
-import org.jboss.forge.parser.java.ReadAnnotation;
-import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
-import org.jboss.forge.parser.java.ReadField.Field;
-import org.jboss.forge.parser.java.ReadJavaClass;
-import org.jboss.forge.parser.java.ReadJavaSource;
-import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
+import org.jboss.forge.parser.java.Annotation;
+import org.jboss.forge.parser.java.JavaClass;
+import org.jboss.forge.parser.java.JavaType;
 import org.jboss.forge.parser.java.Visibility;
 import org.jboss.forge.parser.java.ast.AnnotationAccessor;
 import org.jboss.forge.parser.java.ast.ModifierAccessor;
+import org.jboss.forge.parser.java.source.AnnotationSource;
+import org.jboss.forge.parser.java.source.FieldSource;
+import org.jboss.forge.parser.java.source.JavaSource;
 import org.jboss.forge.parser.java.util.Strings;
 import org.jboss.forge.parser.java.util.Types;
 
 /**
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
-public class FieldImpl<O extends JavaSource<O>> implements Field<O>
+public class FieldImpl<O extends JavaSource<O>> implements FieldSource<O>
 {
-   private final AnnotationAccessor<O, Field<O>> annotations = new AnnotationAccessor<O, Field<O>>();
+   private final AnnotationAccessor<O, FieldSource<O>> annotations = new AnnotationAccessor<O, FieldSource<O>>();
    private final ModifierAccessor modifiers = new ModifierAccessor();
 
    private O parent;
@@ -114,13 +114,13 @@
     * Annotation<O> Modifiers
     */
    @Override
-   public Annotation<O> addAnnotation()
+   public AnnotationSource<O> addAnnotation()
    {
       return annotations.addAnnotation(this, field);
    }
 
    @Override
-   public Annotation<O> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
+   public AnnotationSource<O> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
    {
       if (parent.requiresImport(clazz))
       {
@@ -130,13 +130,13 @@
    }
 
    @Override
-   public Annotation<O> addAnnotation(final String className)
+   public AnnotationSource<O> addAnnotation(final String className)
    {
       return annotations.addAnnotation(this, field, className);
    }
 
    @Override
-   public List<Annotation<O>> getAnnotations()
+   public List<AnnotationSource<O>> getAnnotations()
    {
       return annotations.getAnnotations(this, field);
    }
@@ -154,19 +154,19 @@
    }
 
    @Override
-   public Annotation<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
+   public AnnotationSource<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
    {
       return annotations.getAnnotation(this, field, type);
    }
 
    @Override
-   public Annotation<O> getAnnotation(final String type)
+   public AnnotationSource<O> getAnnotation(final String type)
    {
       return annotations.getAnnotation(this, field, type);
    }
 
    @Override
-   public Field<O> removeAnnotation(final ReadAnnotation<O> annotation)
+   public FieldSource<O> removeAnnotation(final Annotation<O> annotation)
    {
       return annotations.removeAnnotation(this, field, annotation);
    }
@@ -188,7 +188,7 @@
    }
 
    @Override
-   public Field<O> setFinal(final boolean finl)
+   public FieldSource<O> setFinal(final boolean finl)
    {
       if (finl)
          modifiers.addModifier(field, ModifierKeyword.FINAL_KEYWORD);
@@ -204,7 +204,7 @@
    }
 
    @Override
-   public Field<O> setStatic(final boolean statc)
+   public FieldSource<O> setStatic(final boolean statc)
    {
       if (statc)
          modifiers.addModifier(field, ModifierKeyword.STATIC_KEYWORD);
@@ -220,7 +220,7 @@
    }
 
    @Override
-   public Field<O> setPackagePrivate()
+   public FieldSource<O> setPackagePrivate()
    {
       modifiers.clearVisibility(field);
       return this;
@@ -233,7 +233,7 @@
    }
 
    @Override
-   public Field<O> setPublic()
+   public FieldSource<O> setPublic()
    {
       modifiers.clearVisibility(field);
       modifiers.addModifier(field, ModifierKeyword.PUBLIC_KEYWORD);
@@ -247,7 +247,7 @@
    }
 
    @Override
-   public Field<O> setPrivate()
+   public FieldSource<O> setPrivate()
    {
       modifiers.clearVisibility(field);
       modifiers.addModifier(field, ModifierKeyword.PRIVATE_KEYWORD);
@@ -261,7 +261,7 @@
    }
 
    @Override
-   public Field<O> setProtected()
+   public FieldSource<O> setProtected()
    {
       modifiers.clearVisibility(field);
       modifiers.addModifier(field, ModifierKeyword.PROTECTED_KEYWORD);
@@ -275,7 +275,7 @@
    }
 
    @Override
-   public Field<O> setVisibility(final Visibility scope)
+   public FieldSource<O> setVisibility(final Visibility scope)
    {
       return Visibility.set(this, scope);
    }
@@ -301,7 +301,7 @@
    }
 
    @Override
-   public Field<O> setName(final String name)
+   public FieldSource<O> setName(final String name)
    {
       fragment.setName(ast.newSimpleName(name));
       return this;
@@ -385,7 +385,7 @@
    }
 
    @Override
-   public Field<O> setType(final Class<?> clazz)
+   public FieldSource<O> setType(final Class<?> clazz)
    {
       if (parent.requiresImport(clazz))
       {
@@ -395,13 +395,13 @@
    }
 
    @Override
-   public Field<O> setType(final ReadJavaSource<?> source)
+   public FieldSource<O> setType(final JavaType<?> source)
    {
       return setType(source.getQualifiedName());
    }
 
    @Override
-   public Field<O> setType(final String typeName)
+   public FieldSource<O> setType(final String typeName)
    {
       String simpleName = Types.toSimpleName(typeName);
 
@@ -466,17 +466,17 @@
    }
 
    @Override
-   public Field<O> setLiteralInitializer(final String value)
+   public FieldSource<O> setLiteralInitializer(final String value)
    {
       String stub = ""public class Stub { private String stub = "" + value + "" }"";
-      ReadJavaClass<?> temp = JavaParser.parse(ReadJavaClass.class, stub);
+      JavaClass<?> temp = JavaParser.parse(JavaClass.class, stub);
       VariableDeclarationFragment tempFrag = (VariableDeclarationFragment) temp.getFields().get(0).getInternal();
       fragment.setInitializer((Expression) ASTNode.copySubtree(ast, tempFrag.getInitializer()));
       return this;
    }
 
    @Override
-   public Field<O> setStringInitializer(final String value)
+   public FieldSource<O> setStringInitializer(final String value)
    {
       return setLiteralInitializer(Strings.enquote(value));
    }
"
d3f0b23a7e02b80bb6994b17c96efc99f66d75e1,Matt Benson,JavaAnnotationImpl.java,MODIFY,addAnnotationElement -> [String declaration] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaAnnotationImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaAnnotationImpl.java
index 76fa94b..55aa90c 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaAnnotationImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaAnnotationImpl.java
@@ -15,17 +15,18 @@
 import org.eclipse.jdt.core.dom.BodyDeclaration;
 import org.eclipse.jdt.core.dom.CompilationUnit;
 import org.eclipse.jface.text.Document;
-import org.jboss.forge.parser.java.ReadAnnotationElement;
-import org.jboss.forge.parser.java.ReadAnnotationElement.AnnotationElement;
-import org.jboss.forge.parser.java.ReadJavaAnnotation.JavaAnnotation;
+import org.jboss.forge.parser.java.AnnotationElement;
 import org.jboss.forge.parser.java.SourceType;
+import org.jboss.forge.parser.java.source.AnnotationElementSource;
+import org.jboss.forge.parser.java.source.JavaAnnotationSource;
+import org.jboss.forge.parser.java.source.JavaSource;
 import org.jboss.forge.parser.java.util.Strings;
 
 /**
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * 
  */
-public class JavaAnnotationImpl extends AbstractJavaSource<JavaAnnotation> implements JavaAnnotation
+public class JavaAnnotationImpl extends AbstractJavaSource<JavaAnnotationSource> implements JavaAnnotationSource
 {
 
    public JavaAnnotationImpl(JavaSource<?> enclosingType, final Document document, final CompilationUnit unit,
@@ -35,7 +36,7 @@
    }
 
    @Override
-   protected JavaAnnotation updateTypeNames(final String name)
+   protected JavaAnnotationSource updateTypeNames(final String name)
    {
       return this;
    }
@@ -47,18 +48,18 @@
    }
 
    @Override
-   public AnnotationElement addAnnotationElement()
+   public AnnotationElementSource addAnnotationElement()
    {
       return add(new AnnotationElementImpl(this));
    }
 
    @Override
-   public AnnotationElement addAnnotationElement(String declaration)
+   public AnnotationElementSource addAnnotationElement(String declaration)
    {
       return add(new AnnotationElementImpl(this, declaration));
    }
 
-   private AnnotationElement add(AnnotationElement annotationElement)
+   private AnnotationElementSource add(AnnotationElementSource annotationElement)
    {
       @SuppressWarnings(""unchecked"")
       final ListIterator<BodyDeclaration> members = getBodyDeclaration().bodyDeclarations().listIterator();
@@ -89,7 +90,7 @@
    @Override
    public boolean hasAnnotationElement(String name)
    {
-      for (AnnotationElement annotationElement : getAnnotationElements())
+      for (AnnotationElementSource annotationElement : getAnnotationElements())
       {
          if (Strings.areEqual(name, annotationElement.getName()))
          {
@@ -100,15 +101,15 @@
    }
 
    @Override
-   public boolean hasAnnotationElement(ReadAnnotationElement<?> annotationElement)
+   public boolean hasAnnotationElement(AnnotationElement<?> annotationElement)
    {
       return getAnnotationElements().contains(annotationElement);
    }
 
    @Override
-   public AnnotationElement getAnnotationElement(String name)
+   public AnnotationElementSource getAnnotationElement(String name)
    {
-      for (AnnotationElement annotationElement : getAnnotationElements())
+      for (AnnotationElementSource annotationElement : getAnnotationElements())
       {
          if (Strings.areEqual(name, annotationElement.getName()))
          {
@@ -119,9 +120,9 @@
    }
 
    @Override
-   public List<AnnotationElement> getAnnotationElements()
+   public List<AnnotationElementSource> getAnnotationElements()
    {
-      List<AnnotationElement> result = new ArrayList<AnnotationElement>();
+      List<AnnotationElementSource> result = new ArrayList<AnnotationElementSource>();
       @SuppressWarnings(""unchecked"")
       List<BodyDeclaration> bodyDeclarations = getBodyDeclaration().bodyDeclarations();
       for (BodyDeclaration bodyDeclaration : bodyDeclarations)
@@ -136,7 +137,7 @@
    }
 
    @Override
-   public JavaAnnotation removeAnnotationElement(ReadAnnotationElement<?> annotationElement)
+   public JavaAnnotationSource removeAnnotationElement(AnnotationElement<?> annotationElement)
    {
       getBodyDeclaration().bodyDeclarations().remove(annotationElement.getInternal());
       return this;
"
d3f0b23a7e02b80bb6994b17c96efc99f66d75e1,Matt Benson,JavaClassImpl.java,MODIFY,setSuperType -> [String type] | [JavaType type],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaClassImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaClassImpl.java
index 05697fc..1969901 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaClassImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaClassImpl.java
@@ -12,11 +12,12 @@
 import org.eclipse.jdt.core.dom.SimpleType;
 import org.eclipse.jdt.core.dom.TypeDeclaration;
 import org.eclipse.jface.text.Document;
-import org.jboss.forge.parser.java.ReadJavaClass.JavaClass;
-import org.jboss.forge.parser.java.ReadJavaSource;
-import org.jboss.forge.parser.java.ReadMethod.Method;
+import org.jboss.forge.parser.java.JavaType;
 import org.jboss.forge.parser.java.SourceType;
 import org.jboss.forge.parser.java.ast.ModifierAccessor;
+import org.jboss.forge.parser.java.source.JavaClassSource;
+import org.jboss.forge.parser.java.source.JavaSource;
+import org.jboss.forge.parser.java.source.MethodSource;
 import org.jboss.forge.parser.java.util.Types;
 
 /**
@@ -24,7 +25,7 @@
  *
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
-public class JavaClassImpl extends AbstractGenericCapableJavaSource<JavaClass> implements JavaClass
+public class JavaClassImpl extends AbstractGenericCapableJavaSource<JavaClassSource> implements JavaClassSource
 {
    private final ModifierAccessor modifiers = new ModifierAccessor();
 
@@ -35,9 +36,9 @@
    }
 
    @Override
-   protected JavaClass updateTypeNames(final String newName)
+   protected JavaClassSource updateTypeNames(final String newName)
    {
-      for (Method<JavaClass> m : getMethods())
+      for (MethodSource<JavaClassSource> m : getMethods())
       {
          if (m.isConstructor())
          {
@@ -58,7 +59,7 @@
    }
 
    @Override
-   public JavaClass setAbstract(final boolean abstrct)
+   public JavaClassSource setAbstract(final boolean abstrct)
    {
       if (abstrct)
       {
@@ -97,13 +98,13 @@
    }
 
    @Override
-   public JavaClass setSuperType(final ReadJavaSource<?> type)
+   public JavaClassSource setSuperType(final JavaType<?> type)
    {
       return setSuperType(type.getQualifiedName());
    }
 
    @Override
-   public JavaClass setSuperType(final Class<?> type)
+   public JavaClassSource setSuperType(final Class<?> type)
    {
       if (type.isAnnotation() || type.isEnum() || type.isInterface() || type.isPrimitive())
       {
@@ -114,7 +115,7 @@
 
    @SuppressWarnings(""unchecked"")
    @Override
-   public JavaClass setSuperType(final String type)
+   public JavaClassSource setSuperType(final String type)
    {
       if (type == null || type.trim().isEmpty())
       {
"
d3f0b23a7e02b80bb6994b17c96efc99f66d75e1,Matt Benson,JavaEnumImpl.java,MODIFY,addEnumConstant -> [String declaration] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
index 3aa1db4..8d43f72 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
@@ -15,16 +15,17 @@
 import org.eclipse.jdt.core.dom.EnumConstantDeclaration;
 import org.eclipse.jdt.core.dom.EnumDeclaration;
 import org.eclipse.jface.text.Document;
-import org.jboss.forge.parser.java.ReadEnumConstant.EnumConstant;
-import org.jboss.forge.parser.java.ReadJavaEnum.JavaEnum;
 import org.jboss.forge.parser.java.SourceType;
+import org.jboss.forge.parser.java.source.EnumConstantSource;
+import org.jboss.forge.parser.java.source.JavaEnumSource;
+import org.jboss.forge.parser.java.source.JavaSource;
 
 /**
  * Represents a Java Source File containing an Enum Type.
  *
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
-public class JavaEnumImpl extends AbstractJavaSourceMemberHolder<JavaEnum> implements JavaEnum
+public class JavaEnumImpl extends AbstractJavaSourceMemberHolder<JavaEnumSource> implements JavaEnumSource
 {
    public JavaEnumImpl(JavaSource<?> enclosingType, final Document document, final CompilationUnit unit,
             BodyDeclaration body)
@@ -33,9 +34,9 @@
    }
 
    @Override
-   public List<EnumConstant> getEnumConstants()
+   public List<EnumConstantSource> getEnumConstants()
    {
-      List<EnumConstant> result = new ArrayList<EnumConstant>();
+      List<EnumConstantSource> result = new ArrayList<EnumConstantSource>();
 
       for (Object o : (((EnumDeclaration) getBodyDeclaration()).enumConstants()))
       {
@@ -48,7 +49,7 @@
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public EnumConstant addEnumConstant()
+   public EnumConstantSource addEnumConstant()
    {
       EnumConstantImpl enumConst = new EnumConstantImpl(this);
       EnumDeclaration enumDeclaration = (EnumDeclaration) getBodyDeclaration();
@@ -60,7 +61,7 @@
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public EnumConstant addEnumConstant(final String declaration)
+   public EnumConstantSource addEnumConstant(final String declaration)
    {
       EnumConstantImpl enumConst = new EnumConstantImpl(this, declaration);
 
@@ -72,9 +73,9 @@
    }
 
    @Override
-   public EnumConstant getEnumConstant(String name)
+   public EnumConstantSource getEnumConstant(String name)
    {
-      for (EnumConstant enumConst : getEnumConstants())
+      for (EnumConstantSource enumConst : getEnumConstants())
       {
          if (enumConst.getName().equals(name))
          {
@@ -85,7 +86,7 @@
    }
 
    @Override
-   protected JavaEnum updateTypeNames(final String newName)
+   protected JavaEnumSource updateTypeNames(final String newName)
    {
       return this;
    }
"
d3f0b23a7e02b80bb6994b17c96efc99f66d75e1,Matt Benson,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
index e6964fb..b5850f7 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
@@ -15,25 +15,26 @@
 import org.eclipse.jface.text.Document;
 import org.eclipse.text.edits.TextEdit;
 import org.jboss.forge.parser.ParserException;
-import org.jboss.forge.parser.java.ReadAnnotation;
-import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
-import org.jboss.forge.parser.java.Import;
-import org.jboss.forge.parser.java.ReadJavaPackageInfo.JavaPackageInfo;
-import org.jboss.forge.parser.java.ReadJavaSource;
-import org.jboss.forge.parser.java.ReadMember.Member;
+import org.jboss.forge.parser.java.Annotation;
+import org.jboss.forge.parser.java.JavaType;
 import org.jboss.forge.parser.java.SourceType;
 import org.jboss.forge.parser.java.SyntaxError;
 import org.jboss.forge.parser.java.Visibility;
 import org.jboss.forge.parser.java.ast.AnnotationAccessor;
 import org.jboss.forge.parser.java.ast.ModifierAccessor;
 import org.jboss.forge.parser.java.ast.TypeDeclarationFinderVisitor;
+import org.jboss.forge.parser.java.source.AnnotationSource;
+import org.jboss.forge.parser.java.source.Import;
+import org.jboss.forge.parser.java.source.JavaPackageInfoSource;
+import org.jboss.forge.parser.java.source.JavaSource;
+import org.jboss.forge.parser.java.source.MemberSource;
 import org.jboss.forge.parser.java.util.Formatter;
 import org.jboss.forge.parser.java.util.Strings;
 import org.jboss.forge.parser.java.util.Types;
 import org.jboss.forge.parser.spi.JavaParserImpl;
 import org.jboss.forge.parser.spi.WildcardImportResolver;
 
-public class JavaPackageInfoImpl implements JavaPackageInfo
+public class JavaPackageInfoImpl implements JavaPackageInfoSource
 {
 
    public JavaPackageInfoImpl(JavaSource<?> enclosingType, Document document,
@@ -57,7 +58,7 @@
       return ""package-info"";
    }
 
-   private final AnnotationAccessor<JavaPackageInfo, JavaPackageInfo> annotations = new AnnotationAccessor<JavaPackageInfo, JavaPackageInfo>();
+   private final AnnotationAccessor<JavaPackageInfoSource, JavaPackageInfoSource> annotations = new AnnotationAccessor<JavaPackageInfoSource, JavaPackageInfoSource>();
    private final ModifierAccessor modifiers = new ModifierAccessor();
 
    protected final Document document;
@@ -78,25 +79,25 @@
     * Annotation modifiers
     */
    @Override
-   public Annotation<JavaPackageInfo> addAnnotation()
+   public AnnotationSource<JavaPackageInfoSource> addAnnotation()
    {
       return annotations.addAnnotation(this, getPackageDeclaration());
    }
 
    @Override
-   public Annotation<JavaPackageInfo> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
+   public AnnotationSource<JavaPackageInfoSource> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
    {
       return annotations.addAnnotation(this, getPackageDeclaration(), clazz.getName());
    }
 
    @Override
-   public Annotation<JavaPackageInfo> addAnnotation(final String className)
+   public AnnotationSource<JavaPackageInfoSource> addAnnotation(final String className)
    {
       return annotations.addAnnotation(this, getPackageDeclaration(), className);
    }
 
    @Override
-   public List<Annotation<JavaPackageInfo>> getAnnotations()
+   public List<AnnotationSource<JavaPackageInfoSource>> getAnnotations()
    {
       return annotations.getAnnotations(this, getPackageDeclaration());
    }
@@ -114,19 +115,19 @@
    }
 
    @Override
-   public JavaPackageInfo removeAnnotation(final ReadAnnotation<JavaPackageInfo> annotation)
+   public JavaPackageInfoSource removeAnnotation(final Annotation<JavaPackageInfoSource> annotation)
    {
       return annotations.removeAnnotation(this, getPackageDeclaration(), annotation);
    }
 
    @Override
-   public Annotation<JavaPackageInfo> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
+   public AnnotationSource<JavaPackageInfoSource> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
    {
       return annotations.getAnnotation(this, getPackageDeclaration(), type);
    }
 
    @Override
-   public Annotation<JavaPackageInfo> getAnnotation(final String type)
+   public AnnotationSource<JavaPackageInfoSource> getAnnotation(final String type)
    {
       return annotations.getAnnotation(this, getPackageDeclaration(), type);
    }
@@ -142,7 +143,7 @@
    }
 
    @Override
-   public <T extends ReadJavaSource<?>> Import addImport(final T type)
+   public <T extends JavaType<?>> Import addImport(final T type)
    {
       String qualifiedName = type.getQualifiedName();
       return this.addImport(qualifiedName);
@@ -202,7 +203,7 @@
    }
 
    @Override
-   public <T extends ReadJavaSource<?>> Import getImport(final T type)
+   public <T extends JavaType<?>> Import getImport(final T type)
    {
       return getImport(type.getQualifiedName());
    }
@@ -234,7 +235,7 @@
    }
 
    @Override
-   public <T extends ReadJavaSource<T>> boolean hasImport(final T type)
+   public <T extends JavaType<T>> boolean hasImport(final T type)
    {
       return hasImport(type.getQualifiedName());
    }
@@ -385,7 +386,7 @@
    }
 
    @Override
-   public JavaPackageInfo removeImport(final String name)
+   public JavaPackageInfoSource removeImport(final String name)
    {
       for (Import i : getImports())
       {
@@ -399,19 +400,19 @@
    }
 
    @Override
-   public JavaPackageInfo removeImport(final Class<?> clazz)
+   public JavaPackageInfoSource removeImport(final Class<?> clazz)
    {
       return removeImport(clazz.getName());
    }
 
    @Override
-   public <T extends ReadJavaSource<?>> JavaPackageInfo removeImport(final T type)
+   public <T extends JavaType<?>> JavaPackageInfoSource removeImport(final T type)
    {
       return removeImport(type.getQualifiedName());
    }
 
    @Override
-   public JavaPackageInfo removeImport(final Import imprt)
+   public JavaPackageInfoSource removeImport(final Import imprt)
    {
       Object internal = imprt.getInternal();
       if (unit.imports().contains(internal))
@@ -422,7 +423,7 @@
    }
 
    @Override
-   public List<Member<JavaPackageInfo, ?>> getMembers()
+   public List<MemberSource<JavaPackageInfoSource, ?>> getMembers()
    {
       return Collections.emptyList();
    }
@@ -435,7 +436,7 @@
    }
 
    @Override
-   public JavaPackageInfo setName(final String name)
+   public JavaPackageInfoSource setName(final String name)
    {
       throw new UnsupportedOperationException(""Changing name of ["" + getQualifiedName() + ""] not supported."");
    }
@@ -445,7 +446,7 @@
    {
       String result = getName();
 
-      ReadJavaSource<?> enclosingType = this;
+      JavaType<?> enclosingType = this;
       while (enclosingType != enclosingType.getEnclosingType())
       {
          enclosingType = getEnclosingType();
@@ -464,7 +465,7 @@
    {
       String result = getName();
 
-      ReadJavaSource<?> enclosingType = this;
+      JavaType<?> enclosingType = this;
       while (enclosingType != enclosingType.getEnclosingType())
       {
          enclosingType = getEnclosingType();
@@ -496,7 +497,7 @@
    }
 
    @Override
-   public JavaPackageInfo setPackage(final String name)
+   public JavaPackageInfoSource setPackage(final String name)
    {
       if (unit.getPackage() == null)
       {
@@ -507,7 +508,7 @@
    }
 
    @Override
-   public JavaPackageInfo setDefaultPackage()
+   public JavaPackageInfoSource setDefaultPackage()
    {
       unit.setPackage(null);
       return this;
@@ -529,7 +530,7 @@
    }
 
    @Override
-   public JavaPackageInfo setPackagePrivate()
+   public JavaPackageInfoSource setPackagePrivate()
    {
       modifiers.clearVisibility(getPackageDeclaration());
       return this;
@@ -542,7 +543,7 @@
    }
 
    @Override
-   public JavaPackageInfo setPublic()
+   public JavaPackageInfoSource setPublic()
    {
       modifiers.clearVisibility(getPackageDeclaration());
       modifiers.addModifier(getPackageDeclaration(), ModifierKeyword.PUBLIC_KEYWORD);
@@ -556,7 +557,7 @@
    }
 
    @Override
-   public JavaPackageInfo setPrivate()
+   public JavaPackageInfoSource setPrivate()
    {
       modifiers.clearVisibility(getPackageDeclaration());
       modifiers.addModifier(getPackageDeclaration(), ModifierKeyword.PRIVATE_KEYWORD);
@@ -570,7 +571,7 @@
    }
 
    @Override
-   public JavaPackageInfo setProtected()
+   public JavaPackageInfoSource setProtected()
    {
       modifiers.clearVisibility(getPackageDeclaration());
       modifiers.addModifier(getPackageDeclaration(), ModifierKeyword.PROTECTED_KEYWORD);
@@ -584,7 +585,7 @@
    }
 
    @Override
-   public JavaPackageInfo setVisibility(final Visibility scope)
+   public JavaPackageInfoSource setVisibility(final Visibility scope)
    {
       return Visibility.set(this, scope);
    }
@@ -593,7 +594,7 @@
     * Non-manipulation methods.
     */
    /**
-    * Return this {@link ReadJavaSource} file as a String
+    * Return this {@link JavaType} file as a String
     */
    @Override
    public String toString()
@@ -620,7 +621,7 @@
    }
 
    @Override
-   public JavaPackageInfo getOrigin()
+   public JavaPackageInfoSource getOrigin()
    {
       return this;
    }
"
d3f0b23a7e02b80bb6994b17c96efc99f66d75e1,Matt Benson,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java
index 04c7b6c..5839fbf 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java
@@ -22,25 +22,25 @@
 import org.eclipse.jdt.core.dom.Statement;
 import org.eclipse.jdt.core.dom.VariableDeclaration;
 import org.jboss.forge.parser.JavaParser;
-import org.jboss.forge.parser.java.ReadAnnotation;
-import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
-import org.jboss.forge.parser.java.ReadJavaClass.JavaClass;
-import org.jboss.forge.parser.java.ReadJavaSource;
-import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
-import org.jboss.forge.parser.java.ReadMethod.Method;
-import org.jboss.forge.parser.java.ReadParameter.Parameter;
+import org.jboss.forge.parser.java.Annotation;
+import org.jboss.forge.parser.java.JavaType;
 import org.jboss.forge.parser.java.Type;
 import org.jboss.forge.parser.java.Visibility;
 import org.jboss.forge.parser.java.ast.AnnotationAccessor;
 import org.jboss.forge.parser.java.ast.ModifierAccessor;
+import org.jboss.forge.parser.java.source.AnnotationSource;
+import org.jboss.forge.parser.java.source.JavaClassSource;
+import org.jboss.forge.parser.java.source.JavaSource;
+import org.jboss.forge.parser.java.source.MethodSource;
+import org.jboss.forge.parser.java.source.ParameterSource;
 import org.jboss.forge.parser.java.util.Types;
 
 /**
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
-public class MethodImpl<O extends JavaSource<O>> implements Method<O>
+public class MethodImpl<O extends JavaSource<O>> implements MethodSource<O>
 {
-   private final AnnotationAccessor<O, Method<O>> annotations = new AnnotationAccessor<O, Method<O>>();
+   private final AnnotationAccessor<O, MethodSource<O>> annotations = new AnnotationAccessor<O, MethodSource<O>>();
    private final ModifierAccessor modifiers = new ModifierAccessor();
 
    private O parent = null;
@@ -73,8 +73,8 @@
       init(parent);
 
       String stub = ""public class Stub { "" + method + "" }"";
-      JavaClass temp = (JavaClass) JavaParser.parse(stub);
-      List<Method<JavaClass>> methods = temp.getMethods();
+      JavaClassSource temp = (JavaClassSource) JavaParser.parse(stub);
+      List<MethodSource<JavaClassSource>> methods = temp.getMethods();
       MethodDeclaration newMethod = (MethodDeclaration) methods.get(0).getInternal();
       MethodDeclaration subtree = (MethodDeclaration) ASTNode.copySubtree(cu.getAST(), newMethod);
       this.method = subtree;
@@ -87,8 +87,8 @@
                .scope()) + "" "";
       signature += this.getName() + ""("";
 
-      List<Parameter<O>> parameters = this.getParameters();
-      for (Parameter<O> p : parameters)
+      List<ParameterSource<O>> parameters = this.getParameters();
+      for (ParameterSource<O> p : parameters)
       {
          signature += p.getType();
          if (parameters.indexOf(p) < (parameters.size() - 1))
@@ -106,13 +106,13 @@
     */
 
    @Override
-   public Annotation<O> addAnnotation()
+   public AnnotationSource<O> addAnnotation()
    {
       return annotations.addAnnotation(this, method);
    }
 
    @Override
-   public Annotation<O> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
+   public AnnotationSource<O> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
    {
       if (!parent.hasImport(clazz))
       {
@@ -122,13 +122,13 @@
    }
 
    @Override
-   public Annotation<O> addAnnotation(final String className)
+   public AnnotationSource<O> addAnnotation(final String className)
    {
       return annotations.addAnnotation(this, method, className);
    }
 
    @Override
-   public List<Annotation<O>> getAnnotations()
+   public List<AnnotationSource<O>> getAnnotations()
    {
       return annotations.getAnnotations(this, method);
    }
@@ -146,19 +146,19 @@
    }
 
    @Override
-   public Method<O> removeAnnotation(final ReadAnnotation<O> annotation)
+   public MethodSource<O> removeAnnotation(final Annotation<O> annotation)
    {
       return annotations.removeAnnotation(this, method, annotation);
    }
 
    @Override
-   public Annotation<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
+   public AnnotationSource<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
    {
       return annotations.getAnnotation(this, method, type);
    }
 
    @Override
-   public Annotation<O> getAnnotation(final String type)
+   public AnnotationSource<O> getAnnotation(final String type)
    {
       return annotations.getAnnotation(this, method, type);
    }
@@ -183,11 +183,11 @@
    }
 
    @Override
-   public Method<O> setBody(final String body)
+   public MethodSource<O> setBody(final String body)
    {
       String stub = ""public class Stub { public void method() {"" + body + ""} }"";
-      JavaClass temp = (JavaClass) JavaParser.parse(stub);
-      List<Method<JavaClass>> methods = temp.getMethods();
+      JavaClassSource temp = (JavaClassSource) JavaParser.parse(stub);
+      List<MethodSource<JavaClassSource>> methods = temp.getMethods();
       Block block = ((MethodDeclaration) methods.get(0).getInternal()).getBody();
 
       block = (Block) ASTNode.copySubtree(method.getAST(), block);
@@ -197,7 +197,7 @@
    }
 
    @Override
-   public Method<O> setConstructor(final boolean constructor)
+   public MethodSource<O> setConstructor(final boolean constructor)
    {
       method.setConstructor(constructor);
       if (isConstructor())
@@ -260,17 +260,17 @@
    }
 
    @Override
-   public Method<O> setReturnType(final Class<?> type)
+   public MethodSource<O> setReturnType(final Class<?> type)
    {
       return setReturnType(type.getSimpleName());
    }
 
    @Override
-   public Method<O> setReturnType(final String typeName)
+   public MethodSource<O> setReturnType(final String typeName)
    {
       String stub = ""public class Stub { public "" + typeName + "" method() {} }"";
-      JavaClass temp = (JavaClass) JavaParser.parse(stub);
-      List<Method<JavaClass>> methods = temp.getMethods();
+      JavaClassSource temp = (JavaClassSource) JavaParser.parse(stub);
+      List<MethodSource<JavaClassSource>> methods = temp.getMethods();
       org.eclipse.jdt.core.dom.Type returnType = ((MethodDeclaration) methods.get(0).getInternal()).getReturnType2();
 
       returnType = (org.eclipse.jdt.core.dom.Type) ASTNode.copySubtree(method.getAST(), returnType);
@@ -280,7 +280,7 @@
    }
 
    @Override
-   public Method<O> setReturnType(final ReadJavaSource<?> type)
+   public MethodSource<O> setReturnType(final JavaType<?> type)
    {
       return setReturnType(type.getName());
    }
@@ -292,7 +292,7 @@
    }
 
    @Override
-   public Method<O> setReturnTypeVoid()
+   public MethodSource<O> setReturnTypeVoid()
    {
       method.setReturnType2(null);
       return this;
@@ -309,7 +309,7 @@
    }
 
    @Override
-   public Method<O> setAbstract(final boolean abstrct)
+   public MethodSource<O> setAbstract(final boolean abstrct)
    {
       if (abstrct)
       {
@@ -329,7 +329,7 @@
    }
 
    @Override
-   public Method<O> setFinal(final boolean finl)
+   public MethodSource<O> setFinal(final boolean finl)
    {
       if (finl)
          modifiers.addModifier(method, ModifierKeyword.FINAL_KEYWORD);
@@ -345,7 +345,7 @@
    }
 
    @Override
-   public Method<O> setStatic(final boolean statc)
+   public MethodSource<O> setStatic(final boolean statc)
    {
       if (statc)
          modifiers.addModifier(method, ModifierKeyword.STATIC_KEYWORD);
@@ -361,7 +361,7 @@
    }
 
    @Override
-   public Method<O> setName(final String name)
+   public MethodSource<O> setName(final String name)
    {
       if (method.isConstructor())
       {
@@ -373,11 +373,11 @@
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public Method<O> setParameters(final String parameters)
+   public MethodSource<O> setParameters(final String parameters)
    {
       String stub = ""public class Stub { public void method( "" + parameters + "" ) {} }"";
-      JavaClass temp = (JavaClass) JavaParser.parse(stub);
-      List<Method<JavaClass>> methods = temp.getMethods();
+      JavaClassSource temp = (JavaClassSource) JavaParser.parse(stub);
+      List<MethodSource<JavaClassSource>> methods = temp.getMethods();
       List<VariableDeclaration> astParameters = ((MethodDeclaration) methods.get(0).getInternal()).parameters();
 
       method.parameters().clear();
@@ -391,9 +391,9 @@
    }
 
    @Override
-   public List<Parameter<O>> getParameters()
+   public List<ParameterSource<O>> getParameters()
    {
-      List<Parameter<O>> results = new ArrayList<Parameter<O>>();
+      List<ParameterSource<O>> results = new ArrayList<ParameterSource<O>>();
       @SuppressWarnings(""unchecked"")
       List<SingleVariableDeclaration> parameters = method.parameters();
       for (SingleVariableDeclaration param : parameters)
@@ -414,7 +414,7 @@
    }
 
    @Override
-   public Method<O> setPackagePrivate()
+   public MethodSource<O> setPackagePrivate()
    {
       modifiers.clearVisibility(method);
       return this;
@@ -427,7 +427,7 @@
    }
 
    @Override
-   public Method<O> setPublic()
+   public MethodSource<O> setPublic()
    {
       modifiers.clearVisibility(method);
       modifiers.addModifier(method, ModifierKeyword.PUBLIC_KEYWORD);
@@ -441,7 +441,7 @@
    }
 
    @Override
-   public Method<O> setPrivate()
+   public MethodSource<O> setPrivate()
    {
       modifiers.clearVisibility(method);
       modifiers.addModifier(method, ModifierKeyword.PRIVATE_KEYWORD);
@@ -455,7 +455,7 @@
    }
 
    @Override
-   public Method<O> setProtected()
+   public MethodSource<O> setProtected()
    {
       modifiers.clearVisibility(method);
       modifiers.addModifier(method, ModifierKeyword.PROTECTED_KEYWORD);
@@ -469,7 +469,7 @@
    }
 
    @Override
-   public Method<O> setVisibility(final Visibility scope)
+   public MethodSource<O> setVisibility(final Visibility scope)
    {
       return Visibility.set(this, scope);
    }
@@ -536,14 +536,14 @@
    }
 
    @Override
-   public Method<O> addThrows(final Class<? extends Exception> type)
+   public MethodSource<O> addThrows(final Class<? extends Exception> type)
    {
       return addThrows(type.getName());
    }
 
    @Override
    @SuppressWarnings({ ""unchecked"", ""rawtypes"" })
-   public Method<O> addThrows(final String type)
+   public MethodSource<O> addThrows(final String type)
    {
       String packg = Types.getPackage(type);
       String name = Types.toSimpleName(type);
@@ -576,13 +576,13 @@
    }
 
    @Override
-   public Method<O> removeThrows(final Class<? extends Exception> type)
+   public MethodSource<O> removeThrows(final Class<? extends Exception> type)
    {
       return removeThrows(type.getName());
    }
 
    @Override
-   public Method<O> removeThrows(final String type)
+   public MethodSource<O> removeThrows(final String type)
    {
       List<?> list = (List<?>) method.getStructuralProperty(MethodDeclaration.THROWN_EXCEPTIONS_PROPERTY);
 
"
d3f0b23a7e02b80bb6994b17c96efc99f66d75e1,Matt Benson,ParameterImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/ParameterImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/ParameterImpl.java
index 9357763..0cd30c4 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/ParameterImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/ParameterImpl.java
@@ -10,20 +10,20 @@
 
 import org.eclipse.jdt.core.dom.SimpleName;
 import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
-import org.jboss.forge.parser.java.ReadAnnotation;
-import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
-import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
-import org.jboss.forge.parser.java.ReadParameter.Parameter;
+import org.jboss.forge.parser.java.Annotation;
 import org.jboss.forge.parser.java.Type;
 import org.jboss.forge.parser.java.ast.AnnotationAccessor;
+import org.jboss.forge.parser.java.source.AnnotationSource;
+import org.jboss.forge.parser.java.source.JavaSource;
+import org.jboss.forge.parser.java.source.ParameterSource;
 
 /**
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * 
  */
-public class ParameterImpl<O extends JavaSource<O>> implements Parameter<O>
+public class ParameterImpl<O extends JavaSource<O>> implements ParameterSource<O>
 {
-   private final AnnotationAccessor<O, Parameter<O>> annotations = new AnnotationAccessor<O, Parameter<O>>();
+   private final AnnotationAccessor<O, ParameterSource<O>> annotations = new AnnotationAccessor<O, ParameterSource<O>>();
    private final O parent;
    private final SingleVariableDeclaration param;
 
@@ -64,13 +64,13 @@
    }
 
    @Override
-   public Annotation<O> addAnnotation()
+   public AnnotationSource<O> addAnnotation()
    {
       return annotations.addAnnotation(this, param);
    }
 
    @Override
-   public Annotation<O> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
+   public AnnotationSource<O> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
    {
       if (parent.requiresImport(clazz))
       {
@@ -80,13 +80,13 @@
    }
 
    @Override
-   public Annotation<O> addAnnotation(final String className)
+   public AnnotationSource<O> addAnnotation(final String className)
    {
       return annotations.addAnnotation(this, param, className);
    }
 
    @Override
-   public List<Annotation<O>> getAnnotations()
+   public List<AnnotationSource<O> > getAnnotations()
    {
       return annotations.getAnnotations(this, param);
    }
@@ -104,19 +104,19 @@
    }
 
    @Override
-   public Annotation<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
+   public AnnotationSource<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
    {
       return annotations.getAnnotation(this, param, type);
    }
 
    @Override
-   public Annotation<O> getAnnotation(final String type)
+   public AnnotationSource<O> getAnnotation(final String type)
    {
       return annotations.getAnnotation(this, param, type);
    }
 
    @Override
-   public Parameter<O> removeAnnotation(final ReadAnnotation<O> annotation)
+   public ParameterSource<O> removeAnnotation(final Annotation<O> annotation)
    {
       return annotations.removeAnnotation(this, param, annotation);
    }
"
d3f0b23a7e02b80bb6994b17c96efc99f66d75e1,Matt Benson,Formatter.java,MODIFY,format -> [String source] | [JavaClass javaClass],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/util/Formatter.java b/impl/src/main/java/org/jboss/forge/parser/java/util/Formatter.java
index deb3bcd..946f8cc 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/util/Formatter.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/util/Formatter.java
@@ -17,14 +17,14 @@
 import org.eclipse.jface.text.Document;
 import org.eclipse.jface.text.IDocument;
 import org.eclipse.text.edits.TextEdit;
-import org.jboss.forge.parser.java.ReadJavaClass;
+import org.jboss.forge.parser.java.JavaClass;
 
 /**
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
 public abstract class Formatter
 {
-   public static String format(ReadJavaClass javaClass)
+   public static String format(JavaClass javaClass)
    {
       return format(javaClass.toString());
    }
"
d3f0b23a7e02b80bb6994b17c96efc99f66d75e1,Matt Benson,JavaParserImpl.java,MODIFY,"parse -> [Class type, URL url] | [InputStream data]","diff --git a/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java b/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
index 32050a7..3e95af2 100644
--- a/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
@@ -26,19 +26,19 @@
 import org.eclipse.jdt.internal.compiler.util.Util;
 import org.eclipse.jface.text.Document;
 import org.jboss.forge.parser.ParserException;
-import org.jboss.forge.parser.java.ReadJavaAnnotation.JavaAnnotation;
-import org.jboss.forge.parser.java.ReadJavaClass.JavaClass;
-import org.jboss.forge.parser.java.ReadJavaEnum.JavaEnum;
-import org.jboss.forge.parser.java.ReadJavaInterface.JavaInterface;
-import org.jboss.forge.parser.java.ReadJavaPackageInfo.JavaPackageInfo;
-import org.jboss.forge.parser.java.ReadJavaSource;
-import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
+import org.jboss.forge.parser.java.JavaType;
 import org.jboss.forge.parser.java.ast.TypeDeclarationFinderVisitor;
 import org.jboss.forge.parser.java.impl.JavaAnnotationImpl;
 import org.jboss.forge.parser.java.impl.JavaClassImpl;
 import org.jboss.forge.parser.java.impl.JavaEnumImpl;
 import org.jboss.forge.parser.java.impl.JavaInterfaceImpl;
 import org.jboss.forge.parser.java.impl.JavaPackageInfoImpl;
+import org.jboss.forge.parser.java.source.JavaAnnotationSource;
+import org.jboss.forge.parser.java.source.JavaClassSource;
+import org.jboss.forge.parser.java.source.JavaEnumSource;
+import org.jboss.forge.parser.java.source.JavaInterfaceSource;
+import org.jboss.forge.parser.java.source.JavaPackageInfoSource;
+import org.jboss.forge.parser.java.source.JavaSource;
 
 /**
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
@@ -47,7 +47,7 @@
 {
 
    @Override
-   public ReadJavaSource<?> parse(final InputStream data)
+   public JavaType<?> parse(final InputStream data)
    {
       try
       {
@@ -65,7 +65,7 @@
    }
 
    @SuppressWarnings({ ""rawtypes"", ""unchecked"" })
-   private ReadJavaSource<?> parse(final String data)
+   private JavaType<?> parse(final String data)
    {
       Document document = new Document(data);
       ASTParser parser = ASTParser.newParser(AST.JLS4);
@@ -98,8 +98,8 @@
    }
 
    /**
-    * Create a {@link ReadJavaSource} instance from the given {@link Document}, {@link CompilationUnit},
-    * {@link TypeDeclaration}, and enclosing {@link ReadJavaSource} type.
+    * Create a {@link JavaType} instance from the given {@link Document}, {@link CompilationUnit},
+    * {@link TypeDeclaration}, and enclosing {@link JavaType} type.
     */
    public static JavaSource<?> getJavaSource(JavaSource<?> enclosingType, Document document, CompilationUnit unit,
             ASTNode declaration)
@@ -143,19 +143,19 @@
    {
       if (type != null)
       {
-         if (type.isAssignableFrom(JavaClass.class))
+         if (type.isAssignableFrom(JavaClassSource.class))
             return (T) parse(""public class JavaClass { }"");
    
-         if (type.isAssignableFrom(JavaEnum.class))
+         if (type.isAssignableFrom(JavaEnumSource.class))
             return (T) parse(""public enum JavaEnum { }"");
    
-         if (type.isAssignableFrom(JavaAnnotation.class))
+         if (type.isAssignableFrom(JavaAnnotationSource.class))
             return (T) parse(""public @interface JavaAnnotation { }"");
    
-         if (type.isAssignableFrom(JavaInterface.class))
+         if (type.isAssignableFrom(JavaInterfaceSource.class))
             return (T) parse(""public interface JavaInterface { }"");
    
-         if (type.isAssignableFrom(JavaPackageInfo.class))
+         if (type.isAssignableFrom(JavaPackageInfoSource.class))
             return (T) parse(""package org.example;"");
       }
       return null;
"
d3f0b23a7e02b80bb6994b17c96efc99f66d75e1,Matt Benson,MethodSignatureTest.java,MODIFY,"assertVisibility -> [String visibility, Method method] | [Visibility visibility, MethodSource method]","diff --git a/impl/src/test/java/org/jboss/forge/test/parser/java/MethodSignatureTest.java b/impl/src/test/java/org/jboss/forge/test/parser/java/MethodSignatureTest.java
index 1c29cbf..a56db90 100644
--- a/impl/src/test/java/org/jboss/forge/test/parser/java/MethodSignatureTest.java
+++ b/impl/src/test/java/org/jboss/forge/test/parser/java/MethodSignatureTest.java
@@ -11,10 +11,10 @@
 import java.util.List;
 
 import org.jboss.forge.parser.JavaParser;
-import org.jboss.forge.parser.java.ReadJavaClass.JavaClass;
-import org.jboss.forge.parser.java.ReadMethod.Method;
-import org.jboss.forge.parser.java.ReadParameter.Parameter;
 import org.jboss.forge.parser.java.Visibility;
+import org.jboss.forge.parser.java.source.JavaClassSource;
+import org.jboss.forge.parser.java.source.MethodSource;
+import org.jboss.forge.parser.java.source.ParameterSource;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -26,7 +26,7 @@
    @Test
    public void testEmptyMethodSignature() throws Exception
    {
-      Method<JavaClass> method = JavaParser.create(JavaClass.class).addMethod(""public void hello()"");
+      MethodSource<JavaClassSource> method = JavaParser.create(JavaClassSource.class).addMethod(""public void hello()"");
       String signature = method.toSignature();
       assertEquals(""public hello() : void"", signature);
    }
@@ -34,7 +34,7 @@
    @Test
    public void testMethodSignatureParams() throws Exception
    {
-      Method<JavaClass> method = JavaParser.create(JavaClass.class).addMethod(""public void hello(String foo, int bar)"");
+      MethodSource<JavaClassSource> method = JavaParser.create(JavaClassSource.class).addMethod(""public void hello(String foo, int bar)"");
       String signature = method.toSignature();
       assertEquals(""public hello(String, int) : void"", signature);
    }
@@ -42,8 +42,8 @@
    @Test
    public void testMethodParams() throws Exception
    {
-      Method<JavaClass> method = JavaParser.create(JavaClass.class).addMethod(""public void hello(String foo, int bar)"");
-      List<Parameter<JavaClass>> parameters = method.getParameters();
+      MethodSource<JavaClassSource> method = JavaParser.create(JavaClassSource.class).addMethod(""public void hello(String foo, int bar)"");
+      List<ParameterSource<JavaClassSource>> parameters = method.getParameters();
 
       Assert.assertEquals(""String"", parameters.get(0).getTypeInspector().toString());
       Assert.assertEquals(""int"", parameters.get(1).getTypeInspector().toString());
@@ -52,14 +52,14 @@
    @Test(expected = UnsupportedOperationException.class)
    public void testUnmodifiableMethodParams() throws Exception
    {
-      JavaParser.create(JavaClass.class).addMethod(""public void hello(String foo, int bar)"").getParameters().add(null);
+      JavaParser.create(JavaClassSource.class).addMethod(""public void hello(String foo, int bar)"").getParameters().add(null);
    }
 
    @Test
    public void testMethodVisibility() throws Exception {
-       JavaClass javaClass = JavaParser.create(JavaClass.class);
+       JavaClassSource javaClass = JavaParser.create(JavaClassSource.class);
 
-       Method<JavaClass> method = javaClass.addMethod(""public void hello()"");
+       MethodSource<JavaClassSource> method = javaClass.addMethod(""public void hello()"");
        assertVisibility(Visibility.PUBLIC, method);
        assertVisibility(""public"", method);
 
@@ -78,8 +78,8 @@
 
    @Test
    public void testMethodVisibilityWithSetter() throws Exception {
-       JavaClass javaClass = JavaParser.create(JavaClass.class);
-       Method<JavaClass> method = javaClass.addMethod().setName(""hello"");
+       JavaClassSource javaClass = JavaParser.create(JavaClassSource.class);
+       MethodSource<JavaClassSource> method = javaClass.addMethod().setName(""hello"");
        assertVisibility("""", method);
 
        method.setVisibility(Visibility.PUBLIC);
@@ -95,11 +95,11 @@
        assertVisibility("""", method);
    }
 
-   private void assertVisibility(Visibility visibility, Method<JavaClass> method) {
+   private void assertVisibility(Visibility visibility, MethodSource<JavaClassSource> method) {
        Assert.assertEquals(visibility, method.getVisibility());
    }
 
-   private void assertVisibility(String visibility, Method<JavaClass> method) {
+   private void assertVisibility(String visibility, MethodSource<JavaClassSource> method) {
        Assert.assertEquals(visibility, method.getVisibility().toString());
    }
 }
"
d3f0b23a7e02b80bb6994b17c96efc99f66d75e1,Matt Benson,AnnotationTest.java,MODIFY,setTarget -> [AnnotationTarget target] | [AnnotationTargetSource target],"diff --git a/impl/src/test/java/org/jboss/forge/test/parser/java/common/AnnotationTest.java b/impl/src/test/java/org/jboss/forge/test/parser/java/common/AnnotationTest.java
index 73dae74..c2487e7 100644
--- a/impl/src/test/java/org/jboss/forge/test/parser/java/common/AnnotationTest.java
+++ b/impl/src/test/java/org/jboss/forge/test/parser/java/common/AnnotationTest.java
@@ -17,9 +17,9 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
-import org.jboss.forge.parser.java.ReadAnnotationTarget.AnnotationTarget;
-import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
+import org.jboss.forge.parser.java.source.AnnotationSource;
+import org.jboss.forge.parser.java.source.AnnotationTargetSource;
+import org.jboss.forge.parser.java.source.JavaSource;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -28,14 +28,14 @@
  */
 public abstract class AnnotationTest<O extends JavaSource<O>, T>
 {
-   private AnnotationTarget<O, T> target;
+   private AnnotationTargetSource<O, T> target;
 
-   protected AnnotationTarget<O, T> getTarget()
+   protected AnnotationTargetSource<O, T> getTarget()
    {
       return target;
    }
 
-   protected void setTarget(final AnnotationTarget<O, T> target)
+   protected void setTarget(final AnnotationTargetSource<O, T> target)
    {
       this.target = target;
    }
@@ -51,7 +51,7 @@
    @Test
    public void testParseAnnotation() throws Exception
    {
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
       assertEquals(5, annotations.size());
       assertEquals(""deprecation"", annotations.get(1).getStringValue());
       assertEquals(""deprecation"", annotations.get(1).getStringValue(""value""));
@@ -70,8 +70,8 @@
    public void testAddAnnotation() throws Exception
    {
       int size = target.getAnnotations().size();
-      Annotation<O> annotation = target.addAnnotation().setName(""RequestScoped"");
-      List<Annotation<O>> annotations = target.getAnnotations();
+      AnnotationSource<O> annotation = target.addAnnotation().setName(""RequestScoped"");
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
       assertEquals(size + 1, annotations.size());
       assertEquals(annotation, target.getAnnotations().get(size));
       assertEquals(""RequestScoped"", annotation.getName());
@@ -81,8 +81,8 @@
    public void testAddAnonymousAnnotation() throws Exception
    {
       int size = target.getAnnotations().size();
-      Annotation<O> annotation = target.addAnnotation();
-      List<Annotation<O>> annotations = target.getAnnotations();
+      AnnotationSource<O> annotation = target.addAnnotation();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
       assertEquals(size + 1, annotations.size());
       assertEquals(annotation, target.getAnnotations().get(size));
       assertEquals(""@MISSING"", annotation.toString());
@@ -92,8 +92,8 @@
    public void testAddAnnotationByClass() throws Exception
    {
       int size = target.getAnnotations().size();
-      Annotation<O> annotation = target.addAnnotation(Test.class);
-      List<Annotation<O>> annotations = target.getAnnotations();
+      AnnotationSource<O> annotation = target.addAnnotation(Test.class);
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
       assertEquals(size + 1, annotations.size());
       assertEquals(annotation, target.getAnnotations().get(size));
       assertEquals(Test.class.getSimpleName(), annotation.getName());
@@ -105,8 +105,8 @@
    public void testAddAnnotationByName() throws Exception
    {
       int size = target.getAnnotations().size();
-      Annotation<O> annotation = target.addAnnotation(""RequestScoped"");
-      List<Annotation<O>> annotations = target.getAnnotations();
+      AnnotationSource<O> annotation = target.addAnnotation(""RequestScoped"");
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
       assertEquals(size + 1, annotations.size());
       assertEquals(annotation, target.getAnnotations().get(size));
       assertEquals(""RequestScoped"", annotation.getName());
@@ -118,9 +118,9 @@
    public void testCanAddAnnotationDuplicate() throws Exception
    {
       int size = target.getAnnotations().size();
-      Annotation<O> anno1 = target.addAnnotation(Test.class);
-      Annotation<O> anno2 = target.addAnnotation(Test.class);
-      List<Annotation<O>> annotations = target.getAnnotations();
+      AnnotationSource<O> anno1 = target.addAnnotation(Test.class);
+      AnnotationSource<O> anno2 = target.addAnnotation(Test.class);
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
       assertEquals(size + 2, annotations.size());
       assertEquals(Test.class.getSimpleName(), anno1.getName());
       assertEquals(Test.class.getSimpleName(), anno2.getName());
@@ -141,9 +141,9 @@
    {
       target.addAnnotation(Test.class).setEnumValue(MockEnumType.FOO);
 
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
 
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       MockEnumType enumValue = annotation.getEnumValue(MockEnumType.class);
       assertEquals(MockEnumType.FOO, enumValue);
    }
@@ -153,9 +153,9 @@
    {
       target.addAnnotation(Test.class).setEnumValue(""name"", MockEnumType.BAR);
 
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
 
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       MockEnumType enumValue = annotation.getEnumValue(MockEnumType.class, ""name"");
       assertEquals(MockEnumType.BAR, enumValue);
    }
@@ -165,9 +165,9 @@
    {
       target.addAnnotation(Test.class).setEnumValue(MockEnumType.FOO, MockEnumType.BAR);
 
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
 
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       MockEnumType[] enumArrayValue = annotation.getEnumArrayValue(MockEnumType.class);
       assertArrayEquals(MockEnumType.values(), enumArrayValue);
    }
@@ -177,9 +177,9 @@
    {
       target.addAnnotation(Test.class).setEnumArrayValue(""name"", MockEnumType.FOO, MockEnumType.BAR);
 
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
 
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       MockEnumType[] enumArrayValue = annotation.getEnumArrayValue(MockEnumType.class, ""name"");
       assertArrayEquals(MockEnumType.values(), enumArrayValue);
    }
@@ -189,9 +189,9 @@
    {
       target.addAnnotation(Test.class).setClassValue(Integer.class);
 
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
 
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       assertEquals(Integer.class, annotation.getClassValue());
 
       annotation.setClassValue(int.class);
@@ -203,9 +203,9 @@
    {
       target.addAnnotation(Test.class).setClassValue(""type"", Integer.class);
 
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
 
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       assertEquals(Integer.class, annotation.getClassValue(""type""));
 
       annotation.setClassValue(""type"", int.class);
@@ -217,9 +217,9 @@
    {
       target.addAnnotation(Test.class).setClassArrayValue(Integer.class, int.class);
 
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
 
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       assertArrayEquals(new Class[] { Integer.class, int.class }, annotation.getClassArrayValue());
    }
 
@@ -228,9 +228,9 @@
    {
       target.addAnnotation(Test.class).setClassArrayValue(""types"", Integer.class, int.class);
 
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
 
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       assertArrayEquals(new Class[] { Integer.class, int.class }, annotation.getClassArrayValue(""types""));
    }
 
@@ -240,12 +240,12 @@
       target.addAnnotation(Test.class).setAnnotationValue().setName(""com.test.Foo"")
                .setEnumValue(ElementType.FIELD, ElementType.METHOD);
 
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
 
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       assertEquals(""@com.test.Foo({ElementType.FIELD,ElementType.METHOD})"", annotation.getLiteralValue());
-      
-      Annotation<O> nested = annotation.getAnnotationValue();
+
+      AnnotationSource<O> nested = annotation.getAnnotationValue();
       assertEquals(""com.test.Foo"", nested.getName());
       assertEquals(""{ElementType.FIELD,ElementType.METHOD}"", nested.getLiteralValue());
    }
@@ -255,12 +255,12 @@
    {
       target.addAnnotation(Test.class).setAnnotationValue(""foo"").setName(""com.test.Foo"").setStringValue(""bar"", ""baz"");
 
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
 
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       assertEquals(""@com.test.Foo(bar=\""baz\"")"", annotation.getLiteralValue(""foo""));
 
-      Annotation<O> nested = annotation.getAnnotationValue(""foo"");
+      AnnotationSource<O> nested = annotation.getAnnotationValue(""foo"");
       assertEquals(""com.test.Foo"", nested.getName());
       assertEquals(""baz"", nested.getStringValue(""bar""));
    }
@@ -269,14 +269,14 @@
    public void testAddNestedAnonymousAnnotationValue() throws Exception
    {
       target.addAnnotation(Test.class).setAnnotationValue()
-      .setEnumValue(ElementType.FIELD, ElementType.METHOD);
+               .setEnumValue(ElementType.FIELD, ElementType.METHOD);
 
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
 
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       assertEquals(""@MISSING({ElementType.FIELD,ElementType.METHOD})"", annotation.getLiteralValue());
 
-      Annotation<O> nested = annotation.getAnnotationValue();
+      AnnotationSource<O> nested = annotation.getAnnotationValue();
       assertEquals(""MISSING"", nested.getName());
       assertEquals(""{ElementType.FIELD,ElementType.METHOD}"", nested.getLiteralValue());
    }
@@ -286,12 +286,12 @@
    {
       target.addAnnotation(Test.class).setAnnotationValue(""foo"").setStringValue(""bar"", ""baz"");
 
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
 
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       assertEquals(""@MISSING(bar=\""baz\"")"", annotation.getLiteralValue(""foo""));
 
-      Annotation<O> nested = annotation.getAnnotationValue(""foo"");
+      AnnotationSource<O> nested = annotation.getAnnotationValue(""foo"");
       assertEquals(""MISSING"", nested.getName());
       assertEquals(""baz"", nested.getStringValue(""bar""));
    }
@@ -302,12 +302,12 @@
       target.addAnnotation(Test.class).setAnnotationValue().setName(""com.test.Foo"")
                .setAnnotationValue().setName(""com.test.Bar"");
 
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
 
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       assertEquals(""@com.test.Foo(@com.test.Bar)"", annotation.getLiteralValue());
 
-      Annotation<O> deeplyNested = annotation.getAnnotationValue().getAnnotationValue();
+      AnnotationSource<O> deeplyNested = annotation.getAnnotationValue().getAnnotationValue();
       assertEquals(""com.test.Bar"", deeplyNested.getName());
       assertTrue(deeplyNested.isMarker());
    }
@@ -318,12 +318,12 @@
       target.addAnnotation(Test.class).setAnnotationValue(""foo"").setName(""com.test.Foo"").setAnnotationValue(""bar"")
                .setName(""com.test.Bar"");
 
-      List<Annotation<O>> annotations = target.getAnnotations();
-      
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
+
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       assertEquals(""@com.test.Foo(bar=@com.test.Bar)"", annotation.getLiteralValue(""foo""));
 
-      Annotation<O> deeplyNested = annotation.getAnnotationValue(""foo"").getAnnotationValue(""bar"");
+      AnnotationSource<O> deeplyNested = annotation.getAnnotationValue(""foo"").getAnnotationValue(""bar"");
       assertEquals(""com.test.Bar"", deeplyNested.getName());
       assertTrue(deeplyNested.isMarker());
    }
@@ -332,14 +332,14 @@
    public void testAddDeeplyNestedAnonymousAnnotationValue() throws Exception
    {
       target.addAnnotation(Test.class).setAnnotationValue().setName(""com.test.Foo"")
-      .setAnnotationValue();
+               .setAnnotationValue();
 
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
 
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       assertEquals(""@com.test.Foo(@MISSING)"", annotation.getLiteralValue());
 
-      Annotation<O> deeplyNested = annotation.getAnnotationValue().getAnnotationValue();
+      AnnotationSource<O> deeplyNested = annotation.getAnnotationValue().getAnnotationValue();
       assertEquals(""MISSING"", deeplyNested.getName());
       assertTrue(deeplyNested.isMarker());
    }
@@ -349,12 +349,12 @@
    {
       target.addAnnotation(Test.class).setAnnotationValue(""foo"").setName(""com.test.Foo"").setAnnotationValue(""bar"");
 
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
 
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       assertEquals(""@com.test.Foo(bar=@MISSING)"", annotation.getLiteralValue(""foo""));
 
-      Annotation<O> deeplyNested = annotation.getAnnotationValue(""foo"").getAnnotationValue(""bar"");
+      AnnotationSource<O> deeplyNested = annotation.getAnnotationValue(""foo"").getAnnotationValue(""bar"");
       assertEquals(""MISSING"", deeplyNested.getName());
       assertTrue(deeplyNested.isMarker());
    }
@@ -366,10 +366,10 @@
 
       target.addAnnotation(Test.class).setLiteralValue(""435"");
 
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
       assertEquals(size + 1, annotations.size());
 
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       assertEquals(Test.class.getSimpleName(), annotation.getName());
       assertEquals(""435"", annotation.getLiteralValue());
    }
@@ -382,10 +382,10 @@
       target.addAnnotation(Test.class).setLiteralValue(""expected"", ""RuntimeException.class"")
                .setLiteralValue(""foo"", ""bar"");
 
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
       assertEquals(size + 1, annotations.size());
 
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       assertEquals(Test.class.getSimpleName(), annotation.getName());
       assertEquals(null, annotation.getLiteralValue());
       assertEquals(""RuntimeException.class"", annotation.getLiteralValue(""expected""));
@@ -396,7 +396,7 @@
    public void testAddValueConvertsToNormalAnnotation() throws Exception
    {
       target.addAnnotation(Test.class).setLiteralValue(""RuntimeException.class"");
-      Annotation<O> annotation = target.getAnnotations().get(target.getAnnotations().size() - 1);
+      AnnotationSource<O> annotation = target.getAnnotations().get(target.getAnnotations().size() - 1);
 
       assertEquals(""RuntimeException.class"", annotation.getLiteralValue());
       assertTrue(annotation.isSingleValue());
@@ -413,7 +413,7 @@
    @Test
    public void testAnnotationBeginsAsMarker() throws Exception
    {
-      Annotation<O> anno = target.addAnnotation(Test.class);
+      AnnotationSource<O> anno = target.addAnnotation(Test.class);
       assertTrue(anno.isMarker());
       assertFalse(anno.isSingleValue());
       assertFalse(anno.isNormal());
@@ -488,8 +488,8 @@
    {
       target.addAnnotation(Test.class).setLiteralValue(""expected"", ""RuntimeException.class"");
 
-      List<Annotation<O>> annotations = target.getAnnotations();
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       annotation.removeAllValues();
 
       assertEquals(0, annotation.getValues().size());
@@ -500,7 +500,7 @@
    {
       target.addAnnotation(Test.class).setLiteralValue(""expected"", ""RuntimeException.class"");
 
-      Annotation<O> annotation = target.getAnnotation(Test.class);
+      AnnotationSource<O> annotation = target.getAnnotation(Test.class);
       assertEquals(Test.class.getSimpleName(), annotation.getName());
       assertEquals(Test.class.getName(), annotation.getQualifiedName());
    }
@@ -513,10 +513,10 @@
       target.addAnnotation(Test.class)
                .setLiteralValue(""foo"", ""bar"").setLiteralValue(""foo"", ""baz"");
 
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
       assertEquals(size + 1, annotations.size());
 
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       assertEquals(Test.class.getSimpleName(), annotation.getName());
       assertEquals(null, annotation.getLiteralValue());
       assertEquals(""baz"", annotation.getLiteralValue(""foo""));
"
d3f0b23a7e02b80bb6994b17c96efc99f66d75e1,Matt Benson,VisibilityTest.java,MODIFY,setTarget -> [VisibilityScoped target] | [VisibilityScopedSource target],"diff --git a/impl/src/test/java/org/jboss/forge/test/parser/java/common/VisibilityTest.java b/impl/src/test/java/org/jboss/forge/test/parser/java/common/VisibilityTest.java
index 646f077..87eb806 100644
--- a/impl/src/test/java/org/jboss/forge/test/parser/java/common/VisibilityTest.java
+++ b/impl/src/test/java/org/jboss/forge/test/parser/java/common/VisibilityTest.java
@@ -9,7 +9,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
-import org.jboss.forge.parser.java.ReadVisibilityScoped.VisibilityScoped;
+import org.jboss.forge.parser.java.source.VisibilityScopedSource;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -18,9 +18,9 @@
  */
 public abstract class VisibilityTest
 {
-   private VisibilityScoped<?> target;
+   private VisibilityScopedSource<?> target;
 
-   public void setTarget(VisibilityScoped<?> target)
+   public void setTarget(VisibilityScopedSource<?> target)
    {
       this.target = target;
    }
"
3cf4f57b735c76dd810de71c04b0dab9bee157f5,Matt Benson,AnnotationElementSource.java,MODIFY,setType -> [JavaType entity] | [Class clazz],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/source/AnnotationElementSource.java b/api/src/main/java/org/jboss/forge/parser/java/source/AnnotationElementSource.java
index 2aa03f7..1a1576b 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/source/AnnotationElementSource.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/source/AnnotationElementSource.java
@@ -17,6 +17,7 @@
     */
    public interface DefaultValue extends AnnotationElement.ReadDefaultValue<JavaAnnotationSource>
    {
+      @Override
       AnnotationSource<JavaAnnotationSource> getAnnotation();
 
       DefaultValue setLiteral(String value);
@@ -54,5 +55,6 @@
     */
    AnnotationElementSource setType(JavaType<?> entity);
 
+   @Override
    AnnotationElementSource.DefaultValue getDefaultValue();
 }
\ No newline at end of file
"
3cf4f57b735c76dd810de71c04b0dab9bee157f5,Matt Benson,AnnotationSource.java,MODIFY,getAnnotationValue -> [String name] | [],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/source/AnnotationSource.java b/api/src/main/java/org/jboss/forge/parser/java/source/AnnotationSource.java
index c164777..f3fdc4b 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/source/AnnotationSource.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/source/AnnotationSource.java
@@ -11,8 +11,10 @@
 public interface AnnotationSource<O extends JavaType<O>> extends Annotation<O>
 {
 
+   @Override
    AnnotationSource<O> getAnnotationValue();
 
+   @Override
    AnnotationSource<O> getAnnotationValue(String name);
 
    AnnotationSource<O> removeValue(String name);
"
3cf4f57b735c76dd810de71c04b0dab9bee157f5,Matt Benson,AnnotationTargetSource.java,MODIFY,getAnnotation -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/source/AnnotationTargetSource.java b/api/src/main/java/org/jboss/forge/parser/java/source/AnnotationTargetSource.java
index a559be8..53865b4 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/source/AnnotationTargetSource.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/source/AnnotationTargetSource.java
@@ -12,10 +12,13 @@
  */
 public interface AnnotationTargetSource<O extends JavaSource<O>, T> extends AnnotationTarget<O>
 {
+   @Override
    public List<AnnotationSource<O>> getAnnotations();
 
+   @Override
    public AnnotationSource<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type);
 
+   @Override
    public AnnotationSource<O> getAnnotation(final String type);
 
    /**
"
3cf4f57b735c76dd810de71c04b0dab9bee157f5,Matt Benson,FieldHolderSource.java,MODIFY,addField -> [String declaration] | [],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/source/FieldHolderSource.java b/api/src/main/java/org/jboss/forge/parser/java/source/FieldHolderSource.java
index 12d2a25..fede5cd 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/source/FieldHolderSource.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/source/FieldHolderSource.java
@@ -35,11 +35,13 @@
    /**
     * Get the {@link Field} with the given name and return it, otherwise, return null.
     */
+   @Override
    public FieldSource<O> getField(String name);
    
    /**
     * Get a list of all {@link Field}s declared by this {@link O}, or return an empty list if no {@link Field}s
     * are declared.
     */
+   @Override
    public List<FieldSource<O>> getFields();
 }
\ No newline at end of file
"
3cf4f57b735c76dd810de71c04b0dab9bee157f5,Matt Benson,JavaAnnotationSource.java,MODIFY,addAnnotationElement -> [String declaration] | [],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/source/JavaAnnotationSource.java b/api/src/main/java/org/jboss/forge/parser/java/source/JavaAnnotationSource.java
index d1e14dc..311f23c 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/source/JavaAnnotationSource.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/source/JavaAnnotationSource.java
@@ -17,12 +17,14 @@
    /**
     * Get the {@link AnnotationElementSource} with the given name and return it, otherwise, return null.
     */
+   @Override
    public AnnotationElementSource getAnnotationElement(String name);
 
    /**
     * Get a list of all {@link AnnotationElementSource}s declared by this {@link JavaAnnotation}, or return an empty
     * list if no {@link AnnotationElementSource}s are declared.
     */
+   @Override
    public List<AnnotationElementSource> getAnnotationElements();
 
    /**
"
3cf4f57b735c76dd810de71c04b0dab9bee157f5,Matt Benson,JavaEnumSource.java,MODIFY,addEnumConstant -> [String declaration] | [],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/source/JavaEnumSource.java b/api/src/main/java/org/jboss/forge/parser/java/source/JavaEnumSource.java
index 8c0b437..34cb5ae 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/source/JavaEnumSource.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/source/JavaEnumSource.java
@@ -22,11 +22,13 @@
     * @param name
     * @return
     */
+   @Override
    EnumConstantSource getEnumConstant(String name);
 
    /**
     * Return all declared {@link EnumConstant} types for this {@link JavaEnum}
     */
+   @Override
    List<EnumConstantSource> getEnumConstants();
 
    /**
"
3cf4f57b735c76dd810de71c04b0dab9bee157f5,Matt Benson,MethodHolderSource.java,MODIFY,"getMethod -> [String name, Class paramTypes] | [String name]","diff --git a/api/src/main/java/org/jboss/forge/parser/java/source/MethodHolderSource.java b/api/src/main/java/org/jboss/forge/parser/java/source/MethodHolderSource.java
index 46ddc14..6a4c3e4 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/source/MethodHolderSource.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/source/MethodHolderSource.java
@@ -17,22 +17,26 @@
    /**
     * Return the {@link MethodSource} with the given name and zero parameters; otherwise return null.
     */
+   @Override
    public MethodSource<O> getMethod(final String name);
 
    /**
     * Return the {@link MethodSource} with the given name and signature types; otherwise return null.
     */
+   @Override
    public MethodSource<O> getMethod(final String name, String... paramTypes);
 
    /**
     * Return the {@link MethodSource} with the given name and signature types; otherwise return null.
     */
+   @Override
    public MethodSource<O> getMethod(final String name, Class<?>... paramTypes);
 
    /**
     * Get a {@link List} of all {@link MethodSource}s declared by this {@link O} instance, if any; otherwise, return an
     * empty {@link List}
     */
+   @Override
    public List<MethodSource<O>> getMethods();
 
    /**
"
3cf4f57b735c76dd810de71c04b0dab9bee157f5,Matt Benson,MethodSource.java,MODIFY,setReturnType -> [JavaType type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/source/MethodSource.java b/api/src/main/java/org/jboss/forge/parser/java/source/MethodSource.java
index 751db23..a671856 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/source/MethodSource.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/source/MethodSource.java
@@ -74,6 +74,7 @@
    /**
     * Get a list of this {@link Method}'s parameters.
     */
+   @Override
    public List<ParameterSource<O>> getParameters();
 
 }
\ No newline at end of file
"
248f79ae128a89dbcdc76ed728d005c91f8dd7d6,Matt Benson,Formatter.java,MODIFY,format -> [String source] | [JavaClassSource javaClass],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/util/Formatter.java b/impl/src/main/java/org/jboss/forge/parser/java/util/Formatter.java
index 946f8cc..61a80ec 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/util/Formatter.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/util/Formatter.java
@@ -17,14 +17,14 @@
 import org.eclipse.jface.text.Document;
 import org.eclipse.jface.text.IDocument;
 import org.eclipse.text.edits.TextEdit;
-import org.jboss.forge.parser.java.JavaClass;
+import org.jboss.forge.parser.java.source.JavaClassSource;
 
 /**
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
 public abstract class Formatter
 {
-   public static String format(JavaClass javaClass)
+   public static String format(JavaClassSource javaClass)
    {
       return format(javaClass.toString());
    }
"
56b2c496a0e92445dd56d87eac62d38cfcaec83a,Matt Benson,EnumConstantBodyImpl.java,MODIFY,addImport -> [JavaType type] | [String className],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java
index ce82922..e126852 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java
@@ -28,13 +28,13 @@
 import org.jboss.forge.parser.java.JavaType;
 import org.jboss.forge.parser.java.Method;
 import org.jboss.forge.parser.java.Parameter;
-import org.jboss.forge.parser.java.SourceType;
 import org.jboss.forge.parser.java.SyntaxError;
 import org.jboss.forge.parser.java.Visibility;
 import org.jboss.forge.parser.java.ast.MethodFinderVisitor;
 import org.jboss.forge.parser.java.ast.TypeDeclarationFinderVisitor;
 import org.jboss.forge.parser.java.source.AnnotationSource;
 import org.jboss.forge.parser.java.source.EnumConstantSource;
+import org.jboss.forge.parser.java.source.EnumConstantSource.Body;
 import org.jboss.forge.parser.java.source.FieldSource;
 import org.jboss.forge.parser.java.source.Import;
 import org.jboss.forge.parser.java.source.JavaClassSource;
@@ -43,7 +43,6 @@
 import org.jboss.forge.parser.java.source.MemberSource;
 import org.jboss.forge.parser.java.source.MethodSource;
 import org.jboss.forge.parser.java.source.ParameterSource;
-import org.jboss.forge.parser.java.source.EnumConstantSource.Body;
 import org.jboss.forge.parser.java.util.Strings;
 import org.jboss.forge.parser.java.util.Types;
 import org.jboss.forge.parser.spi.JavaParserImpl;
@@ -137,12 +136,6 @@
    }
 
    @Override
-   public SourceType getSourceType()
-   {
-      return SourceType.CLASS;
-   }
-
-   @Override
    public String getPackage()
    {
       return javaEnum.getPackage();
"
56b2c496a0e92445dd56d87eac62d38cfcaec83a,Matt Benson,JavaAnnotationImpl.java,MODIFY,addAnnotationElement -> [String declaration] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaAnnotationImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaAnnotationImpl.java
index 55aa90c..e379453 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaAnnotationImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaAnnotationImpl.java
@@ -16,7 +16,6 @@
 import org.eclipse.jdt.core.dom.CompilationUnit;
 import org.eclipse.jface.text.Document;
 import org.jboss.forge.parser.java.AnnotationElement;
-import org.jboss.forge.parser.java.SourceType;
 import org.jboss.forge.parser.java.source.AnnotationElementSource;
 import org.jboss.forge.parser.java.source.JavaAnnotationSource;
 import org.jboss.forge.parser.java.source.JavaSource;
@@ -42,12 +41,6 @@
    }
 
    @Override
-   public SourceType getSourceType()
-   {
-      return SourceType.ANNOTATION;
-   }
-
-   @Override
    public AnnotationElementSource addAnnotationElement()
    {
       return add(new AnnotationElementImpl(this));
"
56b2c496a0e92445dd56d87eac62d38cfcaec83a,Matt Benson,JavaClassImpl.java,MODIFY,setSuperType -> [String type] | [JavaType type],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaClassImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaClassImpl.java
index 1969901..5d29c74 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaClassImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaClassImpl.java
@@ -13,7 +13,6 @@
 import org.eclipse.jdt.core.dom.TypeDeclaration;
 import org.eclipse.jface.text.Document;
 import org.jboss.forge.parser.java.JavaType;
-import org.jboss.forge.parser.java.SourceType;
 import org.jboss.forge.parser.java.ast.ModifierAccessor;
 import org.jboss.forge.parser.java.source.JavaClassSource;
 import org.jboss.forge.parser.java.source.JavaSource;
@@ -161,9 +160,4 @@
       return this;
    }
 
-   @Override
-   public SourceType getSourceType()
-   {
-      return SourceType.CLASS;
-   }
 }
\ No newline at end of file
"
56b2c496a0e92445dd56d87eac62d38cfcaec83a,Matt Benson,JavaEnumImpl.java,MODIFY,addEnumConstant -> [String declaration] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
index 8d43f72..a559bc0 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
@@ -15,7 +15,6 @@
 import org.eclipse.jdt.core.dom.EnumConstantDeclaration;
 import org.eclipse.jdt.core.dom.EnumDeclaration;
 import org.eclipse.jface.text.Document;
-import org.jboss.forge.parser.java.SourceType;
 import org.jboss.forge.parser.java.source.EnumConstantSource;
 import org.jboss.forge.parser.java.source.JavaEnumSource;
 import org.jboss.forge.parser.java.source.JavaSource;
@@ -91,9 +90,4 @@
       return this;
    }
 
-   @Override
-   public SourceType getSourceType()
-   {
-      return SourceType.ENUM;
-   }
 }
"
56b2c496a0e92445dd56d87eac62d38cfcaec83a,Matt Benson,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
index b5850f7..ebe3e07 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
@@ -17,7 +17,6 @@
 import org.jboss.forge.parser.ParserException;
 import org.jboss.forge.parser.java.Annotation;
 import org.jboss.forge.parser.java.JavaType;
-import org.jboss.forge.parser.java.SourceType;
 import org.jboss.forge.parser.java.SyntaxError;
 import org.jboss.forge.parser.java.Visibility;
 import org.jboss.forge.parser.java.ast.AnnotationAccessor;
@@ -47,12 +46,6 @@
    }
 
    @Override
-   public SourceType getSourceType()
-   {
-      return SourceType.PACKAGEINFO;
-   }
-
-   @Override
    public String getName()
    {
       return ""package-info"";
"
732a77adafa6464ec1d63ac288e231a6c78aaab6,Matt Benson,MethodSource.java,MODIFY,setReturnType -> [JavaType type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/source/MethodSource.java b/api/src/main/java/org/jboss/forge/parser/java/source/MethodSource.java
index a671856..cd532f5 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/source/MethodSource.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/source/MethodSource.java
@@ -12,8 +12,9 @@
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * 
  */
-public interface MethodSource<O extends JavaSource<O>> extends Method<O, MethodSource<O>>, AbstractableSource<MethodSource<O>>,
-         MemberSource<O, MethodSource<O>>
+public interface MethodSource<O extends JavaSource<O>> extends Method<O, MethodSource<O>>,
+         AbstractableSource<MethodSource<O>>,
+         MemberSource<O, MethodSource<O>>, GenericCapableSource<MethodSource<O>>
 {
    /**
     * Set this {@link Method} to return the given type.
"
732a77adafa6464ec1d63ac288e231a6c78aaab6,Matt Benson,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java
index 5839fbf..b6b9472 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java
@@ -8,6 +8,7 @@
 
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.Iterator;
 import java.util.List;
 
 import org.eclipse.jdt.core.dom.AST;
@@ -16,6 +17,7 @@
 import org.eclipse.jdt.core.dom.Block;
 import org.eclipse.jdt.core.dom.CompilationUnit;
 import org.eclipse.jdt.core.dom.MethodDeclaration;
+import org.eclipse.jdt.core.dom.TypeParameter;
 import org.eclipse.jdt.core.dom.Modifier.ModifierKeyword;
 import org.eclipse.jdt.core.dom.SimpleName;
 import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
@@ -616,4 +618,50 @@
 
       return this;
    }
+
+   @Override
+   public List<String> getGenericTypes()
+   {
+      List<String> result = new ArrayList<String>();
+      @SuppressWarnings(""unchecked"")
+      List<TypeParameter> typeParameters = method.typeParameters();
+      if (typeParameters != null)
+      {
+         for (TypeParameter typeParameter : typeParameters)
+         {
+            result.add(typeParameter.getName().getIdentifier());
+         }
+      }
+      return Collections.unmodifiableList(result);
+   }
+
+   @SuppressWarnings(""unchecked"")
+   @Override
+   public MethodSource<O> addGenericType(String genericType)
+   {
+      TypeParameter tp2 = method.getAST().newTypeParameter();
+      tp2.setName(method.getAST().newSimpleName(genericType));
+      method.typeParameters().add(tp2);
+      return this;
+   }
+
+   @Override
+   public MethodSource<O> removeGenericType(String genericType)
+   {
+      @SuppressWarnings(""unchecked"")
+      List<TypeParameter> typeParameters = method.typeParameters();
+      if (typeParameters != null)
+      {
+         Iterator<TypeParameter> it = typeParameters.iterator();
+         while (it.hasNext())
+         {
+            TypeParameter typeParameter = it.next();
+            if (typeParameter.getName().getIdentifier().equals(genericType))
+            {
+               it.remove();
+            }
+         }
+      }
+      return this;
+   }
 }
"
c69122cab8fe04a52531b62e9b49a292a40872b9,Matt Benson,Importer.java,MODIFY,hasImport -> [Import imprt] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/source/Importer.java b/api/src/main/java/org/jboss/forge/parser/java/source/Importer.java
index 6c048af..e2e00ee 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/source/Importer.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/source/Importer.java
@@ -30,12 +30,12 @@
    boolean hasImport(String type);
 
    /**
-    * Return whether or not this {@link O} could accept an import for the given {@link Class} type.
+    * Return whether or not this {@link O} would require an import to reference the given {@link Class} type.
     */
    boolean requiresImport(Class<?> type);
 
    /**
-    * Return whether or not this {@link O} could accept an import for the given fully-qualified class name.
+    * Return whether or not this {@link O} would require an import to reference the given fully-qualified class name.
     */
    boolean requiresImport(String type);
 
"
948766dcaad842c75d81314cbfa880ceb21058eb,Matt Benson,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
index 16251aa..97e5577 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
@@ -288,7 +288,8 @@
       }
       if (!validImport(resultType)
                || hasImport(resultType)
-               || Types.isJavaLang(resultType))
+               || Types.isJavaLang(resultType)
+               || Strings.areEqual(getPackage(), Types.getPackage(resultType)))
       {
          return false;
       }
"
885c331b522ed4cbd6b8bdcbaa27f76e5b985164,Matt Benson,MethodSource.java,MODIFY,setReturnType -> [JavaType type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/source/MethodSource.java b/api/src/main/java/org/jboss/forge/parser/java/source/MethodSource.java
index cd532f5..e2bebb7 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/source/MethodSource.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/source/MethodSource.java
@@ -12,9 +12,8 @@
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * 
  */
-public interface MethodSource<O extends JavaSource<O>> extends Method<O, MethodSource<O>>,
-         AbstractableSource<MethodSource<O>>,
-         MemberSource<O, MethodSource<O>>, GenericCapableSource<MethodSource<O>>
+public interface MethodSource<O extends JavaSource<O>> extends Method<O, MethodSource<O>>, AbstractableSource<MethodSource<O>>,
+         MemberSource<O, MethodSource<O>>, GenericCapableSource<O, MethodSource<O>>
 {
    /**
     * Set this {@link Method} to return the given type.
"
885c331b522ed4cbd6b8bdcbaa27f76e5b985164,Matt Benson,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java
index b6b9472..74dd0a7 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java
@@ -17,16 +17,17 @@
 import org.eclipse.jdt.core.dom.Block;
 import org.eclipse.jdt.core.dom.CompilationUnit;
 import org.eclipse.jdt.core.dom.MethodDeclaration;
-import org.eclipse.jdt.core.dom.TypeParameter;
 import org.eclipse.jdt.core.dom.Modifier.ModifierKeyword;
 import org.eclipse.jdt.core.dom.SimpleName;
 import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
 import org.eclipse.jdt.core.dom.Statement;
+import org.eclipse.jdt.core.dom.TypeParameter;
 import org.eclipse.jdt.core.dom.VariableDeclaration;
 import org.jboss.forge.parser.JavaParser;
 import org.jboss.forge.parser.java.Annotation;
 import org.jboss.forge.parser.java.JavaType;
 import org.jboss.forge.parser.java.Type;
+import org.jboss.forge.parser.java.TypeVariable;
 import org.jboss.forge.parser.java.Visibility;
 import org.jboss.forge.parser.java.ast.AnnotationAccessor;
 import org.jboss.forge.parser.java.ast.ModifierAccessor;
@@ -35,6 +36,8 @@
 import org.jboss.forge.parser.java.source.JavaSource;
 import org.jboss.forge.parser.java.source.MethodSource;
 import org.jboss.forge.parser.java.source.ParameterSource;
+import org.jboss.forge.parser.java.source.TypeVariableSource;
+import org.jboss.forge.parser.java.util.Strings;
 import org.jboss.forge.parser.java.util.Types;
 
 /**
@@ -620,48 +623,64 @@
    }
 
    @Override
-   public List<String> getGenericTypes()
+   public List<TypeVariableSource<O>> getTypeVariables()
    {
-      List<String> result = new ArrayList<String>();
+      List<TypeVariableSource<O>> result = new ArrayList<TypeVariableSource<O>>();
       @SuppressWarnings(""unchecked"")
       List<TypeParameter> typeParameters = method.typeParameters();
       if (typeParameters != null)
       {
          for (TypeParameter typeParameter : typeParameters)
          {
-            result.add(typeParameter.getName().getIdentifier());
+            result.add(new TypeVariableImpl<O>(parent, typeParameter));
          }
       }
       return Collections.unmodifiableList(result);
    }
 
+   @Override
+   public TypeVariableSource<O> getTypeVariable(String name)
+   {
+      @SuppressWarnings(""unchecked"")
+      List<TypeParameter> typeParameters = method.typeParameters();
+      for (TypeParameter typeParameter : typeParameters)
+      {
+         if (Strings.areEqual(name, typeParameter.getName().getIdentifier()))
+         {
+            return(new TypeVariableImpl<O>(parent, typeParameter));
+         }
+      }
+      return null;
+   }
+
    @SuppressWarnings(""unchecked"")
    @Override
-   public MethodSource<O> addGenericType(String genericType)
+   public TypeVariableSource<O> addTypeVariable()
    {
       TypeParameter tp2 = method.getAST().newTypeParameter();
-      tp2.setName(method.getAST().newSimpleName(genericType));
       method.typeParameters().add(tp2);
+      return new TypeVariableImpl<O>(parent, tp2);
+   }
+
+   @Override
+   public MethodSource<O> removeTypeVariable(String name)
+   {
+      @SuppressWarnings(""unchecked"")
+      List<TypeParameter> typeParameters = method.typeParameters();
+      for (Iterator<TypeParameter> iter = typeParameters.iterator(); iter.hasNext();)
+      {
+         if (Strings.areEqual(name, iter.next().getName().getIdentifier()))
+         {
+            iter.remove();
+            break;
+         }
+      }
       return this;
    }
 
    @Override
-   public MethodSource<O> removeGenericType(String genericType)
+   public MethodSource<O> removeTypeVariable(TypeVariable<?> typeVariable)
    {
-      @SuppressWarnings(""unchecked"")
-      List<TypeParameter> typeParameters = method.typeParameters();
-      if (typeParameters != null)
-      {
-         Iterator<TypeParameter> it = typeParameters.iterator();
-         while (it.hasNext())
-         {
-            TypeParameter typeParameter = it.next();
-            if (typeParameter.getName().getIdentifier().equals(genericType))
-            {
-               it.remove();
-            }
-         }
-      }
-      return this;
+      return removeTypeVariable(typeVariable.getName());
    }
 }
"
615597cb15ad667b3d71b4c3ada180483211c77d,Matt Benson,AbstractGenericCapableJavaSource.java,MODIFY,removeTypeVariable -> [TypeVariable typeVariable] | [String name],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractGenericCapableJavaSource.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractGenericCapableJavaSource.java
index 2f6629d..93b303f 100755
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractGenericCapableJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractGenericCapableJavaSource.java
@@ -33,7 +33,7 @@
          implements GenericCapableSource<O, O>
 {
 
-   public AbstractGenericCapableJavaSource(JavaSource<?> enclosingType, Document document, CompilationUnit unit,
+   protected AbstractGenericCapableJavaSource(JavaSource<?> enclosingType, Document document, CompilationUnit unit,
             BodyDeclaration declaration)
    {
       super(enclosingType, document, unit, declaration);
"
615597cb15ad667b3d71b4c3ada180483211c77d,Matt Benson,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
index 97e5577..aedff30 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
@@ -14,7 +14,6 @@
 
 import org.eclipse.jdt.core.JavaCore;
 import org.eclipse.jdt.core.compiler.IProblem;
-import org.eclipse.jdt.core.dom.ASTNode;
 import org.eclipse.jdt.core.dom.AbstractTypeDeclaration;
 import org.eclipse.jdt.core.dom.AnnotationTypeDeclaration;
 import org.eclipse.jdt.core.dom.BodyDeclaration;
@@ -23,15 +22,12 @@
 import org.eclipse.jdt.core.dom.ImportDeclaration;
 import org.eclipse.jdt.core.dom.Modifier.ModifierKeyword;
 import org.eclipse.jdt.core.dom.PackageDeclaration;
-import org.eclipse.jdt.core.dom.Type;
 import org.eclipse.jdt.core.dom.TypeDeclaration;
 import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
 import org.eclipse.jface.text.Document;
 import org.eclipse.text.edits.TextEdit;
-import org.jboss.forge.parser.JavaParser;
 import org.jboss.forge.parser.ParserException;
 import org.jboss.forge.parser.java.Annotation;
-import org.jboss.forge.parser.java.JavaInterface;
 import org.jboss.forge.parser.java.JavaType;
 import org.jboss.forge.parser.java.SyntaxError;
 import org.jboss.forge.parser.java.Visibility;
@@ -40,7 +36,6 @@
 import org.jboss.forge.parser.java.ast.TypeDeclarationFinderVisitor;
 import org.jboss.forge.parser.java.source.AnnotationSource;
 import org.jboss.forge.parser.java.source.Import;
-import org.jboss.forge.parser.java.source.InterfaceCapableSource;
 import org.jboss.forge.parser.java.source.JavaSource;
 import org.jboss.forge.parser.java.source.MemberSource;
 import org.jboss.forge.parser.java.util.Formatter;
@@ -56,7 +51,7 @@
  */
 @SuppressWarnings(""unchecked"")
 public abstract class AbstractJavaSource<O extends JavaSource<O>> implements
-         JavaSource<O>, InterfaceCapableSource<O>
+         JavaSource<O>
 {
    private final AnnotationAccessor<O, O> annotations = new AnnotationAccessor<O, O>();
    private final ModifierAccessor modifiers = new ModifierAccessor();
@@ -69,7 +64,7 @@
    public static ServiceLoader<WildcardImportResolver> loader = ServiceLoader.load(WildcardImportResolver.class);
    private static List<WildcardImportResolver> resolvers;
 
-   public AbstractJavaSource(JavaSource<?> enclosingType, final Document document, final CompilationUnit unit,
+   protected AbstractJavaSource(JavaSource<?> enclosingType, final Document document, final CompilationUnit unit,
             BodyDeclaration body)
    {
       this.enclosingType = enclosingType == null ? this : enclosingType;
@@ -766,116 +761,6 @@
     */
 
    @Override
-   public List<String> getInterfaces()
-   {
-      List<String> result = new ArrayList<String>();
-      List<Type> superTypes = JDTHelper.getInterfaces(getBodyDeclaration());
-      for (Type type : superTypes)
-      {
-         String name = JDTHelper.getTypeName(type);
-         if (Types.isSimpleName(name) && this.hasImport(name))
-         {
-            Import imprt = this.getImport(name);
-            String pkg = imprt.getPackage();
-            if (!Strings.isNullOrEmpty(pkg))
-            {
-               name = pkg + ""."" + name;
-            }
-         }
-         result.add(name);
-      }
-      return result;
-   }
-
-   @Override
-   public O addInterface(final String type)
-   {
-      if (!this.hasInterface(type))
-      {
-         Type interfaceType = JDTHelper.getInterfaces(
-                  JavaParser.parse(JavaInterfaceImpl.class,
-                           ""public interface Mock extends "" + Types.toSimpleName(type)
-                                    + "" {}"").getBodyDeclaration()).get(0);
-
-         if (this.hasInterface(Types.toSimpleName(type)) || this.hasImport(Types.toSimpleName(type)))
-         {
-            interfaceType = JDTHelper.getInterfaces(JavaParser.parse(JavaInterfaceImpl.class,
-                     ""public interface Mock extends "" + type + "" {}"").getBodyDeclaration()).get(0);
-         }
-
-         this.addImport(type);
-
-         ASTNode node = ASTNode.copySubtree(unit.getAST(), interfaceType);
-         JDTHelper.getInterfaces(getBodyDeclaration()).add((Type) node);
-      }
-      return (O) this;
-   }
-
-   @Override
-   public O addInterface(final Class<?> type)
-   {
-      return addInterface(type.getName());
-   }
-
-   @Override
-   public O addInterface(final JavaInterface<?> type)
-   {
-      return addInterface(type.getQualifiedName());
-   }
-
-   @Override
-   public boolean hasInterface(final String type)
-   {
-      for (String name : getInterfaces())
-      {
-         if (Types.areEquivalent(name, type))
-         {
-            return true;
-         }
-      }
-      return false;
-   }
-
-   @Override
-   public boolean hasInterface(final Class<?> type)
-   {
-      return hasInterface(type.getName());
-   }
-
-   @Override
-   public boolean hasInterface(final JavaInterface<?> type)
-   {
-      return hasInterface(type.getQualifiedName());
-   }
-
-   @Override
-   public O removeInterface(final String type)
-   {
-      List<Type> interfaces = JDTHelper.getInterfaces(getBodyDeclaration());
-      for (Type i : interfaces)
-      {
-         if (Types.areEquivalent(i.toString(), type))
-         {
-            interfaces.remove(i);
-            break;
-         }
-      }
-      return (O) this;
-   }
-
-   @Override
-   public O removeInterface(final Class<?> type)
-   {
-      return removeInterface(type.getName());
-   }
-
-   @Override
-   public O removeInterface(final JavaInterface<?> type)
-   {
-      return removeInterface(type.getQualifiedName());
-   }
-
-   @Override
    public List<JavaSource<?>> getNestedClasses()
    {
       List<AbstractTypeDeclaration> declarations = getNestedDeclarations(body);
"
615597cb15ad667b3d71b4c3ada180483211c77d,Matt Benson,AbstractJavaSourceMemberHolder.java,MODIFY,addField -> [Field field] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java
index dacc03a..973982f 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java
@@ -11,25 +11,30 @@
 import java.util.Iterator;
 import java.util.List;
 
+import org.eclipse.jdt.core.dom.ASTNode;
 import org.eclipse.jdt.core.dom.BodyDeclaration;
 import org.eclipse.jdt.core.dom.CompilationUnit;
 import org.eclipse.jdt.core.dom.FieldDeclaration;
 import org.eclipse.jdt.core.dom.MethodDeclaration;
+import org.eclipse.jdt.core.dom.Type;
 import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
 import org.eclipse.jface.text.Document;
 import org.jboss.forge.parser.JavaParser;
 import org.jboss.forge.parser.java.Field;
+import org.jboss.forge.parser.java.JavaInterface;
 import org.jboss.forge.parser.java.JavaType;
 import org.jboss.forge.parser.java.Method;
 import org.jboss.forge.parser.java.Parameter;
 import org.jboss.forge.parser.java.ast.MethodFinderVisitor;
-import org.jboss.forge.parser.java.source.FieldSource;
 import org.jboss.forge.parser.java.source.FieldHolderSource;
+import org.jboss.forge.parser.java.source.FieldSource;
+import org.jboss.forge.parser.java.source.Import;
+import org.jboss.forge.parser.java.source.InterfaceCapableSource;
 import org.jboss.forge.parser.java.source.JavaClassSource;
 import org.jboss.forge.parser.java.source.JavaSource;
 import org.jboss.forge.parser.java.source.MemberSource;
-import org.jboss.forge.parser.java.source.MethodSource;
 import org.jboss.forge.parser.java.source.MethodHolderSource;
+import org.jboss.forge.parser.java.source.MethodSource;
 import org.jboss.forge.parser.java.source.ParameterSource;
 import org.jboss.forge.parser.java.util.Strings;
 import org.jboss.forge.parser.java.util.Types;
@@ -38,10 +43,11 @@
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * 
  */
-public abstract class AbstractJavaSourceMemberHolder<O extends JavaSource<O>> extends AbstractJavaSource<O> implements
+public abstract class AbstractJavaSourceMemberHolder<O extends JavaSource<O>> extends AbstractJavaSource<O>
+         implements InterfaceCapableSource<O>,
          MethodHolderSource<O>, FieldHolderSource<O>
 {
-   public AbstractJavaSourceMemberHolder(JavaSource<?> enclosingType, final Document document,
+   protected AbstractJavaSourceMemberHolder(JavaSource<?> enclosingType, final Document document,
             final CompilationUnit unit, BodyDeclaration declaration)
    {
       super(enclosingType, document, unit, declaration);
@@ -355,4 +361,116 @@
       }
       return Collections.unmodifiableList(result);
    }
+
+   @Override
+   public List<String> getInterfaces()
+   {
+      List<String> result = new ArrayList<String>();
+      List<Type> superTypes = JDTHelper.getInterfaces(getBodyDeclaration());
+      for (Type type : superTypes)
+      {
+         String name = JDTHelper.getTypeName(type);
+         if (Types.isSimpleName(name) && this.hasImport(name))
+         {
+            Import imprt = this.getImport(name);
+            String pkg = imprt.getPackage();
+            if (!Strings.isNullOrEmpty(pkg))
+            {
+               name = pkg + ""."" + name;
+            }
+         }
+         result.add(name);
+      }
+      return result;
+   }
+
+   @SuppressWarnings(""unchecked"")
+   @Override
+   public O addInterface(final String type)
+   {
+      if (!this.hasInterface(type))
+      {
+         Type interfaceType = JDTHelper.getInterfaces(
+                  JavaParser.parse(JavaInterfaceImpl.class,
+                           ""public interface Mock extends "" + Types.toSimpleName(type)
+                                    + "" {}"").getBodyDeclaration()).get(0);
+   
+         if (this.hasInterface(Types.toSimpleName(type)) || this.hasImport(Types.toSimpleName(type)))
+         {
+            interfaceType = JDTHelper.getInterfaces(JavaParser.parse(JavaInterfaceImpl.class,
+                     ""public interface Mock extends "" + type + "" {}"").getBodyDeclaration()).get(0);
+         }
+   
+         this.addImport(type);
+   
+         ASTNode node = ASTNode.copySubtree(unit.getAST(), interfaceType);
+         JDTHelper.getInterfaces(getBodyDeclaration()).add((Type) node);
+      }
+      return (O) this;
+   }
+
+   @Override
+   public O addInterface(final Class<?> type)
+   {
+      return addInterface(type.getName());
+   }
+
+   @Override
+   public O addInterface(final JavaInterface<?> type)
+   {
+      return addInterface(type.getQualifiedName());
+   }
+
+   @Override
+   public boolean hasInterface(final String type)
+   {
+      for (String name : getInterfaces())
+      {
+         if (Types.areEquivalent(name, type))
+         {
+            return true;
+         }
+      }
+      return false;
+   }
+
+   @Override
+   public boolean hasInterface(final Class<?> type)
+   {
+      return hasInterface(type.getName());
+   }
+
+   @Override
+   public boolean hasInterface(final JavaInterface<?> type)
+   {
+      return hasInterface(type.getQualifiedName());
+   }
+
+   @SuppressWarnings(""unchecked"")
+   @Override
+   public O removeInterface(final String type)
+   {
+      List<Type> interfaces = JDTHelper.getInterfaces(getBodyDeclaration());
+      for (Type i : interfaces)
+      {
+         if (Types.areEquivalent(i.toString(), type))
+         {
+            interfaces.remove(i);
+            break;
+         }
+      }
+      return (O) this;
+   }
+
+   @Override
+   public O removeInterface(final Class<?> type)
+   {
+      return removeInterface(type.getName());
+   }
+
+   @Override
+   public O removeInterface(final JavaInterface<?> type)
+   {
+      return removeInterface(type.getQualifiedName());
+   }
 }
"
7da0a547601c37c46835779a242654e8fba8831a,Matt Benson,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
index aedff30..0b7c9d0 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
@@ -37,7 +37,6 @@
 import org.jboss.forge.parser.java.source.AnnotationSource;
 import org.jboss.forge.parser.java.source.Import;
 import org.jboss.forge.parser.java.source.JavaSource;
-import org.jboss.forge.parser.java.source.MemberSource;
 import org.jboss.forge.parser.java.util.Formatter;
 import org.jboss.forge.parser.java.util.Strings;
 import org.jboss.forge.parser.java.util.Types;
@@ -425,14 +424,6 @@
       return (O) this;
    }
 
-   @Override
-   public List<MemberSource<O, ?>> getMembers()
-   {
-      List<MemberSource<O, ?>> result = new ArrayList<MemberSource<O, ?>>();
-
-      return result;
-   }
-
    protected AbstractTypeDeclaration getBodyDeclaration()
    {
       if (body instanceof AbstractTypeDeclaration)
"
7da0a547601c37c46835779a242654e8fba8831a,Matt Benson,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
index ebe3e07..ca511d8 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
@@ -26,7 +26,6 @@
 import org.jboss.forge.parser.java.source.Import;
 import org.jboss.forge.parser.java.source.JavaPackageInfoSource;
 import org.jboss.forge.parser.java.source.JavaSource;
-import org.jboss.forge.parser.java.source.MemberSource;
 import org.jboss.forge.parser.java.util.Formatter;
 import org.jboss.forge.parser.java.util.Strings;
 import org.jboss.forge.parser.java.util.Types;
@@ -415,12 +414,6 @@
       return this;
    }
 
-   @Override
-   public List<MemberSource<JavaPackageInfoSource, ?>> getMembers()
-   {
-      return Collections.emptyList();
-   }
-
    protected PackageDeclaration getPackageDeclaration()
    {
       if (pkg instanceof PackageDeclaration)
"
a2551c69c1a133bf381ee68452e5d3fe46d01ebd,Matt Benson,TypeVariableImpl.java,MODIFY,setBounds -> [String bounds] | [JavaType bounds],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/TypeVariableImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/TypeVariableImpl.java
index 87f00e4..4381de4 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/TypeVariableImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/TypeVariableImpl.java
@@ -7,6 +7,7 @@
 package org.jboss.forge.parser.java.impl;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 import org.eclipse.jdt.core.dom.ASTNode;
@@ -43,13 +44,17 @@
    {
       @SuppressWarnings(""unchecked"")
       List<org.eclipse.jdt.core.dom.Type> typeBounds = internal.typeBounds();
+      if (typeBounds.isEmpty())
+      {
+         return Collections.emptyList();
+      }
       final List<Type<O>> result = new ArrayList<Type<O>>(typeBounds.size());
 
       for (org.eclipse.jdt.core.dom.Type type : typeBounds)
       {
          result.add(new TypeImpl<O>(origin, type));
       }
-      return result;
+      return Collections.unmodifiableList(result);
    }
 
    @Override
"
3d9e51b9d5cbd9879c555b00f9bbdb924b40534d,Matt Benson,JavaParser.java,MODIFY,"parse -> [Class type, InputStream data] | [File file]","diff --git a/api/src/main/java/org/jboss/forge/parser/JavaParser.java b/api/src/main/java/org/jboss/forge/parser/JavaParser.java
index eaf7737..c512fd0 100644
--- a/api/src/main/java/org/jboss/forge/parser/JavaParser.java
+++ b/api/src/main/java/org/jboss/forge/parser/JavaParser.java
@@ -8,6 +8,7 @@
 package org.jboss.forge.parser;
 
 import java.io.File;
+import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
@@ -27,25 +28,44 @@
  */
 public final class JavaParser
 {
-   public static ServiceLoader<JavaParserProvider> loader = ServiceLoader.load(JavaParserProvider.class);
    private static List<JavaParserProvider> parsers;
 
-   private static JavaParserProvider getParser()
+   private static List<JavaParserProvider> getParsers()
    {
-      if (parsers == null)
+      synchronized (JavaParser.class)
       {
-         parsers = new ArrayList<JavaParserProvider>();
-         for (JavaParserProvider p : loader)
+         if (parsers == null)
          {
-            parsers.add(p);
+            parsers = new ArrayList<JavaParserProvider>();
+            for (JavaParserProvider p : ServiceLoader.load(JavaParserProvider.class))
+            {
+               parsers.add(p);
+            }
+         }
+         if (parsers.size() == 0)
+         {
+            throw new IllegalStateException(""No instances of ["" + JavaParserProvider.class.getName()
+                     + ""] were found on the classpath."");
          }
       }
-      if (parsers.size() == 0)
+      return parsers;
+   }
+
+   /**
+    * Create a new empty {@link JavaSource} instance.
+    */
+   public static <T extends JavaSource<?>> T create(final Class<T> type)
+   {
+      for (JavaParserProvider parser : getParsers())
       {
-         throw new IllegalStateException(""No instances of ["" + JavaParserProvider.class.getName()
-                  + ""] were found on the classpath."");
+         final T result = parser.create(type);
+         if (result != null)
+         {
+            return result;
+         }
       }
-      return parsers.get(0);
+      throw new ParserException(""Cannot find JavaParserProvider capable of producing JavaSource of type ""
+               + type.getSimpleName(), new IllegalArgumentException(type.getName()));
    }
 
    /**
@@ -53,7 +73,7 @@
     */
    public static JavaSource<?> parse(final File file) throws FileNotFoundException
    {
-      return getParser().parse(file);
+      return parse(JavaSource.class, file);
    }
 
    /**
@@ -61,7 +81,7 @@
     */
    public static JavaSource<?> parse(final URL data) throws IOException
    {
-      return getParser().parse(data);
+      return parse(JavaSource.class, data);
    }
 
    /**
@@ -69,7 +89,7 @@
     */
    public static JavaSource<?> parse(final InputStream data)
    {
-      return getParser().parse(data);
+      return parse(JavaSource.class, data);
    }
 
    /**
@@ -77,7 +97,7 @@
     */
    public static JavaSource<?> parse(final char[] data)
    {
-      return getParser().parse(data);
+      return parse(JavaSource.class, data);
    }
 
    /**
@@ -85,15 +105,7 @@
     */
    public static JavaSource<?> parse(final String data)
    {
-      return getParser().parse(data);
-   }
-
-   /**
-    * Create a new empty {@link JavaClass} instance.
-    */
-   public static <T extends JavaSource<?>> T create(final Class<T> type)
-   {
-      return getParser().create(type);
+      return parse(JavaSource.class, data);
    }
 
    /**
@@ -103,7 +115,7 @@
     */
    public static <T extends JavaSource<?>> T parse(final Class<T> type, final URL url) throws IOException
    {
-      return getParser().parse(type, url);
+      return internalParse(type, url.openStream());
    }
 
    /**
@@ -113,15 +125,7 @@
     */
    public static <T extends JavaSource<?>> T parse(final Class<T> type, final File file) throws FileNotFoundException
    {
-      return getParser().parse(type, file);
-   }
-
-   /**
-    * Read the given {@link InputStream} and parse its data into a new {@link JavaSource} instance of the given type.
-    */
-   public static <T extends JavaSource<?>> T parse(final Class<T> type, final InputStream data)
-   {
-      return getParser().parse(type, data);
+      return internalParse(type, new FileInputStream(file));
    }
 
    /**
@@ -129,7 +133,7 @@
     */
    public static <T extends JavaSource<?>> T parse(final Class<T> type, final char[] data)
    {
-      return getParser().parse(type, data);
+      return parse(type, new String(data));
    }
 
    /**
@@ -137,6 +141,43 @@
     */
    public static <T extends JavaSource<?>> T parse(final Class<T> type, final String data)
    {
-      return getParser().parse(type, data);
+      return parse(type, Streams.fromString(data));
+   }
+
+   /**
+    * Read the given {@link InputStream} and parse its data into a new {@link JavaSource} instance of the given type.
+    * The caller is responsible for closing the stream.
+    */
+   public static <T extends JavaSource<?>> T parse(final Class<T> type, final InputStream data)
+   {
+      for (JavaParserProvider parser : getParsers())
+      {
+         final JavaSource<?> source = parser.parse(data);
+
+         if (type.isInstance(source))
+         {
+            @SuppressWarnings(""unchecked"")
+            final T result = (T) source;
+            return result;
+         }
+         else if (source != null)
+         {
+            throw new ParserException(""Source does not represent a ["" + type.getSimpleName() + ""], instead was [""
+                     + source.getClass().getSimpleName() + ""] - Cannot convert."");
+         }
+      }
+      throw new ParserException(""Cannot find JavaParserProvider capable of parsing the requested data"");
+   }
+
+   private static <T extends JavaSource<?>> T internalParse(final Class<T> type, final InputStream data)
+   {
+      try
+      {
+         return parse(type, data);
+      }
+      finally
+      {
+         Streams.closeQuietly(data);
+      }
    }
 }
"
3d9e51b9d5cbd9879c555b00f9bbdb924b40534d,Matt Benson,JavaParserImpl.java,MODIFY,parse -> [String data] | [InputStream data],"diff --git a/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java b/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
index 5900cce..9d5a540 100644
--- a/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
@@ -7,13 +7,8 @@
 
 package org.jboss.forge.parser.spi;
 
-import java.io.BufferedInputStream;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
-import java.net.URL;
 import java.util.List;
 import java.util.Map;
 
@@ -51,24 +46,22 @@
 {
 
    @Override
-   public JavaSource<?> parse(final File file) throws FileNotFoundException
+   @SuppressWarnings(""unchecked"")
+   public <T extends JavaSource<?>> T create(final Class<T> type)
    {
-      FileInputStream stream = null;
-      try
-      {
-         stream = new FileInputStream(file);
-         return parse(new BufferedInputStream(stream));
-      }
-      finally
-      {
-         Streams.closeQuietly(stream);
-      }
-   }
+      if (JavaClass.class.isAssignableFrom(type))
+         return (T) parse(""public class JavaClass { }"");
 
-   @Override
-   public JavaSource<?> parse(URL url) throws IOException
-   {
-      return parse(url.openStream());
+      if (JavaEnum.class.isAssignableFrom(type))
+         return (T) parse(""public enum JavaEnum { }"");
+
+      if (JavaAnnotation.class.isAssignableFrom(type))
+         return (T) parse(""public @interface JavaAnnotation { }"");
+
+      if (JavaInterface.class.isAssignableFrom(type))
+         return (T) parse(""public interface JavaInterface { }"");
+
+      throw new ParserException(""Unknown JavaSource type ["" + type.getName() + ""]"");
    }
 
    @Override
@@ -77,11 +70,11 @@
       try
       {
          char[] source = Util.getInputStreamAsCharArray(data, data.available(), ""ISO8859_1"");
-         return parse(source);
+         return parse(new String(source));
       }
       catch (IOException e)
       {
-         throw new IllegalArgumentException(""InputStream must be a parsable java file: "", e);
+         return null;
       }
       finally
       {
@@ -89,15 +82,8 @@
       }
    }
 
-   @Override
-   public JavaSource<?> parse(final char[] data)
-   {
-      return parse(new String(data));
-   }
-
-   @Override
    @SuppressWarnings({ ""rawtypes"", ""unchecked"" })
-   public JavaSource<?> parse(final String data)
+   private JavaSource<?> parse(final String data)
    {
       Document document = new Document(data);
       ASTParser parser = ASTParser.newParser(AST.JLS4);
@@ -169,92 +155,4 @@
       }
    }
 
-   @Override
-   @SuppressWarnings(""unchecked"")
-   public <T extends JavaSource<?>> T create(final Class<T> type)
-   {
-      if (JavaClass.class.isAssignableFrom(type))
-         return (T) parse(""public class JavaClass { }"");
-
-      if (JavaEnum.class.isAssignableFrom(type))
-         return (T) parse(""public enum JavaEnum { }"");
-
-      if (JavaAnnotation.class.isAssignableFrom(type))
-         return (T) parse(""public @interface JavaAnnotation { }"");
-
-      if (JavaInterface.class.isAssignableFrom(type))
-         return (T) parse(""public interface JavaInterface { }"");
-
-      if (JavaPackageInfo.class.isAssignableFrom(type))
-         return (T) parse(""package org.example;"");
-
-      throw new ParserException(""Unknown JavaSource type ["" + type.getName() + ""]"");
-   }
-
-   @Override
-   @SuppressWarnings(""unchecked"")
-   public <T extends JavaSource<?>> T parse(final Class<T> type, final InputStream data)
-   {
-
-      JavaSource<?> source = parse(data);
-      if (type.isAssignableFrom(source.getClass()))
-      {
-         return (T) source;
-      }
-      throw new ParserException(""Source does not represent a ["" + type.getSimpleName() + ""], instead was [""
-               + source.getClass().getSimpleName() + ""] - Cannot convert."");
-   }
-
-   @Override
-   @SuppressWarnings(""unchecked"")
-   public <T extends JavaSource<?>> T parse(final Class<T> type, final char[] data)
-   {
-      JavaSource<?> source = parse(data);
-      if (type.isAssignableFrom(source.getClass()))
-      {
-         return (T) source;
-      }
-      throw new ParserException(""Source does not represent a ["" + type.getSimpleName() + ""], instead was [""
-               + source.getClass().getSimpleName() + ""] - Cannot convert."");
-   }
-
-   @Override
-   @SuppressWarnings(""unchecked"")
-   public <T extends JavaSource<?>> T parse(final Class<T> type, final String data)
-   {
-      JavaSource<?> source = parse(data);
-      if (type.isAssignableFrom(source.getClass()))
-      {
-         return (T) source;
-      }
-      throw new ParserException(""Source does not represent a ["" + type.getSimpleName() + ""], instead was [""
-               + source.getClass().getSimpleName() + ""] - Cannot convert."");
-   }
-
-   @Override
-   @SuppressWarnings(""unchecked"")
-   public <T extends JavaSource<?>> T parse(final Class<T> type, final File file) throws FileNotFoundException
-   {
-      JavaSource<?> source = parse(file);
-      if (type.isAssignableFrom(source.getClass()))
-      {
-         return (T) source;
-      }
-      throw new ParserException(""Source does not represent a ["" + type.getSimpleName() + ""], instead was [""
-               + source.getClass().getSimpleName() + ""] - Cannot convert."");
-   }
-
-   @Override
-   @SuppressWarnings(""unchecked"")
-   public <T extends JavaSource<?>> T parse(final Class<T> type, final URL url) throws IOException
-   {
-      JavaSource<?> source = parse(url.openStream());
-      if (type.isAssignableFrom(source.getClass()))
-      {
-         return (T) source;
-      }
-      throw new ParserException(""Source does not represent a ["" + type.getSimpleName() + ""], instead was [""
-               + source.getClass().getSimpleName() + ""] - Cannot convert."");
-   }
-
 }
"
27d27f2c0117795a065c521139f43f056c50eda7,Matt Benson,EnumConstantImpl.java,MODIFY,init -> [JavaEnumSource parent] | [JavaEnum parent],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java
index 52ddeb0..3cf65a0 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java
@@ -19,41 +19,37 @@
 import org.jboss.forge.parser.java.Annotation;
 import org.jboss.forge.parser.java.EnumConstant;
 import org.jboss.forge.parser.java.JavaEnum;
-import org.jboss.forge.parser.java.JavaSource;
-import org.jboss.forge.parser.java.ast.AnnotationAccessor;
-import org.jboss.forge.parser.java.util.Strings;
 
-public class EnumConstantImpl<O extends JavaSource<O>> implements EnumConstant<O>
+public class EnumConstantImpl implements EnumConstant
 {
-   private final AnnotationAccessor<O, EnumConstant<O>> annotations = new AnnotationAccessor<O, EnumConstant<O>>();
-   private O parent;
+   private JavaEnum parent;
    private AST ast;
    private EnumConstantDeclaration enumConstant;
 
-   private void init(final O parent)
+   private void init(final JavaEnum parent)
    {
       this.parent = parent;
       this.ast = ((ASTNode) parent.getInternal()).getAST();
    }
    
-   public EnumConstantImpl(final O parent) {
+   public EnumConstantImpl(final JavaEnum parent) {
       init(parent);
       this.enumConstant = ast.newEnumConstantDeclaration();
    }
    
-   public EnumConstantImpl(final O parent, final String declaration)
+   public EnumConstantImpl(final JavaEnum parent, final String declaration)
    {
       init(parent);
 
       String stub = ""public enum Stub { "" + declaration + "" }"";
       JavaEnum temp = (JavaEnum) JavaParser.parse(stub);
-      List<EnumConstant<JavaEnum>> constants = temp.getEnumConstants();
+      List<EnumConstant> constants = temp.getEnumConstants();
       EnumConstantDeclaration newField = (EnumConstantDeclaration) constants.get(0).getInternal();
       EnumConstantDeclaration subtree = (EnumConstantDeclaration) ASTNode.copySubtree(ast, newField);
       this.enumConstant = subtree;
    }
    
-   public EnumConstantImpl(final O parent, final Object internal)
+   public EnumConstantImpl(final JavaEnum parent, final Object internal)
    {
       init(parent);
       this.enumConstant = (EnumConstantDeclaration) internal;
@@ -66,7 +62,7 @@
    }
 
    @Override
-   public EnumConstant<O> setName(String name)
+   public EnumConstant setName(String name)
    {
       this.enumConstant.setName(ast.newSimpleName(name));
       return this;
@@ -79,7 +75,7 @@
    }
 
    @Override
-   public O getOrigin()
+   public JavaEnum getOrigin()
    {
       return parent;
    }
"
27d27f2c0117795a065c521139f43f056c50eda7,Matt Benson,JavaEnumImpl.java,MODIFY,addEnumConstant -> [String declaration] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
index 94745b1..b6f3f6c 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
@@ -34,14 +34,14 @@
    }
 
    @Override
-   public List<EnumConstant<JavaEnum>> getEnumConstants()
+   public List<EnumConstant> getEnumConstants()
    {
-      List<EnumConstant<JavaEnum>> result = new ArrayList<EnumConstant<JavaEnum>>();
+      List<EnumConstant> result = new ArrayList<EnumConstant>();
 
       for (Object o : (((EnumDeclaration) getBodyDeclaration()).enumConstants()))
       {
-         EnumConstantDeclaration constant = (EnumConstantDeclaration) o;
-         result.add(new EnumConstantImpl<JavaEnum>(this, constant));
+         EnumConstantDeclaration field = (EnumConstantDeclaration) o;
+         result.add(new EnumConstantImpl(this, field));
       }
 
       return Collections.unmodifiableList(result);
@@ -49,21 +49,19 @@
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public EnumConstant<JavaEnum> addEnumConstant()
+   public EnumConstant addEnumConstant()
    {
-      EnumConstantImpl<JavaEnum> enumConst = new EnumConstantImpl<JavaEnum>(this);
-      EnumDeclaration enumDeclaration = (EnumDeclaration) getBodyDeclaration();
-      List<EnumConstantDeclaration> constants = enumDeclaration.enumConstants();
-      constants.add((EnumConstantDeclaration) enumConst.getInternal());
+      EnumConstantImpl enumConst = new EnumConstantImpl(this);
+      getBodyDeclaration().bodyDeclarations().add(enumConst.getInternal());
 
       return enumConst;
    }
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public EnumConstant<JavaEnum> addEnumConstant(final String declaration)
+   public EnumConstant addEnumConstant(final String declaration)
    {
-      EnumConstantImpl<JavaEnum> enumConst = new EnumConstantImpl<JavaEnum>(this, declaration);
+      EnumConstantImpl enumConst = new EnumConstantImpl(this, declaration);
 
       EnumDeclaration enumDeclaration = (EnumDeclaration) getBodyDeclaration();
       List<EnumConstantDeclaration> constants = enumDeclaration.enumConstants();
@@ -73,9 +71,9 @@
    }
 
    @Override
-   public EnumConstant<JavaEnum> getEnumConstant(String name)
+   public EnumConstant getEnumConstant(String name)
    {
-      for (EnumConstant<JavaEnum> enumConst : getEnumConstants())
+      for (EnumConstant enumConst : getEnumConstants())
       {
          if (enumConst.getName().equals(name))
          {
"
5cc3d6a504f16f58795fa9a2000d004025389755,Matt Benson,JavaEnumImpl.java,MODIFY,addEnumConstant -> [String declaration] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
index b6f3f6c..98eb14a 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
@@ -40,8 +40,8 @@
 
       for (Object o : (((EnumDeclaration) getBodyDeclaration()).enumConstants()))
       {
-         EnumConstantDeclaration field = (EnumConstantDeclaration) o;
-         result.add(new EnumConstantImpl(this, field));
+         EnumConstantDeclaration constant = (EnumConstantDeclaration) o;
+         result.add(new EnumConstantImpl(this, constant));
       }
 
       return Collections.unmodifiableList(result);
@@ -52,7 +52,9 @@
    public EnumConstant addEnumConstant()
    {
       EnumConstantImpl enumConst = new EnumConstantImpl(this);
-      getBodyDeclaration().bodyDeclarations().add(enumConst.getInternal());
+      EnumDeclaration enumDeclaration = (EnumDeclaration) getBodyDeclaration();
+      List<EnumConstantDeclaration> constants = enumDeclaration.enumConstants();
+      constants.add((EnumConstantDeclaration) enumConst.getInternal());
 
       return enumConst;
    }
"
4200c8f755b4575d7b8963fb66b085a7a6428f72,Matt Benson,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
index decde2e..7c89749 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
@@ -885,6 +885,12 @@
       return result;
    }
 
+   @Override
+   public boolean isEditable()
+   {
+      return true;
+   }
+
    private List<AbstractTypeDeclaration> getNestedDeclarations(BodyDeclaration body)
    {
 
"
4200c8f755b4575d7b8963fb66b085a7a6428f72,Matt Benson,AnnotationTest.java,MODIFY,setTarget -> [AnnotationTargetSource target] | [AnnotationTarget target],"diff --git a/impl/src/test/java/org/jboss/forge/test/parser/java/common/AnnotationTest.java b/impl/src/test/java/org/jboss/forge/test/parser/java/common/AnnotationTest.java
index b9995b6..9770c37 100644
--- a/impl/src/test/java/org/jboss/forge/test/parser/java/common/AnnotationTest.java
+++ b/impl/src/test/java/org/jboss/forge/test/parser/java/common/AnnotationTest.java
@@ -44,6 +44,7 @@
    public void reset()
    {
       resetTests();
+      assertTrue(target.getOrigin().isEditable());
    }
 
    public abstract void resetTests();
"
4200c8f755b4575d7b8963fb66b085a7a6428f72,Matt Benson,VisibilityTest.java,MODIFY,setTarget -> [VisibilityScopedSource target] | [VisibilityScoped target],"diff --git a/impl/src/test/java/org/jboss/forge/test/parser/java/common/VisibilityTest.java b/impl/src/test/java/org/jboss/forge/test/parser/java/common/VisibilityTest.java
index d567d36..d2c213d 100644
--- a/impl/src/test/java/org/jboss/forge/test/parser/java/common/VisibilityTest.java
+++ b/impl/src/test/java/org/jboss/forge/test/parser/java/common/VisibilityTest.java
@@ -9,6 +9,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
+import org.jboss.forge.parser.java.JavaSource;
 import org.jboss.forge.parser.java.VisibilityScoped;
 import org.junit.Before;
 import org.junit.Test;
@@ -29,6 +30,9 @@
    public void reset() throws Exception
    {
       resetTests();
+      if (this.target instanceof JavaSource<?>) {
+         assertTrue(((JavaSource<?>) this.target).isEditable());
+      }
    }
 
    public abstract void resetTests() throws Exception;
"
fed99d5077c467343a4a923b710646f63beaeedb,Matt Benson,JavaParser.java,MODIFY,"parse -> [Class type, InputStream data] | [File file]","diff --git a/api/src/main/java/org/jboss/forge/parser/JavaParser.java b/api/src/main/java/org/jboss/forge/parser/JavaParser.java
index c512fd0..c221ea9 100644
--- a/api/src/main/java/org/jboss/forge/parser/JavaParser.java
+++ b/api/src/main/java/org/jboss/forge/parser/JavaParser.java
@@ -17,12 +17,13 @@
 import java.util.List;
 import java.util.ServiceLoader;
 
-import org.jboss.forge.parser.java.JavaClass;
-import org.jboss.forge.parser.java.JavaSource;
+import org.jboss.forge.parser.java.ReadJavaClass;
+import org.jboss.forge.parser.java.ReadJavaSource;
+import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
 import org.jboss.forge.parser.spi.JavaParserProvider;
 
 /**
- * Responsible for parsing data into new {@link JavaClass} instances.
+ * Responsible for parsing data into new {@link ReadJavaClass} instances.
  * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
@@ -69,90 +70,90 @@
    }
 
    /**
-    * Open the given {@link File}, parsing its contents into a new {@link JavaClass} instance.
+    * Open the given {@link File}, parsing its contents into a new {@link ReadJavaClass} instance.
     */
-   public static JavaSource<?> parse(final File file) throws FileNotFoundException
+   public static ReadJavaSource<?> parse(final File file) throws FileNotFoundException
    {
-      return parse(JavaSource.class, file);
+      return parse(ReadJavaSource.class, file);
    }
 
    /**
-    * Parse the given {@link URL} data into a new {@link JavaSource} instance.
+    * Parse the given {@link URL} data into a new {@link ReadJavaSource} instance.
     */
-   public static JavaSource<?> parse(final URL data) throws IOException
+   public static ReadJavaSource<?> parse(final URL data) throws IOException
    {
-      return parse(JavaSource.class, data);
+      return parse(ReadJavaSource.class, data);
    }
 
    /**
-    * Read the given {@link InputStream} and parse the data into a new {@link JavaClass} instance.
+    * Read the given {@link InputStream} and parse the data into a new {@link ReadJavaClass} instance.
     */
-   public static JavaSource<?> parse(final InputStream data)
+   public static ReadJavaSource<?> parse(final InputStream data)
    {
-      return parse(JavaSource.class, data);
+      return parse(ReadJavaSource.class, data);
    }
 
    /**
-    * Parse the given character array into a new {@link JavaClass} instance.
+    * Parse the given character array into a new {@link ReadJavaClass} instance.
     */
-   public static JavaSource<?> parse(final char[] data)
+   public static ReadJavaSource<?> parse(final char[] data)
    {
-      return parse(JavaSource.class, data);
+      return parse(ReadJavaSource.class, data);
    }
 
    /**
-    * Parse the given String data into a new {@link JavaClass} instance.
+    * Parse the given String data into a new {@link ReadJavaClass} instance.
     */
-   public static JavaSource<?> parse(final String data)
+   public static ReadJavaSource<?> parse(final String data)
    {
-      return parse(JavaSource.class, data);
+      return parse(ReadJavaSource.class, data);
    }
 
    /**
-    * Read the given {@link URL} and parse its data into a new {@link JavaSource} instance of the given type.
+    * Read the given {@link URL} and parse its data into a new {@link ReadJavaSource} instance of the given type.
     * 
     * @throws FileNotFoundException
     */
-   public static <T extends JavaSource<?>> T parse(final Class<T> type, final URL url) throws IOException
+   public static <T extends ReadJavaSource<?>> T parse(final Class<T> type, final URL url) throws IOException
    {
       return internalParse(type, url.openStream());
    }
 
    /**
-    * Read the given {@link File} and parse its data into a new {@link JavaSource} instance of the given type.
+    * Read the given {@link File} and parse its data into a new {@link ReadJavaSource} instance of the given type.
     * 
     * @throws FileNotFoundException
     */
-   public static <T extends JavaSource<?>> T parse(final Class<T> type, final File file) throws FileNotFoundException
+   public static <T extends ReadJavaSource<?>> T parse(final Class<T> type, final File file) throws FileNotFoundException
    {
       return internalParse(type, new FileInputStream(file));
    }
 
    /**
-    * Read the given character array and parse its data into a new {@link JavaSource} instance of the given type.
+    * Read the given character array and parse its data into a new {@link ReadJavaSource} instance of the given type.
     */
-   public static <T extends JavaSource<?>> T parse(final Class<T> type, final char[] data)
+   public static <T extends ReadJavaSource<?>> T parse(final Class<T> type, final char[] data)
    {
       return parse(type, new String(data));
    }
 
    /**
-    * Read the given string and parse its data into a new {@link JavaSource} instance of the given type.
+    * Read the given string and parse its data into a new {@link ReadJavaSource} instance of the given type.
     */
-   public static <T extends JavaSource<?>> T parse(final Class<T> type, final String data)
+   public static <T extends ReadJavaSource<?>> T parse(final Class<T> type, final String data)
    {
       return parse(type, Streams.fromString(data));
    }
 
    /**
-    * Read the given {@link InputStream} and parse its data into a new {@link JavaSource} instance of the given type.
+    * Read the given {@link InputStream} and parse its data into a new {@link ReadJavaSource} instance of the given type.
     * The caller is responsible for closing the stream.
     */
-   public static <T extends JavaSource<?>> T parse(final Class<T> type, final InputStream data)
+   public static <T extends ReadJavaSource<?>> T parse(final Class<T> type, final InputStream data)
    {
       for (JavaParserProvider parser : getParsers())
       {
-         final JavaSource<?> source = parser.parse(data);
+         final ReadJavaSource<?> source = parser.parse(data);
 
          if (type.isInstance(source))
          {
@@ -169,7 +170,7 @@
       throw new ParserException(""Cannot find JavaParserProvider capable of parsing the requested data"");
    }
 
-   private static <T extends JavaSource<?>> T internalParse(final Class<T> type, final InputStream data)
+   private static <T extends ReadJavaSource<?>> T internalParse(final Class<T> type, final InputStream data)
    {
       try
       {
"
fed99d5077c467343a4a923b710646f63beaeedb,Matt Benson,Visibility.java,MODIFY,getFrom -> [VisibilityScoped target] | [ReadVisibilityScoped target],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/Visibility.java b/api/src/main/java/org/jboss/forge/parser/java/Visibility.java
index f30dd3d..d3b4401 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/Visibility.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/Visibility.java
@@ -7,6 +7,7 @@
 
 package org.jboss.forge.parser.java;
 
+import org.jboss.forge.parser.java.ReadVisibilityScoped.VisibilityScoped;
 import org.jboss.forge.parser.java.util.Assert;
 
 /**
@@ -35,7 +36,7 @@
       return scope;
    }
 
-   public static Visibility getFrom(VisibilityScoped<?> target)
+   public static Visibility getFrom(ReadVisibilityScoped target)
    {
       Assert.notNull(target, ""VisibilityScoped<T> target must not be null."");
 
@@ -50,7 +51,7 @@
 
       else
       {
-         throw new IllegalStateException(VisibilityScoped.class.getSimpleName()
+         throw new IllegalStateException(ReadVisibilityScoped.class.getSimpleName()
                   + "" target does not comply with visibility scoping. Must be one of "" + Visibility.values() + ""[ ""
                   + target + ""]"");
       }
@@ -67,20 +68,23 @@
       Assert.notNull(target, ""VisibilityScoped<T> target must not be null."");
       Assert.notNull(scope, ""Visibility scope must not be null"");
 
-      if (PRIVATE.equals(scope))
-         target.setPrivate();
-      else if (PACKAGE_PRIVATE.equals(scope))
-         target.setPackagePrivate();
-      else if (PROTECTED.equals(scope))
-         target.setProtected();
-      else if (PUBLIC.equals(scope))
-         target.setPublic();
-
-      else
+      switch (scope)
       {
+      case PRIVATE:
+         target.setPrivate();
+         break;
+      case PACKAGE_PRIVATE:
+         target.setPackagePrivate();
+         break;
+      case PROTECTED:
+         target.setProtected();
+         break;
+      case PUBLIC:
+         target.setPublic();
+         break;
+      default:
          throw new IllegalStateException(""Unknown Visibility scope."");
       }
-
       return target;
    }
 }
"
fed99d5077c467343a4a923b710646f63beaeedb,Matt Benson,Refactory.java,MODIFY,"createGetterAndSetter -> [JavaClassSource clazz, FieldSource field] | [JavaClass clazz, Field field]","diff --git a/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java b/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java
index d39cb48..58bf075 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java
@@ -10,9 +10,9 @@
 import java.util.Arrays;
 import java.util.List;
 
-import org.jboss.forge.parser.java.Field;
-import org.jboss.forge.parser.java.JavaClass;
-import org.jboss.forge.parser.java.Method;
+import org.jboss.forge.parser.java.ReadField.Field;
+import org.jboss.forge.parser.java.ReadJavaClass.JavaClass;
+import org.jboss.forge.parser.java.ReadMethod.Method;
 
 /**
  * Utility refactory methods for {@link JavaClass} objects
"
fed99d5077c467343a4a923b710646f63beaeedb,Matt Benson,WildcardImportResolver.java,MODIFY,"resolve -> [JavaType source, String type] | [ReadJavaSource source, String type]","diff --git a/api/src/main/java/org/jboss/forge/parser/spi/WildcardImportResolver.java b/api/src/main/java/org/jboss/forge/parser/spi/WildcardImportResolver.java
index a090e33..40f5790 100644
--- a/api/src/main/java/org/jboss/forge/parser/spi/WildcardImportResolver.java
+++ b/api/src/main/java/org/jboss/forge/parser/spi/WildcardImportResolver.java
@@ -6,7 +6,7 @@
  */
 package org.jboss.forge.parser.spi;
 
-import org.jboss.forge.parser.java.JavaSource;
+import org.jboss.forge.parser.java.ReadJavaSource;
 
 /**
  * Responsible for providing additional import resolution functionality for situations where classes have referenced a
@@ -17,5 +17,5 @@
  */
 public interface WildcardImportResolver
 {
-   public String resolve(JavaSource<?> source, String type);
+   public String resolve(ReadJavaSource<?> source, String type);
 }
"
fed99d5077c467343a4a923b710646f63beaeedb,Matt Benson,AnnotationAccessor.java,MODIFY,"addAnnotation -> [AnnotationTargetSource target, List modifiers, String className] | [AnnotationTarget target, ASTNode body]","diff --git a/impl/src/main/java/org/jboss/forge/parser/java/ast/AnnotationAccessor.java b/impl/src/main/java/org/jboss/forge/parser/java/ast/AnnotationAccessor.java
index f528252..675bb6b 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/ast/AnnotationAccessor.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/ast/AnnotationAccessor.java
@@ -17,9 +17,10 @@
 import org.eclipse.jdt.core.dom.IExtendedModifier;
 import org.eclipse.jdt.core.dom.PackageDeclaration;
 import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
-import org.jboss.forge.parser.java.Annotation;
-import org.jboss.forge.parser.java.AnnotationTarget;
-import org.jboss.forge.parser.java.JavaSource;
+import org.jboss.forge.parser.java.ReadAnnotation;
+import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
+import org.jboss.forge.parser.java.ReadAnnotationTarget.AnnotationTarget;
+import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
 import org.jboss.forge.parser.java.impl.AnnotationImpl;
 import org.jboss.forge.parser.java.util.Types;
 
@@ -121,20 +122,20 @@
    }
 
    public <E extends AnnotationTarget<O, T>> E removeAnnotation(final E target, final ASTNode body,
-            final Annotation<O> annotation)
+            final ReadAnnotation<O> annotation)
    {
       return removeAnnotation(target, getModifiers(body), annotation);
    }
 
    public <E extends AnnotationTarget<O, T>> E removeAnnotation(final E target,
             final SingleVariableDeclaration variableDeclaration,
-            final Annotation<O> annotation)
+            final ReadAnnotation<O> annotation)
    {
       return removeAnnotation(target, variableDeclaration.modifiers(), annotation);
    }
 
    private <E extends AnnotationTarget<O, T>> E removeAnnotation(final E target, final List<?> modifiers,
-            final Annotation<O> annotation)
+            final ReadAnnotation<O> annotation)
    {
       for (Object object : modifiers)
       {
"
fed99d5077c467343a4a923b710646f63beaeedb,Matt Benson,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
index 7c89749..1e0569e 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
@@ -30,12 +30,15 @@
 import org.eclipse.text.edits.TextEdit;
 import org.jboss.forge.parser.JavaParser;
 import org.jboss.forge.parser.ParserException;
-import org.jboss.forge.parser.java.Annotation;
-import org.jboss.forge.parser.java.Import;
-import org.jboss.forge.parser.java.InterfaceCapable;
-import org.jboss.forge.parser.java.JavaInterface;
-import org.jboss.forge.parser.java.JavaSource;
-import org.jboss.forge.parser.java.Member;
+import org.jboss.forge.parser.java.ReadAnnotation;
+import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
+import org.jboss.forge.parser.java.ReadImport;
+import org.jboss.forge.parser.java.ReadImport.Import;
+import org.jboss.forge.parser.java.ReadInterfaceCapable.InterfaceCapable;
+import org.jboss.forge.parser.java.ReadJavaInterface;
+import org.jboss.forge.parser.java.ReadJavaSource;
+import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
+import org.jboss.forge.parser.java.ReadMember.Member;
 import org.jboss.forge.parser.java.SyntaxError;
 import org.jboss.forge.parser.java.Visibility;
 import org.jboss.forge.parser.java.ast.AnnotationAccessor;
@@ -122,7 +125,7 @@
    }
 
    @Override
-   public O removeAnnotation(final Annotation<O> annotation)
+   public O removeAnnotation(final ReadAnnotation<O> annotation)
    {
       return (O) annotations.removeAnnotation(this, getBodyDeclaration(), annotation);
    }
@@ -150,14 +153,14 @@
    }
 
    @Override
-   public <T extends JavaSource<?>> Import addImport(final T type)
+   public <T extends ReadJavaSource<?>> Import addImport(final T type)
    {
       String qualifiedName = type.getQualifiedName();
       return this.addImport(qualifiedName);
    }
 
    @Override
-   public Import addImport(final Import imprt)
+   public Import addImport(final ReadImport imprt)
    {
       return addImport(imprt.getQualifiedName()).setStatic(imprt.isStatic());
    }
@@ -209,13 +212,13 @@
    }
 
    @Override
-   public <T extends JavaSource<?>> Import getImport(final T type)
+   public <T extends ReadJavaSource<?>> Import getImport(final T type)
    {
       return getImport(type.getQualifiedName());
    }
 
    @Override
-   public Import getImport(final Import imprt)
+   public Import getImport(final ReadImport imprt)
    {
       return getImport(imprt.getQualifiedName());
    }
@@ -240,13 +243,13 @@
    }
 
    @Override
-   public <T extends JavaSource<T>> boolean hasImport(final T type)
+   public <T extends ReadJavaSource<T>> boolean hasImport(final T type)
    {
       return hasImport(type.getQualifiedName());
    }
 
    @Override
-   public boolean hasImport(final Import imprt)
+   public boolean hasImport(final ReadImport imprt)
    {
       return hasImport(imprt.getQualifiedName());
    }
@@ -327,7 +330,7 @@
 
          if (result.equals(original))
          {
-            for (Import imprt : getImports())
+            for (ReadImport imprt : getImports())
             {
                if (Types.areEquivalent(result, imprt.getQualifiedName()))
                {
@@ -341,7 +344,7 @@
       // If we didn't match any imports directly, we might have a wild-card/on-demand import.
       if (Types.isSimpleName(result))
       {
-         for (Import imprt : getImports())
+         for (ReadImport imprt : getImports())
          {
             if (imprt.isWildcard())
             {
@@ -393,7 +396,7 @@
    @Override
    public O removeImport(final String name)
    {
-      for (Import i : getImports())
+      for (ReadImport i : getImports())
       {
          if (i.getQualifiedName().equals(name))
          {
@@ -411,13 +414,13 @@
    }
 
    @Override
-   public <T extends JavaSource<?>> O removeImport(final T type)
+   public <T extends ReadJavaSource<?>> O removeImport(final T type)
    {
       return removeImport(type.getQualifiedName());
    }
 
    @Override
-   public O removeImport(final Import imprt)
+   public O removeImport(final ReadImport imprt)
    {
       Object internal = imprt.getInternal();
       if (unit.imports().contains(internal))
@@ -463,7 +466,7 @@
    {
       String result = getName();
 
-      JavaSource<?> enclosingType = this;
+      ReadJavaSource<?> enclosingType = this;
       while (enclosingType != enclosingType.getEnclosingType())
       {
          enclosingType = getEnclosingType();
@@ -487,7 +490,7 @@
    {
       String result = getName();
 
-      JavaSource<?> enclosingType = this;
+      ReadJavaSource<?> enclosingType = this;
       while (enclosingType != enclosingType.getEnclosingType())
       {
          enclosingType = getEnclosingType();
@@ -616,7 +619,7 @@
     * Non-manipulation methods.
     */
    /**
-    * Return this {@link JavaSource} file as a String
+    * Return this {@link ReadJavaSource} file as a String
     */
    @Override
    public String toString()
@@ -772,7 +775,7 @@
          String name = JDTHelper.getTypeName(type);
          if (Types.isSimpleName(name) && this.hasImport(name))
          {
-            Import imprt = this.getImport(name);
+            ReadImport imprt = this.getImport(name);
             String pkg = imprt.getPackage();
             if (!Strings.isNullOrEmpty(pkg))
             {
@@ -815,7 +818,7 @@
    }
 
    @Override
-   public O addInterface(final JavaInterface type)
+   public O addInterface(final ReadJavaInterface<?> type)
    {
       return addInterface(type.getQualifiedName());
    }
@@ -840,7 +843,7 @@
    }
 
    @Override
-   public boolean hasInterface(final JavaInterface type)
+   public boolean hasInterface(final ReadJavaInterface<?> type)
    {
       return hasInterface(type.getQualifiedName());
    }
@@ -867,7 +870,7 @@
    }
 
    @Override
-   public O removeInterface(final JavaInterface type)
+   public O removeInterface(final ReadJavaInterface<?> type)
    {
       return removeInterface(type.getQualifiedName());
    }
@@ -885,12 +888,6 @@
       return result;
    }
 
-   @Override
-   public boolean isEditable()
-   {
-      return true;
-   }
-
    private List<AbstractTypeDeclaration> getNestedDeclarations(BodyDeclaration body)
    {
 
"
fed99d5077c467343a4a923b710646f63beaeedb,Matt Benson,AbstractJavaSourceMemberHolder.java,MODIFY,addField -> [Field field] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java
index ea4b1f4..ef83f9e 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java
@@ -18,14 +18,18 @@
 import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
 import org.eclipse.jface.text.Document;
 import org.jboss.forge.parser.JavaParser;
-import org.jboss.forge.parser.java.Field;
-import org.jboss.forge.parser.java.FieldHolder;
-import org.jboss.forge.parser.java.JavaClass;
-import org.jboss.forge.parser.java.JavaSource;
-import org.jboss.forge.parser.java.Member;
-import org.jboss.forge.parser.java.Method;
-import org.jboss.forge.parser.java.MethodHolder;
-import org.jboss.forge.parser.java.Parameter;
+import org.jboss.forge.parser.java.ReadField;
+import org.jboss.forge.parser.java.ReadField.Field;
+import org.jboss.forge.parser.java.ReadFieldHolder.FieldHolder;
+import org.jboss.forge.parser.java.ReadJavaClass.JavaClass;
+import org.jboss.forge.parser.java.ReadJavaSource;
+import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
+import org.jboss.forge.parser.java.ReadMember.Member;
+import org.jboss.forge.parser.java.ReadMethod;
+import org.jboss.forge.parser.java.ReadMethod.Method;
+import org.jboss.forge.parser.java.ReadMethodHolder.MethodHolder;
+import org.jboss.forge.parser.java.ReadParameter;
+import org.jboss.forge.parser.java.ReadParameter.Parameter;
 import org.jboss.forge.parser.java.ast.MethodFinderVisitor;
 import org.jboss.forge.parser.java.util.Strings;
 import org.jboss.forge.parser.java.util.Types;
@@ -77,7 +81,7 @@
    }
 
    @SuppressWarnings(""unchecked"")
-   private void addField(Field<O> field)
+   private void addField(ReadField<O> field)
    {
       List<Object> bodyDeclarations = getBodyDeclaration().bodyDeclarations();
       int idx = 0;
@@ -153,14 +157,14 @@
    }
 
    @Override
-   public boolean hasField(final Field<O> field)
+   public boolean hasField(final ReadField<O> field)
    {
       return getFields().contains(field);
    }
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public O removeField(final Field<O> field)
+   public O removeField(final ReadField<O> field)
    {
       VariableDeclarationFragment fragment = (VariableDeclarationFragment) field.getInternal();
       Iterator<Object> declarationsIterator = getBodyDeclaration().bodyDeclarations().iterator();
@@ -192,7 +196,7 @@
    }
 
    @Override
-   public boolean hasMethod(final Method<O> method)
+   public boolean hasMethod(final ReadMethod<O, ?> method)
    {
       return getMethods().contains(method);
    }
@@ -288,14 +292,14 @@
    }
 
    @Override
-   public boolean hasMethodSignature(final Method<?> method)
+   public boolean hasMethodSignature(final ReadMethod<?, ?> method)
    {
       for (Method<O> local : getMethods())
       {
          if (local.getName().equals(method.getName()))
          {
             Iterator<Parameter<O>> localParams = local.getParameters().iterator();
-            for (Parameter<? extends JavaSource<?>> methodParam : method.getParameters())
+            for (ReadParameter<? extends ReadJavaSource<?>> methodParam : method.getParameters())
             {
                if (localParams.hasNext() && Strings.areEqual(localParams.next().getType(), methodParam.getType()))
                {
@@ -311,7 +315,7 @@
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public O removeMethod(final Method<O> method)
+   public O removeMethod(final ReadMethod<O, ?> method)
    {
       getBodyDeclaration().bodyDeclarations().remove(method.getInternal());
       return (O) this;
"
fed99d5077c467343a4a923b710646f63beaeedb,Matt Benson,AnnotationElementImpl.java,MODIFY,"parseElement -> [JavaAnnotationSource parent, String declaration] | [JavaAnnotation parent, String declaration]","diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationElementImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationElementImpl.java
index e849b56..e94369d 100755
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationElementImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationElementImpl.java
@@ -21,10 +21,11 @@
 import org.eclipse.jdt.core.dom.PrimitiveType.Code;
 import org.eclipse.jdt.core.dom.TypeLiteral;
 import org.jboss.forge.parser.JavaParser;
-import org.jboss.forge.parser.java.Annotation;
-import org.jboss.forge.parser.java.AnnotationElement;
-import org.jboss.forge.parser.java.JavaAnnotation;
-import org.jboss.forge.parser.java.JavaSource;
+import org.jboss.forge.parser.java.ReadAnnotation;
+import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
+import org.jboss.forge.parser.java.ReadAnnotationElement.AnnotationElement;
+import org.jboss.forge.parser.java.ReadJavaAnnotation.JavaAnnotation;
+import org.jboss.forge.parser.java.ReadJavaSource;
 import org.jboss.forge.parser.java.Type;
 import org.jboss.forge.parser.java.ast.AnnotationAccessor;
 import org.jboss.forge.parser.java.util.Assert;
@@ -390,7 +391,7 @@
    }
 
    @Override
-   public AnnotationElement removeAnnotation(final Annotation<JavaAnnotation> annotation)
+   public AnnotationElement removeAnnotation(final ReadAnnotation<JavaAnnotation> annotation)
    {
       return annotations.removeAnnotation(this, member, annotation);
    }
@@ -487,7 +488,7 @@
    }
 
    @Override
-   public AnnotationElement setType(final JavaSource<?> source)
+   public AnnotationElement setType(final ReadJavaSource<?> source)
    {
       return setType(source.getQualifiedName());
    }
"
fed99d5077c467343a4a923b710646f63beaeedb,Matt Benson,AnnotationImpl.java,MODIFY,"createAnnotation -> [AnnotationTargetSource parent, AnnotationType type] | [AnnotationTarget parent, AnnotationType type]","diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationImpl.java
index 2a0fd92..76d6622 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationImpl.java
@@ -24,10 +24,10 @@
 import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
 import org.eclipse.jdt.core.dom.TypeLiteral;
 import org.jboss.forge.parser.JavaParser;
-import org.jboss.forge.parser.java.Annotation;
-import org.jboss.forge.parser.java.AnnotationTarget;
-import org.jboss.forge.parser.java.JavaClass;
-import org.jboss.forge.parser.java.JavaSource;
+import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
+import org.jboss.forge.parser.java.ReadAnnotationTarget.AnnotationTarget;
+import org.jboss.forge.parser.java.ReadJavaClass;
+import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
 import org.jboss.forge.parser.java.Type;
 import org.jboss.forge.parser.java.ValuePair;
 import org.jboss.forge.parser.java.util.Assert;
@@ -292,7 +292,7 @@
          SingleMemberAnnotation sa = (SingleMemberAnnotation) annotation;
 
          String stub = ""@"" + getName() + ""("" + value + "") public class Stub { }"";
-         JavaClass temp = (JavaClass) JavaParser.parse(stub);
+         ReadJavaClass<?> temp = JavaParser.parse(ReadJavaClass.class, stub);
 
          SingleMemberAnnotation anno = (SingleMemberAnnotation) temp.getAnnotations().get(0).getInternal();
 
@@ -329,7 +329,7 @@
       NormalAnnotation na = (NormalAnnotation) annotation;
 
       String stub = ""@"" + getName() + ""("" + name + ""="" + value + "" ) public class Stub { }"";
-      JavaClass temp = (JavaClass) JavaParser.parse(stub);
+      ReadJavaClass<?> temp = JavaParser.parse(ReadJavaClass.class, stub);
 
       NormalAnnotation anno = (NormalAnnotation) temp.getAnnotations().get(0).getInternal();
       MemberValuePair mvp = (MemberValuePair) anno.values().get(0);
@@ -559,7 +559,7 @@
       Annotation<O> result = new Nested(this);
       
       String stub = ""@"" + getName() + ""("" + name + ""= 0 ) public class Stub { }"";
-      JavaClass temp = (JavaClass) JavaParser.parse(stub);
+      ReadJavaClass<?> temp = JavaParser.parse(ReadJavaClass.class, stub);
 
       NormalAnnotation anno = (NormalAnnotation) temp.getAnnotations().get(0).getInternal();
       MemberValuePair mvp = (MemberValuePair) anno.values().get(0);
"
fed99d5077c467343a4a923b710646f63beaeedb,Matt Benson,EnumConstantImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java
index 3cf65a0..ad2e2ca 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java
@@ -16,9 +16,12 @@
 import org.eclipse.jdt.core.dom.EnumConstantDeclaration;
 import org.eclipse.jdt.core.dom.Expression;
 import org.jboss.forge.parser.JavaParser;
-import org.jboss.forge.parser.java.Annotation;
-import org.jboss.forge.parser.java.EnumConstant;
-import org.jboss.forge.parser.java.JavaEnum;
+import org.jboss.forge.parser.java.ReadAnnotation;
+import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
+import org.jboss.forge.parser.java.ReadEnumConstant.EnumConstant;
+import org.jboss.forge.parser.java.ReadJavaEnum.JavaEnum;
+import org.jboss.forge.parser.java.ast.AnnotationAccessor;
+import org.jboss.forge.parser.java.util.Strings;
 
 public class EnumConstantImpl implements EnumConstant
 {
@@ -169,7 +172,7 @@
    }
 
    @Override
-   public EnumConstant<O> removeAnnotation(final Annotation<O> annotation)
+   public EnumConstant removeAnnotation(final ReadAnnotation<JavaEnum> annotation)
    {
       return annotations.removeAnnotation(this, enumConstant, annotation);
    }
"
fed99d5077c467343a4a923b710646f63beaeedb,Matt Benson,FieldImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
index d65b95f..2559310 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
@@ -22,10 +22,12 @@
 import org.eclipse.jdt.core.dom.Type;
 import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
 import org.jboss.forge.parser.JavaParser;
-import org.jboss.forge.parser.java.Annotation;
-import org.jboss.forge.parser.java.Field;
-import org.jboss.forge.parser.java.JavaClass;
-import org.jboss.forge.parser.java.JavaSource;
+import org.jboss.forge.parser.java.ReadAnnotation;
+import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
+import org.jboss.forge.parser.java.ReadField.Field;
+import org.jboss.forge.parser.java.ReadJavaClass;
+import org.jboss.forge.parser.java.ReadJavaSource;
+import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
 import org.jboss.forge.parser.java.Visibility;
 import org.jboss.forge.parser.java.ast.AnnotationAccessor;
 import org.jboss.forge.parser.java.ast.ModifierAccessor;
@@ -164,7 +166,7 @@
    }
 
    @Override
-   public Field<O> removeAnnotation(final Annotation<O> annotation)
+   public Field<O> removeAnnotation(final ReadAnnotation<O> annotation)
    {
       return annotations.removeAnnotation(this, field, annotation);
    }
@@ -393,7 +395,7 @@
    }
 
    @Override
-   public Field<O> setType(final JavaSource<?> source)
+   public Field<O> setType(final ReadJavaSource<?> source)
    {
       return setType(source.getQualifiedName());
    }
@@ -467,7 +469,7 @@
    public Field<O> setLiteralInitializer(final String value)
    {
       String stub = ""public class Stub { private String stub = "" + value + "" }"";
-      JavaClass temp = (JavaClass) JavaParser.parse(stub);
+      ReadJavaClass<?> temp = JavaParser.parse(ReadJavaClass.class, stub);
       VariableDeclarationFragment tempFrag = (VariableDeclarationFragment) temp.getFields().get(0).getInternal();
       fragment.setInitializer((Expression) ASTNode.copySubtree(ast, tempFrag.getInitializer()));
       return this;
"
fed99d5077c467343a4a923b710646f63beaeedb,Matt Benson,JavaClassImpl.java,MODIFY,setSuperType -> [String type] | [ReadJavaSource type],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaClassImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaClassImpl.java
index 466a0b4..05697fc 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaClassImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaClassImpl.java
@@ -12,9 +12,9 @@
 import org.eclipse.jdt.core.dom.SimpleType;
 import org.eclipse.jdt.core.dom.TypeDeclaration;
 import org.eclipse.jface.text.Document;
-import org.jboss.forge.parser.java.JavaClass;
-import org.jboss.forge.parser.java.JavaSource;
-import org.jboss.forge.parser.java.Method;
+import org.jboss.forge.parser.java.ReadJavaClass.JavaClass;
+import org.jboss.forge.parser.java.ReadJavaSource;
+import org.jboss.forge.parser.java.ReadMethod.Method;
 import org.jboss.forge.parser.java.SourceType;
 import org.jboss.forge.parser.java.ast.ModifierAccessor;
 import org.jboss.forge.parser.java.util.Types;
@@ -97,7 +97,7 @@
    }
 
    @Override
-   public JavaClass setSuperType(final JavaClass type)
+   public JavaClass setSuperType(final ReadJavaSource<?> type)
    {
       return setSuperType(type.getQualifiedName());
    }
"
fed99d5077c467343a4a923b710646f63beaeedb,Matt Benson,JavaEnumImpl.java,MODIFY,addEnumConstant -> [String declaration] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
index 98eb14a..3aa1db4 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
@@ -15,9 +15,8 @@
 import org.eclipse.jdt.core.dom.EnumConstantDeclaration;
 import org.eclipse.jdt.core.dom.EnumDeclaration;
 import org.eclipse.jface.text.Document;
-import org.jboss.forge.parser.java.EnumConstant;
-import org.jboss.forge.parser.java.JavaEnum;
-import org.jboss.forge.parser.java.JavaSource;
+import org.jboss.forge.parser.java.ReadEnumConstant.EnumConstant;
+import org.jboss.forge.parser.java.ReadJavaEnum.JavaEnum;
 import org.jboss.forge.parser.java.SourceType;
 
 /**
"
fed99d5077c467343a4a923b710646f63beaeedb,Matt Benson,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
index 9311c81..1205c62 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
@@ -15,11 +15,13 @@
 import org.eclipse.jface.text.Document;
 import org.eclipse.text.edits.TextEdit;
 import org.jboss.forge.parser.ParserException;
-import org.jboss.forge.parser.java.Annotation;
-import org.jboss.forge.parser.java.Import;
-import org.jboss.forge.parser.java.JavaPackageInfo;
-import org.jboss.forge.parser.java.JavaSource;
-import org.jboss.forge.parser.java.Member;
+import org.jboss.forge.parser.java.ReadAnnotation;
+import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
+import org.jboss.forge.parser.java.ReadImport;
+import org.jboss.forge.parser.java.ReadImport.Import;
+import org.jboss.forge.parser.java.ReadJavaPackageInfo.JavaPackageInfo;
+import org.jboss.forge.parser.java.ReadJavaSource;
+import org.jboss.forge.parser.java.ReadMember.Member;
 import org.jboss.forge.parser.java.SourceType;
 import org.jboss.forge.parser.java.SyntaxError;
 import org.jboss.forge.parser.java.Visibility;
@@ -113,7 +115,7 @@
    }
 
    @Override
-   public JavaPackageInfo removeAnnotation(final Annotation<JavaPackageInfo> annotation)
+   public JavaPackageInfo removeAnnotation(final ReadAnnotation<JavaPackageInfo> annotation)
    {
       return annotations.removeAnnotation(this, getPackageDeclaration(), annotation);
    }
@@ -141,14 +143,14 @@
    }
 
    @Override
-   public <T extends JavaSource<?>> Import addImport(final T type)
+   public <T extends ReadJavaSource<?>> Import addImport(final T type)
    {
       String qualifiedName = type.getQualifiedName();
       return this.addImport(qualifiedName);
    }
 
    @Override
-   public Import addImport(final Import imprt)
+   public Import addImport(final ReadImport imprt)
    {
       return addImport(imprt.getQualifiedName()).setStatic(imprt.isStatic());
    }
@@ -201,13 +203,13 @@
    }
 
    @Override
-   public <T extends JavaSource<?>> Import getImport(final T type)
+   public <T extends ReadJavaSource<?>> Import getImport(final T type)
    {
       return getImport(type.getQualifiedName());
    }
 
    @Override
-   public Import getImport(final Import imprt)
+   public Import getImport(final ReadImport imprt)
    {
       return getImport(imprt.getQualifiedName());
    }
@@ -233,13 +235,13 @@
    }
 
    @Override
-   public <T extends JavaSource<T>> boolean hasImport(final T type)
+   public <T extends ReadJavaSource<T>> boolean hasImport(final T type)
    {
       return hasImport(type.getQualifiedName());
    }
 
    @Override
-   public boolean hasImport(final Import imprt)
+   public boolean hasImport(final ReadImport imprt)
    {
       return hasImport(imprt.getQualifiedName());
    }
@@ -320,7 +322,7 @@
 
          if (result.equals(original))
          {
-            for (Import imprt : getImports())
+            for (ReadImport imprt : getImports())
             {
                if (Types.areEquivalent(result, imprt.getQualifiedName()))
                {
@@ -334,7 +336,7 @@
       // If we didn't match any imports directly, we might have a wild-card/on-demand import.
       if (Types.isSimpleName(result))
       {
-         for (Import imprt : getImports())
+         for (ReadImport imprt : getImports())
          {
             if (imprt.isWildcard())
             {
@@ -386,7 +388,7 @@
    @Override
    public JavaPackageInfo removeImport(final String name)
    {
-      for (Import i : getImports())
+      for (ReadImport i : getImports())
       {
          if (i.getQualifiedName().equals(name))
          {
@@ -404,13 +406,13 @@
    }
 
    @Override
-   public <T extends JavaSource<?>> JavaPackageInfo removeImport(final T type)
+   public <T extends ReadJavaSource<?>> JavaPackageInfo removeImport(final T type)
    {
       return removeImport(type.getQualifiedName());
    }
 
    @Override
-   public JavaPackageInfo removeImport(final Import imprt)
+   public JavaPackageInfo removeImport(final ReadImport imprt)
    {
       Object internal = imprt.getInternal();
       if (unit.imports().contains(internal))
@@ -444,7 +446,7 @@
    {
       String result = getName();
 
-      JavaSource<?> enclosingType = this;
+      ReadJavaSource<?> enclosingType = this;
       while (enclosingType != enclosingType.getEnclosingType())
       {
          enclosingType = getEnclosingType();
@@ -463,7 +465,7 @@
    {
       String result = getName();
 
-      JavaSource<?> enclosingType = this;
+      ReadJavaSource<?> enclosingType = this;
       while (enclosingType != enclosingType.getEnclosingType())
       {
          enclosingType = getEnclosingType();
@@ -592,7 +594,7 @@
     * Non-manipulation methods.
     */
    /**
-    * Return this {@link JavaSource} file as a String
+    * Return this {@link ReadJavaSource} file as a String
     */
    @Override
    public String toString()
@@ -736,12 +738,6 @@
       return result;
    }
 
-   @Override
-   public boolean isEditable()
-   {
-      return true;
-   }
-
    private List<AbstractTypeDeclaration> getNestedDeclarations(ASTNode body)
    {
 
"
fed99d5077c467343a4a923b710646f63beaeedb,Matt Benson,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java
index c8f38cd..04c7b6c 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java
@@ -22,11 +22,13 @@
 import org.eclipse.jdt.core.dom.Statement;
 import org.eclipse.jdt.core.dom.VariableDeclaration;
 import org.jboss.forge.parser.JavaParser;
-import org.jboss.forge.parser.java.Annotation;
-import org.jboss.forge.parser.java.JavaClass;
-import org.jboss.forge.parser.java.JavaSource;
-import org.jboss.forge.parser.java.Method;
-import org.jboss.forge.parser.java.Parameter;
+import org.jboss.forge.parser.java.ReadAnnotation;
+import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
+import org.jboss.forge.parser.java.ReadJavaClass.JavaClass;
+import org.jboss.forge.parser.java.ReadJavaSource;
+import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
+import org.jboss.forge.parser.java.ReadMethod.Method;
+import org.jboss.forge.parser.java.ReadParameter.Parameter;
 import org.jboss.forge.parser.java.Type;
 import org.jboss.forge.parser.java.Visibility;
 import org.jboss.forge.parser.java.ast.AnnotationAccessor;
@@ -144,7 +146,7 @@
    }
 
    @Override
-   public Method<O> removeAnnotation(final Annotation<O> annotation)
+   public Method<O> removeAnnotation(final ReadAnnotation<O> annotation)
    {
       return annotations.removeAnnotation(this, method, annotation);
    }
@@ -278,7 +280,7 @@
    }
 
    @Override
-   public Method<O> setReturnType(final JavaSource<?> type)
+   public Method<O> setReturnType(final ReadJavaSource<?> type)
    {
       return setReturnType(type.getName());
    }
"
fed99d5077c467343a4a923b710646f63beaeedb,Matt Benson,ParameterImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/ParameterImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/ParameterImpl.java
index 5664287..9357763 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/ParameterImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/ParameterImpl.java
@@ -10,9 +10,10 @@
 
 import org.eclipse.jdt.core.dom.SimpleName;
 import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
-import org.jboss.forge.parser.java.Annotation;
-import org.jboss.forge.parser.java.JavaSource;
-import org.jboss.forge.parser.java.Parameter;
+import org.jboss.forge.parser.java.ReadAnnotation;
+import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
+import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
+import org.jboss.forge.parser.java.ReadParameter.Parameter;
 import org.jboss.forge.parser.java.Type;
 import org.jboss.forge.parser.java.ast.AnnotationAccessor;
 
@@ -115,7 +116,7 @@
    }
 
    @Override
-   public Parameter<O> removeAnnotation(final Annotation<O> annotation)
+   public Parameter<O> removeAnnotation(final ReadAnnotation<O> annotation)
    {
       return annotations.removeAnnotation(this, param, annotation);
    }
"
fed99d5077c467343a4a923b710646f63beaeedb,Matt Benson,Formatter.java,MODIFY,format -> [String source] | [ReadJavaClass javaClass],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/util/Formatter.java b/impl/src/main/java/org/jboss/forge/parser/java/util/Formatter.java
index 946f8cc..deb3bcd 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/util/Formatter.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/util/Formatter.java
@@ -17,14 +17,14 @@
 import org.eclipse.jface.text.Document;
 import org.eclipse.jface.text.IDocument;
 import org.eclipse.text.edits.TextEdit;
-import org.jboss.forge.parser.java.JavaClass;
+import org.jboss.forge.parser.java.ReadJavaClass;
 
 /**
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
 public abstract class Formatter
 {
-   public static String format(JavaClass javaClass)
+   public static String format(ReadJavaClass javaClass)
    {
       return format(javaClass.toString());
    }
"
fed99d5077c467343a4a923b710646f63beaeedb,Matt Benson,JavaParserImpl.java,MODIFY,parse -> [String data] | [InputStream data],"diff --git a/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java b/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
index 9d5a540..32050a7 100644
--- a/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
@@ -26,12 +26,13 @@
 import org.eclipse.jdt.internal.compiler.util.Util;
 import org.eclipse.jface.text.Document;
 import org.jboss.forge.parser.ParserException;
-import org.jboss.forge.parser.java.JavaAnnotation;
-import org.jboss.forge.parser.java.JavaClass;
-import org.jboss.forge.parser.java.JavaEnum;
-import org.jboss.forge.parser.java.JavaInterface;
-import org.jboss.forge.parser.java.JavaPackageInfo;
-import org.jboss.forge.parser.java.JavaSource;
+import org.jboss.forge.parser.java.ReadJavaAnnotation.JavaAnnotation;
+import org.jboss.forge.parser.java.ReadJavaClass.JavaClass;
+import org.jboss.forge.parser.java.ReadJavaEnum.JavaEnum;
+import org.jboss.forge.parser.java.ReadJavaInterface.JavaInterface;
+import org.jboss.forge.parser.java.ReadJavaPackageInfo.JavaPackageInfo;
+import org.jboss.forge.parser.java.ReadJavaSource;
+import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
 import org.jboss.forge.parser.java.ast.TypeDeclarationFinderVisitor;
 import org.jboss.forge.parser.java.impl.JavaAnnotationImpl;
 import org.jboss.forge.parser.java.impl.JavaClassImpl;
@@ -46,26 +47,7 @@
 {
 
    @Override
-   @SuppressWarnings(""unchecked"")
-   public <T extends JavaSource<?>> T create(final Class<T> type)
-   {
-      if (JavaClass.class.isAssignableFrom(type))
-         return (T) parse(""public class JavaClass { }"");
-
-      if (JavaEnum.class.isAssignableFrom(type))
-         return (T) parse(""public enum JavaEnum { }"");
-
-      if (JavaAnnotation.class.isAssignableFrom(type))
-         return (T) parse(""public @interface JavaAnnotation { }"");
-
-      if (JavaInterface.class.isAssignableFrom(type))
-         return (T) parse(""public interface JavaInterface { }"");
-
-      throw new ParserException(""Unknown JavaSource type ["" + type.getName() + ""]"");
-   }
-
-   @Override
-   public JavaSource<?> parse(final InputStream data)
+   public ReadJavaSource<?> parse(final InputStream data)
    {
       try
       {
@@ -83,7 +65,7 @@
    }
 
    @SuppressWarnings({ ""rawtypes"", ""unchecked"" })
-   private JavaSource<?> parse(final String data)
+   private ReadJavaSource<?> parse(final String data)
    {
       Document document = new Document(data);
       ASTParser parser = ASTParser.newParser(AST.JLS4);
@@ -116,8 +98,8 @@
    }
 
    /**
-    * Create a {@link JavaSource} instance from the given {@link Document}, {@link CompilationUnit},
-    * {@link TypeDeclaration}, and enclosing {@link JavaSource} type.
+    * Create a {@link ReadJavaSource} instance from the given {@link Document}, {@link CompilationUnit},
+    * {@link TypeDeclaration}, and enclosing {@link ReadJavaSource} type.
     */
    public static JavaSource<?> getJavaSource(JavaSource<?> enclosingType, Document document, CompilationUnit unit,
             ASTNode declaration)
@@ -155,4 +137,28 @@
       }
    }
 
+   @Override
+   @SuppressWarnings(""unchecked"")
+   public <T extends JavaSource<?>> T create(final Class<T> type)
+   {
+      if (type != null)
+      {
+         if (type.isAssignableFrom(JavaClass.class))
+            return (T) parse(""public class JavaClass { }"");
+   
+         if (type.isAssignableFrom(JavaEnum.class))
+            return (T) parse(""public enum JavaEnum { }"");
+   
+         if (type.isAssignableFrom(JavaAnnotation.class))
+            return (T) parse(""public @interface JavaAnnotation { }"");
+   
+         if (type.isAssignableFrom(JavaInterface.class))
+            return (T) parse(""public interface JavaInterface { }"");
+   
+         if (type.isAssignableFrom(JavaPackageInfo.class))
+            return (T) parse(""package org.example;"");
+      }
+      return null;
+   }
+
 }
"
fed99d5077c467343a4a923b710646f63beaeedb,Matt Benson,MethodSignatureTest.java,MODIFY,"assertVisibility -> [String visibility, MethodSource method] | [Visibility visibility, Method method]","diff --git a/impl/src/test/java/org/jboss/forge/test/parser/java/MethodSignatureTest.java b/impl/src/test/java/org/jboss/forge/test/parser/java/MethodSignatureTest.java
index b7e78eb..1c29cbf 100644
--- a/impl/src/test/java/org/jboss/forge/test/parser/java/MethodSignatureTest.java
+++ b/impl/src/test/java/org/jboss/forge/test/parser/java/MethodSignatureTest.java
@@ -11,9 +11,9 @@
 import java.util.List;
 
 import org.jboss.forge.parser.JavaParser;
-import org.jboss.forge.parser.java.JavaClass;
-import org.jboss.forge.parser.java.Method;
-import org.jboss.forge.parser.java.Parameter;
+import org.jboss.forge.parser.java.ReadJavaClass.JavaClass;
+import org.jboss.forge.parser.java.ReadMethod.Method;
+import org.jboss.forge.parser.java.ReadParameter.Parameter;
 import org.jboss.forge.parser.java.Visibility;
 import org.junit.Assert;
 import org.junit.Test;
"
39bcd6c66cb0432b04365dc8359ac0da819242b5,Matt Benson,JavaParser.java,MODIFY,"parse -> [Class type, InputStream data] | [File file]","diff --git a/api/src/main/java/org/jboss/forge/parser/JavaParser.java b/api/src/main/java/org/jboss/forge/parser/JavaParser.java
index c221ea9..fe13c12 100644
--- a/api/src/main/java/org/jboss/forge/parser/JavaParser.java
+++ b/api/src/main/java/org/jboss/forge/parser/JavaParser.java
@@ -17,13 +17,12 @@
 import java.util.List;
 import java.util.ServiceLoader;
 
-import org.jboss.forge.parser.java.ReadJavaClass;
 import org.jboss.forge.parser.java.ReadJavaSource;
 import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
 import org.jboss.forge.parser.spi.JavaParserProvider;
 
 /**
- * Responsible for parsing data into new {@link ReadJavaClass} instances.
+ * Responsible for parsing data into new {@link ReadJavaSource} instances.
  * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
@@ -70,7 +69,7 @@
    }
 
    /**
-    * Open the given {@link File}, parsing its contents into a new {@link ReadJavaClass} instance.
+    * Open the given {@link File}, parsing its contents into a new {@link ReadJavaSource} instance.
     */
    public static ReadJavaSource<?> parse(final File file) throws FileNotFoundException
    {
@@ -86,7 +85,7 @@
    }
 
    /**
-    * Read the given {@link InputStream} and parse the data into a new {@link ReadJavaClass} instance.
+    * Read the given {@link InputStream} and parse the data into a new {@link ReadJavaSource} instance.
     */
    public static ReadJavaSource<?> parse(final InputStream data)
    {
@@ -94,7 +93,7 @@
    }
 
    /**
-    * Parse the given character array into a new {@link ReadJavaClass} instance.
+    * Parse the given character array into a new {@link ReadJavaSource} instance.
     */
    public static ReadJavaSource<?> parse(final char[] data)
    {
@@ -102,7 +101,7 @@
    }
 
    /**
-    * Parse the given String data into a new {@link ReadJavaClass} instance.
+    * Parse the given String data into a new {@link ReadJavaSource} instance.
     */
    public static ReadJavaSource<?> parse(final String data)
    {
"
a26a160778bac3de4caa3c0ffa37d81b47a70ac7,Matt Benson,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
index 1e0569e..759d8cd 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
@@ -32,8 +32,7 @@
 import org.jboss.forge.parser.ParserException;
 import org.jboss.forge.parser.java.ReadAnnotation;
 import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
-import org.jboss.forge.parser.java.ReadImport;
-import org.jboss.forge.parser.java.ReadImport.Import;
+import org.jboss.forge.parser.java.Import;
 import org.jboss.forge.parser.java.ReadInterfaceCapable.InterfaceCapable;
 import org.jboss.forge.parser.java.ReadJavaInterface;
 import org.jboss.forge.parser.java.ReadJavaSource;
@@ -160,7 +159,7 @@
    }
 
    @Override
-   public Import addImport(final ReadImport imprt)
+   public Import addImport(final Import imprt)
    {
       return addImport(imprt.getQualifiedName()).setStatic(imprt.isStatic());
    }
@@ -218,7 +217,7 @@
    }
 
    @Override
-   public Import getImport(final ReadImport imprt)
+   public Import getImport(final Import imprt)
    {
       return getImport(imprt.getQualifiedName());
    }
@@ -249,7 +248,7 @@
    }
 
    @Override
-   public boolean hasImport(final ReadImport imprt)
+   public boolean hasImport(final Import imprt)
    {
       return hasImport(imprt.getQualifiedName());
    }
@@ -330,7 +329,7 @@
 
          if (result.equals(original))
          {
-            for (ReadImport imprt : getImports())
+            for (Import imprt : getImports())
             {
                if (Types.areEquivalent(result, imprt.getQualifiedName()))
                {
@@ -344,7 +343,7 @@
       // If we didn't match any imports directly, we might have a wild-card/on-demand import.
       if (Types.isSimpleName(result))
       {
-         for (ReadImport imprt : getImports())
+         for (Import imprt : getImports())
          {
             if (imprt.isWildcard())
             {
@@ -396,7 +395,7 @@
    @Override
    public O removeImport(final String name)
    {
-      for (ReadImport i : getImports())
+      for (Import i : getImports())
       {
          if (i.getQualifiedName().equals(name))
          {
@@ -420,7 +419,7 @@
    }
 
    @Override
-   public O removeImport(final ReadImport imprt)
+   public O removeImport(final Import imprt)
    {
       Object internal = imprt.getInternal();
       if (unit.imports().contains(internal))
@@ -775,7 +774,7 @@
          String name = JDTHelper.getTypeName(type);
          if (Types.isSimpleName(name) && this.hasImport(name))
          {
-            ReadImport imprt = this.getImport(name);
+            Import imprt = this.getImport(name);
             String pkg = imprt.getPackage();
             if (!Strings.isNullOrEmpty(pkg))
             {
"
a26a160778bac3de4caa3c0ffa37d81b47a70ac7,Matt Benson,EnumConstantBodyImpl.java,MODIFY,addImport -> [ReadJavaSource type] | [String className],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java
index ab0c373..15a358c 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java
@@ -29,8 +29,7 @@
 import org.jboss.forge.parser.java.ReadEnumConstant.EnumConstant.Body;
 import org.jboss.forge.parser.java.ReadField;
 import org.jboss.forge.parser.java.ReadField.Field;
-import org.jboss.forge.parser.java.ReadImport;
-import org.jboss.forge.parser.java.ReadImport.Import;
+import org.jboss.forge.parser.java.Import;
 import org.jboss.forge.parser.java.ReadJavaClass.JavaClass;
 import org.jboss.forge.parser.java.ReadJavaEnum.JavaEnum;
 import org.jboss.forge.parser.java.ReadJavaSource;
@@ -179,7 +178,7 @@
    }
 
    @Override
-   public Import addImport(ReadImport imprt)
+   public Import addImport(Import imprt)
    {
       return javaEnum.addImport(imprt);
    }
@@ -221,7 +220,7 @@
    }
 
    @Override
-   public boolean hasImport(ReadImport imprt)
+   public boolean hasImport(Import imprt)
    {
       return javaEnum.hasImport(imprt);
    }
@@ -245,7 +244,7 @@
    }
 
    @Override
-   public Import getImport(ReadImport imprt)
+   public Import getImport(Import imprt)
    {
       return javaEnum.getImport(imprt);
    }
@@ -272,7 +271,7 @@
    }
 
    @Override
-   public Body removeImport(ReadImport imprt)
+   public Body removeImport(Import imprt)
    {
       javaEnum.removeImport(imprt);
       return this;
"
a26a160778bac3de4caa3c0ffa37d81b47a70ac7,Matt Benson,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
index 1205c62..e6964fb 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
@@ -17,8 +17,7 @@
 import org.jboss.forge.parser.ParserException;
 import org.jboss.forge.parser.java.ReadAnnotation;
 import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
-import org.jboss.forge.parser.java.ReadImport;
-import org.jboss.forge.parser.java.ReadImport.Import;
+import org.jboss.forge.parser.java.Import;
 import org.jboss.forge.parser.java.ReadJavaPackageInfo.JavaPackageInfo;
 import org.jboss.forge.parser.java.ReadJavaSource;
 import org.jboss.forge.parser.java.ReadMember.Member;
@@ -150,7 +149,7 @@
    }
 
    @Override
-   public Import addImport(final ReadImport imprt)
+   public Import addImport(final Import imprt)
    {
       return addImport(imprt.getQualifiedName()).setStatic(imprt.isStatic());
    }
@@ -209,7 +208,7 @@
    }
 
    @Override
-   public Import getImport(final ReadImport imprt)
+   public Import getImport(final Import imprt)
    {
       return getImport(imprt.getQualifiedName());
    }
@@ -241,7 +240,7 @@
    }
 
    @Override
-   public boolean hasImport(final ReadImport imprt)
+   public boolean hasImport(final Import imprt)
    {
       return hasImport(imprt.getQualifiedName());
    }
@@ -322,7 +321,7 @@
 
          if (result.equals(original))
          {
-            for (ReadImport imprt : getImports())
+            for (Import imprt : getImports())
             {
                if (Types.areEquivalent(result, imprt.getQualifiedName()))
                {
@@ -336,7 +335,7 @@
       // If we didn't match any imports directly, we might have a wild-card/on-demand import.
       if (Types.isSimpleName(result))
       {
-         for (ReadImport imprt : getImports())
+         for (Import imprt : getImports())
          {
             if (imprt.isWildcard())
             {
@@ -388,7 +387,7 @@
    @Override
    public JavaPackageInfo removeImport(final String name)
    {
-      for (ReadImport i : getImports())
+      for (Import i : getImports())
       {
          if (i.getQualifiedName().equals(name))
          {
@@ -412,7 +411,7 @@
    }
 
    @Override
-   public JavaPackageInfo removeImport(final ReadImport imprt)
+   public JavaPackageInfo removeImport(final Import imprt)
    {
       Object internal = imprt.getInternal();
       if (unit.imports().contains(internal))
"
f7fe91e1446a57d2dbb8d6d4a73418b02a273b4b,Matt Benson,ReadAnnotation.java,MODIFY,"getEnumValue -> [Class type, String name] | [Class type]","diff --git a/api/src/main/java/org/jboss/forge/parser/java/ReadAnnotation.java b/api/src/main/java/org/jboss/forge/parser/java/ReadAnnotation.java
index ac00822..90bd40d 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/ReadAnnotation.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/ReadAnnotation.java
@@ -12,6 +12,8 @@
 import org.jboss.forge.parser.Origin;
 
 /**
+ * Represents an annotation on some Java element.
+ * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
 public interface ReadAnnotation<O extends ReadJavaSource<O>> extends Internal, Origin<O>
@@ -56,6 +58,11 @@
 
    Class<?>[] getClassArrayValue(String name);
 
+   /**
+    * Represents an annotation on some Java source element.
+    * 
+    * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
+    */
    public interface Annotation<O extends ReadJavaSource<O>> extends ReadAnnotation<O>
    {
 
"
f7fe91e1446a57d2dbb8d6d4a73418b02a273b4b,Matt Benson,ReadAnnotationElement.java,MODIFY,isType -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/ReadAnnotationElement.java b/api/src/main/java/org/jboss/forge/parser/java/ReadAnnotationElement.java
index 5525755..7f468c3 100755
--- a/api/src/main/java/org/jboss/forge/parser/java/ReadAnnotationElement.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/ReadAnnotationElement.java
@@ -12,6 +12,8 @@
 import org.jboss.forge.parser.java.ReadJavaAnnotation.JavaAnnotation;
 
 /**
+ * Represents an element definition of a {@link ReadJavaAnnotation}.
+ * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * @author Matt Benson
  */
@@ -38,26 +40,6 @@
       Class<?>[] getClassArray();
    }
 
-   public interface DefaultValue extends ReadDefaultValue<JavaAnnotation>
-   {
-      Annotation<JavaAnnotation> getAnnotation();
-
-      DefaultValue setLiteral(String value);
-
-      DefaultValue setString(String value);
-
-      <T extends Enum<T>> DefaultValue setEnum(T value);
-
-      <T extends Enum<T>> DefaultValue setEnumArray(T... values);
-
-      Annotation<JavaAnnotation> setAnnotation();
-
-      DefaultValue setSingleClass(Class<?> value);
-
-      DefaultValue setClassArray(Class<?>... values);
-
-   }
-
    /**
     * Get this annotation element's type.
     */
@@ -89,6 +71,32 @@
             AnnotationTarget<JavaAnnotation, AnnotationElement>, Named<AnnotationElement>
    {
       /**
+       * Represents an element definition of a {@link JavaAnnotation}.
+       * 
+       * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
+       * @author Matt Benson
+       */
+      public interface DefaultValue extends ReadDefaultValue<JavaAnnotation>
+      {
+         Annotation<JavaAnnotation> getAnnotation();
+
+         DefaultValue setLiteral(String value);
+
+         DefaultValue setString(String value);
+
+         <T extends Enum<T>> DefaultValue setEnum(T value);
+
+         <T extends Enum<T>> DefaultValue setEnumArray(T... values);
+
+         Annotation<JavaAnnotation> setAnnotation();
+
+         DefaultValue setSingleClass(Class<?> value);
+
+         DefaultValue setClassArray(Class<?>... values);
+
+      }
+
+      /**
        * Set the type of this {@link ReadAnnotationElement} to the given {@link Class} type. Attempt to add an import
        * statement to this annotation element's base {@link O} if required.
        */
"
f7fe91e1446a57d2dbb8d6d4a73418b02a273b4b,Matt Benson,ReadAnnotationTarget.java,MODIFY,hasAnnotation -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/ReadAnnotationTarget.java b/api/src/main/java/org/jboss/forge/parser/java/ReadAnnotationTarget.java
index b4d210e..2b804b8 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/ReadAnnotationTarget.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/ReadAnnotationTarget.java
@@ -15,6 +15,8 @@
 import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
 
 /**
+ * Represents a Java element that may carry annotations.
+ * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
 public interface ReadAnnotationTarget<O extends ReadJavaSource<O>> extends Internal, Origin<O>
@@ -29,6 +31,11 @@
 
    public ReadAnnotation<O> getAnnotation(final String type);
 
+   /**
+    * Represents a Java source element that may carry annotations.
+    * 
+    * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
+    */
    public interface AnnotationTarget<O extends JavaSource<O>, T> extends ReadAnnotationTarget<O>
    {
       public List<Annotation<O>> getAnnotations();
"
f7fe91e1446a57d2dbb8d6d4a73418b02a273b4b,Matt Benson,ReadField.java,MODIFY,isType -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/ReadField.java b/api/src/main/java/org/jboss/forge/parser/java/ReadField.java
index 46b43ff..d5f096e 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/ReadField.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/ReadField.java
@@ -7,9 +7,12 @@
 
 package org.jboss.forge.parser.java;
 
+import org.jboss.forge.parser.java.ReadJavaClass.JavaClass;
 import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
 
 /**
+ * Represents a field of a {@link ReadJavaClass}, {@link ReadJavaInterface}, or {@link ReadJavaEnum}.
+ * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * 
  */
@@ -62,6 +65,12 @@
     */
    boolean isVolatile();
 
+   /**
+    * Represents a field of a {@link JavaClass}, {@link JavaInterface}, or {@link JavaEnum}.
+    * 
+    * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
+    * 
+    */
    public interface Field<O extends JavaSource<O>> extends ReadField<O>, Member<O, Field<O>>
    {
 
"
f7fe91e1446a57d2dbb8d6d4a73418b02a273b4b,Matt Benson,ReadFieldHolder.java,MODIFY,hasField -> [ReadField field] | [String name],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/ReadFieldHolder.java b/api/src/main/java/org/jboss/forge/parser/java/ReadFieldHolder.java
index 058f559..91fe70e 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/ReadFieldHolder.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/ReadFieldHolder.java
@@ -13,6 +13,8 @@
 import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
 
 /**
+ * Represents a {@link ReadJavaSource} that may contain field definitions.
+ * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * 
  */
@@ -39,6 +41,12 @@
     */
    public List<? extends ReadField<O>> getFields();
 
+   /**
+    * Represents a {@link JavaSource} that may contain field definitions.
+    * 
+    * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
+    * 
+    */
    public interface FieldHolder<O extends JavaSource<O>> extends ReadFieldHolder<O>, MemberHolder<O>
    {
 
"
f7fe91e1446a57d2dbb8d6d4a73418b02a273b4b,Matt Benson,ReadInterfaceCapable.java,MODIFY,hasInterface -> [ReadJavaInterface type] | [String type],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/ReadInterfaceCapable.java b/api/src/main/java/org/jboss/forge/parser/java/ReadInterfaceCapable.java
index c4de1fb..192a4fe 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/ReadInterfaceCapable.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/ReadInterfaceCapable.java
@@ -8,7 +8,11 @@
 
 import java.util.List;
 
+import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
+
 /**
+ * Represents a {@link ReadJavaSource} that may implement one or more interfaces.
+ * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * 
  */
@@ -22,7 +26,13 @@
 
    boolean hasInterface(ReadJavaInterface<?> type);
 
-   public interface InterfaceCapable<T extends ReadJavaSource<T>> extends ReadInterfaceCapable
+   /**
+    * Represents a {@link JavaSource} that may implement one or more interfaces.
+    * 
+    * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
+    * 
+    */
+   public interface InterfaceCapable<T extends JavaSource<T>> extends ReadInterfaceCapable
    {
       T addInterface(String type);
 
"
f7fe91e1446a57d2dbb8d6d4a73418b02a273b4b,Matt Benson,ReadJavaAnnotation.java,MODIFY,hasAnnotationElement -> [ReadAnnotationElement annotationElement] | [String name],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/ReadJavaAnnotation.java b/api/src/main/java/org/jboss/forge/parser/java/ReadJavaAnnotation.java
index d4f252d..42959a9 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/ReadJavaAnnotation.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/ReadJavaAnnotation.java
@@ -7,15 +7,14 @@
 
 package org.jboss.forge.parser.java;
 
-import java.lang.annotation.Annotation;
 import java.util.List;
 
 import org.jboss.forge.parser.JavaParser;
 import org.jboss.forge.parser.java.ReadAnnotationElement.AnnotationElement;
 
 /**
- * Represents a Java {@link Annotation} source file as an in-memory modifiable element. See {@link JavaParser} for
- * various options in generating {@link ReadJavaAnnotation} instances.
+ * Represents a Java {@code @interface} annotation type. See {@link JavaParser} for various options in generating
+ * {@link ReadJavaAnnotation} instances.
  * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
@@ -44,6 +43,12 @@
     */
    public List<? extends ReadAnnotationElement<O>> getAnnotationElements();
 
+   /**
+    * Represents a Java {@code @interface} annotation source file as an in-memory modifiable element. See
+    * {@link JavaParser} for various options in generating {@link JavaAnnotation} instances.
+    * 
+    * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
+    */
    public interface JavaAnnotation extends ReadJavaAnnotation<JavaAnnotation>, JavaSource<JavaAnnotation>
    {
       /**
"
f7fe91e1446a57d2dbb8d6d4a73418b02a273b4b,Matt Benson,ReadMethodHolder.java,MODIFY,"hasMethodSignature -> [String name, Class paramTypes] | [ReadMethod method]","diff --git a/api/src/main/java/org/jboss/forge/parser/java/ReadMethodHolder.java b/api/src/main/java/org/jboss/forge/parser/java/ReadMethodHolder.java
index cdf580b..ad6945e 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/ReadMethodHolder.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/ReadMethodHolder.java
@@ -13,6 +13,8 @@
 import org.jboss.forge.parser.java.ReadMethod.Method;
 
 /**
+ * Represents a {@link ReadJavaSource} that may declare methods.
+ * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * 
  */
@@ -64,6 +66,12 @@
     */
    public List<? extends ReadMethod<O, ?>> getMethods();
 
+   /**
+    * Represents a {@link JavaSource} that may declare methods.
+    * 
+    * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
+    * 
+    */
    public interface MethodHolder<O extends JavaSource<O>> extends ReadMethodHolder<O>, MemberHolder<O>
    {
 
"
93a609985abaebe149ced9f7749622ac168bb872,Matt Benson,JavaParser.java,MODIFY,"parse -> [Class type, InputStream data] | [File file]","diff --git a/api/src/main/java/org/jboss/forge/parser/JavaParser.java b/api/src/main/java/org/jboss/forge/parser/JavaParser.java
index fe13c12..e81f217 100644
--- a/api/src/main/java/org/jboss/forge/parser/JavaParser.java
+++ b/api/src/main/java/org/jboss/forge/parser/JavaParser.java
@@ -17,12 +17,12 @@
 import java.util.List;
 import java.util.ServiceLoader;
 
-import org.jboss.forge.parser.java.ReadJavaSource;
-import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
+import org.jboss.forge.parser.java.JavaType;
+import org.jboss.forge.parser.java.source.JavaSource;
 import org.jboss.forge.parser.spi.JavaParserProvider;
 
 /**
- * Responsible for parsing data into new {@link ReadJavaSource} instances.
+ * Responsible for parsing data into new {@link JavaType} instances.
  * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
@@ -69,90 +69,90 @@
    }
 
    /**
-    * Open the given {@link File}, parsing its contents into a new {@link ReadJavaSource} instance.
+    * Open the given {@link File}, parsing its contents into a new {@link JavaType} instance.
     */
-   public static ReadJavaSource<?> parse(final File file) throws FileNotFoundException
+   public static JavaType<?> parse(final File file) throws FileNotFoundException
    {
-      return parse(ReadJavaSource.class, file);
+      return parse(JavaType.class, file);
    }
 
    /**
-    * Parse the given {@link URL} data into a new {@link ReadJavaSource} instance.
+    * Parse the given {@link URL} data into a new {@link JavaType} instance.
     */
-   public static ReadJavaSource<?> parse(final URL data) throws IOException
+   public static JavaType<?> parse(final URL data) throws IOException
    {
-      return parse(ReadJavaSource.class, data);
+      return parse(JavaType.class, data);
    }
 
    /**
-    * Read the given {@link InputStream} and parse the data into a new {@link ReadJavaSource} instance.
+    * Read the given {@link InputStream} and parse the data into a new {@link JavaType} instance.
     */
-   public static ReadJavaSource<?> parse(final InputStream data)
+   public static JavaType<?> parse(final InputStream data)
    {
-      return parse(ReadJavaSource.class, data);
+      return parse(JavaType.class, data);
    }
 
    /**
-    * Parse the given character array into a new {@link ReadJavaSource} instance.
+    * Parse the given character array into a new {@link JavaType} instance.
     */
-   public static ReadJavaSource<?> parse(final char[] data)
+   public static JavaType<?> parse(final char[] data)
    {
-      return parse(ReadJavaSource.class, data);
+      return parse(JavaType.class, data);
    }
 
    /**
-    * Parse the given String data into a new {@link ReadJavaSource} instance.
+    * Parse the given String data into a new {@link JavaType} instance.
     */
-   public static ReadJavaSource<?> parse(final String data)
+   public static JavaType<?> parse(final String data)
    {
-      return parse(ReadJavaSource.class, data);
+      return parse(JavaType.class, data);
    }
 
    /**
-    * Read the given {@link URL} and parse its data into a new {@link ReadJavaSource} instance of the given type.
+    * Read the given {@link URL} and parse its data into a new {@link JavaType} instance of the given type.
     * 
     * @throws FileNotFoundException
     */
-   public static <T extends ReadJavaSource<?>> T parse(final Class<T> type, final URL url) throws IOException
+   public static <T extends JavaType<?>> T parse(final Class<T> type, final URL url) throws IOException
    {
       return internalParse(type, url.openStream());
    }
 
    /**
-    * Read the given {@link File} and parse its data into a new {@link ReadJavaSource} instance of the given type.
+    * Read the given {@link File} and parse its data into a new {@link JavaType} instance of the given type.
     * 
     * @throws FileNotFoundException
     */
-   public static <T extends ReadJavaSource<?>> T parse(final Class<T> type, final File file) throws FileNotFoundException
+   public static <T extends JavaType<?>> T parse(final Class<T> type, final File file) throws FileNotFoundException
    {
       return internalParse(type, new FileInputStream(file));
    }
 
    /**
-    * Read the given character array and parse its data into a new {@link ReadJavaSource} instance of the given type.
+    * Read the given character array and parse its data into a new {@link JavaType} instance of the given type.
     */
-   public static <T extends ReadJavaSource<?>> T parse(final Class<T> type, final char[] data)
+   public static <T extends JavaType<?>> T parse(final Class<T> type, final char[] data)
    {
       return parse(type, new String(data));
    }
 
    /**
-    * Read the given string and parse its data into a new {@link ReadJavaSource} instance of the given type.
+    * Read the given string and parse its data into a new {@link JavaType} instance of the given type.
     */
-   public static <T extends ReadJavaSource<?>> T parse(final Class<T> type, final String data)
+   public static <T extends JavaType<?>> T parse(final Class<T> type, final String data)
    {
       return parse(type, Streams.fromString(data));
    }
 
    /**
-    * Read the given {@link InputStream} and parse its data into a new {@link ReadJavaSource} instance of the given type.
+    * Read the given {@link InputStream} and parse its data into a new {@link JavaType} instance of the given type.
     * The caller is responsible for closing the stream.
     */
-   public static <T extends ReadJavaSource<?>> T parse(final Class<T> type, final InputStream data)
+   public static <T extends JavaType<?>> T parse(final Class<T> type, final InputStream data)
    {
       for (JavaParserProvider parser : getParsers())
       {
-         final ReadJavaSource<?> source = parser.parse(data);
+         final JavaType<?> source = parser.parse(data);
 
          if (type.isInstance(source))
          {
@@ -169,7 +169,7 @@
       throw new ParserException(""Cannot find JavaParserProvider capable of parsing the requested data"");
    }
 
-   private static <T extends ReadJavaSource<?>> T internalParse(final Class<T> type, final InputStream data)
+   private static <T extends JavaType<?>> T internalParse(final Class<T> type, final InputStream data)
    {
       try
       {
"
93a609985abaebe149ced9f7749622ac168bb872,Matt Benson,Visibility.java,MODIFY,getFrom -> [ReadVisibilityScoped target] | [VisibilityScoped target],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/Visibility.java b/api/src/main/java/org/jboss/forge/parser/java/Visibility.java
index d3b4401..943701e 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/Visibility.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/Visibility.java
@@ -7,7 +7,7 @@
 
 package org.jboss.forge.parser.java;
 
-import org.jboss.forge.parser.java.ReadVisibilityScoped.VisibilityScoped;
+import org.jboss.forge.parser.java.source.VisibilityScopedSource;
 import org.jboss.forge.parser.java.util.Assert;
 
 /**
@@ -36,7 +36,7 @@
       return scope;
    }
 
-   public static Visibility getFrom(ReadVisibilityScoped target)
+   public static Visibility getFrom(VisibilityScoped target)
    {
       Assert.notNull(target, ""VisibilityScoped<T> target must not be null."");
 
@@ -51,7 +51,7 @@
 
       else
       {
-         throw new IllegalStateException(ReadVisibilityScoped.class.getSimpleName()
+         throw new IllegalStateException(VisibilityScoped.class.getSimpleName()
                   + "" target does not comply with visibility scoping. Must be one of "" + Visibility.values() + ""[ ""
                   + target + ""]"");
       }
@@ -63,7 +63,7 @@
       return scope;
    }
 
-   public static <T extends VisibilityScoped<?>> T set(T target, Visibility scope)
+   public static <T extends VisibilityScopedSource<?>> T set(T target, Visibility scope)
    {
       Assert.notNull(target, ""VisibilityScoped<T> target must not be null."");
       Assert.notNull(scope, ""Visibility scope must not be null"");
"
93a609985abaebe149ced9f7749622ac168bb872,Matt Benson,Refactory.java,MODIFY,"createGetterAndSetter -> [JavaClass clazz, Field field] | [JavaClassSource clazz, FieldSource field]","diff --git a/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java b/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java
index 58bf075..80d77ae 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java
@@ -10,12 +10,12 @@
 import java.util.Arrays;
 import java.util.List;
 
-import org.jboss.forge.parser.java.ReadField.Field;
-import org.jboss.forge.parser.java.ReadJavaClass.JavaClass;
-import org.jboss.forge.parser.java.ReadMethod.Method;
+import org.jboss.forge.parser.java.source.FieldSource;
+import org.jboss.forge.parser.java.source.JavaClassSource;
+import org.jboss.forge.parser.java.source.MethodSource;
 
 /**
- * Utility refactory methods for {@link JavaClass} objects
+ * Utility refactory methods for {@link JavaClassSource} objects
  * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * @author <a href=""mailto:ggastald@redhat.com"">George Gastaldi</a>
@@ -29,7 +29,7 @@
     * @param clazz
     * @param field
     */
-   public static void createGetterAndSetter(final JavaClass clazz, final Field<JavaClass> field)
+   public static void createGetterAndSetter(final JavaClassSource clazz, final FieldSource<JavaClassSource> field)
    {
       if (!clazz.hasField(field))
       {
@@ -55,11 +55,11 @@
    /**
     * Create a <i>hashCode</i> and <i>equals</i> implementation for the given class and fields
     * 
-    * @deprecated Use {@link Refactory#createHashCodeAndEquals(JavaClass, Field...)} instead, since this method relies
+    * @deprecated Use {@link Refactory#createHashCodeAndEquals(JavaClass, Field<O>...)} instead, since this method relies
     *             on the existence of the id field
     */
    @Deprecated
-   public static void createHashCodeAndEquals(final JavaClass clazz)
+   public static void createHashCodeAndEquals(final JavaClassSource clazz)
    {
       clazz.addMethod(
                ""public boolean equals(Object that) { "" +
@@ -91,7 +91,7 @@
     * @param clazz class to be changed
     * @param fields fields to be used in the equals/hashCode methods
     */
-   public static void createHashCodeAndEquals(final JavaClass clazz, final Field<?>... fields)
+   public static void createHashCodeAndEquals(final JavaClassSource clazz, final FieldSource<?>... fields)
    {
       if (clazz == null)
       {
@@ -113,7 +113,7 @@
       boolean isTempFieldCreated = false;
       StringBuilder fieldEqualityChecks = new StringBuilder();
       StringBuilder hashCodeComputation = new StringBuilder();
-      for (Field<?> field : fields)
+      for (FieldSource<?> field : fields)
       {
          if(field == null)
          {
@@ -265,9 +265,9 @@
     * 
     * @param clazz
     */
-   public static void createToStringFromFields(final JavaClass clazz)
+   public static void createToStringFromFields(final JavaClassSource clazz)
    {
-      List<Field<JavaClass>> fields = clazz.getFields();
+      List<FieldSource<JavaClassSource>> fields = clazz.getFields();
       createToStringFromFields(clazz, fields);
    }
 
@@ -277,7 +277,7 @@
     * @param clazz
     * @param fields
     */
-   public static void createToStringFromFields(final JavaClass clazz, final Field<JavaClass>... fields)
+   public static void createToStringFromFields(final JavaClassSource clazz, final FieldSource<JavaClassSource>... fields)
    {
       createToStringFromFields(clazz, Arrays.asList(fields));
    }
@@ -288,16 +288,16 @@
     * @param clazz
     * @param fields
     */
-   public static void createToStringFromFields(final JavaClass clazz, final List<Field<JavaClass>> fields)
+   public static void createToStringFromFields(final JavaClassSource clazz, final List<FieldSource<JavaClassSource>> fields)
    {
-      Method<JavaClass> method = clazz.addMethod().setName(""toString"").setReturnType(String.class)
+      MethodSource<JavaClassSource> method = clazz.addMethod().setName(""toString"").setReturnType(String.class)
                .setPublic();
       method.addAnnotation(Override.class);
 
       List<String> list = new ArrayList<String>();
 
       String delimeter = ""\n"";
-      for (Field<JavaClass> field : fields)
+      for (FieldSource<JavaClassSource> field : fields)
       {
          if (clazz.hasField(field))
          {
"
93a609985abaebe149ced9f7749622ac168bb872,Matt Benson,WildcardImportResolver.java,MODIFY,"resolve -> [ReadJavaSource source, String type] | [JavaType source, String type]","diff --git a/api/src/main/java/org/jboss/forge/parser/spi/WildcardImportResolver.java b/api/src/main/java/org/jboss/forge/parser/spi/WildcardImportResolver.java
index 40f5790..ad2b86c 100644
--- a/api/src/main/java/org/jboss/forge/parser/spi/WildcardImportResolver.java
+++ b/api/src/main/java/org/jboss/forge/parser/spi/WildcardImportResolver.java
@@ -6,7 +6,7 @@
  */
 package org.jboss.forge.parser.spi;
 
-import org.jboss.forge.parser.java.ReadJavaSource;
+import org.jboss.forge.parser.java.JavaType;
 
 /**
  * Responsible for providing additional import resolution functionality for situations where classes have referenced a
@@ -17,5 +17,5 @@
  */
 public interface WildcardImportResolver
 {
-   public String resolve(ReadJavaSource<?> source, String type);
+   public String resolve(JavaType<?> source, String type);
 }
"
93a609985abaebe149ced9f7749622ac168bb872,Matt Benson,AnnotationAccessor.java,MODIFY,"addAnnotation -> [AnnotationTarget target, List modifiers, String className] | [AnnotationTargetSource target, ASTNode body]","diff --git a/impl/src/main/java/org/jboss/forge/parser/java/ast/AnnotationAccessor.java b/impl/src/main/java/org/jboss/forge/parser/java/ast/AnnotationAccessor.java
index 675bb6b..3def7e9 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/ast/AnnotationAccessor.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/ast/AnnotationAccessor.java
@@ -17,11 +17,11 @@
 import org.eclipse.jdt.core.dom.IExtendedModifier;
 import org.eclipse.jdt.core.dom.PackageDeclaration;
 import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
-import org.jboss.forge.parser.java.ReadAnnotation;
-import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
-import org.jboss.forge.parser.java.ReadAnnotationTarget.AnnotationTarget;
-import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
+import org.jboss.forge.parser.java.Annotation;
 import org.jboss.forge.parser.java.impl.AnnotationImpl;
+import org.jboss.forge.parser.java.source.AnnotationSource;
+import org.jboss.forge.parser.java.source.AnnotationTargetSource;
+import org.jboss.forge.parser.java.source.JavaSource;
 import org.jboss.forge.parser.java.util.Types;
 
 /**
@@ -30,18 +30,18 @@
 public class AnnotationAccessor<O extends JavaSource<O>, T>
 {
 
-   public Annotation<O> addAnnotation(final AnnotationTarget<O, T> target, final ASTNode body)
+   public AnnotationSource<O> addAnnotation(final AnnotationTargetSource<O, T> target, final ASTNode body)
    {
       return addAnnotation(target, getModifiers(body));
    }
 
-   public Annotation<O> addAnnotation(final AnnotationTarget<O, T> target,
+   public AnnotationSource<O> addAnnotation(final AnnotationTargetSource<O, T> target,
             final SingleVariableDeclaration variableDeclaration)
    {
       return addAnnotation(target, variableDeclaration.modifiers());
    }
 
-   private Annotation<O> addAnnotation(final AnnotationTarget<O, T> target, final List<?> modifiers)
+   private AnnotationSource<O> addAnnotation(final AnnotationTargetSource<O, T> target, final List<?> modifiers)
    {
       @SuppressWarnings(""unchecked"")
       ListIterator<IExtendedModifier> iter = (ListIterator<IExtendedModifier>) modifiers.listIterator();
@@ -53,38 +53,38 @@
       {
          iter.next();
       }
-      Annotation<O> annotation = new AnnotationImpl<O, T>(target);
+      AnnotationSource<O> annotation = new AnnotationImpl<O, T>(target);
       iter.add((IExtendedModifier) annotation.getInternal());
       return annotation;
    }
 
-   public Annotation<O> addAnnotation(final AnnotationTarget<O, T> target, final ASTNode body,
+   public AnnotationSource<O> addAnnotation(final AnnotationTargetSource<O, T> target, final ASTNode body,
             final Class<?> clazz)
    {
       return addAnnotation(target, getModifiers(body), clazz.getName());
    }
 
-   public Annotation<O> addAnnotation(final AnnotationTarget<O, T> target,
+   public AnnotationSource<O> addAnnotation(final AnnotationTargetSource<O, T> target,
             final SingleVariableDeclaration variableDeclaration,
             final Class<?> clazz)
    {
       return addAnnotation(target, variableDeclaration.modifiers(), clazz.getName());
    }
 
-   public Annotation<O> addAnnotation(final AnnotationTarget<O, T> target, final ASTNode body,
+   public AnnotationSource<O> addAnnotation(final AnnotationTargetSource<O, T> target, final ASTNode body,
             final String className)
    {
       return addAnnotation(target, getModifiers(body), className);
    }
 
-   public Annotation<O> addAnnotation(final AnnotationTarget<O, T> target,
+   public AnnotationSource<O> addAnnotation(final AnnotationTargetSource<O, T> target,
             final SingleVariableDeclaration variableDeclaration,
             final String className)
    {
       return addAnnotation(target, variableDeclaration.modifiers(), className);
    }
 
-   private Annotation<O> addAnnotation(final AnnotationTarget<O, T> target, final List<?> modifiers,
+   private AnnotationSource<O> addAnnotation(final AnnotationTargetSource<O, T> target, final List<?> modifiers,
             final String className)
    {
       if (!target.getOrigin().hasImport(className) && Types.isQualified(className))
@@ -94,26 +94,26 @@
       return addAnnotation(target, modifiers).setName(Types.toSimpleName(className));
    }
 
-   public List<Annotation<O>> getAnnotations(final AnnotationTarget<O, T> target, final ASTNode body)
+   public List<AnnotationSource<O>> getAnnotations(final AnnotationTargetSource<O, T> target, final ASTNode body)
    {
       return getAnnotations(target, getModifiers(body));
    }
 
-   public List<Annotation<O>> getAnnotations(final AnnotationTarget<O, T> target,
+   public List<AnnotationSource<O>> getAnnotations(final AnnotationTargetSource<O, T> target,
             final SingleVariableDeclaration variableDeclaration)
    {
       return getAnnotations(target, variableDeclaration.modifiers());
    }
 
-   private List<Annotation<O>> getAnnotations(final AnnotationTarget<O, T> target, final List<?> modifiers)
+   private List<AnnotationSource<O>> getAnnotations(final AnnotationTargetSource<O, T> target, final List<?> modifiers)
    {
-      List<Annotation<O>> result = new ArrayList<Annotation<O>>();
+      List<AnnotationSource<O>> result = new ArrayList<AnnotationSource<O>>();
 
       for (Object object : modifiers)
       {
          if (object instanceof org.eclipse.jdt.core.dom.Annotation)
          {
-            Annotation<O> annotation = new AnnotationImpl<O, T>(target, object);
+            AnnotationSource<O> annotation = new AnnotationImpl<O, T>(target, object);
             result.add(annotation);
          }
       }
@@ -121,21 +121,21 @@
       return Collections.unmodifiableList(result);
    }
 
-   public <E extends AnnotationTarget<O, T>> E removeAnnotation(final E target, final ASTNode body,
-            final ReadAnnotation<O> annotation)
+   public <E extends AnnotationTargetSource<O, T>> E removeAnnotation(final E target, final ASTNode body,
+            final Annotation<O> annotation)
    {
       return removeAnnotation(target, getModifiers(body), annotation);
    }
 
-   public <E extends AnnotationTarget<O, T>> E removeAnnotation(final E target,
+   public <E extends AnnotationTargetSource<O, T>> E removeAnnotation(final E target,
             final SingleVariableDeclaration variableDeclaration,
-            final ReadAnnotation<O> annotation)
+            final Annotation<O> annotation)
    {
       return removeAnnotation(target, variableDeclaration.modifiers(), annotation);
    }
 
-   private <E extends AnnotationTarget<O, T>> E removeAnnotation(final E target, final List<?> modifiers,
-            final ReadAnnotation<O> annotation)
+   private <E extends AnnotationTargetSource<O, T>> E removeAnnotation(final E target, final List<?> modifiers,
+            final Annotation<O> annotation)
    {
       for (Object object : modifiers)
       {
@@ -148,27 +148,27 @@
       return target;
    }
 
-   public <E extends AnnotationTarget<O, T>> boolean hasAnnotation(final E target, final ASTNode body,
+   public <E extends AnnotationTargetSource<O, T>> boolean hasAnnotation(final E target, final ASTNode body,
             final String type)
    {
       return hasAnnotation(target, getModifiers(body), type);
    }
 
-   public <E extends AnnotationTarget<O, T>> boolean hasAnnotation(final E target,
+   public <E extends AnnotationTargetSource<O, T>> boolean hasAnnotation(final E target,
             final SingleVariableDeclaration variableDeclaration,
             final String type)
    {
       return hasAnnotation(target, variableDeclaration.modifiers(), type);
    }
 
-   private <E extends AnnotationTarget<O, T>> boolean hasAnnotation(final E target, final List<?> modifiers,
+   private <E extends AnnotationTargetSource<O, T>> boolean hasAnnotation(final E target, final List<?> modifiers,
             final String type)
    {
       for (Object object : modifiers)
       {
          if (object instanceof org.eclipse.jdt.core.dom.Annotation)
          {
-            Annotation<O> annotation = new AnnotationImpl<O, T>(target, object);
+            AnnotationSource<O> annotation = new AnnotationImpl<O, T>(target, object);
             String annotationType = annotation.getName();
             if (Types.areEquivalent(type, annotationType))
             {
@@ -179,34 +179,34 @@
       return false;
    }
 
-   public Annotation<O> getAnnotation(final AnnotationTarget<O, T> target, final ASTNode body,
+   public AnnotationSource<O> getAnnotation(final AnnotationTargetSource<O, T> target, final ASTNode body,
             final Class<? extends java.lang.annotation.Annotation> type)
    {
       return getAnnotation(target, getModifiers(body), type.getName());
    }
 
-   public Annotation<O> getAnnotation(final AnnotationTarget<O, T> target,
+   public AnnotationSource<O> getAnnotation(final AnnotationTargetSource<O, T> target,
             final SingleVariableDeclaration variableDeclaration,
             final Class<? extends java.lang.annotation.Annotation> type)
    {
       return getAnnotation(target, variableDeclaration.modifiers(), type.getName());
    }
 
-   public Annotation<O> getAnnotation(final AnnotationTarget<O, T> target, final ASTNode body, final String type)
+   public AnnotationSource<O> getAnnotation(final AnnotationTargetSource<O, T> target, final ASTNode body, final String type)
    {
       return getAnnotation(target, getModifiers(body), type);
    }
 
-   public Annotation<O> getAnnotation(final AnnotationTarget<O, T> target,
+   public AnnotationSource<O> getAnnotation(final AnnotationTargetSource<O, T> target,
             final SingleVariableDeclaration variableDeclaration, final String type)
    {
       return getAnnotation(target, variableDeclaration.modifiers(), type);
    }
 
-   private Annotation<O> getAnnotation(final AnnotationTarget<O, T> target, final List<?> modifiers, final String type)
+   private AnnotationSource<O> getAnnotation(final AnnotationTargetSource<O, T> target, final List<?> modifiers, final String type)
    {
-      List<Annotation<O>> annotations = getAnnotations(target, modifiers);
-      for (Annotation<O> annotation : annotations)
+      List<AnnotationSource<O>> annotations = getAnnotations(target, modifiers);
+      for (AnnotationSource<O> annotation : annotations)
       {
          if (Types.areEquivalent(type, annotation.getName()))
          {
"
93a609985abaebe149ced9f7749622ac168bb872,Matt Benson,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
index 759d8cd..16251aa 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
@@ -30,19 +30,19 @@
 import org.eclipse.text.edits.TextEdit;
 import org.jboss.forge.parser.JavaParser;
 import org.jboss.forge.parser.ParserException;
-import org.jboss.forge.parser.java.ReadAnnotation;
-import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
-import org.jboss.forge.parser.java.Import;
-import org.jboss.forge.parser.java.ReadInterfaceCapable.InterfaceCapable;
-import org.jboss.forge.parser.java.ReadJavaInterface;
-import org.jboss.forge.parser.java.ReadJavaSource;
-import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
-import org.jboss.forge.parser.java.ReadMember.Member;
+import org.jboss.forge.parser.java.Annotation;
+import org.jboss.forge.parser.java.JavaInterface;
+import org.jboss.forge.parser.java.JavaType;
 import org.jboss.forge.parser.java.SyntaxError;
 import org.jboss.forge.parser.java.Visibility;
 import org.jboss.forge.parser.java.ast.AnnotationAccessor;
 import org.jboss.forge.parser.java.ast.ModifierAccessor;
 import org.jboss.forge.parser.java.ast.TypeDeclarationFinderVisitor;
+import org.jboss.forge.parser.java.source.AnnotationSource;
+import org.jboss.forge.parser.java.source.Import;
+import org.jboss.forge.parser.java.source.InterfaceCapableSource;
+import org.jboss.forge.parser.java.source.JavaSource;
+import org.jboss.forge.parser.java.source.MemberSource;
 import org.jboss.forge.parser.java.util.Formatter;
 import org.jboss.forge.parser.java.util.Strings;
 import org.jboss.forge.parser.java.util.Types;
@@ -51,12 +51,12 @@
 
 /**
  * Represents a Java Source File
- *
+ * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
 @SuppressWarnings(""unchecked"")
 public abstract class AbstractJavaSource<O extends JavaSource<O>> implements
-         JavaSource<O>, InterfaceCapable<O>
+         JavaSource<O>, InterfaceCapableSource<O>
 {
    private final AnnotationAccessor<O, O> annotations = new AnnotationAccessor<O, O>();
    private final ModifierAccessor modifiers = new ModifierAccessor();
@@ -88,25 +88,25 @@
     * Annotation modifiers
     */
    @Override
-   public Annotation<O> addAnnotation()
+   public AnnotationSource<O> addAnnotation()
    {
       return annotations.addAnnotation(this, getBodyDeclaration());
    }
 
    @Override
-   public Annotation<O> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
+   public AnnotationSource<O> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
    {
       return annotations.addAnnotation(this, getBodyDeclaration(), clazz.getName());
    }
 
    @Override
-   public Annotation<O> addAnnotation(final String className)
+   public AnnotationSource<O> addAnnotation(final String className)
    {
       return annotations.addAnnotation(this, getBodyDeclaration(), className);
    }
 
    @Override
-   public List<Annotation<O>> getAnnotations()
+   public List<AnnotationSource<O>> getAnnotations()
    {
       return annotations.getAnnotations(this, getBodyDeclaration());
    }
@@ -124,19 +124,19 @@
    }
 
    @Override
-   public O removeAnnotation(final ReadAnnotation<O> annotation)
+   public O removeAnnotation(final Annotation<O> annotation)
    {
       return (O) annotations.removeAnnotation(this, getBodyDeclaration(), annotation);
    }
 
    @Override
-   public Annotation<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
+   public AnnotationSource<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
    {
       return annotations.getAnnotation(this, getBodyDeclaration(), type);
    }
 
    @Override
-   public Annotation<O> getAnnotation(final String type)
+   public AnnotationSource<O> getAnnotation(final String type)
    {
       return annotations.getAnnotation(this, getBodyDeclaration(), type);
    }
@@ -152,7 +152,7 @@
    }
 
    @Override
-   public <T extends ReadJavaSource<?>> Import addImport(final T type)
+   public <T extends JavaType<?>> Import addImport(final T type)
    {
       String qualifiedName = type.getQualifiedName();
       return this.addImport(qualifiedName);
@@ -211,7 +211,7 @@
    }
 
    @Override
-   public <T extends ReadJavaSource<?>> Import getImport(final T type)
+   public <T extends JavaType<?>> Import getImport(final T type)
    {
       return getImport(type.getQualifiedName());
    }
@@ -242,7 +242,7 @@
    }
 
    @Override
-   public <T extends ReadJavaSource<T>> boolean hasImport(final T type)
+   public <T extends JavaType<T>> boolean hasImport(final T type)
    {
       return hasImport(type.getQualifiedName());
    }
@@ -413,7 +413,7 @@
    }
 
    @Override
-   public <T extends ReadJavaSource<?>> O removeImport(final T type)
+   public <T extends JavaType<?>> O removeImport(final T type)
    {
       return removeImport(type.getQualifiedName());
    }
@@ -430,9 +430,9 @@
    }
 
    @Override
-   public List<Member<O, ?>> getMembers()
+   public List<MemberSource<O, ?>> getMembers()
    {
-      List<Member<O, ?>> result = new ArrayList<Member<O, ?>>();
+      List<MemberSource<O, ?>> result = new ArrayList<MemberSource<O, ?>>();
 
       return result;
    }
@@ -465,7 +465,7 @@
    {
       String result = getName();
 
-      ReadJavaSource<?> enclosingType = this;
+      JavaType<?> enclosingType = this;
       while (enclosingType != enclosingType.getEnclosingType())
       {
          enclosingType = getEnclosingType();
@@ -489,7 +489,7 @@
    {
       String result = getName();
 
-      ReadJavaSource<?> enclosingType = this;
+      JavaType<?> enclosingType = this;
       while (enclosingType != enclosingType.getEnclosingType())
       {
          enclosingType = getEnclosingType();
@@ -618,7 +618,7 @@
     * Non-manipulation methods.
     */
    /**
-    * Return this {@link ReadJavaSource} file as a String
+    * Return this {@link JavaType} file as a String
     */
    @Override
    public String toString()
@@ -817,7 +817,7 @@
    }
 
    @Override
-   public O addInterface(final ReadJavaInterface<?> type)
+   public O addInterface(final JavaInterface<?> type)
    {
       return addInterface(type.getQualifiedName());
    }
@@ -842,7 +842,7 @@
    }
 
    @Override
-   public boolean hasInterface(final ReadJavaInterface<?> type)
+   public boolean hasInterface(final JavaInterface<?> type)
    {
       return hasInterface(type.getQualifiedName());
    }
@@ -869,7 +869,7 @@
    }
 
    @Override
-   public O removeInterface(final ReadJavaInterface<?> type)
+   public O removeInterface(final JavaInterface<?> type)
    {
       return removeInterface(type.getQualifiedName());
    }
"
93a609985abaebe149ced9f7749622ac168bb872,Matt Benson,AbstractJavaSourceMemberHolder.java,MODIFY,addField -> [ReadField field] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java
index ef83f9e..dacc03a 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java
@@ -18,19 +18,19 @@
 import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
 import org.eclipse.jface.text.Document;
 import org.jboss.forge.parser.JavaParser;
-import org.jboss.forge.parser.java.ReadField;
-import org.jboss.forge.parser.java.ReadField.Field;
-import org.jboss.forge.parser.java.ReadFieldHolder.FieldHolder;
-import org.jboss.forge.parser.java.ReadJavaClass.JavaClass;
-import org.jboss.forge.parser.java.ReadJavaSource;
-import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
-import org.jboss.forge.parser.java.ReadMember.Member;
-import org.jboss.forge.parser.java.ReadMethod;
-import org.jboss.forge.parser.java.ReadMethod.Method;
-import org.jboss.forge.parser.java.ReadMethodHolder.MethodHolder;
-import org.jboss.forge.parser.java.ReadParameter;
-import org.jboss.forge.parser.java.ReadParameter.Parameter;
+import org.jboss.forge.parser.java.Field;
+import org.jboss.forge.parser.java.JavaType;
+import org.jboss.forge.parser.java.Method;
+import org.jboss.forge.parser.java.Parameter;
 import org.jboss.forge.parser.java.ast.MethodFinderVisitor;
+import org.jboss.forge.parser.java.source.FieldSource;
+import org.jboss.forge.parser.java.source.FieldHolderSource;
+import org.jboss.forge.parser.java.source.JavaClassSource;
+import org.jboss.forge.parser.java.source.JavaSource;
+import org.jboss.forge.parser.java.source.MemberSource;
+import org.jboss.forge.parser.java.source.MethodSource;
+import org.jboss.forge.parser.java.source.MethodHolderSource;
+import org.jboss.forge.parser.java.source.ParameterSource;
 import org.jboss.forge.parser.java.util.Strings;
 import org.jboss.forge.parser.java.util.Types;
 
@@ -39,7 +39,7 @@
  * 
  */
 public abstract class AbstractJavaSourceMemberHolder<O extends JavaSource<O>> extends AbstractJavaSource<O> implements
-         MethodHolder<O>, FieldHolder<O>
+         MethodHolderSource<O>, FieldHolderSource<O>
 {
    public AbstractJavaSourceMemberHolder(JavaSource<?> enclosingType, final Document document,
             final CompilationUnit unit, BodyDeclaration declaration)
@@ -52,25 +52,25 @@
     */
    @Override
    @SuppressWarnings(""unchecked"")
-   public Field<O> addField()
+   public FieldSource<O> addField()
    {
-      Field<O> field = new FieldImpl<O>((O) this);
+      FieldSource<O> field = new FieldImpl<O>((O) this);
       addField(field);
       return field;
    }
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public Field<O> addField(final String declaration)
+   public FieldSource<O> addField(final String declaration)
    {
       String stub = ""public class Stub { "" + declaration + "" }"";
-      JavaClass temp = (JavaClass) JavaParser.parse(stub);
-      List<Field<JavaClass>> fields = temp.getFields();
-      Field<O> result = null;
-      for (Field<JavaClass> stubField : fields)
+      JavaClassSource temp = (JavaClassSource) JavaParser.parse(stub);
+      List<FieldSource<JavaClassSource>> fields = temp.getFields();
+      FieldSource<O> result = null;
+      for (FieldSource<JavaClassSource> stubField : fields)
       {
          Object variableDeclaration = stubField.getInternal();
-         Field<O> field = new FieldImpl<O>((O) this, variableDeclaration, true);
+         FieldSource<O> field = new FieldImpl<O>((O) this, variableDeclaration, true);
          addField(field);
          if (result == null)
          {
@@ -81,7 +81,7 @@
    }
 
    @SuppressWarnings(""unchecked"")
-   private void addField(ReadField<O> field)
+   private void addField(Field<O> field)
    {
       List<Object> bodyDeclarations = getBodyDeclaration().bodyDeclarations();
       int idx = 0;
@@ -97,9 +97,9 @@
    }
 
    @Override
-   public List<Member<O, ?>> getMembers()
+   public List<MemberSource<O, ?>> getMembers()
    {
-      List<Member<O, ?>> result = new ArrayList<Member<O, ?>>();
+      List<MemberSource<O, ?>> result = new ArrayList<MemberSource<O, ?>>();
 
       result.addAll(getFields());
       result.addAll(getMethods());
@@ -109,9 +109,9 @@
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public List<Field<O>> getFields()
+   public List<FieldSource<O>> getFields()
    {
-      List<Field<O>> result = new ArrayList<Field<O>>();
+      List<FieldSource<O>> result = new ArrayList<FieldSource<O>>();
 
       List<BodyDeclaration> bodyDeclarations = getBodyDeclaration().bodyDeclarations();
       for (BodyDeclaration bodyDeclaration : bodyDeclarations)
@@ -131,9 +131,9 @@
    }
 
    @Override
-   public Field<O> getField(final String name)
+   public FieldSource<O> getField(final String name)
    {
-      for (Field<O> field : getFields())
+      for (FieldSource<O> field : getFields())
       {
          if (field.getName().equals(name))
          {
@@ -146,7 +146,7 @@
    @Override
    public boolean hasField(final String name)
    {
-      for (Field<O> field : getFields())
+      for (FieldSource<O> field : getFields())
       {
          if (field.getName().equals(name))
          {
@@ -157,14 +157,14 @@
    }
 
    @Override
-   public boolean hasField(final ReadField<O> field)
+   public boolean hasField(final Field<O> field)
    {
       return getFields().contains(field);
    }
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public O removeField(final ReadField<O> field)
+   public O removeField(final Field<O> field)
    {
       VariableDeclarationFragment fragment = (VariableDeclarationFragment) field.getInternal();
       Iterator<Object> declarationsIterator = getBodyDeclaration().bodyDeclarations().iterator();
@@ -196,7 +196,7 @@
    }
 
    @Override
-   public boolean hasMethod(final ReadMethod<O, ?> method)
+   public boolean hasMethod(final Method<O, ?> method)
    {
       return getMethods().contains(method);
    }
@@ -231,9 +231,9 @@
    }
 
    @Override
-   public Method<O> getMethod(final String name)
+   public MethodSource<O> getMethod(final String name)
    {
-      for (Method<O> method : getMethods())
+      for (MethodSource<O> method : getMethods())
       {
          if (method.getName().equals(name) && (method.getParameters().size() == 0))
          {
@@ -244,13 +244,13 @@
    }
 
    @Override
-   public Method<O> getMethod(final String name, final String... paramTypes)
+   public MethodSource<O> getMethod(final String name, final String... paramTypes)
    {
-      for (Method<O> local : getMethods())
+      for (MethodSource<O> local : getMethods())
       {
          if (local.getName().equals(name))
          {
-            List<Parameter<O>> localParams = local.getParameters();
+            List<ParameterSource<O>> localParams = local.getParameters();
             if (paramTypes != null)
             {
                if (localParams.isEmpty() || (localParams.size() == paramTypes.length))
@@ -258,7 +258,7 @@
                   boolean matches = true;
                   for (int i = 0; i < localParams.size(); i++)
                   {
-                     Parameter<O> localParam = localParams.get(i);
+                     ParameterSource<O> localParam = localParams.get(i);
                      String type = paramTypes[i];
                      if (!Types.areEquivalent(localParam.getType(), type))
                      {
@@ -275,7 +275,7 @@
    }
 
    @Override
-   public Method<O> getMethod(final String name, Class<?>... paramTypes)
+   public MethodSource<O> getMethod(final String name, Class<?>... paramTypes)
    {
       if (paramTypes == null)
       {
@@ -292,14 +292,14 @@
    }
 
    @Override
-   public boolean hasMethodSignature(final ReadMethod<?, ?> method)
+   public boolean hasMethodSignature(final Method<?, ?> method)
    {
-      for (Method<O> local : getMethods())
+      for (MethodSource<O> local : getMethods())
       {
          if (local.getName().equals(method.getName()))
          {
-            Iterator<Parameter<O>> localParams = local.getParameters().iterator();
-            for (ReadParameter<? extends ReadJavaSource<?>> methodParam : method.getParameters())
+            Iterator<ParameterSource<O>> localParams = local.getParameters().iterator();
+            for (Parameter<? extends JavaType<?>> methodParam : method.getParameters())
             {
                if (localParams.hasNext() && Strings.areEqual(localParams.next().getType(), methodParam.getType()))
                {
@@ -315,7 +315,7 @@
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public O removeMethod(final ReadMethod<O, ?> method)
+   public O removeMethod(final Method<O, ?> method)
    {
       getBodyDeclaration().bodyDeclarations().remove(method.getInternal());
       return (O) this;
@@ -323,27 +323,27 @@
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public Method<O> addMethod()
+   public MethodSource<O> addMethod()
    {
-      Method<O> m = new MethodImpl<O>((O) this);
+      MethodSource<O> m = new MethodImpl<O>((O) this);
       getBodyDeclaration().bodyDeclarations().add(m.getInternal());
       return m;
    }
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public Method<O> addMethod(final String method)
+   public MethodSource<O> addMethod(final String method)
    {
-      Method<O> m = new MethodImpl<O>((O) this, method);
+      MethodSource<O> m = new MethodImpl<O>((O) this, method);
       getBodyDeclaration().bodyDeclarations().add(m.getInternal());
       return m;
    }
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public List<Method<O>> getMethods()
+   public List<MethodSource<O>> getMethods()
    {
-      List<Method<O>> result = new ArrayList<Method<O>>();
+      List<MethodSource<O>> result = new ArrayList<MethodSource<O>>();
 
       MethodFinderVisitor methodFinderVisitor = new MethodFinderVisitor();
       body.accept(methodFinderVisitor);
"
93a609985abaebe149ced9f7749622ac168bb872,Matt Benson,AnnotationElementImpl.java,MODIFY,"parseElement -> [JavaAnnotation parent, String declaration] | [JavaAnnotationSource parent, String declaration]","diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationElementImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationElementImpl.java
index e94369d..acb4530 100755
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationElementImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationElementImpl.java
@@ -21,13 +21,13 @@
 import org.eclipse.jdt.core.dom.PrimitiveType.Code;
 import org.eclipse.jdt.core.dom.TypeLiteral;
 import org.jboss.forge.parser.JavaParser;
-import org.jboss.forge.parser.java.ReadAnnotation;
-import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
-import org.jboss.forge.parser.java.ReadAnnotationElement.AnnotationElement;
-import org.jboss.forge.parser.java.ReadJavaAnnotation.JavaAnnotation;
-import org.jboss.forge.parser.java.ReadJavaSource;
+import org.jboss.forge.parser.java.Annotation;
+import org.jboss.forge.parser.java.JavaType;
 import org.jboss.forge.parser.java.Type;
 import org.jboss.forge.parser.java.ast.AnnotationAccessor;
+import org.jboss.forge.parser.java.source.AnnotationSource;
+import org.jboss.forge.parser.java.source.AnnotationElementSource;
+import org.jboss.forge.parser.java.source.JavaAnnotationSource;
 import org.jboss.forge.parser.java.util.Assert;
 import org.jboss.forge.parser.java.util.Strings;
 import org.jboss.forge.parser.java.util.Types;
@@ -36,17 +36,17 @@
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * @author Matt Benson
  */
-public class AnnotationElementImpl implements AnnotationElement
+public class AnnotationElementImpl implements AnnotationElementSource
 {
-   private class AnnotationValue extends AnnotationImpl<JavaAnnotation, JavaAnnotation>
+   private class AnnotationValue extends AnnotationImpl<JavaAnnotationSource, JavaAnnotationSource>
    {
 
-      AnnotationValue(JavaAnnotation parent)
+      AnnotationValue(JavaAnnotationSource parent)
       {
          super(parent);
       }
 
-      AnnotationValue(JavaAnnotation parent, Object internal)
+      AnnotationValue(JavaAnnotationSource parent, Object internal)
       {
          super(parent, internal);
       }
@@ -81,7 +81,7 @@
       }
 
       @Override
-      public Annotation<JavaAnnotation> getAnnotation()
+      public AnnotationSource<JavaAnnotationSource> getAnnotation()
       {
          Expression expr = member.getDefault();
          if (expr instanceof org.eclipse.jdt.core.dom.Annotation)
@@ -101,7 +101,7 @@
          else
          {
             String stub = ""public @interface Stub { String stub() default "" + value + ""; }"";
-            JavaAnnotation temp = (JavaAnnotation) JavaParser.parse(stub);
+            JavaAnnotationSource temp = (JavaAnnotationSource) JavaParser.parse(stub);
             AnnotationTypeMemberDeclaration internal = (AnnotationTypeMemberDeclaration) temp.getAnnotationElements()
                      .get(0).getInternal();
             member.setDefault((Expression) ASTNode.copySubtree(ast, internal.getDefault()));
@@ -142,7 +142,7 @@
       }
 
       @Override
-      public Annotation<JavaAnnotation> setAnnotation()
+      public AnnotationSource<JavaAnnotationSource> setAnnotation()
       {
          AnnotationValue result = new AnnotationValue(parent);
          member.setDefault((Expression) result.getInternal());
@@ -259,7 +259,7 @@
       
       private Class<?> resolveTypeLiteral(TypeLiteral typeLiteral)
       {
-         final Type<JavaAnnotation> type = new TypeImpl<JavaAnnotation>(getOrigin(), typeLiteral.getType());
+         final Type<JavaAnnotationSource> type = new TypeImpl<JavaAnnotationSource>(getOrigin(), typeLiteral.getType());
          if (type.isPrimitive())
          {
             final Class<?>[] primitiveTypes = { boolean.class, byte.class, short.class, int.class, long.class,
@@ -287,44 +287,44 @@
       }
    }
 
-   private final AnnotationAccessor<JavaAnnotation, AnnotationElement> annotations = new AnnotationAccessor<JavaAnnotation, AnnotationElement>();
+   private final AnnotationAccessor<JavaAnnotationSource, AnnotationElementSource> annotations = new AnnotationAccessor<JavaAnnotationSource, AnnotationElementSource>();
 
-   private JavaAnnotation parent;
+   private JavaAnnotationSource parent;
    private AST ast;
    private final AnnotationTypeMemberDeclaration member;
 
-   public AnnotationElementImpl(final JavaAnnotation parent)
+   public AnnotationElementImpl(final JavaAnnotationSource parent)
    {
       this(parent, ((ASTNode) parent.getInternal()).getAST().newAnnotationTypeMemberDeclaration());
    }
 
-   public AnnotationElementImpl(final JavaAnnotation parent, final String declaration)
+   public AnnotationElementImpl(final JavaAnnotationSource parent, final String declaration)
    {
       this(parent, parseElement(parent, declaration));
    }
 
-   public AnnotationElementImpl(final JavaAnnotation parent, final Object internal)
+   public AnnotationElementImpl(final JavaAnnotationSource parent, final Object internal)
    {
       this.parent = parent;
       ast = ((ASTNode) parent.getInternal()).getAST();
       member = (AnnotationTypeMemberDeclaration) internal;
    }
 
-   private static AnnotationTypeMemberDeclaration parseElement(JavaAnnotation parent, String declaration)
+   private static AnnotationTypeMemberDeclaration parseElement(JavaAnnotationSource parent, String declaration)
    {
       if (!declaration.trim().endsWith("";""))
       {
          declaration = declaration + "";"";
       }
       String stub = ""public @interface Stub { "" + declaration + "" }"";
-      JavaAnnotation temp = (JavaAnnotation) JavaParser.parse(stub);
-      List<AnnotationElement> fields = temp.getAnnotationElements();
+      JavaAnnotationSource temp = (JavaAnnotationSource) JavaParser.parse(stub);
+      List<AnnotationElementSource> fields = temp.getAnnotationElements();
       AnnotationTypeMemberDeclaration newField = (AnnotationTypeMemberDeclaration) fields.get(0).getInternal();
       return (AnnotationTypeMemberDeclaration) ASTNode.copySubtree(((ASTNode) parent.getInternal()).getAST(), newField);
    }
 
    @Override
-   public JavaAnnotation getOrigin()
+   public JavaAnnotationSource getOrigin()
    {
       return parent.getOrigin();
    }
@@ -339,13 +339,13 @@
     * Annotation<O> Modifiers
     */
    @Override
-   public Annotation<JavaAnnotation> addAnnotation()
+   public AnnotationSource<JavaAnnotationSource> addAnnotation()
    {
       return annotations.addAnnotation(this, member);
    }
 
    @Override
-   public Annotation<JavaAnnotation> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
+   public AnnotationSource<JavaAnnotationSource> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
    {
       if (parent.requiresImport(clazz))
       {
@@ -355,13 +355,13 @@
    }
 
    @Override
-   public Annotation<JavaAnnotation> addAnnotation(final String className)
+   public AnnotationSource<JavaAnnotationSource> addAnnotation(final String className)
    {
       return annotations.addAnnotation(this, member, className);
    }
 
    @Override
-   public List<Annotation<JavaAnnotation>> getAnnotations()
+   public List<AnnotationSource<JavaAnnotationSource>> getAnnotations()
    {
       return annotations.getAnnotations(this, member);
    }
@@ -379,19 +379,19 @@
    }
 
    @Override
-   public Annotation<JavaAnnotation> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
+   public AnnotationSource<JavaAnnotationSource> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
    {
       return annotations.getAnnotation(this, member, type);
    }
 
    @Override
-   public Annotation<JavaAnnotation> getAnnotation(final String type)
+   public AnnotationSource<JavaAnnotationSource> getAnnotation(final String type)
    {
       return annotations.getAnnotation(this, member, type);
    }
 
    @Override
-   public AnnotationElement removeAnnotation(final ReadAnnotation<JavaAnnotation> annotation)
+   public AnnotationElementSource removeAnnotation(final Annotation<JavaAnnotationSource> annotation)
    {
       return annotations.removeAnnotation(this, member, annotation);
    }
@@ -413,7 +413,7 @@
    }
 
    @Override
-   public AnnotationElement setName(final String name)
+   public AnnotationElementSource setName(final String name)
    {
       member.setName(ast.newSimpleName(name));
       return this;
@@ -433,9 +433,9 @@
    }
 
    @Override
-   public org.jboss.forge.parser.java.Type<JavaAnnotation> getTypeInspector()
+   public org.jboss.forge.parser.java.Type<JavaAnnotationSource> getTypeInspector()
    {
-      return new TypeImpl<JavaAnnotation>(parent,
+      return new TypeImpl<JavaAnnotationSource>(parent,
                member.getStructuralProperty(AnnotationTypeMemberDeclaration.TYPE_PROPERTY));
    }
 
@@ -478,7 +478,7 @@
    }
 
    @Override
-   public AnnotationElement setType(final Class<?> clazz)
+   public AnnotationElementSource setType(final Class<?> clazz)
    {
       if (parent.requiresImport(clazz))
       {
@@ -488,17 +488,17 @@
    }
 
    @Override
-   public AnnotationElement setType(final ReadJavaSource<?> source)
+   public AnnotationElementSource setType(final JavaType<?> source)
    {
       return setType(source.getQualifiedName());
    }
 
    @Override
-   public AnnotationElement setType(final String typeName)
+   public AnnotationElementSource setType(final String typeName)
    {
       String simpleName = Types.toSimpleName(typeName);
 
-      JavaAnnotation origin = getOrigin();
+      JavaAnnotationSource origin = getOrigin();
       if (!Strings.areEqual(typeName, simpleName) && origin.requiresImport(typeName))
       {
          origin.addImport(typeName);
"
93a609985abaebe149ced9f7749622ac168bb872,Matt Benson,AnnotationImpl.java,MODIFY,"createAnnotation -> [AnnotationTarget parent, AnnotationType type] | [AnnotationTargetSource parent, AnnotationType type]","diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationImpl.java
index 76d6622..5cee92d 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationImpl.java
@@ -24,19 +24,19 @@
 import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
 import org.eclipse.jdt.core.dom.TypeLiteral;
 import org.jboss.forge.parser.JavaParser;
-import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
-import org.jboss.forge.parser.java.ReadAnnotationTarget.AnnotationTarget;
-import org.jboss.forge.parser.java.ReadJavaClass;
-import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
+import org.jboss.forge.parser.java.JavaClass;
 import org.jboss.forge.parser.java.Type;
 import org.jboss.forge.parser.java.ValuePair;
+import org.jboss.forge.parser.java.source.AnnotationSource;
+import org.jboss.forge.parser.java.source.AnnotationTargetSource;
+import org.jboss.forge.parser.java.source.JavaSource;
 import org.jboss.forge.parser.java.util.Assert;
 import org.jboss.forge.parser.java.util.Strings;
 
 /**
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
-public class AnnotationImpl<O extends JavaSource<O>, T> implements Annotation<O>
+public class AnnotationImpl<O extends JavaSource<O>, T> implements AnnotationSource<O>
 {
    private class Nested extends AnnotationImpl<O, T>
    {
@@ -66,7 +66,7 @@
 
    private static final String DEFAULT_VALUE = ""value"";
 
-   private AnnotationTarget<O, T> parent = null;
+   private AnnotationTargetSource<O, T> parent = null;
    private AST ast = null;
    private org.eclipse.jdt.core.dom.Annotation annotation;
 
@@ -75,24 +75,24 @@
       MARKER, SINGLE, NORMAL
    }
 
-   public AnnotationImpl(final AnnotationTarget<O, T> parent)
+   public AnnotationImpl(final AnnotationTargetSource<O, T> parent)
    {
       this(parent, AnnotationType.MARKER);
    }
 
-   public AnnotationImpl(final AnnotationTarget<O, T> parent, final Object internal)
+   public AnnotationImpl(final AnnotationTargetSource<O, T> parent, final Object internal)
    {
       this.parent = parent;
       ast = ((ASTNode) parent.getInternal()).getAST();
       annotation = (org.eclipse.jdt.core.dom.Annotation) internal;
    }
 
-   public AnnotationImpl(final AnnotationTarget<O, T> parent, final AnnotationType type)
+   public AnnotationImpl(final AnnotationTargetSource<O, T> parent, final AnnotationType type)
    {
       this(parent, createAnnotation(parent, type));
    }
 
-   private static org.eclipse.jdt.core.dom.Annotation createAnnotation(final AnnotationTarget<?, ?> parent,
+   private static org.eclipse.jdt.core.dom.Annotation createAnnotation(final AnnotationTargetSource<?, ?> parent,
             final AnnotationType type)
    {
       AST ast = ((ASTNode) parent.getInternal()).getAST();
@@ -226,7 +226,7 @@
    }
 
    @Override
-   public Annotation<O> removeAllValues()
+   public AnnotationSource<O> removeAllValues()
    {
       convertTo(AnnotationType.MARKER);
       return this;
@@ -234,7 +234,7 @@
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public Annotation<O> removeValue(final String name)
+   public AnnotationSource<O> removeValue(final String name)
    {
       if (annotation.isNormalAnnotation())
       {
@@ -271,14 +271,14 @@
    }
 
    @Override
-   public Annotation<O> setName(final String className)
+   public AnnotationSource<O> setName(final String className)
    {
       annotation.setTypeName(ast.newName(className));
       return this;
    }
 
    @Override
-   public Annotation<O> setLiteralValue(final String value)
+   public AnnotationSource<O> setLiteralValue(final String value)
    {
       Assert.notNull(value, ""null not accepted"");
 
@@ -292,7 +292,7 @@
          SingleMemberAnnotation sa = (SingleMemberAnnotation) annotation;
 
          String stub = ""@"" + getName() + ""("" + value + "") public class Stub { }"";
-         ReadJavaClass<?> temp = JavaParser.parse(ReadJavaClass.class, stub);
+         JavaClass<?> temp = JavaParser.parse(JavaClass.class, stub);
 
          SingleMemberAnnotation anno = (SingleMemberAnnotation) temp.getAnnotations().get(0).getInternal();
 
@@ -309,7 +309,7 @@
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public Annotation<O> setLiteralValue(final String name, final String value)
+   public AnnotationSource<O> setLiteralValue(final String name, final String value)
    {
       Assert.notNull(value, ""null not accepted"");
 
@@ -329,7 +329,7 @@
       NormalAnnotation na = (NormalAnnotation) annotation;
 
       String stub = ""@"" + getName() + ""("" + name + ""="" + value + "" ) public class Stub { }"";
-      ReadJavaClass<?> temp = JavaParser.parse(ReadJavaClass.class, stub);
+      JavaClass<?> temp = JavaParser.parse(JavaClass.class, stub);
 
       NormalAnnotation anno = (NormalAnnotation) temp.getAnnotations().get(0).getInternal();
       MemberValuePair mvp = (MemberValuePair) anno.values().get(0);
@@ -350,13 +350,13 @@
    }
 
    @Override
-   public Annotation<O> setStringValue(final String value)
+   public AnnotationSource<O> setStringValue(final String value)
    {
       return setLiteralValue(Strings.enquote(value));
    }
 
    @Override
-   public Annotation<O> setStringValue(final String name, final String value)
+   public AnnotationSource<O> setStringValue(final String name, final String value)
    {
       return setLiteralValue(name, Strings.enquote(value));
    }
@@ -396,25 +396,25 @@
    }
 
    @Override
-   public Annotation<O> setEnumValue(final String name, final Enum<?> value)
+   public AnnotationSource<O> setEnumValue(final String name, final Enum<?> value)
    {
       return setEnumArrayValue(name, value);
    }
 
    @Override
-   public Annotation<O> setEnumValue(final Enum<?>... values)
+   public AnnotationSource<O> setEnumValue(final Enum<?>... values)
    {
       return setEnumArrayValue(values);
    }
 
    @Override
-   public Annotation<O> setEnumArrayValue(Enum<?>... values)
+   public AnnotationSource<O> setEnumArrayValue(Enum<?>... values)
    {
       return setEnumArrayValue(DEFAULT_VALUE, values);
    }
 
    @Override
-   public Annotation<O> setEnumArrayValue(String name, final Enum<?>... values)
+   public AnnotationSource<O> setEnumArrayValue(String name, final Enum<?>... values)
    {
       Assert.notNull(values, ""null array not accepted"");
 
@@ -530,7 +530,7 @@
    }
 
    @Override
-   public Annotation<O> setAnnotationValue()
+   public AnnotationSource<O> setAnnotationValue()
    {
       if (isMarker())
       {
@@ -539,7 +539,7 @@
 
       if (isSingleValue())
       {
-         final Annotation<O> result = new Nested(this);
+         final AnnotationSource<O> result = new Nested(this);
          ((SingleMemberAnnotation) annotation).setValue((Expression) result.getInternal());
          return result;
       }
@@ -547,7 +547,7 @@
    }
 
    @Override
-   public Annotation<O> setAnnotationValue(String name)
+   public AnnotationSource<O> setAnnotationValue(String name)
    {
       if (!isNormal() && DEFAULT_VALUE.equals(name)) {
          return setAnnotationValue();
@@ -556,10 +556,10 @@
       {
          convertTo(AnnotationType.NORMAL);
       }
-      Annotation<O> result = new Nested(this);
+      AnnotationSource<O> result = new Nested(this);
       
       String stub = ""@"" + getName() + ""("" + name + ""= 0 ) public class Stub { }"";
-      ReadJavaClass<?> temp = JavaParser.parse(ReadJavaClass.class, stub);
+      JavaClass<?> temp = JavaParser.parse(JavaClass.class, stub);
 
       NormalAnnotation anno = (NormalAnnotation) temp.getAnnotations().get(0).getInternal();
       MemberValuePair mvp = (MemberValuePair) anno.values().get(0);
@@ -583,7 +583,7 @@
    }
 
    @Override
-   public Annotation<O> getAnnotationValue()
+   public AnnotationSource<O> getAnnotationValue()
    {
       if (isSingleValue())
       {
@@ -602,7 +602,7 @@
    }
 
    @Override
-   public Annotation<O> getAnnotationValue(String name)
+   public AnnotationSource<O> getAnnotationValue(String name)
    {
       if (isNormal())
       {
@@ -705,7 +705,7 @@
    }
 
    @Override
-   public Annotation<O> setClassValue(String name, Class<?> value)
+   public AnnotationSource<O> setClassValue(String name, Class<?> value)
    {
       Assert.notNull(value, ""null not accepted"");
 
@@ -717,19 +717,19 @@
    }
 
    @Override
-   public Annotation<O> setClassValue(Class<?> value)
+   public AnnotationSource<O> setClassValue(Class<?> value)
    {
       return setClassValue(DEFAULT_VALUE, value);
    }
 
    @Override
-   public Annotation<O> setClassArrayValue(Class<?>... values)
+   public AnnotationSource<O> setClassArrayValue(Class<?>... values)
    {
       return setClassArrayValue(DEFAULT_VALUE, values);
    }
 
    @Override
-   public Annotation<O> setClassArrayValue(String name, Class<?>... values)
+   public AnnotationSource<O> setClassArrayValue(String name, Class<?>... values)
    {
       Assert.notNull(values, ""null array not accepted"");
 
"
93a609985abaebe149ced9f7749622ac168bb872,Matt Benson,EnumConstantBodyImpl.java,MODIFY,addImport -> [ReadJavaSource type] | [String className],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java
index 15a358c..a884a43 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java
@@ -23,36 +23,37 @@
 import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
 import org.eclipse.jface.text.Document;
 import org.jboss.forge.parser.JavaParser;
-import org.jboss.forge.parser.java.ReadAnnotation;
-import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
-import org.jboss.forge.parser.java.ReadEnumConstant.EnumConstant;
-import org.jboss.forge.parser.java.ReadEnumConstant.EnumConstant.Body;
-import org.jboss.forge.parser.java.ReadField;
-import org.jboss.forge.parser.java.ReadField.Field;
-import org.jboss.forge.parser.java.Import;
-import org.jboss.forge.parser.java.ReadJavaClass.JavaClass;
-import org.jboss.forge.parser.java.ReadJavaEnum.JavaEnum;
-import org.jboss.forge.parser.java.ReadJavaSource;
-import org.jboss.forge.parser.java.ReadMember.Member;
-import org.jboss.forge.parser.java.ReadMethod;
-import org.jboss.forge.parser.java.ReadMethod.Method;
-import org.jboss.forge.parser.java.ReadParameter;
-import org.jboss.forge.parser.java.ReadParameter.Parameter;
+import org.jboss.forge.parser.java.Annotation;
+import org.jboss.forge.parser.java.Field;
+import org.jboss.forge.parser.java.JavaType;
+import org.jboss.forge.parser.java.Method;
+import org.jboss.forge.parser.java.Parameter;
 import org.jboss.forge.parser.java.SourceType;
 import org.jboss.forge.parser.java.SyntaxError;
 import org.jboss.forge.parser.java.Visibility;
 import org.jboss.forge.parser.java.ast.MethodFinderVisitor;
 import org.jboss.forge.parser.java.ast.TypeDeclarationFinderVisitor;
+import org.jboss.forge.parser.java.source.AnnotationSource;
+import org.jboss.forge.parser.java.source.EnumConstantSource;
+import org.jboss.forge.parser.java.source.FieldSource;
+import org.jboss.forge.parser.java.source.Import;
+import org.jboss.forge.parser.java.source.JavaClassSource;
+import org.jboss.forge.parser.java.source.JavaEnumSource;
+import org.jboss.forge.parser.java.source.JavaSource;
+import org.jboss.forge.parser.java.source.MemberSource;
+import org.jboss.forge.parser.java.source.MethodSource;
+import org.jboss.forge.parser.java.source.ParameterSource;
+import org.jboss.forge.parser.java.source.EnumConstantSource.Body;
 import org.jboss.forge.parser.java.util.Strings;
 import org.jboss.forge.parser.java.util.Types;
 import org.jboss.forge.parser.spi.JavaParserImpl;
 
-class EnumConstantBodyImpl implements EnumConstant.Body
+class EnumConstantBodyImpl implements EnumConstantSource.Body
 {
-   private final JavaEnum javaEnum;
-   private final EnumConstant<?> enumConstant;
+   private final EnumConstantSource enumConstant;
+   private final JavaEnumSource javaEnum;
 
-   EnumConstantBodyImpl(JavaEnum javaEnum, EnumConstant<?> enumConstant)
+   EnumConstantBodyImpl(EnumConstantSource enumConstant)
    {
       this.javaEnum = javaEnum;
       this.enumConstant = enumConstant;
@@ -184,7 +185,7 @@
    }
 
    @Override
-   public <T extends ReadJavaSource<?>> Import addImport(T type)
+   public <T extends JavaType<?>> Import addImport(T type)
    {
       return javaEnum.addImport(type);
    }
@@ -214,7 +215,7 @@
    }
 
    @Override
-   public <T extends ReadJavaSource<T>> boolean hasImport(T type)
+   public <T extends JavaType<T>> boolean hasImport(T type)
    {
       return javaEnum.hasImport(type);
    }
@@ -238,7 +239,7 @@
    }
 
    @Override
-   public <T extends ReadJavaSource<?>> Import getImport(T type)
+   public <T extends JavaType<?>> Import getImport(T type)
    {
       return javaEnum.getImport(type);
    }
@@ -264,7 +265,7 @@
    }
 
    @Override
-   public <T extends ReadJavaSource<?>> Body removeImport(T type)
+   public <T extends JavaType<?>> Body removeImport(T type)
    {
       javaEnum.removeImport(type);
       return this;
@@ -363,7 +364,7 @@
    }
 
    @Override
-   public Annotation<Body> addAnnotation()
+   public AnnotationSource<Body> addAnnotation()
    {
       // could pass through to enumConstant, but would require then pretending its Annotation was ours
       // which should cause no problem at the moment, but could theoretically do so in the future
@@ -371,7 +372,7 @@
    }
 
    @Override
-   public Annotation<Body> addAnnotation(Class<? extends java.lang.annotation.Annotation> type)
+   public AnnotationSource<Body> addAnnotation(Class<? extends java.lang.annotation.Annotation> type)
    {
       // could pass through to enumConstant, but would require then pretending its Annotation was ours
       // which should cause no problem at the moment, but could theoretically do so in the future
@@ -379,7 +380,7 @@
    }
 
    @Override
-   public Annotation<Body> addAnnotation(String className)
+   public AnnotationSource<Body> addAnnotation(String className)
    {
       // could pass through to enumConstant, but would require then pretending its Annotation was ours
       // which should cause no problem at the moment, but could theoretically do so in the future
@@ -387,7 +388,7 @@
    }
 
    @Override
-   public List<Annotation<Body>> getAnnotations()
+   public List<AnnotationSource<Body>> getAnnotations()
    {
       // could pass through to enumConstant, but would require then pretending its Annotation was ours
       // which should cause no problem at the moment, but could theoretically do so in the future
@@ -411,7 +412,7 @@
    }
 
    @Override
-   public Annotation<Body> getAnnotation(Class<? extends java.lang.annotation.Annotation> type)
+   public AnnotationSource<Body> getAnnotation(Class<? extends java.lang.annotation.Annotation> type)
    {
       // could pass through to enumConstant, but would require then pretending its Annotation was ours
       // which should cause no problem at the moment, but could theoretically do so in the future
@@ -419,7 +420,7 @@
    }
 
    @Override
-   public Annotation<Body> getAnnotation(String type)
+   public AnnotationSource<Body> getAnnotation(String type)
    {
       // could pass through to enumConstant, but would require then pretending its Annotation was ours
       // which should cause no problem at the moment, but could theoretically do so in the future
@@ -427,7 +428,7 @@
    }
 
    @Override
-   public Body removeAnnotation(ReadAnnotation<Body> annotation)
+   public Body removeAnnotation(Annotation<Body> annotation)
    {
       // could pass through to enumConstant, but would require then pretending its Annotation was ours
       // which should cause no problem at the moment, but could theoretically do so in the future
@@ -449,7 +450,7 @@
          if (result == null)
          {
             final String stub = ""enum StubEnum { FOO() {}; }"";
-            final JavaEnum temp = JavaParser.parse(JavaEnum.class, stub);
+            final JavaEnumSource temp = JavaParser.parse(JavaEnumSource.class, stub);
             final AnonymousClassDeclaration body = ((EnumConstantBodyImpl) temp.getEnumConstants().get(0).getBody())
                      .getBody();
             final AST ast = ((ASTNode) javaEnum.getInternal()).getAST();
@@ -467,33 +468,33 @@
    }
 
    @Override
-   public List<Member<Body, ?>> getMembers()
+   public List<MemberSource<Body, ?>> getMembers()
    {
-      final List<Member<Body, ?>> result = new ArrayList<Member<Body, ?>>();
+      final List<MemberSource<Body, ?>> result = new ArrayList<MemberSource<Body, ?>>();
       result.addAll(getFields());
       result.addAll(getMethods());
       return Collections.unmodifiableList(result);
    }
 
    @Override
-   public Field<Body> addField()
+   public FieldSource<Body> addField()
    {
-      Field<Body> field = new FieldImpl<Body>(this);
+      FieldSource<Body> field = new FieldImpl<Body>(this);
       addField(field);
       return field;
    }
 
    @Override
-   public Field<Body> addField(final String declaration)
+   public FieldSource<Body> addField(final String declaration)
    {
       String stub = ""public class Stub { "" + declaration + "" }"";
-      JavaClass temp = (JavaClass) JavaParser.parse(stub);
-      List<Field<JavaClass>> fields = temp.getFields();
-      Field<Body> result = null;
-      for (Field<JavaClass> stubField : fields)
+      JavaClassSource temp = (JavaClassSource) JavaParser.parse(stub);
+      List<FieldSource<JavaClassSource>> fields = temp.getFields();
+      FieldSource<Body> result = null;
+      for (FieldSource<JavaClassSource> stubField : fields)
       {
          Object variableDeclaration = stubField.getInternal();
-         Field<Body> field = new FieldImpl<Body>(this, variableDeclaration, true);
+         FieldSource<Body> field = new FieldImpl<Body>(this, variableDeclaration, true);
          addField(field);
          if (result == null)
          {
@@ -504,7 +505,7 @@
    }
 
    @SuppressWarnings(""unchecked"")
-   private void addField(ReadField<Body> field)
+   private void addField(Field<Body> field)
    {
       final List<BodyDeclaration> bodyDeclarations = getBody().bodyDeclarations();
       int idx = 0;
@@ -521,9 +522,9 @@
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public List<Field<Body>> getFields()
+   public List<FieldSource<Body>> getFields()
    {
-      final List<Field<Body>> result = new ArrayList<Field<Body>>();
+      final List<FieldSource<Body>> result = new ArrayList<FieldSource<Body>>();
 
       final List<BodyDeclaration> bodyDeclarations = getBody().bodyDeclarations();
       for (BodyDeclaration bodyDeclaration : bodyDeclarations)
@@ -542,9 +543,9 @@
    }
 
    @Override
-   public Field<Body> getField(final String name)
+   public FieldSource<Body> getField(final String name)
    {
-      for (Field<Body> field : getFields())
+      for (FieldSource<Body> field : getFields())
       {
          if (field.getName().equals(name))
          {
@@ -557,7 +558,7 @@
    @Override
    public boolean hasField(final String name)
    {
-      for (ReadField<Body> field : getFields())
+      for (Field<Body> field : getFields())
       {
          if (field.getName().equals(name))
          {
@@ -568,14 +569,14 @@
    }
 
    @Override
-   public boolean hasField(final ReadField<Body> field)
+   public boolean hasField(final Field<Body> field)
    {
       return getFields().contains(field);
    }
 
    @SuppressWarnings(""unchecked"")
    @Override
-   public Body removeField(final ReadField<Body> field)
+   public Body removeField(final Field<Body> field)
    {
       VariableDeclarationFragment fragment = (VariableDeclarationFragment) field.getInternal();
       Iterator<Object> declarationsIterator = getBody().bodyDeclarations().iterator();
@@ -607,7 +608,7 @@
    }
 
    @Override
-   public boolean hasMethod(final ReadMethod<Body, ?> method)
+   public boolean hasMethod(final Method<Body, ?> method)
    {
       return getMethods().contains(method);
    }
@@ -637,9 +638,9 @@
    }
 
    @Override
-   public Method<Body> getMethod(final String name)
+   public MethodSource<Body> getMethod(final String name)
    {
-      for (Method<Body> method : getMethods())
+      for (MethodSource<Body> method : getMethods())
       {
          if (method.getName().equals(name) && (method.getParameters().isEmpty()))
          {
@@ -650,13 +651,13 @@
    }
 
    @Override
-   public Method<Body> getMethod(final String name, final String... paramTypes)
+   public MethodSource<Body> getMethod(final String name, final String... paramTypes)
    {
-      for (Method<Body> local : getMethods())
+      for (MethodSource<Body> local : getMethods())
       {
          if (local.getName().equals(name))
          {
-            final List<Parameter<Body>> localParams = local.getParameters();
+            final List<ParameterSource<Body>> localParams = local.getParameters();
             if (paramTypes != null)
             {
                if (localParams.isEmpty() || (localParams.size() == paramTypes.length))
@@ -681,7 +682,7 @@
    }
 
    @Override
-   public Method<Body> getMethod(final String name, Class<?>... paramTypes)
+   public MethodSource<Body> getMethod(final String name, Class<?>... paramTypes)
    {
       final String[] types = new String[paramTypes == null ? 0 : paramTypes.length];
       for (int i = 0; i < types.length; i++)
@@ -693,14 +694,14 @@
    }
 
    @Override
-   public boolean hasMethodSignature(final ReadMethod<?, ?> method)
+   public boolean hasMethodSignature(final Method<?, ?> method)
    {
-      for (Method<Body> local : getMethods())
+      for (MethodSource<Body> local : getMethods())
       {
          if (local.getName().equals(method.getName()))
          {
-            final Iterator<Parameter<Body>> localParams = local.getParameters().iterator();
-            for (ReadParameter<? extends ReadJavaSource<?>> methodParam : method.getParameters())
+            final Iterator<ParameterSource<Body>> localParams = local.getParameters().iterator();
+            for (Parameter<? extends JavaType<?>> methodParam : method.getParameters())
             {
                if (localParams.hasNext() && Strings.areEqual(localParams.next().getType(), methodParam.getType()))
                {
@@ -715,7 +716,7 @@
    }
 
    @Override
-   public Body removeMethod(final ReadMethod<Body, ?> method)
+   public Body removeMethod(final Method<Body, ?> method)
    {
       getBody().bodyDeclarations().remove(method.getInternal());
       return this;
@@ -723,26 +724,26 @@
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public Method<Body> addMethod()
+   public MethodSource<Body> addMethod()
    {
-      final Method<Body> m = new MethodImpl<Body>(this);
+      final MethodSource<Body> m = new MethodImpl<Body>(this);
       getBody().bodyDeclarations().add(m.getInternal());
       return m;
    }
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public Method<Body> addMethod(final String method)
+   public MethodSource<Body> addMethod(final String method)
    {
-      final Method<Body> m = new MethodImpl<Body>(this, method);
+      final MethodSource<Body> m = new MethodImpl<Body>(this, method);
       getBody().bodyDeclarations().add(m.getInternal());
       return m;
    }
 
    @Override
-   public List<Method<Body>> getMethods()
+   public List<MethodSource<Body>> getMethods()
    {
-      final List<Method<Body>> result = new ArrayList<Method<Body>>();
+      final List<MethodSource<Body>> result = new ArrayList<MethodSource<Body>>();
 
       final MethodFinderVisitor methodFinderVisitor = new MethodFinderVisitor();
       getBody().accept(methodFinderVisitor);
"
93a609985abaebe149ced9f7749622ac168bb872,Matt Benson,EnumConstantImpl.java,MODIFY,init -> [JavaEnum parent] | [JavaEnumSource parent],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java
index ad2e2ca..9dbddc2 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java
@@ -16,43 +16,44 @@
 import org.eclipse.jdt.core.dom.EnumConstantDeclaration;
 import org.eclipse.jdt.core.dom.Expression;
 import org.jboss.forge.parser.JavaParser;
-import org.jboss.forge.parser.java.ReadAnnotation;
-import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
-import org.jboss.forge.parser.java.ReadEnumConstant.EnumConstant;
-import org.jboss.forge.parser.java.ReadJavaEnum.JavaEnum;
+import org.jboss.forge.parser.java.Annotation;
 import org.jboss.forge.parser.java.ast.AnnotationAccessor;
+import org.jboss.forge.parser.java.source.AnnotationSource;
+import org.jboss.forge.parser.java.source.EnumConstantSource;
+import org.jboss.forge.parser.java.source.JavaEnumSource;
 import org.jboss.forge.parser.java.util.Strings;
 
-public class EnumConstantImpl implements EnumConstant
+public class EnumConstantImpl implements EnumConstantSource
 {
-   private JavaEnum parent;
+   private final AnnotationAccessor<JavaEnumSource, EnumConstantSource> annotations = new AnnotationAccessor<JavaEnumSource, EnumConstantSource>();
+   private JavaEnumSource parent;
    private AST ast;
    private EnumConstantDeclaration enumConstant;
 
-   private void init(final JavaEnum parent)
+   private void init(final JavaEnumSource parent)
    {
       this.parent = parent;
       this.ast = ((ASTNode) parent.getInternal()).getAST();
    }
    
-   public EnumConstantImpl(final JavaEnum parent) {
+   public EnumConstantImpl(final JavaEnumSource parent) {
       init(parent);
       this.enumConstant = ast.newEnumConstantDeclaration();
    }
    
-   public EnumConstantImpl(final JavaEnum parent, final String declaration)
+   public EnumConstantImpl(final JavaEnumSource parent, final String declaration)
    {
       init(parent);
 
       String stub = ""public enum Stub { "" + declaration + "" }"";
-      JavaEnum temp = (JavaEnum) JavaParser.parse(stub);
-      List<EnumConstant> constants = temp.getEnumConstants();
+      JavaEnumSource temp = (JavaEnumSource) JavaParser.parse(stub);
+      List<EnumConstantSource> constants = temp.getEnumConstants();
       EnumConstantDeclaration newField = (EnumConstantDeclaration) constants.get(0).getInternal();
       EnumConstantDeclaration subtree = (EnumConstantDeclaration) ASTNode.copySubtree(ast, newField);
       this.enumConstant = subtree;
    }
    
-   public EnumConstantImpl(final JavaEnum parent, final Object internal)
+   public EnumConstantImpl(final JavaEnumSource parent, final Object internal)
    {
       init(parent);
       this.enumConstant = (EnumConstantDeclaration) internal;
@@ -65,7 +66,7 @@
    }
 
    @Override
-   public EnumConstant setName(String name)
+   public EnumConstantSource setName(String name)
    {
       this.enumConstant.setName(ast.newSimpleName(name));
       return this;
@@ -78,7 +79,7 @@
    }
 
    @Override
-   public JavaEnum getOrigin()
+   public JavaEnumSource getOrigin()
    {
       return parent;
    }
@@ -95,14 +96,14 @@
 
    @SuppressWarnings(""unchecked"")
    @Override
-   public EnumConstant<O> setConstructorArguments(String... literalArguments)
+   public EnumConstantSource setConstructorArguments(String... literalArguments)
    {
       enumConstant.arguments().clear();
       if (literalArguments != null && literalArguments.length > 0)
       {
          final String stub = ""public enum Stub { FOO("" + Strings.join(Arrays.asList(literalArguments), "", "") + ""); }"";
-         final JavaEnum temp = JavaParser.parse(JavaEnum.class, stub);
-         final List<EnumConstant<JavaEnum>> constants = temp.getEnumConstants();
+         final JavaEnumSource temp = JavaParser.parse(JavaEnumSource.class, stub);
+         final List<EnumConstantSource> constants = temp.getEnumConstants();
          final EnumConstantDeclaration newConstant = (EnumConstantDeclaration) constants.get(0).getInternal();
          final List<Expression> arguments = newConstant.arguments();
          for (Expression argument : arguments)
@@ -121,7 +122,7 @@
    }
 
    @Override
-   public EnumConstant<O> removeBody()
+   public EnumConstantSource removeBody()
    {
       enumConstant.setAnonymousClassDeclaration(null);
       return this;
@@ -132,13 +133,13 @@
     */
 
    @Override
-   public Annotation<O> addAnnotation()
+   public AnnotationSource<JavaEnumSource> addAnnotation()
    {
       return annotations.addAnnotation(this, enumConstant);
    }
 
    @Override
-   public Annotation<O> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
+   public AnnotationSource<JavaEnumSource> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
    {
       if (!parent.hasImport(clazz))
       {
@@ -148,13 +149,13 @@
    }
 
    @Override
-   public Annotation<O> addAnnotation(final String className)
+   public AnnotationSource<JavaEnumSource> addAnnotation(final String className)
    {
       return annotations.addAnnotation(this, enumConstant, className);
    }
 
    @Override
-   public List<Annotation<O>> getAnnotations()
+   public List<AnnotationSource<JavaEnumSource>> getAnnotations()
    {
       return annotations.getAnnotations(this, enumConstant);
    }
@@ -172,19 +173,19 @@
    }
 
    @Override
-   public EnumConstant removeAnnotation(final ReadAnnotation<JavaEnum> annotation)
+   public EnumConstantSource removeAnnotation(final Annotation<JavaEnumSource> annotation)
    {
       return annotations.removeAnnotation(this, enumConstant, annotation);
    }
 
    @Override
-   public Annotation<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
+   public AnnotationSource<JavaEnumSource> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
    {
       return annotations.getAnnotation(this, enumConstant, type);
    }
 
    @Override
-   public Annotation<O> getAnnotation(final String type)
+   public AnnotationSource<JavaEnumSource> getAnnotation(final String type)
    {
       return annotations.getAnnotation(this, enumConstant, type);
    }
"
93a609985abaebe149ced9f7749622ac168bb872,Matt Benson,FieldImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
index 2559310..94bd7b0 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
@@ -22,24 +22,24 @@
 import org.eclipse.jdt.core.dom.Type;
 import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
 import org.jboss.forge.parser.JavaParser;
-import org.jboss.forge.parser.java.ReadAnnotation;
-import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
-import org.jboss.forge.parser.java.ReadField.Field;
-import org.jboss.forge.parser.java.ReadJavaClass;
-import org.jboss.forge.parser.java.ReadJavaSource;
-import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
+import org.jboss.forge.parser.java.Annotation;
+import org.jboss.forge.parser.java.JavaClass;
+import org.jboss.forge.parser.java.JavaType;
 import org.jboss.forge.parser.java.Visibility;
 import org.jboss.forge.parser.java.ast.AnnotationAccessor;
 import org.jboss.forge.parser.java.ast.ModifierAccessor;
+import org.jboss.forge.parser.java.source.AnnotationSource;
+import org.jboss.forge.parser.java.source.FieldSource;
+import org.jboss.forge.parser.java.source.JavaSource;
 import org.jboss.forge.parser.java.util.Strings;
 import org.jboss.forge.parser.java.util.Types;
 
 /**
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
-public class FieldImpl<O extends JavaSource<O>> implements Field<O>
+public class FieldImpl<O extends JavaSource<O>> implements FieldSource<O>
 {
-   private final AnnotationAccessor<O, Field<O>> annotations = new AnnotationAccessor<O, Field<O>>();
+   private final AnnotationAccessor<O, FieldSource<O>> annotations = new AnnotationAccessor<O, FieldSource<O>>();
    private final ModifierAccessor modifiers = new ModifierAccessor();
 
    private O parent;
@@ -114,13 +114,13 @@
     * Annotation<O> Modifiers
     */
    @Override
-   public Annotation<O> addAnnotation()
+   public AnnotationSource<O> addAnnotation()
    {
       return annotations.addAnnotation(this, field);
    }
 
    @Override
-   public Annotation<O> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
+   public AnnotationSource<O> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
    {
       if (parent.requiresImport(clazz))
       {
@@ -130,13 +130,13 @@
    }
 
    @Override
-   public Annotation<O> addAnnotation(final String className)
+   public AnnotationSource<O> addAnnotation(final String className)
    {
       return annotations.addAnnotation(this, field, className);
    }
 
    @Override
-   public List<Annotation<O>> getAnnotations()
+   public List<AnnotationSource<O>> getAnnotations()
    {
       return annotations.getAnnotations(this, field);
    }
@@ -154,19 +154,19 @@
    }
 
    @Override
-   public Annotation<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
+   public AnnotationSource<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
    {
       return annotations.getAnnotation(this, field, type);
    }
 
    @Override
-   public Annotation<O> getAnnotation(final String type)
+   public AnnotationSource<O> getAnnotation(final String type)
    {
       return annotations.getAnnotation(this, field, type);
    }
 
    @Override
-   public Field<O> removeAnnotation(final ReadAnnotation<O> annotation)
+   public FieldSource<O> removeAnnotation(final Annotation<O> annotation)
    {
       return annotations.removeAnnotation(this, field, annotation);
    }
@@ -188,7 +188,7 @@
    }
 
    @Override
-   public Field<O> setFinal(final boolean finl)
+   public FieldSource<O> setFinal(final boolean finl)
    {
       if (finl)
          modifiers.addModifier(field, ModifierKeyword.FINAL_KEYWORD);
@@ -204,7 +204,7 @@
    }
 
    @Override
-   public Field<O> setStatic(final boolean statc)
+   public FieldSource<O> setStatic(final boolean statc)
    {
       if (statc)
          modifiers.addModifier(field, ModifierKeyword.STATIC_KEYWORD);
@@ -220,7 +220,7 @@
    }
 
    @Override
-   public Field<O> setPackagePrivate()
+   public FieldSource<O> setPackagePrivate()
    {
       modifiers.clearVisibility(field);
       return this;
@@ -233,7 +233,7 @@
    }
 
    @Override
-   public Field<O> setPublic()
+   public FieldSource<O> setPublic()
    {
       modifiers.clearVisibility(field);
       modifiers.addModifier(field, ModifierKeyword.PUBLIC_KEYWORD);
@@ -247,7 +247,7 @@
    }
 
    @Override
-   public Field<O> setPrivate()
+   public FieldSource<O> setPrivate()
    {
       modifiers.clearVisibility(field);
       modifiers.addModifier(field, ModifierKeyword.PRIVATE_KEYWORD);
@@ -261,7 +261,7 @@
    }
 
    @Override
-   public Field<O> setProtected()
+   public FieldSource<O> setProtected()
    {
       modifiers.clearVisibility(field);
       modifiers.addModifier(field, ModifierKeyword.PROTECTED_KEYWORD);
@@ -275,7 +275,7 @@
    }
 
    @Override
-   public Field<O> setVisibility(final Visibility scope)
+   public FieldSource<O> setVisibility(final Visibility scope)
    {
       return Visibility.set(this, scope);
    }
@@ -301,7 +301,7 @@
    }
 
    @Override
-   public Field<O> setName(final String name)
+   public FieldSource<O> setName(final String name)
    {
       fragment.setName(ast.newSimpleName(name));
       return this;
@@ -385,7 +385,7 @@
    }
 
    @Override
-   public Field<O> setType(final Class<?> clazz)
+   public FieldSource<O> setType(final Class<?> clazz)
    {
       if (parent.requiresImport(clazz))
       {
@@ -395,13 +395,13 @@
    }
 
    @Override
-   public Field<O> setType(final ReadJavaSource<?> source)
+   public FieldSource<O> setType(final JavaType<?> source)
    {
       return setType(source.getQualifiedName());
    }
 
    @Override
-   public Field<O> setType(final String typeName)
+   public FieldSource<O> setType(final String typeName)
    {
       String simpleName = Types.toSimpleName(typeName);
 
@@ -466,17 +466,17 @@
    }
 
    @Override
-   public Field<O> setLiteralInitializer(final String value)
+   public FieldSource<O> setLiteralInitializer(final String value)
    {
       String stub = ""public class Stub { private String stub = "" + value + "" }"";
-      ReadJavaClass<?> temp = JavaParser.parse(ReadJavaClass.class, stub);
+      JavaClass<?> temp = JavaParser.parse(JavaClass.class, stub);
       VariableDeclarationFragment tempFrag = (VariableDeclarationFragment) temp.getFields().get(0).getInternal();
       fragment.setInitializer((Expression) ASTNode.copySubtree(ast, tempFrag.getInitializer()));
       return this;
    }
 
    @Override
-   public Field<O> setStringInitializer(final String value)
+   public FieldSource<O> setStringInitializer(final String value)
    {
       return setLiteralInitializer(Strings.enquote(value));
    }
"
93a609985abaebe149ced9f7749622ac168bb872,Matt Benson,JavaAnnotationImpl.java,MODIFY,addAnnotationElement -> [String declaration] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaAnnotationImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaAnnotationImpl.java
index 76fa94b..55aa90c 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaAnnotationImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaAnnotationImpl.java
@@ -15,17 +15,18 @@
 import org.eclipse.jdt.core.dom.BodyDeclaration;
 import org.eclipse.jdt.core.dom.CompilationUnit;
 import org.eclipse.jface.text.Document;
-import org.jboss.forge.parser.java.ReadAnnotationElement;
-import org.jboss.forge.parser.java.ReadAnnotationElement.AnnotationElement;
-import org.jboss.forge.parser.java.ReadJavaAnnotation.JavaAnnotation;
+import org.jboss.forge.parser.java.AnnotationElement;
 import org.jboss.forge.parser.java.SourceType;
+import org.jboss.forge.parser.java.source.AnnotationElementSource;
+import org.jboss.forge.parser.java.source.JavaAnnotationSource;
+import org.jboss.forge.parser.java.source.JavaSource;
 import org.jboss.forge.parser.java.util.Strings;
 
 /**
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * 
  */
-public class JavaAnnotationImpl extends AbstractJavaSource<JavaAnnotation> implements JavaAnnotation
+public class JavaAnnotationImpl extends AbstractJavaSource<JavaAnnotationSource> implements JavaAnnotationSource
 {
 
    public JavaAnnotationImpl(JavaSource<?> enclosingType, final Document document, final CompilationUnit unit,
@@ -35,7 +36,7 @@
    }
 
    @Override
-   protected JavaAnnotation updateTypeNames(final String name)
+   protected JavaAnnotationSource updateTypeNames(final String name)
    {
       return this;
    }
@@ -47,18 +48,18 @@
    }
 
    @Override
-   public AnnotationElement addAnnotationElement()
+   public AnnotationElementSource addAnnotationElement()
    {
       return add(new AnnotationElementImpl(this));
    }
 
    @Override
-   public AnnotationElement addAnnotationElement(String declaration)
+   public AnnotationElementSource addAnnotationElement(String declaration)
    {
       return add(new AnnotationElementImpl(this, declaration));
    }
 
-   private AnnotationElement add(AnnotationElement annotationElement)
+   private AnnotationElementSource add(AnnotationElementSource annotationElement)
    {
       @SuppressWarnings(""unchecked"")
       final ListIterator<BodyDeclaration> members = getBodyDeclaration().bodyDeclarations().listIterator();
@@ -89,7 +90,7 @@
    @Override
    public boolean hasAnnotationElement(String name)
    {
-      for (AnnotationElement annotationElement : getAnnotationElements())
+      for (AnnotationElementSource annotationElement : getAnnotationElements())
       {
          if (Strings.areEqual(name, annotationElement.getName()))
          {
@@ -100,15 +101,15 @@
    }
 
    @Override
-   public boolean hasAnnotationElement(ReadAnnotationElement<?> annotationElement)
+   public boolean hasAnnotationElement(AnnotationElement<?> annotationElement)
    {
       return getAnnotationElements().contains(annotationElement);
    }
 
    @Override
-   public AnnotationElement getAnnotationElement(String name)
+   public AnnotationElementSource getAnnotationElement(String name)
    {
-      for (AnnotationElement annotationElement : getAnnotationElements())
+      for (AnnotationElementSource annotationElement : getAnnotationElements())
       {
          if (Strings.areEqual(name, annotationElement.getName()))
          {
@@ -119,9 +120,9 @@
    }
 
    @Override
-   public List<AnnotationElement> getAnnotationElements()
+   public List<AnnotationElementSource> getAnnotationElements()
    {
-      List<AnnotationElement> result = new ArrayList<AnnotationElement>();
+      List<AnnotationElementSource> result = new ArrayList<AnnotationElementSource>();
       @SuppressWarnings(""unchecked"")
       List<BodyDeclaration> bodyDeclarations = getBodyDeclaration().bodyDeclarations();
       for (BodyDeclaration bodyDeclaration : bodyDeclarations)
@@ -136,7 +137,7 @@
    }
 
    @Override
-   public JavaAnnotation removeAnnotationElement(ReadAnnotationElement<?> annotationElement)
+   public JavaAnnotationSource removeAnnotationElement(AnnotationElement<?> annotationElement)
    {
       getBodyDeclaration().bodyDeclarations().remove(annotationElement.getInternal());
       return this;
"
93a609985abaebe149ced9f7749622ac168bb872,Matt Benson,JavaClassImpl.java,MODIFY,setSuperType -> [String type] | [JavaType type],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaClassImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaClassImpl.java
index 05697fc..1969901 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaClassImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaClassImpl.java
@@ -12,11 +12,12 @@
 import org.eclipse.jdt.core.dom.SimpleType;
 import org.eclipse.jdt.core.dom.TypeDeclaration;
 import org.eclipse.jface.text.Document;
-import org.jboss.forge.parser.java.ReadJavaClass.JavaClass;
-import org.jboss.forge.parser.java.ReadJavaSource;
-import org.jboss.forge.parser.java.ReadMethod.Method;
+import org.jboss.forge.parser.java.JavaType;
 import org.jboss.forge.parser.java.SourceType;
 import org.jboss.forge.parser.java.ast.ModifierAccessor;
+import org.jboss.forge.parser.java.source.JavaClassSource;
+import org.jboss.forge.parser.java.source.JavaSource;
+import org.jboss.forge.parser.java.source.MethodSource;
 import org.jboss.forge.parser.java.util.Types;
 
 /**
@@ -24,7 +25,7 @@
  *
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
-public class JavaClassImpl extends AbstractGenericCapableJavaSource<JavaClass> implements JavaClass
+public class JavaClassImpl extends AbstractGenericCapableJavaSource<JavaClassSource> implements JavaClassSource
 {
    private final ModifierAccessor modifiers = new ModifierAccessor();
 
@@ -35,9 +36,9 @@
    }
 
    @Override
-   protected JavaClass updateTypeNames(final String newName)
+   protected JavaClassSource updateTypeNames(final String newName)
    {
-      for (Method<JavaClass> m : getMethods())
+      for (MethodSource<JavaClassSource> m : getMethods())
       {
          if (m.isConstructor())
          {
@@ -58,7 +59,7 @@
    }
 
    @Override
-   public JavaClass setAbstract(final boolean abstrct)
+   public JavaClassSource setAbstract(final boolean abstrct)
    {
       if (abstrct)
       {
@@ -97,13 +98,13 @@
    }
 
    @Override
-   public JavaClass setSuperType(final ReadJavaSource<?> type)
+   public JavaClassSource setSuperType(final JavaType<?> type)
    {
       return setSuperType(type.getQualifiedName());
    }
 
    @Override
-   public JavaClass setSuperType(final Class<?> type)
+   public JavaClassSource setSuperType(final Class<?> type)
    {
       if (type.isAnnotation() || type.isEnum() || type.isInterface() || type.isPrimitive())
       {
@@ -114,7 +115,7 @@
 
    @SuppressWarnings(""unchecked"")
    @Override
-   public JavaClass setSuperType(final String type)
+   public JavaClassSource setSuperType(final String type)
    {
       if (type == null || type.trim().isEmpty())
       {
"
93a609985abaebe149ced9f7749622ac168bb872,Matt Benson,JavaEnumImpl.java,MODIFY,addEnumConstant -> [String declaration] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
index 3aa1db4..8d43f72 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
@@ -15,16 +15,17 @@
 import org.eclipse.jdt.core.dom.EnumConstantDeclaration;
 import org.eclipse.jdt.core.dom.EnumDeclaration;
 import org.eclipse.jface.text.Document;
-import org.jboss.forge.parser.java.ReadEnumConstant.EnumConstant;
-import org.jboss.forge.parser.java.ReadJavaEnum.JavaEnum;
 import org.jboss.forge.parser.java.SourceType;
+import org.jboss.forge.parser.java.source.EnumConstantSource;
+import org.jboss.forge.parser.java.source.JavaEnumSource;
+import org.jboss.forge.parser.java.source.JavaSource;
 
 /**
  * Represents a Java Source File containing an Enum Type.
  *
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
-public class JavaEnumImpl extends AbstractJavaSourceMemberHolder<JavaEnum> implements JavaEnum
+public class JavaEnumImpl extends AbstractJavaSourceMemberHolder<JavaEnumSource> implements JavaEnumSource
 {
    public JavaEnumImpl(JavaSource<?> enclosingType, final Document document, final CompilationUnit unit,
             BodyDeclaration body)
@@ -33,9 +34,9 @@
    }
 
    @Override
-   public List<EnumConstant> getEnumConstants()
+   public List<EnumConstantSource> getEnumConstants()
    {
-      List<EnumConstant> result = new ArrayList<EnumConstant>();
+      List<EnumConstantSource> result = new ArrayList<EnumConstantSource>();
 
       for (Object o : (((EnumDeclaration) getBodyDeclaration()).enumConstants()))
       {
@@ -48,7 +49,7 @@
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public EnumConstant addEnumConstant()
+   public EnumConstantSource addEnumConstant()
    {
       EnumConstantImpl enumConst = new EnumConstantImpl(this);
       EnumDeclaration enumDeclaration = (EnumDeclaration) getBodyDeclaration();
@@ -60,7 +61,7 @@
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public EnumConstant addEnumConstant(final String declaration)
+   public EnumConstantSource addEnumConstant(final String declaration)
    {
       EnumConstantImpl enumConst = new EnumConstantImpl(this, declaration);
 
@@ -72,9 +73,9 @@
    }
 
    @Override
-   public EnumConstant getEnumConstant(String name)
+   public EnumConstantSource getEnumConstant(String name)
    {
-      for (EnumConstant enumConst : getEnumConstants())
+      for (EnumConstantSource enumConst : getEnumConstants())
       {
          if (enumConst.getName().equals(name))
          {
@@ -85,7 +86,7 @@
    }
 
    @Override
-   protected JavaEnum updateTypeNames(final String newName)
+   protected JavaEnumSource updateTypeNames(final String newName)
    {
       return this;
    }
"
93a609985abaebe149ced9f7749622ac168bb872,Matt Benson,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
index e6964fb..b5850f7 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
@@ -15,25 +15,26 @@
 import org.eclipse.jface.text.Document;
 import org.eclipse.text.edits.TextEdit;
 import org.jboss.forge.parser.ParserException;
-import org.jboss.forge.parser.java.ReadAnnotation;
-import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
-import org.jboss.forge.parser.java.Import;
-import org.jboss.forge.parser.java.ReadJavaPackageInfo.JavaPackageInfo;
-import org.jboss.forge.parser.java.ReadJavaSource;
-import org.jboss.forge.parser.java.ReadMember.Member;
+import org.jboss.forge.parser.java.Annotation;
+import org.jboss.forge.parser.java.JavaType;
 import org.jboss.forge.parser.java.SourceType;
 import org.jboss.forge.parser.java.SyntaxError;
 import org.jboss.forge.parser.java.Visibility;
 import org.jboss.forge.parser.java.ast.AnnotationAccessor;
 import org.jboss.forge.parser.java.ast.ModifierAccessor;
 import org.jboss.forge.parser.java.ast.TypeDeclarationFinderVisitor;
+import org.jboss.forge.parser.java.source.AnnotationSource;
+import org.jboss.forge.parser.java.source.Import;
+import org.jboss.forge.parser.java.source.JavaPackageInfoSource;
+import org.jboss.forge.parser.java.source.JavaSource;
+import org.jboss.forge.parser.java.source.MemberSource;
 import org.jboss.forge.parser.java.util.Formatter;
 import org.jboss.forge.parser.java.util.Strings;
 import org.jboss.forge.parser.java.util.Types;
 import org.jboss.forge.parser.spi.JavaParserImpl;
 import org.jboss.forge.parser.spi.WildcardImportResolver;
 
-public class JavaPackageInfoImpl implements JavaPackageInfo
+public class JavaPackageInfoImpl implements JavaPackageInfoSource
 {
 
    public JavaPackageInfoImpl(JavaSource<?> enclosingType, Document document,
@@ -57,7 +58,7 @@
       return ""package-info"";
    }
 
-   private final AnnotationAccessor<JavaPackageInfo, JavaPackageInfo> annotations = new AnnotationAccessor<JavaPackageInfo, JavaPackageInfo>();
+   private final AnnotationAccessor<JavaPackageInfoSource, JavaPackageInfoSource> annotations = new AnnotationAccessor<JavaPackageInfoSource, JavaPackageInfoSource>();
    private final ModifierAccessor modifiers = new ModifierAccessor();
 
    protected final Document document;
@@ -78,25 +79,25 @@
     * Annotation modifiers
     */
    @Override
-   public Annotation<JavaPackageInfo> addAnnotation()
+   public AnnotationSource<JavaPackageInfoSource> addAnnotation()
    {
       return annotations.addAnnotation(this, getPackageDeclaration());
    }
 
    @Override
-   public Annotation<JavaPackageInfo> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
+   public AnnotationSource<JavaPackageInfoSource> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
    {
       return annotations.addAnnotation(this, getPackageDeclaration(), clazz.getName());
    }
 
    @Override
-   public Annotation<JavaPackageInfo> addAnnotation(final String className)
+   public AnnotationSource<JavaPackageInfoSource> addAnnotation(final String className)
    {
       return annotations.addAnnotation(this, getPackageDeclaration(), className);
    }
 
    @Override
-   public List<Annotation<JavaPackageInfo>> getAnnotations()
+   public List<AnnotationSource<JavaPackageInfoSource>> getAnnotations()
    {
       return annotations.getAnnotations(this, getPackageDeclaration());
    }
@@ -114,19 +115,19 @@
    }
 
    @Override
-   public JavaPackageInfo removeAnnotation(final ReadAnnotation<JavaPackageInfo> annotation)
+   public JavaPackageInfoSource removeAnnotation(final Annotation<JavaPackageInfoSource> annotation)
    {
       return annotations.removeAnnotation(this, getPackageDeclaration(), annotation);
    }
 
    @Override
-   public Annotation<JavaPackageInfo> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
+   public AnnotationSource<JavaPackageInfoSource> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
    {
       return annotations.getAnnotation(this, getPackageDeclaration(), type);
    }
 
    @Override
-   public Annotation<JavaPackageInfo> getAnnotation(final String type)
+   public AnnotationSource<JavaPackageInfoSource> getAnnotation(final String type)
    {
       return annotations.getAnnotation(this, getPackageDeclaration(), type);
    }
@@ -142,7 +143,7 @@
    }
 
    @Override
-   public <T extends ReadJavaSource<?>> Import addImport(final T type)
+   public <T extends JavaType<?>> Import addImport(final T type)
    {
       String qualifiedName = type.getQualifiedName();
       return this.addImport(qualifiedName);
@@ -202,7 +203,7 @@
    }
 
    @Override
-   public <T extends ReadJavaSource<?>> Import getImport(final T type)
+   public <T extends JavaType<?>> Import getImport(final T type)
    {
       return getImport(type.getQualifiedName());
    }
@@ -234,7 +235,7 @@
    }
 
    @Override
-   public <T extends ReadJavaSource<T>> boolean hasImport(final T type)
+   public <T extends JavaType<T>> boolean hasImport(final T type)
    {
       return hasImport(type.getQualifiedName());
    }
@@ -385,7 +386,7 @@
    }
 
    @Override
-   public JavaPackageInfo removeImport(final String name)
+   public JavaPackageInfoSource removeImport(final String name)
    {
       for (Import i : getImports())
       {
@@ -399,19 +400,19 @@
    }
 
    @Override
-   public JavaPackageInfo removeImport(final Class<?> clazz)
+   public JavaPackageInfoSource removeImport(final Class<?> clazz)
    {
       return removeImport(clazz.getName());
    }
 
    @Override
-   public <T extends ReadJavaSource<?>> JavaPackageInfo removeImport(final T type)
+   public <T extends JavaType<?>> JavaPackageInfoSource removeImport(final T type)
    {
       return removeImport(type.getQualifiedName());
    }
 
    @Override
-   public JavaPackageInfo removeImport(final Import imprt)
+   public JavaPackageInfoSource removeImport(final Import imprt)
    {
       Object internal = imprt.getInternal();
       if (unit.imports().contains(internal))
@@ -422,7 +423,7 @@
    }
 
    @Override
-   public List<Member<JavaPackageInfo, ?>> getMembers()
+   public List<MemberSource<JavaPackageInfoSource, ?>> getMembers()
    {
       return Collections.emptyList();
    }
@@ -435,7 +436,7 @@
    }
 
    @Override
-   public JavaPackageInfo setName(final String name)
+   public JavaPackageInfoSource setName(final String name)
    {
       throw new UnsupportedOperationException(""Changing name of ["" + getQualifiedName() + ""] not supported."");
    }
@@ -445,7 +446,7 @@
    {
       String result = getName();
 
-      ReadJavaSource<?> enclosingType = this;
+      JavaType<?> enclosingType = this;
       while (enclosingType != enclosingType.getEnclosingType())
       {
          enclosingType = getEnclosingType();
@@ -464,7 +465,7 @@
    {
       String result = getName();
 
-      ReadJavaSource<?> enclosingType = this;
+      JavaType<?> enclosingType = this;
       while (enclosingType != enclosingType.getEnclosingType())
       {
          enclosingType = getEnclosingType();
@@ -496,7 +497,7 @@
    }
 
    @Override
-   public JavaPackageInfo setPackage(final String name)
+   public JavaPackageInfoSource setPackage(final String name)
    {
       if (unit.getPackage() == null)
       {
@@ -507,7 +508,7 @@
    }
 
    @Override
-   public JavaPackageInfo setDefaultPackage()
+   public JavaPackageInfoSource setDefaultPackage()
    {
       unit.setPackage(null);
       return this;
@@ -529,7 +530,7 @@
    }
 
    @Override
-   public JavaPackageInfo setPackagePrivate()
+   public JavaPackageInfoSource setPackagePrivate()
    {
       modifiers.clearVisibility(getPackageDeclaration());
       return this;
@@ -542,7 +543,7 @@
    }
 
    @Override
-   public JavaPackageInfo setPublic()
+   public JavaPackageInfoSource setPublic()
    {
       modifiers.clearVisibility(getPackageDeclaration());
       modifiers.addModifier(getPackageDeclaration(), ModifierKeyword.PUBLIC_KEYWORD);
@@ -556,7 +557,7 @@
    }
 
    @Override
-   public JavaPackageInfo setPrivate()
+   public JavaPackageInfoSource setPrivate()
    {
       modifiers.clearVisibility(getPackageDeclaration());
       modifiers.addModifier(getPackageDeclaration(), ModifierKeyword.PRIVATE_KEYWORD);
@@ -570,7 +571,7 @@
    }
 
    @Override
-   public JavaPackageInfo setProtected()
+   public JavaPackageInfoSource setProtected()
    {
       modifiers.clearVisibility(getPackageDeclaration());
       modifiers.addModifier(getPackageDeclaration(), ModifierKeyword.PROTECTED_KEYWORD);
@@ -584,7 +585,7 @@
    }
 
    @Override
-   public JavaPackageInfo setVisibility(final Visibility scope)
+   public JavaPackageInfoSource setVisibility(final Visibility scope)
    {
       return Visibility.set(this, scope);
    }
@@ -593,7 +594,7 @@
     * Non-manipulation methods.
     */
    /**
-    * Return this {@link ReadJavaSource} file as a String
+    * Return this {@link JavaType} file as a String
     */
    @Override
    public String toString()
@@ -620,7 +621,7 @@
    }
 
    @Override
-   public JavaPackageInfo getOrigin()
+   public JavaPackageInfoSource getOrigin()
    {
       return this;
    }
"
93a609985abaebe149ced9f7749622ac168bb872,Matt Benson,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java
index 04c7b6c..5839fbf 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java
@@ -22,25 +22,25 @@
 import org.eclipse.jdt.core.dom.Statement;
 import org.eclipse.jdt.core.dom.VariableDeclaration;
 import org.jboss.forge.parser.JavaParser;
-import org.jboss.forge.parser.java.ReadAnnotation;
-import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
-import org.jboss.forge.parser.java.ReadJavaClass.JavaClass;
-import org.jboss.forge.parser.java.ReadJavaSource;
-import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
-import org.jboss.forge.parser.java.ReadMethod.Method;
-import org.jboss.forge.parser.java.ReadParameter.Parameter;
+import org.jboss.forge.parser.java.Annotation;
+import org.jboss.forge.parser.java.JavaType;
 import org.jboss.forge.parser.java.Type;
 import org.jboss.forge.parser.java.Visibility;
 import org.jboss.forge.parser.java.ast.AnnotationAccessor;
 import org.jboss.forge.parser.java.ast.ModifierAccessor;
+import org.jboss.forge.parser.java.source.AnnotationSource;
+import org.jboss.forge.parser.java.source.JavaClassSource;
+import org.jboss.forge.parser.java.source.JavaSource;
+import org.jboss.forge.parser.java.source.MethodSource;
+import org.jboss.forge.parser.java.source.ParameterSource;
 import org.jboss.forge.parser.java.util.Types;
 
 /**
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
-public class MethodImpl<O extends JavaSource<O>> implements Method<O>
+public class MethodImpl<O extends JavaSource<O>> implements MethodSource<O>
 {
-   private final AnnotationAccessor<O, Method<O>> annotations = new AnnotationAccessor<O, Method<O>>();
+   private final AnnotationAccessor<O, MethodSource<O>> annotations = new AnnotationAccessor<O, MethodSource<O>>();
    private final ModifierAccessor modifiers = new ModifierAccessor();
 
    private O parent = null;
@@ -73,8 +73,8 @@
       init(parent);
 
       String stub = ""public class Stub { "" + method + "" }"";
-      JavaClass temp = (JavaClass) JavaParser.parse(stub);
-      List<Method<JavaClass>> methods = temp.getMethods();
+      JavaClassSource temp = (JavaClassSource) JavaParser.parse(stub);
+      List<MethodSource<JavaClassSource>> methods = temp.getMethods();
       MethodDeclaration newMethod = (MethodDeclaration) methods.get(0).getInternal();
       MethodDeclaration subtree = (MethodDeclaration) ASTNode.copySubtree(cu.getAST(), newMethod);
       this.method = subtree;
@@ -87,8 +87,8 @@
                .scope()) + "" "";
       signature += this.getName() + ""("";
 
-      List<Parameter<O>> parameters = this.getParameters();
-      for (Parameter<O> p : parameters)
+      List<ParameterSource<O>> parameters = this.getParameters();
+      for (ParameterSource<O> p : parameters)
       {
          signature += p.getType();
          if (parameters.indexOf(p) < (parameters.size() - 1))
@@ -106,13 +106,13 @@
     */
 
    @Override
-   public Annotation<O> addAnnotation()
+   public AnnotationSource<O> addAnnotation()
    {
       return annotations.addAnnotation(this, method);
    }
 
    @Override
-   public Annotation<O> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
+   public AnnotationSource<O> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
    {
       if (!parent.hasImport(clazz))
       {
@@ -122,13 +122,13 @@
    }
 
    @Override
-   public Annotation<O> addAnnotation(final String className)
+   public AnnotationSource<O> addAnnotation(final String className)
    {
       return annotations.addAnnotation(this, method, className);
    }
 
    @Override
-   public List<Annotation<O>> getAnnotations()
+   public List<AnnotationSource<O>> getAnnotations()
    {
       return annotations.getAnnotations(this, method);
    }
@@ -146,19 +146,19 @@
    }
 
    @Override
-   public Method<O> removeAnnotation(final ReadAnnotation<O> annotation)
+   public MethodSource<O> removeAnnotation(final Annotation<O> annotation)
    {
       return annotations.removeAnnotation(this, method, annotation);
    }
 
    @Override
-   public Annotation<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
+   public AnnotationSource<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
    {
       return annotations.getAnnotation(this, method, type);
    }
 
    @Override
-   public Annotation<O> getAnnotation(final String type)
+   public AnnotationSource<O> getAnnotation(final String type)
    {
       return annotations.getAnnotation(this, method, type);
    }
@@ -183,11 +183,11 @@
    }
 
    @Override
-   public Method<O> setBody(final String body)
+   public MethodSource<O> setBody(final String body)
    {
       String stub = ""public class Stub { public void method() {"" + body + ""} }"";
-      JavaClass temp = (JavaClass) JavaParser.parse(stub);
-      List<Method<JavaClass>> methods = temp.getMethods();
+      JavaClassSource temp = (JavaClassSource) JavaParser.parse(stub);
+      List<MethodSource<JavaClassSource>> methods = temp.getMethods();
       Block block = ((MethodDeclaration) methods.get(0).getInternal()).getBody();
 
       block = (Block) ASTNode.copySubtree(method.getAST(), block);
@@ -197,7 +197,7 @@
    }
 
    @Override
-   public Method<O> setConstructor(final boolean constructor)
+   public MethodSource<O> setConstructor(final boolean constructor)
    {
       method.setConstructor(constructor);
       if (isConstructor())
@@ -260,17 +260,17 @@
    }
 
    @Override
-   public Method<O> setReturnType(final Class<?> type)
+   public MethodSource<O> setReturnType(final Class<?> type)
    {
       return setReturnType(type.getSimpleName());
    }
 
    @Override
-   public Method<O> setReturnType(final String typeName)
+   public MethodSource<O> setReturnType(final String typeName)
    {
       String stub = ""public class Stub { public "" + typeName + "" method() {} }"";
-      JavaClass temp = (JavaClass) JavaParser.parse(stub);
-      List<Method<JavaClass>> methods = temp.getMethods();
+      JavaClassSource temp = (JavaClassSource) JavaParser.parse(stub);
+      List<MethodSource<JavaClassSource>> methods = temp.getMethods();
       org.eclipse.jdt.core.dom.Type returnType = ((MethodDeclaration) methods.get(0).getInternal()).getReturnType2();
 
       returnType = (org.eclipse.jdt.core.dom.Type) ASTNode.copySubtree(method.getAST(), returnType);
@@ -280,7 +280,7 @@
    }
 
    @Override
-   public Method<O> setReturnType(final ReadJavaSource<?> type)
+   public MethodSource<O> setReturnType(final JavaType<?> type)
    {
       return setReturnType(type.getName());
    }
@@ -292,7 +292,7 @@
    }
 
    @Override
-   public Method<O> setReturnTypeVoid()
+   public MethodSource<O> setReturnTypeVoid()
    {
       method.setReturnType2(null);
       return this;
@@ -309,7 +309,7 @@
    }
 
    @Override
-   public Method<O> setAbstract(final boolean abstrct)
+   public MethodSource<O> setAbstract(final boolean abstrct)
    {
       if (abstrct)
       {
@@ -329,7 +329,7 @@
    }
 
    @Override
-   public Method<O> setFinal(final boolean finl)
+   public MethodSource<O> setFinal(final boolean finl)
    {
       if (finl)
          modifiers.addModifier(method, ModifierKeyword.FINAL_KEYWORD);
@@ -345,7 +345,7 @@
    }
 
    @Override
-   public Method<O> setStatic(final boolean statc)
+   public MethodSource<O> setStatic(final boolean statc)
    {
       if (statc)
          modifiers.addModifier(method, ModifierKeyword.STATIC_KEYWORD);
@@ -361,7 +361,7 @@
    }
 
    @Override
-   public Method<O> setName(final String name)
+   public MethodSource<O> setName(final String name)
    {
       if (method.isConstructor())
       {
@@ -373,11 +373,11 @@
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public Method<O> setParameters(final String parameters)
+   public MethodSource<O> setParameters(final String parameters)
    {
       String stub = ""public class Stub { public void method( "" + parameters + "" ) {} }"";
-      JavaClass temp = (JavaClass) JavaParser.parse(stub);
-      List<Method<JavaClass>> methods = temp.getMethods();
+      JavaClassSource temp = (JavaClassSource) JavaParser.parse(stub);
+      List<MethodSource<JavaClassSource>> methods = temp.getMethods();
       List<VariableDeclaration> astParameters = ((MethodDeclaration) methods.get(0).getInternal()).parameters();
 
       method.parameters().clear();
@@ -391,9 +391,9 @@
    }
 
    @Override
-   public List<Parameter<O>> getParameters()
+   public List<ParameterSource<O>> getParameters()
    {
-      List<Parameter<O>> results = new ArrayList<Parameter<O>>();
+      List<ParameterSource<O>> results = new ArrayList<ParameterSource<O>>();
       @SuppressWarnings(""unchecked"")
       List<SingleVariableDeclaration> parameters = method.parameters();
       for (SingleVariableDeclaration param : parameters)
@@ -414,7 +414,7 @@
    }
 
    @Override
-   public Method<O> setPackagePrivate()
+   public MethodSource<O> setPackagePrivate()
    {
       modifiers.clearVisibility(method);
       return this;
@@ -427,7 +427,7 @@
    }
 
    @Override
-   public Method<O> setPublic()
+   public MethodSource<O> setPublic()
    {
       modifiers.clearVisibility(method);
       modifiers.addModifier(method, ModifierKeyword.PUBLIC_KEYWORD);
@@ -441,7 +441,7 @@
    }
 
    @Override
-   public Method<O> setPrivate()
+   public MethodSource<O> setPrivate()
    {
       modifiers.clearVisibility(method);
       modifiers.addModifier(method, ModifierKeyword.PRIVATE_KEYWORD);
@@ -455,7 +455,7 @@
    }
 
    @Override
-   public Method<O> setProtected()
+   public MethodSource<O> setProtected()
    {
       modifiers.clearVisibility(method);
       modifiers.addModifier(method, ModifierKeyword.PROTECTED_KEYWORD);
@@ -469,7 +469,7 @@
    }
 
    @Override
-   public Method<O> setVisibility(final Visibility scope)
+   public MethodSource<O> setVisibility(final Visibility scope)
    {
       return Visibility.set(this, scope);
    }
@@ -536,14 +536,14 @@
    }
 
    @Override
-   public Method<O> addThrows(final Class<? extends Exception> type)
+   public MethodSource<O> addThrows(final Class<? extends Exception> type)
    {
       return addThrows(type.getName());
    }
 
    @Override
    @SuppressWarnings({ ""unchecked"", ""rawtypes"" })
-   public Method<O> addThrows(final String type)
+   public MethodSource<O> addThrows(final String type)
    {
       String packg = Types.getPackage(type);
       String name = Types.toSimpleName(type);
@@ -576,13 +576,13 @@
    }
 
    @Override
-   public Method<O> removeThrows(final Class<? extends Exception> type)
+   public MethodSource<O> removeThrows(final Class<? extends Exception> type)
    {
       return removeThrows(type.getName());
    }
 
    @Override
-   public Method<O> removeThrows(final String type)
+   public MethodSource<O> removeThrows(final String type)
    {
       List<?> list = (List<?>) method.getStructuralProperty(MethodDeclaration.THROWN_EXCEPTIONS_PROPERTY);
 
"
93a609985abaebe149ced9f7749622ac168bb872,Matt Benson,ParameterImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/ParameterImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/ParameterImpl.java
index 9357763..0cd30c4 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/ParameterImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/ParameterImpl.java
@@ -10,20 +10,20 @@
 
 import org.eclipse.jdt.core.dom.SimpleName;
 import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
-import org.jboss.forge.parser.java.ReadAnnotation;
-import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
-import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
-import org.jboss.forge.parser.java.ReadParameter.Parameter;
+import org.jboss.forge.parser.java.Annotation;
 import org.jboss.forge.parser.java.Type;
 import org.jboss.forge.parser.java.ast.AnnotationAccessor;
+import org.jboss.forge.parser.java.source.AnnotationSource;
+import org.jboss.forge.parser.java.source.JavaSource;
+import org.jboss.forge.parser.java.source.ParameterSource;
 
 /**
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * 
  */
-public class ParameterImpl<O extends JavaSource<O>> implements Parameter<O>
+public class ParameterImpl<O extends JavaSource<O>> implements ParameterSource<O>
 {
-   private final AnnotationAccessor<O, Parameter<O>> annotations = new AnnotationAccessor<O, Parameter<O>>();
+   private final AnnotationAccessor<O, ParameterSource<O>> annotations = new AnnotationAccessor<O, ParameterSource<O>>();
    private final O parent;
    private final SingleVariableDeclaration param;
 
@@ -64,13 +64,13 @@
    }
 
    @Override
-   public Annotation<O> addAnnotation()
+   public AnnotationSource<O> addAnnotation()
    {
       return annotations.addAnnotation(this, param);
    }
 
    @Override
-   public Annotation<O> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
+   public AnnotationSource<O> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
    {
       if (parent.requiresImport(clazz))
       {
@@ -80,13 +80,13 @@
    }
 
    @Override
-   public Annotation<O> addAnnotation(final String className)
+   public AnnotationSource<O> addAnnotation(final String className)
    {
       return annotations.addAnnotation(this, param, className);
    }
 
    @Override
-   public List<Annotation<O>> getAnnotations()
+   public List<AnnotationSource<O> > getAnnotations()
    {
       return annotations.getAnnotations(this, param);
    }
@@ -104,19 +104,19 @@
    }
 
    @Override
-   public Annotation<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
+   public AnnotationSource<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
    {
       return annotations.getAnnotation(this, param, type);
    }
 
    @Override
-   public Annotation<O> getAnnotation(final String type)
+   public AnnotationSource<O> getAnnotation(final String type)
    {
       return annotations.getAnnotation(this, param, type);
    }
 
    @Override
-   public Parameter<O> removeAnnotation(final ReadAnnotation<O> annotation)
+   public ParameterSource<O> removeAnnotation(final Annotation<O> annotation)
    {
       return annotations.removeAnnotation(this, param, annotation);
    }
"
93a609985abaebe149ced9f7749622ac168bb872,Matt Benson,Formatter.java,MODIFY,format -> [String source] | [JavaClass javaClass],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/util/Formatter.java b/impl/src/main/java/org/jboss/forge/parser/java/util/Formatter.java
index deb3bcd..946f8cc 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/util/Formatter.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/util/Formatter.java
@@ -17,14 +17,14 @@
 import org.eclipse.jface.text.Document;
 import org.eclipse.jface.text.IDocument;
 import org.eclipse.text.edits.TextEdit;
-import org.jboss.forge.parser.java.ReadJavaClass;
+import org.jboss.forge.parser.java.JavaClass;
 
 /**
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
 public abstract class Formatter
 {
-   public static String format(ReadJavaClass javaClass)
+   public static String format(JavaClass javaClass)
    {
       return format(javaClass.toString());
    }
"
93a609985abaebe149ced9f7749622ac168bb872,Matt Benson,JavaParserImpl.java,MODIFY,parse -> [String data] | [InputStream data],"diff --git a/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java b/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
index 32050a7..3e95af2 100644
--- a/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
@@ -26,19 +26,19 @@
 import org.eclipse.jdt.internal.compiler.util.Util;
 import org.eclipse.jface.text.Document;
 import org.jboss.forge.parser.ParserException;
-import org.jboss.forge.parser.java.ReadJavaAnnotation.JavaAnnotation;
-import org.jboss.forge.parser.java.ReadJavaClass.JavaClass;
-import org.jboss.forge.parser.java.ReadJavaEnum.JavaEnum;
-import org.jboss.forge.parser.java.ReadJavaInterface.JavaInterface;
-import org.jboss.forge.parser.java.ReadJavaPackageInfo.JavaPackageInfo;
-import org.jboss.forge.parser.java.ReadJavaSource;
-import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
+import org.jboss.forge.parser.java.JavaType;
 import org.jboss.forge.parser.java.ast.TypeDeclarationFinderVisitor;
 import org.jboss.forge.parser.java.impl.JavaAnnotationImpl;
 import org.jboss.forge.parser.java.impl.JavaClassImpl;
 import org.jboss.forge.parser.java.impl.JavaEnumImpl;
 import org.jboss.forge.parser.java.impl.JavaInterfaceImpl;
 import org.jboss.forge.parser.java.impl.JavaPackageInfoImpl;
+import org.jboss.forge.parser.java.source.JavaAnnotationSource;
+import org.jboss.forge.parser.java.source.JavaClassSource;
+import org.jboss.forge.parser.java.source.JavaEnumSource;
+import org.jboss.forge.parser.java.source.JavaInterfaceSource;
+import org.jboss.forge.parser.java.source.JavaPackageInfoSource;
+import org.jboss.forge.parser.java.source.JavaSource;
 
 /**
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
@@ -47,7 +47,7 @@
 {
 
    @Override
-   public ReadJavaSource<?> parse(final InputStream data)
+   public JavaType<?> parse(final InputStream data)
    {
       try
       {
@@ -65,7 +65,7 @@
    }
 
    @SuppressWarnings({ ""rawtypes"", ""unchecked"" })
-   private ReadJavaSource<?> parse(final String data)
+   private JavaType<?> parse(final String data)
    {
       Document document = new Document(data);
       ASTParser parser = ASTParser.newParser(AST.JLS4);
@@ -98,8 +98,8 @@
    }
 
    /**
-    * Create a {@link ReadJavaSource} instance from the given {@link Document}, {@link CompilationUnit},
-    * {@link TypeDeclaration}, and enclosing {@link ReadJavaSource} type.
+    * Create a {@link JavaType} instance from the given {@link Document}, {@link CompilationUnit},
+    * {@link TypeDeclaration}, and enclosing {@link JavaType} type.
     */
    public static JavaSource<?> getJavaSource(JavaSource<?> enclosingType, Document document, CompilationUnit unit,
             ASTNode declaration)
@@ -143,19 +143,19 @@
    {
       if (type != null)
       {
-         if (type.isAssignableFrom(JavaClass.class))
+         if (type.isAssignableFrom(JavaClassSource.class))
             return (T) parse(""public class JavaClass { }"");
    
-         if (type.isAssignableFrom(JavaEnum.class))
+         if (type.isAssignableFrom(JavaEnumSource.class))
             return (T) parse(""public enum JavaEnum { }"");
    
-         if (type.isAssignableFrom(JavaAnnotation.class))
+         if (type.isAssignableFrom(JavaAnnotationSource.class))
             return (T) parse(""public @interface JavaAnnotation { }"");
    
-         if (type.isAssignableFrom(JavaInterface.class))
+         if (type.isAssignableFrom(JavaInterfaceSource.class))
             return (T) parse(""public interface JavaInterface { }"");
    
-         if (type.isAssignableFrom(JavaPackageInfo.class))
+         if (type.isAssignableFrom(JavaPackageInfoSource.class))
             return (T) parse(""package org.example;"");
       }
       return null;
"
93a609985abaebe149ced9f7749622ac168bb872,Matt Benson,MethodSignatureTest.java,MODIFY,"assertVisibility -> [String visibility, Method method] | [Visibility visibility, MethodSource method]","diff --git a/impl/src/test/java/org/jboss/forge/test/parser/java/MethodSignatureTest.java b/impl/src/test/java/org/jboss/forge/test/parser/java/MethodSignatureTest.java
index 1c29cbf..a56db90 100644
--- a/impl/src/test/java/org/jboss/forge/test/parser/java/MethodSignatureTest.java
+++ b/impl/src/test/java/org/jboss/forge/test/parser/java/MethodSignatureTest.java
@@ -11,10 +11,10 @@
 import java.util.List;
 
 import org.jboss.forge.parser.JavaParser;
-import org.jboss.forge.parser.java.ReadJavaClass.JavaClass;
-import org.jboss.forge.parser.java.ReadMethod.Method;
-import org.jboss.forge.parser.java.ReadParameter.Parameter;
 import org.jboss.forge.parser.java.Visibility;
+import org.jboss.forge.parser.java.source.JavaClassSource;
+import org.jboss.forge.parser.java.source.MethodSource;
+import org.jboss.forge.parser.java.source.ParameterSource;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -26,7 +26,7 @@
    @Test
    public void testEmptyMethodSignature() throws Exception
    {
-      Method<JavaClass> method = JavaParser.create(JavaClass.class).addMethod(""public void hello()"");
+      MethodSource<JavaClassSource> method = JavaParser.create(JavaClassSource.class).addMethod(""public void hello()"");
       String signature = method.toSignature();
       assertEquals(""public hello() : void"", signature);
    }
@@ -34,7 +34,7 @@
    @Test
    public void testMethodSignatureParams() throws Exception
    {
-      Method<JavaClass> method = JavaParser.create(JavaClass.class).addMethod(""public void hello(String foo, int bar)"");
+      MethodSource<JavaClassSource> method = JavaParser.create(JavaClassSource.class).addMethod(""public void hello(String foo, int bar)"");
       String signature = method.toSignature();
       assertEquals(""public hello(String, int) : void"", signature);
    }
@@ -42,8 +42,8 @@
    @Test
    public void testMethodParams() throws Exception
    {
-      Method<JavaClass> method = JavaParser.create(JavaClass.class).addMethod(""public void hello(String foo, int bar)"");
-      List<Parameter<JavaClass>> parameters = method.getParameters();
+      MethodSource<JavaClassSource> method = JavaParser.create(JavaClassSource.class).addMethod(""public void hello(String foo, int bar)"");
+      List<ParameterSource<JavaClassSource>> parameters = method.getParameters();
 
       Assert.assertEquals(""String"", parameters.get(0).getTypeInspector().toString());
       Assert.assertEquals(""int"", parameters.get(1).getTypeInspector().toString());
@@ -52,14 +52,14 @@
    @Test(expected = UnsupportedOperationException.class)
    public void testUnmodifiableMethodParams() throws Exception
    {
-      JavaParser.create(JavaClass.class).addMethod(""public void hello(String foo, int bar)"").getParameters().add(null);
+      JavaParser.create(JavaClassSource.class).addMethod(""public void hello(String foo, int bar)"").getParameters().add(null);
    }
 
    @Test
    public void testMethodVisibility() throws Exception {
-       JavaClass javaClass = JavaParser.create(JavaClass.class);
+       JavaClassSource javaClass = JavaParser.create(JavaClassSource.class);
 
-       Method<JavaClass> method = javaClass.addMethod(""public void hello()"");
+       MethodSource<JavaClassSource> method = javaClass.addMethod(""public void hello()"");
        assertVisibility(Visibility.PUBLIC, method);
        assertVisibility(""public"", method);
 
@@ -78,8 +78,8 @@
 
    @Test
    public void testMethodVisibilityWithSetter() throws Exception {
-       JavaClass javaClass = JavaParser.create(JavaClass.class);
-       Method<JavaClass> method = javaClass.addMethod().setName(""hello"");
+       JavaClassSource javaClass = JavaParser.create(JavaClassSource.class);
+       MethodSource<JavaClassSource> method = javaClass.addMethod().setName(""hello"");
        assertVisibility("""", method);
 
        method.setVisibility(Visibility.PUBLIC);
@@ -95,11 +95,11 @@
        assertVisibility("""", method);
    }
 
-   private void assertVisibility(Visibility visibility, Method<JavaClass> method) {
+   private void assertVisibility(Visibility visibility, MethodSource<JavaClassSource> method) {
        Assert.assertEquals(visibility, method.getVisibility());
    }
 
-   private void assertVisibility(String visibility, Method<JavaClass> method) {
+   private void assertVisibility(String visibility, MethodSource<JavaClassSource> method) {
        Assert.assertEquals(visibility, method.getVisibility().toString());
    }
 }
"
93a609985abaebe149ced9f7749622ac168bb872,Matt Benson,AnnotationTest.java,MODIFY,setTarget -> [AnnotationTarget target] | [AnnotationTargetSource target],"diff --git a/impl/src/test/java/org/jboss/forge/test/parser/java/common/AnnotationTest.java b/impl/src/test/java/org/jboss/forge/test/parser/java/common/AnnotationTest.java
index 73dae74..c2487e7 100644
--- a/impl/src/test/java/org/jboss/forge/test/parser/java/common/AnnotationTest.java
+++ b/impl/src/test/java/org/jboss/forge/test/parser/java/common/AnnotationTest.java
@@ -17,9 +17,9 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import org.jboss.forge.parser.java.ReadAnnotation.Annotation;
-import org.jboss.forge.parser.java.ReadAnnotationTarget.AnnotationTarget;
-import org.jboss.forge.parser.java.ReadJavaSource.JavaSource;
+import org.jboss.forge.parser.java.source.AnnotationSource;
+import org.jboss.forge.parser.java.source.AnnotationTargetSource;
+import org.jboss.forge.parser.java.source.JavaSource;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -28,14 +28,14 @@
  */
 public abstract class AnnotationTest<O extends JavaSource<O>, T>
 {
-   private AnnotationTarget<O, T> target;
+   private AnnotationTargetSource<O, T> target;
 
-   protected AnnotationTarget<O, T> getTarget()
+   protected AnnotationTargetSource<O, T> getTarget()
    {
       return target;
    }
 
-   protected void setTarget(final AnnotationTarget<O, T> target)
+   protected void setTarget(final AnnotationTargetSource<O, T> target)
    {
       this.target = target;
    }
@@ -51,7 +51,7 @@
    @Test
    public void testParseAnnotation() throws Exception
    {
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
       assertEquals(5, annotations.size());
       assertEquals(""deprecation"", annotations.get(1).getStringValue());
       assertEquals(""deprecation"", annotations.get(1).getStringValue(""value""));
@@ -70,8 +70,8 @@
    public void testAddAnnotation() throws Exception
    {
       int size = target.getAnnotations().size();
-      Annotation<O> annotation = target.addAnnotation().setName(""RequestScoped"");
-      List<Annotation<O>> annotations = target.getAnnotations();
+      AnnotationSource<O> annotation = target.addAnnotation().setName(""RequestScoped"");
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
       assertEquals(size + 1, annotations.size());
       assertEquals(annotation, target.getAnnotations().get(size));
       assertEquals(""RequestScoped"", annotation.getName());
@@ -81,8 +81,8 @@
    public void testAddAnonymousAnnotation() throws Exception
    {
       int size = target.getAnnotations().size();
-      Annotation<O> annotation = target.addAnnotation();
-      List<Annotation<O>> annotations = target.getAnnotations();
+      AnnotationSource<O> annotation = target.addAnnotation();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
       assertEquals(size + 1, annotations.size());
       assertEquals(annotation, target.getAnnotations().get(size));
       assertEquals(""@MISSING"", annotation.toString());
@@ -92,8 +92,8 @@
    public void testAddAnnotationByClass() throws Exception
    {
       int size = target.getAnnotations().size();
-      Annotation<O> annotation = target.addAnnotation(Test.class);
-      List<Annotation<O>> annotations = target.getAnnotations();
+      AnnotationSource<O> annotation = target.addAnnotation(Test.class);
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
       assertEquals(size + 1, annotations.size());
       assertEquals(annotation, target.getAnnotations().get(size));
       assertEquals(Test.class.getSimpleName(), annotation.getName());
@@ -105,8 +105,8 @@
    public void testAddAnnotationByName() throws Exception
    {
       int size = target.getAnnotations().size();
-      Annotation<O> annotation = target.addAnnotation(""RequestScoped"");
-      List<Annotation<O>> annotations = target.getAnnotations();
+      AnnotationSource<O> annotation = target.addAnnotation(""RequestScoped"");
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
       assertEquals(size + 1, annotations.size());
       assertEquals(annotation, target.getAnnotations().get(size));
       assertEquals(""RequestScoped"", annotation.getName());
@@ -118,9 +118,9 @@
    public void testCanAddAnnotationDuplicate() throws Exception
    {
       int size = target.getAnnotations().size();
-      Annotation<O> anno1 = target.addAnnotation(Test.class);
-      Annotation<O> anno2 = target.addAnnotation(Test.class);
-      List<Annotation<O>> annotations = target.getAnnotations();
+      AnnotationSource<O> anno1 = target.addAnnotation(Test.class);
+      AnnotationSource<O> anno2 = target.addAnnotation(Test.class);
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
       assertEquals(size + 2, annotations.size());
       assertEquals(Test.class.getSimpleName(), anno1.getName());
       assertEquals(Test.class.getSimpleName(), anno2.getName());
@@ -141,9 +141,9 @@
    {
       target.addAnnotation(Test.class).setEnumValue(MockEnumType.FOO);
 
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
 
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       MockEnumType enumValue = annotation.getEnumValue(MockEnumType.class);
       assertEquals(MockEnumType.FOO, enumValue);
    }
@@ -153,9 +153,9 @@
    {
       target.addAnnotation(Test.class).setEnumValue(""name"", MockEnumType.BAR);
 
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
 
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       MockEnumType enumValue = annotation.getEnumValue(MockEnumType.class, ""name"");
       assertEquals(MockEnumType.BAR, enumValue);
    }
@@ -165,9 +165,9 @@
    {
       target.addAnnotation(Test.class).setEnumValue(MockEnumType.FOO, MockEnumType.BAR);
 
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
 
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       MockEnumType[] enumArrayValue = annotation.getEnumArrayValue(MockEnumType.class);
       assertArrayEquals(MockEnumType.values(), enumArrayValue);
    }
@@ -177,9 +177,9 @@
    {
       target.addAnnotation(Test.class).setEnumArrayValue(""name"", MockEnumType.FOO, MockEnumType.BAR);
 
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
 
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       MockEnumType[] enumArrayValue = annotation.getEnumArrayValue(MockEnumType.class, ""name"");
       assertArrayEquals(MockEnumType.values(), enumArrayValue);
    }
@@ -189,9 +189,9 @@
    {
       target.addAnnotation(Test.class).setClassValue(Integer.class);
 
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
 
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       assertEquals(Integer.class, annotation.getClassValue());
 
       annotation.setClassValue(int.class);
@@ -203,9 +203,9 @@
    {
       target.addAnnotation(Test.class).setClassValue(""type"", Integer.class);
 
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
 
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       assertEquals(Integer.class, annotation.getClassValue(""type""));
 
       annotation.setClassValue(""type"", int.class);
@@ -217,9 +217,9 @@
    {
       target.addAnnotation(Test.class).setClassArrayValue(Integer.class, int.class);
 
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
 
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       assertArrayEquals(new Class[] { Integer.class, int.class }, annotation.getClassArrayValue());
    }
 
@@ -228,9 +228,9 @@
    {
       target.addAnnotation(Test.class).setClassArrayValue(""types"", Integer.class, int.class);
 
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
 
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       assertArrayEquals(new Class[] { Integer.class, int.class }, annotation.getClassArrayValue(""types""));
    }
 
@@ -240,12 +240,12 @@
       target.addAnnotation(Test.class).setAnnotationValue().setName(""com.test.Foo"")
                .setEnumValue(ElementType.FIELD, ElementType.METHOD);
 
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
 
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       assertEquals(""@com.test.Foo({ElementType.FIELD,ElementType.METHOD})"", annotation.getLiteralValue());
-      
-      Annotation<O> nested = annotation.getAnnotationValue();
+
+      AnnotationSource<O> nested = annotation.getAnnotationValue();
       assertEquals(""com.test.Foo"", nested.getName());
       assertEquals(""{ElementType.FIELD,ElementType.METHOD}"", nested.getLiteralValue());
    }
@@ -255,12 +255,12 @@
    {
       target.addAnnotation(Test.class).setAnnotationValue(""foo"").setName(""com.test.Foo"").setStringValue(""bar"", ""baz"");
 
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
 
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       assertEquals(""@com.test.Foo(bar=\""baz\"")"", annotation.getLiteralValue(""foo""));
 
-      Annotation<O> nested = annotation.getAnnotationValue(""foo"");
+      AnnotationSource<O> nested = annotation.getAnnotationValue(""foo"");
       assertEquals(""com.test.Foo"", nested.getName());
       assertEquals(""baz"", nested.getStringValue(""bar""));
    }
@@ -269,14 +269,14 @@
    public void testAddNestedAnonymousAnnotationValue() throws Exception
    {
       target.addAnnotation(Test.class).setAnnotationValue()
-      .setEnumValue(ElementType.FIELD, ElementType.METHOD);
+               .setEnumValue(ElementType.FIELD, ElementType.METHOD);
 
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
 
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       assertEquals(""@MISSING({ElementType.FIELD,ElementType.METHOD})"", annotation.getLiteralValue());
 
-      Annotation<O> nested = annotation.getAnnotationValue();
+      AnnotationSource<O> nested = annotation.getAnnotationValue();
       assertEquals(""MISSING"", nested.getName());
       assertEquals(""{ElementType.FIELD,ElementType.METHOD}"", nested.getLiteralValue());
    }
@@ -286,12 +286,12 @@
    {
       target.addAnnotation(Test.class).setAnnotationValue(""foo"").setStringValue(""bar"", ""baz"");
 
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
 
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       assertEquals(""@MISSING(bar=\""baz\"")"", annotation.getLiteralValue(""foo""));
 
-      Annotation<O> nested = annotation.getAnnotationValue(""foo"");
+      AnnotationSource<O> nested = annotation.getAnnotationValue(""foo"");
       assertEquals(""MISSING"", nested.getName());
       assertEquals(""baz"", nested.getStringValue(""bar""));
    }
@@ -302,12 +302,12 @@
       target.addAnnotation(Test.class).setAnnotationValue().setName(""com.test.Foo"")
                .setAnnotationValue().setName(""com.test.Bar"");
 
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
 
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       assertEquals(""@com.test.Foo(@com.test.Bar)"", annotation.getLiteralValue());
 
-      Annotation<O> deeplyNested = annotation.getAnnotationValue().getAnnotationValue();
+      AnnotationSource<O> deeplyNested = annotation.getAnnotationValue().getAnnotationValue();
       assertEquals(""com.test.Bar"", deeplyNested.getName());
       assertTrue(deeplyNested.isMarker());
    }
@@ -318,12 +318,12 @@
       target.addAnnotation(Test.class).setAnnotationValue(""foo"").setName(""com.test.Foo"").setAnnotationValue(""bar"")
                .setName(""com.test.Bar"");
 
-      List<Annotation<O>> annotations = target.getAnnotations();
-      
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
+
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       assertEquals(""@com.test.Foo(bar=@com.test.Bar)"", annotation.getLiteralValue(""foo""));
 
-      Annotation<O> deeplyNested = annotation.getAnnotationValue(""foo"").getAnnotationValue(""bar"");
+      AnnotationSource<O> deeplyNested = annotation.getAnnotationValue(""foo"").getAnnotationValue(""bar"");
       assertEquals(""com.test.Bar"", deeplyNested.getName());
       assertTrue(deeplyNested.isMarker());
    }
@@ -332,14 +332,14 @@
    public void testAddDeeplyNestedAnonymousAnnotationValue() throws Exception
    {
       target.addAnnotation(Test.class).setAnnotationValue().setName(""com.test.Foo"")
-      .setAnnotationValue();
+               .setAnnotationValue();
 
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
 
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       assertEquals(""@com.test.Foo(@MISSING)"", annotation.getLiteralValue());
 
-      Annotation<O> deeplyNested = annotation.getAnnotationValue().getAnnotationValue();
+      AnnotationSource<O> deeplyNested = annotation.getAnnotationValue().getAnnotationValue();
       assertEquals(""MISSING"", deeplyNested.getName());
       assertTrue(deeplyNested.isMarker());
    }
@@ -349,12 +349,12 @@
    {
       target.addAnnotation(Test.class).setAnnotationValue(""foo"").setName(""com.test.Foo"").setAnnotationValue(""bar"");
 
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
 
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       assertEquals(""@com.test.Foo(bar=@MISSING)"", annotation.getLiteralValue(""foo""));
 
-      Annotation<O> deeplyNested = annotation.getAnnotationValue(""foo"").getAnnotationValue(""bar"");
+      AnnotationSource<O> deeplyNested = annotation.getAnnotationValue(""foo"").getAnnotationValue(""bar"");
       assertEquals(""MISSING"", deeplyNested.getName());
       assertTrue(deeplyNested.isMarker());
    }
@@ -366,10 +366,10 @@
 
       target.addAnnotation(Test.class).setLiteralValue(""435"");
 
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
       assertEquals(size + 1, annotations.size());
 
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       assertEquals(Test.class.getSimpleName(), annotation.getName());
       assertEquals(""435"", annotation.getLiteralValue());
    }
@@ -382,10 +382,10 @@
       target.addAnnotation(Test.class).setLiteralValue(""expected"", ""RuntimeException.class"")
                .setLiteralValue(""foo"", ""bar"");
 
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
       assertEquals(size + 1, annotations.size());
 
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       assertEquals(Test.class.getSimpleName(), annotation.getName());
       assertEquals(null, annotation.getLiteralValue());
       assertEquals(""RuntimeException.class"", annotation.getLiteralValue(""expected""));
@@ -396,7 +396,7 @@
    public void testAddValueConvertsToNormalAnnotation() throws Exception
    {
       target.addAnnotation(Test.class).setLiteralValue(""RuntimeException.class"");
-      Annotation<O> annotation = target.getAnnotations().get(target.getAnnotations().size() - 1);
+      AnnotationSource<O> annotation = target.getAnnotations().get(target.getAnnotations().size() - 1);
 
       assertEquals(""RuntimeException.class"", annotation.getLiteralValue());
       assertTrue(annotation.isSingleValue());
@@ -413,7 +413,7 @@
    @Test
    public void testAnnotationBeginsAsMarker() throws Exception
    {
-      Annotation<O> anno = target.addAnnotation(Test.class);
+      AnnotationSource<O> anno = target.addAnnotation(Test.class);
       assertTrue(anno.isMarker());
       assertFalse(anno.isSingleValue());
       assertFalse(anno.isNormal());
@@ -488,8 +488,8 @@
    {
       target.addAnnotation(Test.class).setLiteralValue(""expected"", ""RuntimeException.class"");
 
-      List<Annotation<O>> annotations = target.getAnnotations();
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       annotation.removeAllValues();
 
       assertEquals(0, annotation.getValues().size());
@@ -500,7 +500,7 @@
    {
       target.addAnnotation(Test.class).setLiteralValue(""expected"", ""RuntimeException.class"");
 
-      Annotation<O> annotation = target.getAnnotation(Test.class);
+      AnnotationSource<O> annotation = target.getAnnotation(Test.class);
       assertEquals(Test.class.getSimpleName(), annotation.getName());
       assertEquals(Test.class.getName(), annotation.getQualifiedName());
    }
@@ -513,10 +513,10 @@
       target.addAnnotation(Test.class)
                .setLiteralValue(""foo"", ""bar"").setLiteralValue(""foo"", ""baz"");
 
-      List<Annotation<O>> annotations = target.getAnnotations();
+      List<AnnotationSource<O>> annotations = target.getAnnotations();
       assertEquals(size + 1, annotations.size());
 
-      Annotation<O> annotation = annotations.get(annotations.size() - 1);
+      AnnotationSource<O> annotation = annotations.get(annotations.size() - 1);
       assertEquals(Test.class.getSimpleName(), annotation.getName());
       assertEquals(null, annotation.getLiteralValue());
       assertEquals(""baz"", annotation.getLiteralValue(""foo""));
"
93a609985abaebe149ced9f7749622ac168bb872,Matt Benson,VisibilityTest.java,MODIFY,setTarget -> [VisibilityScoped target] | [VisibilityScopedSource target],"diff --git a/impl/src/test/java/org/jboss/forge/test/parser/java/common/VisibilityTest.java b/impl/src/test/java/org/jboss/forge/test/parser/java/common/VisibilityTest.java
index 646f077..87eb806 100644
--- a/impl/src/test/java/org/jboss/forge/test/parser/java/common/VisibilityTest.java
+++ b/impl/src/test/java/org/jboss/forge/test/parser/java/common/VisibilityTest.java
@@ -9,7 +9,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
-import org.jboss.forge.parser.java.ReadVisibilityScoped.VisibilityScoped;
+import org.jboss.forge.parser.java.source.VisibilityScopedSource;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -18,9 +18,9 @@
  */
 public abstract class VisibilityTest
 {
-   private VisibilityScoped<?> target;
+   private VisibilityScopedSource<?> target;
 
-   public void setTarget(VisibilityScoped<?> target)
+   public void setTarget(VisibilityScopedSource<?> target)
    {
       this.target = target;
    }
"
046090761300106beca9ee61c4686198c301efe8,Matt Benson,AnnotationElementSource.java,MODIFY,setType -> [JavaType entity] | [Class clazz],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/source/AnnotationElementSource.java b/api/src/main/java/org/jboss/forge/parser/java/source/AnnotationElementSource.java
index 2aa03f7..1a1576b 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/source/AnnotationElementSource.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/source/AnnotationElementSource.java
@@ -17,6 +17,7 @@
     */
    public interface DefaultValue extends AnnotationElement.ReadDefaultValue<JavaAnnotationSource>
    {
+      @Override
       AnnotationSource<JavaAnnotationSource> getAnnotation();
 
       DefaultValue setLiteral(String value);
@@ -54,5 +55,6 @@
     */
    AnnotationElementSource setType(JavaType<?> entity);
 
+   @Override
    AnnotationElementSource.DefaultValue getDefaultValue();
 }
\ No newline at end of file
"
046090761300106beca9ee61c4686198c301efe8,Matt Benson,AnnotationSource.java,MODIFY,getAnnotationValue -> [String name] | [],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/source/AnnotationSource.java b/api/src/main/java/org/jboss/forge/parser/java/source/AnnotationSource.java
index c164777..f3fdc4b 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/source/AnnotationSource.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/source/AnnotationSource.java
@@ -11,8 +11,10 @@
 public interface AnnotationSource<O extends JavaType<O>> extends Annotation<O>
 {
 
+   @Override
    AnnotationSource<O> getAnnotationValue();
 
+   @Override
    AnnotationSource<O> getAnnotationValue(String name);
 
    AnnotationSource<O> removeValue(String name);
"
046090761300106beca9ee61c4686198c301efe8,Matt Benson,AnnotationTargetSource.java,MODIFY,getAnnotation -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/source/AnnotationTargetSource.java b/api/src/main/java/org/jboss/forge/parser/java/source/AnnotationTargetSource.java
index a559be8..53865b4 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/source/AnnotationTargetSource.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/source/AnnotationTargetSource.java
@@ -12,10 +12,13 @@
  */
 public interface AnnotationTargetSource<O extends JavaSource<O>, T> extends AnnotationTarget<O>
 {
+   @Override
    public List<AnnotationSource<O>> getAnnotations();
 
+   @Override
    public AnnotationSource<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type);
 
+   @Override
    public AnnotationSource<O> getAnnotation(final String type);
 
    /**
"
046090761300106beca9ee61c4686198c301efe8,Matt Benson,FieldHolderSource.java,MODIFY,addField -> [String declaration] | [],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/source/FieldHolderSource.java b/api/src/main/java/org/jboss/forge/parser/java/source/FieldHolderSource.java
index 12d2a25..fede5cd 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/source/FieldHolderSource.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/source/FieldHolderSource.java
@@ -35,11 +35,13 @@
    /**
     * Get the {@link Field} with the given name and return it, otherwise, return null.
     */
+   @Override
    public FieldSource<O> getField(String name);
    
    /**
     * Get a list of all {@link Field}s declared by this {@link O}, or return an empty list if no {@link Field}s
     * are declared.
     */
+   @Override
    public List<FieldSource<O>> getFields();
 }
\ No newline at end of file
"
046090761300106beca9ee61c4686198c301efe8,Matt Benson,JavaAnnotationSource.java,MODIFY,addAnnotationElement -> [String declaration] | [],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/source/JavaAnnotationSource.java b/api/src/main/java/org/jboss/forge/parser/java/source/JavaAnnotationSource.java
index d1e14dc..311f23c 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/source/JavaAnnotationSource.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/source/JavaAnnotationSource.java
@@ -17,12 +17,14 @@
    /**
     * Get the {@link AnnotationElementSource} with the given name and return it, otherwise, return null.
     */
+   @Override
    public AnnotationElementSource getAnnotationElement(String name);
 
    /**
     * Get a list of all {@link AnnotationElementSource}s declared by this {@link JavaAnnotation}, or return an empty
     * list if no {@link AnnotationElementSource}s are declared.
     */
+   @Override
    public List<AnnotationElementSource> getAnnotationElements();
 
    /**
"
046090761300106beca9ee61c4686198c301efe8,Matt Benson,JavaEnumSource.java,MODIFY,addEnumConstant -> [String declaration] | [],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/source/JavaEnumSource.java b/api/src/main/java/org/jboss/forge/parser/java/source/JavaEnumSource.java
index 8c0b437..34cb5ae 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/source/JavaEnumSource.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/source/JavaEnumSource.java
@@ -22,11 +22,13 @@
     * @param name
     * @return
     */
+   @Override
    EnumConstantSource getEnumConstant(String name);
 
    /**
     * Return all declared {@link EnumConstant} types for this {@link JavaEnum}
     */
+   @Override
    List<EnumConstantSource> getEnumConstants();
 
    /**
"
046090761300106beca9ee61c4686198c301efe8,Matt Benson,MethodHolderSource.java,MODIFY,"getMethod -> [String name, Class paramTypes] | [String name]","diff --git a/api/src/main/java/org/jboss/forge/parser/java/source/MethodHolderSource.java b/api/src/main/java/org/jboss/forge/parser/java/source/MethodHolderSource.java
index 46ddc14..6a4c3e4 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/source/MethodHolderSource.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/source/MethodHolderSource.java
@@ -17,22 +17,26 @@
    /**
     * Return the {@link MethodSource} with the given name and zero parameters; otherwise return null.
     */
+   @Override
    public MethodSource<O> getMethod(final String name);
 
    /**
     * Return the {@link MethodSource} with the given name and signature types; otherwise return null.
     */
+   @Override
    public MethodSource<O> getMethod(final String name, String... paramTypes);
 
    /**
     * Return the {@link MethodSource} with the given name and signature types; otherwise return null.
     */
+   @Override
    public MethodSource<O> getMethod(final String name, Class<?>... paramTypes);
 
    /**
     * Get a {@link List} of all {@link MethodSource}s declared by this {@link O} instance, if any; otherwise, return an
     * empty {@link List}
     */
+   @Override
    public List<MethodSource<O>> getMethods();
 
    /**
"
046090761300106beca9ee61c4686198c301efe8,Matt Benson,MethodSource.java,MODIFY,setReturnType -> [JavaType type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/source/MethodSource.java b/api/src/main/java/org/jboss/forge/parser/java/source/MethodSource.java
index 751db23..a671856 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/source/MethodSource.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/source/MethodSource.java
@@ -74,6 +74,7 @@
    /**
     * Get a list of this {@link Method}'s parameters.
     */
+   @Override
    public List<ParameterSource<O>> getParameters();
 
 }
\ No newline at end of file
"
134f699b46c884084ff685bc99725f257a5d3454,Matt Benson,Formatter.java,MODIFY,format -> [String source] | [JavaClassSource javaClass],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/util/Formatter.java b/impl/src/main/java/org/jboss/forge/parser/java/util/Formatter.java
index 946f8cc..61a80ec 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/util/Formatter.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/util/Formatter.java
@@ -17,14 +17,14 @@
 import org.eclipse.jface.text.Document;
 import org.eclipse.jface.text.IDocument;
 import org.eclipse.text.edits.TextEdit;
-import org.jboss.forge.parser.java.JavaClass;
+import org.jboss.forge.parser.java.source.JavaClassSource;
 
 /**
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
 public abstract class Formatter
 {
-   public static String format(JavaClass javaClass)
+   public static String format(JavaClassSource javaClass)
    {
       return format(javaClass.toString());
    }
"
030d2def4095a811c59896ec4de3e226017b4baa,Matt Benson,EnumConstantBodyImpl.java,MODIFY,addImport -> [JavaType type] | [String className],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java
index a884a43..0ce063c 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java
@@ -28,13 +28,13 @@
 import org.jboss.forge.parser.java.JavaType;
 import org.jboss.forge.parser.java.Method;
 import org.jboss.forge.parser.java.Parameter;
-import org.jboss.forge.parser.java.SourceType;
 import org.jboss.forge.parser.java.SyntaxError;
 import org.jboss.forge.parser.java.Visibility;
 import org.jboss.forge.parser.java.ast.MethodFinderVisitor;
 import org.jboss.forge.parser.java.ast.TypeDeclarationFinderVisitor;
 import org.jboss.forge.parser.java.source.AnnotationSource;
 import org.jboss.forge.parser.java.source.EnumConstantSource;
+import org.jboss.forge.parser.java.source.EnumConstantSource.Body;
 import org.jboss.forge.parser.java.source.FieldSource;
 import org.jboss.forge.parser.java.source.Import;
 import org.jboss.forge.parser.java.source.JavaClassSource;
@@ -43,7 +43,6 @@
 import org.jboss.forge.parser.java.source.MemberSource;
 import org.jboss.forge.parser.java.source.MethodSource;
 import org.jboss.forge.parser.java.source.ParameterSource;
-import org.jboss.forge.parser.java.source.EnumConstantSource.Body;
 import org.jboss.forge.parser.java.util.Strings;
 import org.jboss.forge.parser.java.util.Types;
 import org.jboss.forge.parser.spi.JavaParserImpl;
@@ -137,12 +136,6 @@
    }
 
    @Override
-   public SourceType getSourceType()
-   {
-      return SourceType.CLASS;
-   }
-
-   @Override
    public String getPackage()
    {
       return javaEnum.getPackage();
"
030d2def4095a811c59896ec4de3e226017b4baa,Matt Benson,JavaAnnotationImpl.java,MODIFY,addAnnotationElement -> [String declaration] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaAnnotationImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaAnnotationImpl.java
index 55aa90c..e379453 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaAnnotationImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaAnnotationImpl.java
@@ -16,7 +16,6 @@
 import org.eclipse.jdt.core.dom.CompilationUnit;
 import org.eclipse.jface.text.Document;
 import org.jboss.forge.parser.java.AnnotationElement;
-import org.jboss.forge.parser.java.SourceType;
 import org.jboss.forge.parser.java.source.AnnotationElementSource;
 import org.jboss.forge.parser.java.source.JavaAnnotationSource;
 import org.jboss.forge.parser.java.source.JavaSource;
@@ -42,12 +41,6 @@
    }
 
    @Override
-   public SourceType getSourceType()
-   {
-      return SourceType.ANNOTATION;
-   }
-
-   @Override
    public AnnotationElementSource addAnnotationElement()
    {
       return add(new AnnotationElementImpl(this));
"
030d2def4095a811c59896ec4de3e226017b4baa,Matt Benson,JavaClassImpl.java,MODIFY,setSuperType -> [String type] | [JavaType type],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaClassImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaClassImpl.java
index 1969901..5d29c74 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaClassImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaClassImpl.java
@@ -13,7 +13,6 @@
 import org.eclipse.jdt.core.dom.TypeDeclaration;
 import org.eclipse.jface.text.Document;
 import org.jboss.forge.parser.java.JavaType;
-import org.jboss.forge.parser.java.SourceType;
 import org.jboss.forge.parser.java.ast.ModifierAccessor;
 import org.jboss.forge.parser.java.source.JavaClassSource;
 import org.jboss.forge.parser.java.source.JavaSource;
@@ -161,9 +160,4 @@
       return this;
    }
 
-   @Override
-   public SourceType getSourceType()
-   {
-      return SourceType.CLASS;
-   }
 }
\ No newline at end of file
"
030d2def4095a811c59896ec4de3e226017b4baa,Matt Benson,JavaEnumImpl.java,MODIFY,addEnumConstant -> [String declaration] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
index 8d43f72..a559bc0 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
@@ -15,7 +15,6 @@
 import org.eclipse.jdt.core.dom.EnumConstantDeclaration;
 import org.eclipse.jdt.core.dom.EnumDeclaration;
 import org.eclipse.jface.text.Document;
-import org.jboss.forge.parser.java.SourceType;
 import org.jboss.forge.parser.java.source.EnumConstantSource;
 import org.jboss.forge.parser.java.source.JavaEnumSource;
 import org.jboss.forge.parser.java.source.JavaSource;
@@ -91,9 +90,4 @@
       return this;
    }
 
-   @Override
-   public SourceType getSourceType()
-   {
-      return SourceType.ENUM;
-   }
 }
"
030d2def4095a811c59896ec4de3e226017b4baa,Matt Benson,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
index b5850f7..ebe3e07 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
@@ -17,7 +17,6 @@
 import org.jboss.forge.parser.ParserException;
 import org.jboss.forge.parser.java.Annotation;
 import org.jboss.forge.parser.java.JavaType;
-import org.jboss.forge.parser.java.SourceType;
 import org.jboss.forge.parser.java.SyntaxError;
 import org.jboss.forge.parser.java.Visibility;
 import org.jboss.forge.parser.java.ast.AnnotationAccessor;
@@ -47,12 +46,6 @@
    }
 
    @Override
-   public SourceType getSourceType()
-   {
-      return SourceType.PACKAGEINFO;
-   }
-
-   @Override
    public String getName()
    {
       return ""package-info"";
"
f98f50943c72cc370dde13f288cc0a3d6ec339d1,Matt Benson,MethodSource.java,MODIFY,setReturnType -> [JavaType type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/source/MethodSource.java b/api/src/main/java/org/jboss/forge/parser/java/source/MethodSource.java
index a671856..cd532f5 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/source/MethodSource.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/source/MethodSource.java
@@ -12,8 +12,9 @@
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * 
  */
-public interface MethodSource<O extends JavaSource<O>> extends Method<O, MethodSource<O>>, AbstractableSource<MethodSource<O>>,
-         MemberSource<O, MethodSource<O>>
+public interface MethodSource<O extends JavaSource<O>> extends Method<O, MethodSource<O>>,
+         AbstractableSource<MethodSource<O>>,
+         MemberSource<O, MethodSource<O>>, GenericCapableSource<MethodSource<O>>
 {
    /**
     * Set this {@link Method} to return the given type.
"
f98f50943c72cc370dde13f288cc0a3d6ec339d1,Matt Benson,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java
index 5839fbf..b6b9472 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java
@@ -8,6 +8,7 @@
 
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.Iterator;
 import java.util.List;
 
 import org.eclipse.jdt.core.dom.AST;
@@ -16,6 +17,7 @@
 import org.eclipse.jdt.core.dom.Block;
 import org.eclipse.jdt.core.dom.CompilationUnit;
 import org.eclipse.jdt.core.dom.MethodDeclaration;
+import org.eclipse.jdt.core.dom.TypeParameter;
 import org.eclipse.jdt.core.dom.Modifier.ModifierKeyword;
 import org.eclipse.jdt.core.dom.SimpleName;
 import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
@@ -616,4 +618,50 @@
 
       return this;
    }
+
+   @Override
+   public List<String> getGenericTypes()
+   {
+      List<String> result = new ArrayList<String>();
+      @SuppressWarnings(""unchecked"")
+      List<TypeParameter> typeParameters = method.typeParameters();
+      if (typeParameters != null)
+      {
+         for (TypeParameter typeParameter : typeParameters)
+         {
+            result.add(typeParameter.getName().getIdentifier());
+         }
+      }
+      return Collections.unmodifiableList(result);
+   }
+
+   @SuppressWarnings(""unchecked"")
+   @Override
+   public MethodSource<O> addGenericType(String genericType)
+   {
+      TypeParameter tp2 = method.getAST().newTypeParameter();
+      tp2.setName(method.getAST().newSimpleName(genericType));
+      method.typeParameters().add(tp2);
+      return this;
+   }
+
+   @Override
+   public MethodSource<O> removeGenericType(String genericType)
+   {
+      @SuppressWarnings(""unchecked"")
+      List<TypeParameter> typeParameters = method.typeParameters();
+      if (typeParameters != null)
+      {
+         Iterator<TypeParameter> it = typeParameters.iterator();
+         while (it.hasNext())
+         {
+            TypeParameter typeParameter = it.next();
+            if (typeParameter.getName().getIdentifier().equals(genericType))
+            {
+               it.remove();
+            }
+         }
+      }
+      return this;
+   }
 }
"
5af543b2f7b53f7f5dbdca2f3167d6731d5356a0,Matt Benson,Importer.java,MODIFY,hasImport -> [Import imprt] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/source/Importer.java b/api/src/main/java/org/jboss/forge/parser/java/source/Importer.java
index 6c048af..e2e00ee 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/source/Importer.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/source/Importer.java
@@ -30,12 +30,12 @@
    boolean hasImport(String type);
 
    /**
-    * Return whether or not this {@link O} could accept an import for the given {@link Class} type.
+    * Return whether or not this {@link O} would require an import to reference the given {@link Class} type.
     */
    boolean requiresImport(Class<?> type);
 
    /**
-    * Return whether or not this {@link O} could accept an import for the given fully-qualified class name.
+    * Return whether or not this {@link O} would require an import to reference the given fully-qualified class name.
     */
    boolean requiresImport(String type);
 
"
a821d1602226e6dd1e8f470a1bbd1b4ca749acfd,Matt Benson,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
index 16251aa..97e5577 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
@@ -288,7 +288,8 @@
       }
       if (!validImport(resultType)
                || hasImport(resultType)
-               || Types.isJavaLang(resultType))
+               || Types.isJavaLang(resultType)
+               || Strings.areEqual(getPackage(), Types.getPackage(resultType)))
       {
          return false;
       }
"
978c071dee099e4524281526adf588aefd14cf1f,Matt Benson,MethodSource.java,MODIFY,setReturnType -> [JavaType type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/source/MethodSource.java b/api/src/main/java/org/jboss/forge/parser/java/source/MethodSource.java
index cd532f5..e2bebb7 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/source/MethodSource.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/source/MethodSource.java
@@ -12,9 +12,8 @@
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * 
  */
-public interface MethodSource<O extends JavaSource<O>> extends Method<O, MethodSource<O>>,
-         AbstractableSource<MethodSource<O>>,
-         MemberSource<O, MethodSource<O>>, GenericCapableSource<MethodSource<O>>
+public interface MethodSource<O extends JavaSource<O>> extends Method<O, MethodSource<O>>, AbstractableSource<MethodSource<O>>,
+         MemberSource<O, MethodSource<O>>, GenericCapableSource<O, MethodSource<O>>
 {
    /**
     * Set this {@link Method} to return the given type.
"
978c071dee099e4524281526adf588aefd14cf1f,Matt Benson,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java
index b6b9472..74dd0a7 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java
@@ -17,16 +17,17 @@
 import org.eclipse.jdt.core.dom.Block;
 import org.eclipse.jdt.core.dom.CompilationUnit;
 import org.eclipse.jdt.core.dom.MethodDeclaration;
-import org.eclipse.jdt.core.dom.TypeParameter;
 import org.eclipse.jdt.core.dom.Modifier.ModifierKeyword;
 import org.eclipse.jdt.core.dom.SimpleName;
 import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
 import org.eclipse.jdt.core.dom.Statement;
+import org.eclipse.jdt.core.dom.TypeParameter;
 import org.eclipse.jdt.core.dom.VariableDeclaration;
 import org.jboss.forge.parser.JavaParser;
 import org.jboss.forge.parser.java.Annotation;
 import org.jboss.forge.parser.java.JavaType;
 import org.jboss.forge.parser.java.Type;
+import org.jboss.forge.parser.java.TypeVariable;
 import org.jboss.forge.parser.java.Visibility;
 import org.jboss.forge.parser.java.ast.AnnotationAccessor;
 import org.jboss.forge.parser.java.ast.ModifierAccessor;
@@ -35,6 +36,8 @@
 import org.jboss.forge.parser.java.source.JavaSource;
 import org.jboss.forge.parser.java.source.MethodSource;
 import org.jboss.forge.parser.java.source.ParameterSource;
+import org.jboss.forge.parser.java.source.TypeVariableSource;
+import org.jboss.forge.parser.java.util.Strings;
 import org.jboss.forge.parser.java.util.Types;
 
 /**
@@ -620,48 +623,64 @@
    }
 
    @Override
-   public List<String> getGenericTypes()
+   public List<TypeVariableSource<O>> getTypeVariables()
    {
-      List<String> result = new ArrayList<String>();
+      List<TypeVariableSource<O>> result = new ArrayList<TypeVariableSource<O>>();
       @SuppressWarnings(""unchecked"")
       List<TypeParameter> typeParameters = method.typeParameters();
       if (typeParameters != null)
       {
          for (TypeParameter typeParameter : typeParameters)
          {
-            result.add(typeParameter.getName().getIdentifier());
+            result.add(new TypeVariableImpl<O>(parent, typeParameter));
          }
       }
       return Collections.unmodifiableList(result);
    }
 
+   @Override
+   public TypeVariableSource<O> getTypeVariable(String name)
+   {
+      @SuppressWarnings(""unchecked"")
+      List<TypeParameter> typeParameters = method.typeParameters();
+      for (TypeParameter typeParameter : typeParameters)
+      {
+         if (Strings.areEqual(name, typeParameter.getName().getIdentifier()))
+         {
+            return(new TypeVariableImpl<O>(parent, typeParameter));
+         }
+      }
+      return null;
+   }
+
    @SuppressWarnings(""unchecked"")
    @Override
-   public MethodSource<O> addGenericType(String genericType)
+   public TypeVariableSource<O> addTypeVariable()
    {
       TypeParameter tp2 = method.getAST().newTypeParameter();
-      tp2.setName(method.getAST().newSimpleName(genericType));
       method.typeParameters().add(tp2);
+      return new TypeVariableImpl<O>(parent, tp2);
+   }
+
+   @Override
+   public MethodSource<O> removeTypeVariable(String name)
+   {
+      @SuppressWarnings(""unchecked"")
+      List<TypeParameter> typeParameters = method.typeParameters();
+      for (Iterator<TypeParameter> iter = typeParameters.iterator(); iter.hasNext();)
+      {
+         if (Strings.areEqual(name, iter.next().getName().getIdentifier()))
+         {
+            iter.remove();
+            break;
+         }
+      }
       return this;
    }
 
    @Override
-   public MethodSource<O> removeGenericType(String genericType)
+   public MethodSource<O> removeTypeVariable(TypeVariable<?> typeVariable)
    {
-      @SuppressWarnings(""unchecked"")
-      List<TypeParameter> typeParameters = method.typeParameters();
-      if (typeParameters != null)
-      {
-         Iterator<TypeParameter> it = typeParameters.iterator();
-         while (it.hasNext())
-         {
-            TypeParameter typeParameter = it.next();
-            if (typeParameter.getName().getIdentifier().equals(genericType))
-            {
-               it.remove();
-            }
-         }
-      }
-      return this;
+      return removeTypeVariable(typeVariable.getName());
    }
 }
"
98da63fd0ea0722f94c9864d25720cf82976c703,Matt Benson,AbstractGenericCapableJavaSource.java,MODIFY,removeTypeVariable -> [TypeVariable typeVariable] | [String name],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractGenericCapableJavaSource.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractGenericCapableJavaSource.java
index 2f6629d..93b303f 100755
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractGenericCapableJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractGenericCapableJavaSource.java
@@ -33,7 +33,7 @@
          implements GenericCapableSource<O, O>
 {
 
-   public AbstractGenericCapableJavaSource(JavaSource<?> enclosingType, Document document, CompilationUnit unit,
+   protected AbstractGenericCapableJavaSource(JavaSource<?> enclosingType, Document document, CompilationUnit unit,
             BodyDeclaration declaration)
    {
       super(enclosingType, document, unit, declaration);
"
98da63fd0ea0722f94c9864d25720cf82976c703,Matt Benson,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
index 97e5577..aedff30 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
@@ -14,7 +14,6 @@
 
 import org.eclipse.jdt.core.JavaCore;
 import org.eclipse.jdt.core.compiler.IProblem;
-import org.eclipse.jdt.core.dom.ASTNode;
 import org.eclipse.jdt.core.dom.AbstractTypeDeclaration;
 import org.eclipse.jdt.core.dom.AnnotationTypeDeclaration;
 import org.eclipse.jdt.core.dom.BodyDeclaration;
@@ -23,15 +22,12 @@
 import org.eclipse.jdt.core.dom.ImportDeclaration;
 import org.eclipse.jdt.core.dom.Modifier.ModifierKeyword;
 import org.eclipse.jdt.core.dom.PackageDeclaration;
-import org.eclipse.jdt.core.dom.Type;
 import org.eclipse.jdt.core.dom.TypeDeclaration;
 import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
 import org.eclipse.jface.text.Document;
 import org.eclipse.text.edits.TextEdit;
-import org.jboss.forge.parser.JavaParser;
 import org.jboss.forge.parser.ParserException;
 import org.jboss.forge.parser.java.Annotation;
-import org.jboss.forge.parser.java.JavaInterface;
 import org.jboss.forge.parser.java.JavaType;
 import org.jboss.forge.parser.java.SyntaxError;
 import org.jboss.forge.parser.java.Visibility;
@@ -40,7 +36,6 @@
 import org.jboss.forge.parser.java.ast.TypeDeclarationFinderVisitor;
 import org.jboss.forge.parser.java.source.AnnotationSource;
 import org.jboss.forge.parser.java.source.Import;
-import org.jboss.forge.parser.java.source.InterfaceCapableSource;
 import org.jboss.forge.parser.java.source.JavaSource;
 import org.jboss.forge.parser.java.source.MemberSource;
 import org.jboss.forge.parser.java.util.Formatter;
@@ -56,7 +51,7 @@
  */
 @SuppressWarnings(""unchecked"")
 public abstract class AbstractJavaSource<O extends JavaSource<O>> implements
-         JavaSource<O>, InterfaceCapableSource<O>
+         JavaSource<O>
 {
    private final AnnotationAccessor<O, O> annotations = new AnnotationAccessor<O, O>();
    private final ModifierAccessor modifiers = new ModifierAccessor();
@@ -69,7 +64,7 @@
    public static ServiceLoader<WildcardImportResolver> loader = ServiceLoader.load(WildcardImportResolver.class);
    private static List<WildcardImportResolver> resolvers;
 
-   public AbstractJavaSource(JavaSource<?> enclosingType, final Document document, final CompilationUnit unit,
+   protected AbstractJavaSource(JavaSource<?> enclosingType, final Document document, final CompilationUnit unit,
             BodyDeclaration body)
    {
       this.enclosingType = enclosingType == null ? this : enclosingType;
@@ -766,116 +761,6 @@
     */
 
    @Override
-   public List<String> getInterfaces()
-   {
-      List<String> result = new ArrayList<String>();
-      List<Type> superTypes = JDTHelper.getInterfaces(getBodyDeclaration());
-      for (Type type : superTypes)
-      {
-         String name = JDTHelper.getTypeName(type);
-         if (Types.isSimpleName(name) && this.hasImport(name))
-         {
-            Import imprt = this.getImport(name);
-            String pkg = imprt.getPackage();
-            if (!Strings.isNullOrEmpty(pkg))
-            {
-               name = pkg + ""."" + name;
-            }
-         }
-         result.add(name);
-      }
-      return result;
-   }
-
-   @Override
-   public O addInterface(final String type)
-   {
-      if (!this.hasInterface(type))
-      {
-         Type interfaceType = JDTHelper.getInterfaces(
-                  JavaParser.parse(JavaInterfaceImpl.class,
-                           ""public interface Mock extends "" + Types.toSimpleName(type)
-                                    + "" {}"").getBodyDeclaration()).get(0);
-
-         if (this.hasInterface(Types.toSimpleName(type)) || this.hasImport(Types.toSimpleName(type)))
-         {
-            interfaceType = JDTHelper.getInterfaces(JavaParser.parse(JavaInterfaceImpl.class,
-                     ""public interface Mock extends "" + type + "" {}"").getBodyDeclaration()).get(0);
-         }
-
-         this.addImport(type);
-
-         ASTNode node = ASTNode.copySubtree(unit.getAST(), interfaceType);
-         JDTHelper.getInterfaces(getBodyDeclaration()).add((Type) node);
-      }
-      return (O) this;
-   }
-
-   @Override
-   public O addInterface(final Class<?> type)
-   {
-      return addInterface(type.getName());
-   }
-
-   @Override
-   public O addInterface(final JavaInterface<?> type)
-   {
-      return addInterface(type.getQualifiedName());
-   }
-
-   @Override
-   public boolean hasInterface(final String type)
-   {
-      for (String name : getInterfaces())
-      {
-         if (Types.areEquivalent(name, type))
-         {
-            return true;
-         }
-      }
-      return false;
-   }
-
-   @Override
-   public boolean hasInterface(final Class<?> type)
-   {
-      return hasInterface(type.getName());
-   }
-
-   @Override
-   public boolean hasInterface(final JavaInterface<?> type)
-   {
-      return hasInterface(type.getQualifiedName());
-   }
-
-   @Override
-   public O removeInterface(final String type)
-   {
-      List<Type> interfaces = JDTHelper.getInterfaces(getBodyDeclaration());
-      for (Type i : interfaces)
-      {
-         if (Types.areEquivalent(i.toString(), type))
-         {
-            interfaces.remove(i);
-            break;
-         }
-      }
-      return (O) this;
-   }
-
-   @Override
-   public O removeInterface(final Class<?> type)
-   {
-      return removeInterface(type.getName());
-   }
-
-   @Override
-   public O removeInterface(final JavaInterface<?> type)
-   {
-      return removeInterface(type.getQualifiedName());
-   }
-
-   @Override
    public List<JavaSource<?>> getNestedClasses()
    {
       List<AbstractTypeDeclaration> declarations = getNestedDeclarations(body);
"
98da63fd0ea0722f94c9864d25720cf82976c703,Matt Benson,AbstractJavaSourceMemberHolder.java,MODIFY,addField -> [Field field] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java
index dacc03a..973982f 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java
@@ -11,25 +11,30 @@
 import java.util.Iterator;
 import java.util.List;
 
+import org.eclipse.jdt.core.dom.ASTNode;
 import org.eclipse.jdt.core.dom.BodyDeclaration;
 import org.eclipse.jdt.core.dom.CompilationUnit;
 import org.eclipse.jdt.core.dom.FieldDeclaration;
 import org.eclipse.jdt.core.dom.MethodDeclaration;
+import org.eclipse.jdt.core.dom.Type;
 import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
 import org.eclipse.jface.text.Document;
 import org.jboss.forge.parser.JavaParser;
 import org.jboss.forge.parser.java.Field;
+import org.jboss.forge.parser.java.JavaInterface;
 import org.jboss.forge.parser.java.JavaType;
 import org.jboss.forge.parser.java.Method;
 import org.jboss.forge.parser.java.Parameter;
 import org.jboss.forge.parser.java.ast.MethodFinderVisitor;
-import org.jboss.forge.parser.java.source.FieldSource;
 import org.jboss.forge.parser.java.source.FieldHolderSource;
+import org.jboss.forge.parser.java.source.FieldSource;
+import org.jboss.forge.parser.java.source.Import;
+import org.jboss.forge.parser.java.source.InterfaceCapableSource;
 import org.jboss.forge.parser.java.source.JavaClassSource;
 import org.jboss.forge.parser.java.source.JavaSource;
 import org.jboss.forge.parser.java.source.MemberSource;
-import org.jboss.forge.parser.java.source.MethodSource;
 import org.jboss.forge.parser.java.source.MethodHolderSource;
+import org.jboss.forge.parser.java.source.MethodSource;
 import org.jboss.forge.parser.java.source.ParameterSource;
 import org.jboss.forge.parser.java.util.Strings;
 import org.jboss.forge.parser.java.util.Types;
@@ -38,10 +43,11 @@
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * 
  */
-public abstract class AbstractJavaSourceMemberHolder<O extends JavaSource<O>> extends AbstractJavaSource<O> implements
+public abstract class AbstractJavaSourceMemberHolder<O extends JavaSource<O>> extends AbstractJavaSource<O>
+         implements InterfaceCapableSource<O>,
          MethodHolderSource<O>, FieldHolderSource<O>
 {
-   public AbstractJavaSourceMemberHolder(JavaSource<?> enclosingType, final Document document,
+   protected AbstractJavaSourceMemberHolder(JavaSource<?> enclosingType, final Document document,
             final CompilationUnit unit, BodyDeclaration declaration)
    {
       super(enclosingType, document, unit, declaration);
@@ -355,4 +361,116 @@
       }
       return Collections.unmodifiableList(result);
    }
+
+   @Override
+   public List<String> getInterfaces()
+   {
+      List<String> result = new ArrayList<String>();
+      List<Type> superTypes = JDTHelper.getInterfaces(getBodyDeclaration());
+      for (Type type : superTypes)
+      {
+         String name = JDTHelper.getTypeName(type);
+         if (Types.isSimpleName(name) && this.hasImport(name))
+         {
+            Import imprt = this.getImport(name);
+            String pkg = imprt.getPackage();
+            if (!Strings.isNullOrEmpty(pkg))
+            {
+               name = pkg + ""."" + name;
+            }
+         }
+         result.add(name);
+      }
+      return result;
+   }
+
+   @SuppressWarnings(""unchecked"")
+   @Override
+   public O addInterface(final String type)
+   {
+      if (!this.hasInterface(type))
+      {
+         Type interfaceType = JDTHelper.getInterfaces(
+                  JavaParser.parse(JavaInterfaceImpl.class,
+                           ""public interface Mock extends "" + Types.toSimpleName(type)
+                                    + "" {}"").getBodyDeclaration()).get(0);
+   
+         if (this.hasInterface(Types.toSimpleName(type)) || this.hasImport(Types.toSimpleName(type)))
+         {
+            interfaceType = JDTHelper.getInterfaces(JavaParser.parse(JavaInterfaceImpl.class,
+                     ""public interface Mock extends "" + type + "" {}"").getBodyDeclaration()).get(0);
+         }
+   
+         this.addImport(type);
+   
+         ASTNode node = ASTNode.copySubtree(unit.getAST(), interfaceType);
+         JDTHelper.getInterfaces(getBodyDeclaration()).add((Type) node);
+      }
+      return (O) this;
+   }
+
+   @Override
+   public O addInterface(final Class<?> type)
+   {
+      return addInterface(type.getName());
+   }
+
+   @Override
+   public O addInterface(final JavaInterface<?> type)
+   {
+      return addInterface(type.getQualifiedName());
+   }
+
+   @Override
+   public boolean hasInterface(final String type)
+   {
+      for (String name : getInterfaces())
+      {
+         if (Types.areEquivalent(name, type))
+         {
+            return true;
+         }
+      }
+      return false;
+   }
+
+   @Override
+   public boolean hasInterface(final Class<?> type)
+   {
+      return hasInterface(type.getName());
+   }
+
+   @Override
+   public boolean hasInterface(final JavaInterface<?> type)
+   {
+      return hasInterface(type.getQualifiedName());
+   }
+
+   @SuppressWarnings(""unchecked"")
+   @Override
+   public O removeInterface(final String type)
+   {
+      List<Type> interfaces = JDTHelper.getInterfaces(getBodyDeclaration());
+      for (Type i : interfaces)
+      {
+         if (Types.areEquivalent(i.toString(), type))
+         {
+            interfaces.remove(i);
+            break;
+         }
+      }
+      return (O) this;
+   }
+
+   @Override
+   public O removeInterface(final Class<?> type)
+   {
+      return removeInterface(type.getName());
+   }
+
+   @Override
+   public O removeInterface(final JavaInterface<?> type)
+   {
+      return removeInterface(type.getQualifiedName());
+   }
 }
"
8e633f4ba4d0faf786ed14af4874d9c0c593124f,Matt Benson,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
index aedff30..0b7c9d0 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
@@ -37,7 +37,6 @@
 import org.jboss.forge.parser.java.source.AnnotationSource;
 import org.jboss.forge.parser.java.source.Import;
 import org.jboss.forge.parser.java.source.JavaSource;
-import org.jboss.forge.parser.java.source.MemberSource;
 import org.jboss.forge.parser.java.util.Formatter;
 import org.jboss.forge.parser.java.util.Strings;
 import org.jboss.forge.parser.java.util.Types;
@@ -425,14 +424,6 @@
       return (O) this;
    }
 
-   @Override
-   public List<MemberSource<O, ?>> getMembers()
-   {
-      List<MemberSource<O, ?>> result = new ArrayList<MemberSource<O, ?>>();
-
-      return result;
-   }
-
    protected AbstractTypeDeclaration getBodyDeclaration()
    {
       if (body instanceof AbstractTypeDeclaration)
"
8e633f4ba4d0faf786ed14af4874d9c0c593124f,Matt Benson,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
index ebe3e07..ca511d8 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
@@ -26,7 +26,6 @@
 import org.jboss.forge.parser.java.source.Import;
 import org.jboss.forge.parser.java.source.JavaPackageInfoSource;
 import org.jboss.forge.parser.java.source.JavaSource;
-import org.jboss.forge.parser.java.source.MemberSource;
 import org.jboss.forge.parser.java.util.Formatter;
 import org.jboss.forge.parser.java.util.Strings;
 import org.jboss.forge.parser.java.util.Types;
@@ -415,12 +414,6 @@
       return this;
    }
 
-   @Override
-   public List<MemberSource<JavaPackageInfoSource, ?>> getMembers()
-   {
-      return Collections.emptyList();
-   }
-
    protected PackageDeclaration getPackageDeclaration()
    {
       if (pkg instanceof PackageDeclaration)
"
8398807248eda4ef6f32179ff18785c65d32b171,Matt Benson,TypeVariableImpl.java,MODIFY,setBounds -> [String bounds] | [JavaType bounds],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/TypeVariableImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/TypeVariableImpl.java
index 87f00e4..4381de4 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/TypeVariableImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/TypeVariableImpl.java
@@ -7,6 +7,7 @@
 package org.jboss.forge.parser.java.impl;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 import org.eclipse.jdt.core.dom.ASTNode;
@@ -43,13 +44,17 @@
    {
       @SuppressWarnings(""unchecked"")
       List<org.eclipse.jdt.core.dom.Type> typeBounds = internal.typeBounds();
+      if (typeBounds.isEmpty())
+      {
+         return Collections.emptyList();
+      }
       final List<Type<O>> result = new ArrayList<Type<O>>(typeBounds.size());
 
       for (org.eclipse.jdt.core.dom.Type type : typeBounds)
       {
          result.add(new TypeImpl<O>(origin, type));
       }
-      return result;
+      return Collections.unmodifiableList(result);
    }
 
    @Override
"
952faa676270b80a2859431b4fb94bfe8d7b4d7d,Matt Benson,EnumConstantBodyImpl.java,MODIFY,addImport -> [JavaType type] | [String className],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java
index 0ce063c..0725dec 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java
@@ -54,8 +54,8 @@
 
    EnumConstantBodyImpl(EnumConstantSource enumConstant)
    {
-      this.javaEnum = javaEnum;
       this.enumConstant = enumConstant;
+      this.javaEnum = enumConstant.getOrigin();
       getBody();
    }
 
"
952faa676270b80a2859431b4fb94bfe8d7b4d7d,Matt Benson,EnumConstantImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java
index 9dbddc2..94819cf 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java
@@ -118,7 +118,7 @@
    @Override
    public Body getBody()
    {
-      return new EnumConstantBodyImpl((JavaEnum) parent, this);
+      return new EnumConstantBodyImpl(this);
    }
 
    @Override
@@ -205,7 +205,7 @@
       {
          return false;
       }
-      final EnumConstantImpl<?> other = (EnumConstantImpl<?>) obj;
+      final EnumConstantImpl other = (EnumConstantImpl) obj;
       return other.enumConstant == enumConstant || other.enumConstant != null
                && other.enumConstant.equals(enumConstant);
    }
"
3be61b82e6518aaa23f450d669221359d668ac96,George Gastaldi,JavaParser.java,MODIFY,"parse -> [Class type, InputStream data] | [File file]","diff --git a/api/src/main/java/org/jboss/forge/parser/JavaParser.java b/api/src/main/java/org/jboss/forge/parser/JavaParser.java
index eaf7737..e81f217 100644
--- a/api/src/main/java/org/jboss/forge/parser/JavaParser.java
+++ b/api/src/main/java/org/jboss/forge/parser/JavaParser.java
@@ -8,6 +8,7 @@
 package org.jboss.forge.parser;
 
 import java.io.File;
+import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
@@ -16,127 +17,167 @@
 import java.util.List;
 import java.util.ServiceLoader;
 
-import org.jboss.forge.parser.java.JavaClass;
-import org.jboss.forge.parser.java.JavaSource;
+import org.jboss.forge.parser.java.JavaType;
+import org.jboss.forge.parser.java.source.JavaSource;
 import org.jboss.forge.parser.spi.JavaParserProvider;
 
 /**
- * Responsible for parsing data into new {@link JavaClass} instances.
+ * Responsible for parsing data into new {@link JavaType} instances.
  * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
 public final class JavaParser
 {
-   public static ServiceLoader<JavaParserProvider> loader = ServiceLoader.load(JavaParserProvider.class);
    private static List<JavaParserProvider> parsers;
 
-   private static JavaParserProvider getParser()
+   private static List<JavaParserProvider> getParsers()
    {
-      if (parsers == null)
+      synchronized (JavaParser.class)
       {
-         parsers = new ArrayList<JavaParserProvider>();
-         for (JavaParserProvider p : loader)
+         if (parsers == null)
          {
-            parsers.add(p);
+            parsers = new ArrayList<JavaParserProvider>();
+            for (JavaParserProvider p : ServiceLoader.load(JavaParserProvider.class))
+            {
+               parsers.add(p);
+            }
+         }
+         if (parsers.size() == 0)
+         {
+            throw new IllegalStateException(""No instances of ["" + JavaParserProvider.class.getName()
+                     + ""] were found on the classpath."");
          }
       }
-      if (parsers.size() == 0)
-      {
-         throw new IllegalStateException(""No instances of ["" + JavaParserProvider.class.getName()
-                  + ""] were found on the classpath."");
-      }
-      return parsers.get(0);
+      return parsers;
    }
 
    /**
-    * Open the given {@link File}, parsing its contents into a new {@link JavaClass} instance.
-    */
-   public static JavaSource<?> parse(final File file) throws FileNotFoundException
-   {
-      return getParser().parse(file);
-   }
-
-   /**
-    * Parse the given {@link URL} data into a new {@link JavaSource} instance.
-    */
-   public static JavaSource<?> parse(final URL data) throws IOException
-   {
-      return getParser().parse(data);
-   }
-
-   /**
-    * Read the given {@link InputStream} and parse the data into a new {@link JavaClass} instance.
-    */
-   public static JavaSource<?> parse(final InputStream data)
-   {
-      return getParser().parse(data);
-   }
-
-   /**
-    * Parse the given character array into a new {@link JavaClass} instance.
-    */
-   public static JavaSource<?> parse(final char[] data)
-   {
-      return getParser().parse(data);
-   }
-
-   /**
-    * Parse the given String data into a new {@link JavaClass} instance.
-    */
-   public static JavaSource<?> parse(final String data)
-   {
-      return getParser().parse(data);
-   }
-
-   /**
-    * Create a new empty {@link JavaClass} instance.
+    * Create a new empty {@link JavaSource} instance.
     */
    public static <T extends JavaSource<?>> T create(final Class<T> type)
    {
-      return getParser().create(type);
+      for (JavaParserProvider parser : getParsers())
+      {
+         final T result = parser.create(type);
+         if (result != null)
+         {
+            return result;
+         }
+      }
+      throw new ParserException(""Cannot find JavaParserProvider capable of producing JavaSource of type ""
+               + type.getSimpleName(), new IllegalArgumentException(type.getName()));
    }
 
    /**
-    * Read the given {@link URL} and parse its data into a new {@link JavaSource} instance of the given type.
+    * Open the given {@link File}, parsing its contents into a new {@link JavaType} instance.
+    */
+   public static JavaType<?> parse(final File file) throws FileNotFoundException
+   {
+      return parse(JavaType.class, file);
+   }
+
+   /**
+    * Parse the given {@link URL} data into a new {@link JavaType} instance.
+    */
+   public static JavaType<?> parse(final URL data) throws IOException
+   {
+      return parse(JavaType.class, data);
+   }
+
+   /**
+    * Read the given {@link InputStream} and parse the data into a new {@link JavaType} instance.
+    */
+   public static JavaType<?> parse(final InputStream data)
+   {
+      return parse(JavaType.class, data);
+   }
+
+   /**
+    * Parse the given character array into a new {@link JavaType} instance.
+    */
+   public static JavaType<?> parse(final char[] data)
+   {
+      return parse(JavaType.class, data);
+   }
+
+   /**
+    * Parse the given String data into a new {@link JavaType} instance.
+    */
+   public static JavaType<?> parse(final String data)
+   {
+      return parse(JavaType.class, data);
+   }
+
+   /**
+    * Read the given {@link URL} and parse its data into a new {@link JavaType} instance of the given type.
     * 
     * @throws FileNotFoundException
     */
-   public static <T extends JavaSource<?>> T parse(final Class<T> type, final URL url) throws IOException
+   public static <T extends JavaType<?>> T parse(final Class<T> type, final URL url) throws IOException
    {
-      return getParser().parse(type, url);
+      return internalParse(type, url.openStream());
    }
 
    /**
-    * Read the given {@link File} and parse its data into a new {@link JavaSource} instance of the given type.
+    * Read the given {@link File} and parse its data into a new {@link JavaType} instance of the given type.
     * 
     * @throws FileNotFoundException
     */
-   public static <T extends JavaSource<?>> T parse(final Class<T> type, final File file) throws FileNotFoundException
+   public static <T extends JavaType<?>> T parse(final Class<T> type, final File file) throws FileNotFoundException
    {
-      return getParser().parse(type, file);
+      return internalParse(type, new FileInputStream(file));
    }
 
    /**
-    * Read the given {@link InputStream} and parse its data into a new {@link JavaSource} instance of the given type.
+    * Read the given character array and parse its data into a new {@link JavaType} instance of the given type.
     */
-   public static <T extends JavaSource<?>> T parse(final Class<T> type, final InputStream data)
+   public static <T extends JavaType<?>> T parse(final Class<T> type, final char[] data)
    {
-      return getParser().parse(type, data);
+      return parse(type, new String(data));
    }
 
    /**
-    * Read the given character array and parse its data into a new {@link JavaSource} instance of the given type.
+    * Read the given string and parse its data into a new {@link JavaType} instance of the given type.
     */
-   public static <T extends JavaSource<?>> T parse(final Class<T> type, final char[] data)
+   public static <T extends JavaType<?>> T parse(final Class<T> type, final String data)
    {
-      return getParser().parse(type, data);
+      return parse(type, Streams.fromString(data));
    }
 
    /**
-    * Read the given string and parse its data into a new {@link JavaSource} instance of the given type.
+    * Read the given {@link InputStream} and parse its data into a new {@link JavaType} instance of the given type.
+    * The caller is responsible for closing the stream.
     */
-   public static <T extends JavaSource<?>> T parse(final Class<T> type, final String data)
+   public static <T extends JavaType<?>> T parse(final Class<T> type, final InputStream data)
    {
-      return getParser().parse(type, data);
+      for (JavaParserProvider parser : getParsers())
+      {
+         final JavaType<?> source = parser.parse(data);
+
+         if (type.isInstance(source))
+         {
+            @SuppressWarnings(""unchecked"")
+            final T result = (T) source;
+            return result;
+         }
+         else if (source != null)
+         {
+            throw new ParserException(""Source does not represent a ["" + type.getSimpleName() + ""], instead was [""
+                     + source.getClass().getSimpleName() + ""] - Cannot convert."");
+         }
+      }
+      throw new ParserException(""Cannot find JavaParserProvider capable of parsing the requested data"");
+   }
+
+   private static <T extends JavaType<?>> T internalParse(final Class<T> type, final InputStream data)
+   {
+      try
+      {
+         return parse(type, data);
+      }
+      finally
+      {
+         Streams.closeQuietly(data);
+      }
    }
 }
"
3be61b82e6518aaa23f450d669221359d668ac96,George Gastaldi,Annotation.java,MODIFY,"getEnumValue -> [Class type, String name] | [Class type]","diff --git a/api/src/main/java/org/jboss/forge/parser/java/Annotation.java b/api/src/main/java/org/jboss/forge/parser/java/Annotation.java
index 597f66e..3c5e5f1 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/Annotation.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/Annotation.java
@@ -12,9 +12,11 @@
 import org.jboss.forge.parser.Origin;
 
 /**
+ * Represents an annotation on some Java element.
+ * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
-public interface Annotation<O extends JavaSource<O>> extends Internal, Origin<O>
+public interface Annotation<O extends JavaType<O>> extends Internal, Origin<O>
 {
    boolean isSingleValue();
 
@@ -44,36 +46,10 @@
 
    String getStringValue(String name);
 
-   Annotation<O> removeValue(String name);
-
-   Annotation<O> removeAllValues();
-
-   Annotation<O> setName(String className);
-
-   Annotation<O> setEnumValue(String name, Enum<?> value);
-
-   Annotation<O> setEnumValue(Enum<?>... value);
-
-   Annotation<O> setEnumArrayValue(String name, Enum<?>... values);
-   
-   Annotation<O> setEnumArrayValue(Enum<?>... values);
-
-   Annotation<O> setLiteralValue(String value);
-
-   Annotation<O> setLiteralValue(String name, String value);
-
-   Annotation<O> setStringValue(String value);
-
-   Annotation<O> setStringValue(String name, String value);
-
    Annotation<O> getAnnotationValue();
 
    Annotation<O> getAnnotationValue(String name);
 
-   Annotation<O> setAnnotationValue();
-
-   Annotation<O> setAnnotationValue(String name);
-
    Class<?> getClassValue();
 
    Class<?> getClassValue(String name);
@@ -81,13 +57,4 @@
    Class<?>[] getClassArrayValue();
 
    Class<?>[] getClassArrayValue(String name);
-
-   Annotation<O> setClassValue(String name, Class<?> value);
-
-   Annotation<O> setClassValue(Class<?> value);
-
-   Annotation<O> setClassArrayValue(String name, Class<?>... values);
-
-   Annotation<O> setClassArrayValue(Class<?>... values);
-
 }
"
3be61b82e6518aaa23f450d669221359d668ac96,George Gastaldi,AnnotationElement.java,MODIFY,isType -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/AnnotationElement.java b/api/src/main/java/org/jboss/forge/parser/java/AnnotationElement.java
index 27a7d48..543f520 100755
--- a/api/src/main/java/org/jboss/forge/parser/java/AnnotationElement.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/AnnotationElement.java
@@ -10,15 +10,18 @@
 import org.jboss.forge.parser.Origin;
 
 /**
+ * Represents an element definition of a {@link JavaAnnotation}.
+ * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * @author Matt Benson
  */
-public interface AnnotationElement extends AnnotationTarget<JavaAnnotation, AnnotationElement>, Origin<JavaAnnotation>, Named<AnnotationElement>
+public interface AnnotationElement<O extends JavaAnnotation<O>> extends AnnotationTarget<O>,
+         Origin<O>, Named
 {
    /**
-    * Represents the default value of a given annotation element and provides mechanisms to set that value.
+    * Represents the default value of a given {@link AnnotationElement}.
     */
-   public interface DefaultValue
+   public interface ReadDefaultValue<O extends JavaAnnotation<O>>
    {
       String getString();
 
@@ -28,28 +31,13 @@
 
       <T extends Enum<T>> T[] getEnumArray(Class<T> type);
 
-      Annotation<JavaAnnotation> getAnnotation();
+      Annotation<O> getAnnotation();
 
       Class<?> getSingleClass();
 
       Class<?>[] getClassArray();
-
-      DefaultValue setLiteral(String value);
-
-      DefaultValue setString(String value);
-
-      <T extends Enum<T>> DefaultValue setEnum(T value);
-
-      <T extends Enum<T>> DefaultValue setEnumArray(T... values);
-
-      Annotation<JavaAnnotation> setAnnotation();
-
-      DefaultValue setSingleClass(Class<?> value);
-
-      DefaultValue setClassArray(Class<?>... values);
-
    }
-
+   
    /**
     * Get this annotation element's type.
     */
@@ -63,7 +51,7 @@
    /**
     * Get this annotation element's {@link Type}
     */
-   Type<JavaAnnotation> getTypeInspector();
+   Type<O> getTypeInspector();
 
    /**
     * Attempt to determine if this annotation element is of the same type as the given type.
@@ -75,24 +63,5 @@
     */
    boolean isType(String type);
 
-   /**
-    * Set the type of this {@link AnnotationElement} to the given {@link Class} type. Attempt to add an import statement
-    * to this annotation element's base {@link O} if required.
-    */
-   AnnotationElement setType(Class<?> clazz);
-
-   /**
-    * Set the type of this {@link AnnotationElement} to the given type. Attempt to add an import statement to this
-    * annotation element's base {@link O} if required. (Note that the given className must be fully-qualified in order
-    * to properly import required classes)
-    */
-   AnnotationElement setType(String type);
-
-   /**
-    * Set the type of this {@link AnnotationElement} to the given {@link JavaSource<?>} type. Attempt to add an import
-    * statement to this field's base {@link O} if required.
-    */
-   AnnotationElement setType(JavaSource<?> entity);
-
-   DefaultValue getDefaultValue();
+   ReadDefaultValue<O> getDefaultValue();
 }
"
3be61b82e6518aaa23f450d669221359d668ac96,George Gastaldi,AnnotationTarget.java,MODIFY,hasAnnotation -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/AnnotationTarget.java b/api/src/main/java/org/jboss/forge/parser/java/AnnotationTarget.java
index 03c309a..e10148a 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/AnnotationTarget.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/AnnotationTarget.java
@@ -13,30 +13,13 @@
 import org.jboss.forge.parser.Origin;
 
 /**
+ * Represents a Java element that may carry annotations.
+ * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
-public interface AnnotationTarget<O extends JavaSource<O>, T> extends Internal, Origin<O>
+public interface AnnotationTarget<O extends JavaType<O>> extends Internal, Origin<O>
 {
-   /**
-    * Add a new annotation instance to this {@link T}. (Note that an import statement must be added manually if
-    * required.)
-    */
-   public abstract Annotation<O> addAnnotation();
-
-   /**
-    * Add a new annotation instance to this {@link T}, using the given {@link Class} as the annotation type. Attempt to
-    * add an import statement to this object's {@link O} if required.
-    */
-   public abstract Annotation<O> addAnnotation(Class<? extends java.lang.annotation.Annotation> type);
-
-   /**
-    * Add a new annotation instance to this {@link T}, using the given {@link String} className as the annotation type.
-    * Attempt to add an import statement to this object's {@link O} if required. (Note that the given className must be
-    * fully-qualified in order to properly import required classes)
-    */
-   public abstract Annotation<O> addAnnotation(final String className);
-
-   public abstract List<Annotation<O>> getAnnotations();
+   public List<? extends Annotation<O>> getAnnotations();
 
    public boolean hasAnnotation(final Class<? extends java.lang.annotation.Annotation> type);
 
@@ -45,6 +28,4 @@
    public Annotation<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type);
 
    public Annotation<O> getAnnotation(final String type);
-
-   public abstract T removeAnnotation(Annotation<O> annotation);
-}
+}
\ No newline at end of file
"
3be61b82e6518aaa23f450d669221359d668ac96,George Gastaldi,Field.java,MODIFY,isType -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/Field.java b/api/src/main/java/org/jboss/forge/parser/java/Field.java
index fe6a48c..289e4bc 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/Field.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/Field.java
@@ -7,11 +7,14 @@
 
 package org.jboss.forge.parser.java;
 
+
 /**
+ * Represents a field of a {@link JavaClass}, {@link JavaInterface}, or {@link JavaEnum}.
+ * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
- *
+ * 
  */
-public interface Field<O extends JavaSource<O>> extends Member<O, Field<O>>
+public interface Field<O extends JavaType<O>> extends Member<O>
 {
    /**
     * Get this field's type.
@@ -38,49 +41,25 @@
     */
    boolean isType(String type);
 
-   /**
-    * Set the type of this {@link Field} to the given {@link Class} type. Attempt to add an import statement to this
-    * field's base {@link O} if required.
-    */
-   Field<O> setType(Class<?> clazz);
-
-   /**
-    * Set the type of this {@link Field} to the given type. Attempt to add an import statement to this field's base
-    * {@link O} if required. (Note that the given className must be fully-qualified in order to properly import required
-    * classes)
-    */
-   Field<O> setType(String type);
-
-   /**
-    * Set the type of this {@link Field} to the given {@link JavaSource<?>} type. Attempt to add an import statement to
-    * this field's base {@link O} if required.
-    */
-   Field<O> setType(JavaSource<?> entity);
-
    String getStringInitializer();
 
    String getLiteralInitializer();
 
-   Field<O> setLiteralInitializer(String value);
-
-   Field<O> setStringInitializer(String value);
-
    /**
     * 
-    * @return True if the type of the field is a primitive type 
+    * @return True if the type of the field is a primitive type
     */
    boolean isPrimitive();
-   
+
    /**
     * 
     * @return True if the field is transient
     */
    boolean isTransient();
-   
+
    /**
     * 
     * @return True if the field is volatile
     */
    boolean isVolatile();
-   
 }
"
3be61b82e6518aaa23f450d669221359d668ac96,George Gastaldi,FieldHolder.java,MODIFY,hasField -> [Field field] | [String name],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/FieldHolder.java b/api/src/main/java/org/jboss/forge/parser/java/FieldHolder.java
index d65328f..88e5f84 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/FieldHolder.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/FieldHolder.java
@@ -10,26 +10,14 @@
 import java.util.List;
 
 /**
+ * Represents a {@link JavaType} that may contain field definitions.
+ * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * 
  */
-@SuppressWarnings(""rawtypes"")
-public interface FieldHolder<O extends JavaSource<O>> extends MemberHolder<O, Member>
+public interface FieldHolder<O extends JavaType<O>> extends MemberHolder<O>
 {
    /**
-    * Add a new Java {@link Field} to this {@link O} instance. This field will be a stub until further modified.
-    */
-   public Field<O> addField();
-
-   /**
-    * Add a new {@link Field} declaration to this {@link O} instance, using the given {@link String} as the declaration.
-    * <p/>
-    * <strong>For example:</strong><br>
-    * <code>Field f = javaClass.addField(""private String newField;"");</code>
-    */
-   public Field<O> addField(final String declaration);
-
-   /**
     * Return whether or not this {@link O} declares a {@link Field} with the given name.
     */
    public boolean hasField(String name);
@@ -45,13 +33,9 @@
    public Field<O> getField(String name);
 
    /**
-    * Get a list of all {@link Field}s declared by this {@link O}, or return an empty list if no {@link Field}s are
-    * declared.
+    * Get a list of all {@link Field}s declared by this {@link O}, or return an empty list if no {@link Field}s
+    * are declared.
     */
-   public List<Field<O>> getFields();
-
-   /**
-    * Remove the given {@link Field} from this {@link O} instance, if it exists; otherwise, do nothing.
-    */
-   public O removeField(final Field<O> field);
+   public List<? extends Field<O>> getFields();
 }
+
"
3be61b82e6518aaa23f450d669221359d668ac96,George Gastaldi,InterfaceCapable.java,MODIFY,hasInterface -> [JavaInterface type] | [String type],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/InterfaceCapable.java b/api/src/main/java/org/jboss/forge/parser/java/InterfaceCapable.java
index 68e2a63..c8eecdb 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/InterfaceCapable.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/InterfaceCapable.java
@@ -9,28 +9,18 @@
 import java.util.List;
 
 /**
+ * Represents a {@link JavaType} that may implement one or more interfaces.
+ * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * 
  */
-public interface InterfaceCapable<T extends JavaSource<T>>
+public interface InterfaceCapable
 {
    List<String> getInterfaces();
 
-   T addInterface(String type);
-
-   T addInterface(Class<?> type);
-
-   T addInterface(JavaInterface type);
-
    boolean hasInterface(String type);
 
    boolean hasInterface(Class<?> type);
 
-   boolean hasInterface(JavaInterface type);
-
-   T removeInterface(String type);
-
-   T removeInterface(Class<?> type);
-
-   T removeInterface(JavaInterface type);
-}
+   boolean hasInterface(JavaInterface<?> type);
+}
\ No newline at end of file
"
3be61b82e6518aaa23f450d669221359d668ac96,George Gastaldi,JavaAnnotation.java,MODIFY,hasAnnotationElement -> [AnnotationElement annotationElement] | [String name],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/JavaAnnotation.java b/api/src/main/java/org/jboss/forge/parser/java/JavaAnnotation.java
index a42728d..980da1a 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/JavaAnnotation.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/JavaAnnotation.java
@@ -7,60 +7,38 @@
 
 package org.jboss.forge.parser.java;
 
-import java.lang.annotation.Annotation;
 import java.util.List;
 
 import org.jboss.forge.parser.JavaParser;
 
 /**
- * Represents a Java {@link Annotation} source file as an in-memory modifiable
- * element. See {@link JavaParser} for various options in generating
+ * Represents a Java {@code @interface} annotation type. See {@link JavaParser} for various options in generating
  * {@link JavaAnnotation} instances.
  * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
-public interface JavaAnnotation extends JavaSource<JavaAnnotation>
+public interface JavaAnnotation<O extends JavaAnnotation<O>> extends JavaType<O>
 {
 
    /**
-    * Add a new Java {@link AnnotationElement} to this {@link JavaAnnotation} instance. This will be a stub until
-    * further modified.
-    */
-   public AnnotationElement addAnnotationElement();
-
-   /**
-    * Add a new {@link AnnotationElement} declaration to this {@link JavaAnnotation} instance, using the given
-    * {@link String} as the declaration.
-    * <p/>
-    * <strong>For example:</strong><br>
-    * <code>AnnotationElement e = javaClass.addAnnotationElement(""String newAnnotationElement();"");</code>
-    */
-   public AnnotationElement addAnnotationElement(final String declaration);
-
-   /**
-    * Return whether or not this {@link JavaAnnotation} declares an {@link AnnotationElement} with the given name.
+    * Return whether or not this {@link JavaAnnotation} declares an {@link AnnotationElement} with the given
+    * name.
     */
    public boolean hasAnnotationElement(String name);
 
    /**
     * Return whether or not this {@link JavaAnnotation} declares the given {@link AnnotationElement} instance.
     */
-   public boolean hasAnnotationElement(AnnotationElement annotationElement);
+   public boolean hasAnnotationElement(AnnotationElement<?> annotationElement);
 
    /**
     * Get the {@link AnnotationElement} with the given name and return it, otherwise, return null.
     */
-   public AnnotationElement getAnnotationElement(String name);
+   public AnnotationElement<O> getAnnotationElement(String name);
 
    /**
-    * Get a list of all {@link AnnotationElement}s declared by this {@link JavaAnnotation}, or return an empty list if
-    * no {@link AnnotationElement}s are declared.
+    * Get a list of all {@link AnnotationElement}s declared by this {@link JavaAnnotation}, or return an empty
+    * list if no {@link AnnotationElement}s are declared.
     */
-   public List<AnnotationElement> getAnnotationElements();
-
-   /**
-    * Remove the given {@link AnnotationElement} from this {@link JavaAnnotation} instance, if it exists; otherwise, do
-    * nothing.
-    */
-   public JavaAnnotation removeAnnotationElement(final AnnotationElement annotationElement);
+   public List<? extends AnnotationElement<O>> getAnnotationElements();
 }
\ No newline at end of file
"
3be61b82e6518aaa23f450d669221359d668ac96,George Gastaldi,MethodHolder.java,MODIFY,"hasMethodSignature -> [String name, Class paramTypes] | [Method method]","diff --git a/api/src/main/java/org/jboss/forge/parser/java/MethodHolder.java b/api/src/main/java/org/jboss/forge/parser/java/MethodHolder.java
index 6cb730b..fe25bfa 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/MethodHolder.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/MethodHolder.java
@@ -10,36 +10,22 @@
 import java.util.List;
 
 /**
+ * Represents a {@link JavaType} that may declare methods.
+ * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * 
  */
-@SuppressWarnings(""rawtypes"")
-public interface MethodHolder<O extends JavaSource<O>> extends MemberHolder<O, Member>
+public interface MethodHolder<O extends JavaType<O>> extends MemberHolder<O>
 {
    /**
-    * Add an uninitialized {@link Method} declaration to this {@link O} instance. This {@link Method} will be a stub
-    * until further modified.
-    */
-   public Method<O> addMethod();
-
-   /**
-    * Add a new {@link Method} declaration to this {@link O} instance, using the given {@link String} as the method
-    * declaration.
-    * <p/>
-    * <strong>For example:</strong><br>
-    * <code>Method m = javaClass.addMethod(""public String method() {return \""hello!\"";}"")</code>
-    */
-   public Method<O> addMethod(final String method);
-
-   /**
     * Return true if this {@link O} has a method with the given name and zero parameters; otherwise return false.
     */
-   public boolean hasMethod(final Method<O> name);
+   public boolean hasMethod(final Method<O, ?> name);
 
    /**
     * Return true if this {@link O} has a method with signature matching the given method's signature.
     */
-   public boolean hasMethodSignature(final Method<?> method);
+   public boolean hasMethodSignature(final Method<?, ?> method);
 
    /**
     * Return true if this {@link O} has a method with the given name and zero parameters; otherwise return false.
@@ -59,27 +45,21 @@
    /**
     * Return the {@link Method} with the given name and zero parameters; otherwise return null.
     */
-   public Method<O> getMethod(final String name);
+   public Method<O, ?> getMethod(final String name);
 
    /**
     * Return the {@link Method} with the given name and signature types; otherwise return null.
     */
-   public Method<O> getMethod(final String name, String... paramTypes);
+   public Method<O, ?> getMethod(final String name, String... paramTypes);
 
    /**
     * Return the {@link Method} with the given name and signature types; otherwise return null.
     */
-   public Method<O> getMethod(final String name, Class<?>... paramTypes);
+   public Method<O, ?> getMethod(final String name, Class<?>... paramTypes);
 
    /**
-    * Get a {@link List} of all {@link Method}s declared by this {@link O} instance, if any; otherwise, return an empty
-    * {@link List}
+    * Get a {@link List} of all {@link Method}s declared by this {@link O} instance, if any; otherwise, return an
+    * empty {@link List}
     */
-   public List<Method<O>> getMethods();
-
-   /**
-    * Remove the given {@link Method} declaration from this {@link O} instance, if it exists; otherwise, do nothing.
-    */
-   public O removeMethod(final Method<O> method);
-
-}
+   public List<? extends Method<O, ?>> getMethods();
+}
\ No newline at end of file
"
3be61b82e6518aaa23f450d669221359d668ac96,George Gastaldi,Refactory.java,MODIFY,"createHashCodeAndEquals -> [JavaClassSource clazz, FieldSource fields] | [JavaClassSource clazz]","diff --git a/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java b/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java
index d39cb48..80d77ae 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java
@@ -10,12 +10,12 @@
 import java.util.Arrays;
 import java.util.List;
 
-import org.jboss.forge.parser.java.Field;
-import org.jboss.forge.parser.java.JavaClass;
-import org.jboss.forge.parser.java.Method;
+import org.jboss.forge.parser.java.source.FieldSource;
+import org.jboss.forge.parser.java.source.JavaClassSource;
+import org.jboss.forge.parser.java.source.MethodSource;
 
 /**
- * Utility refactory methods for {@link JavaClass} objects
+ * Utility refactory methods for {@link JavaClassSource} objects
  * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * @author <a href=""mailto:ggastald@redhat.com"">George Gastaldi</a>
@@ -29,7 +29,7 @@
     * @param clazz
     * @param field
     */
-   public static void createGetterAndSetter(final JavaClass clazz, final Field<JavaClass> field)
+   public static void createGetterAndSetter(final JavaClassSource clazz, final FieldSource<JavaClassSource> field)
    {
       if (!clazz.hasField(field))
       {
@@ -55,11 +55,11 @@
    /**
     * Create a <i>hashCode</i> and <i>equals</i> implementation for the given class and fields
     * 
-    * @deprecated Use {@link Refactory#createHashCodeAndEquals(JavaClass, Field...)} instead, since this method relies
+    * @deprecated Use {@link Refactory#createHashCodeAndEquals(JavaClass, Field<O>...)} instead, since this method relies
     *             on the existence of the id field
     */
    @Deprecated
-   public static void createHashCodeAndEquals(final JavaClass clazz)
+   public static void createHashCodeAndEquals(final JavaClassSource clazz)
    {
       clazz.addMethod(
                ""public boolean equals(Object that) { "" +
@@ -91,7 +91,7 @@
     * @param clazz class to be changed
     * @param fields fields to be used in the equals/hashCode methods
     */
-   public static void createHashCodeAndEquals(final JavaClass clazz, final Field<?>... fields)
+   public static void createHashCodeAndEquals(final JavaClassSource clazz, final FieldSource<?>... fields)
    {
       if (clazz == null)
       {
@@ -113,7 +113,7 @@
       boolean isTempFieldCreated = false;
       StringBuilder fieldEqualityChecks = new StringBuilder();
       StringBuilder hashCodeComputation = new StringBuilder();
-      for (Field<?> field : fields)
+      for (FieldSource<?> field : fields)
       {
          if(field == null)
          {
@@ -265,9 +265,9 @@
     * 
     * @param clazz
     */
-   public static void createToStringFromFields(final JavaClass clazz)
+   public static void createToStringFromFields(final JavaClassSource clazz)
    {
-      List<Field<JavaClass>> fields = clazz.getFields();
+      List<FieldSource<JavaClassSource>> fields = clazz.getFields();
       createToStringFromFields(clazz, fields);
    }
 
@@ -277,7 +277,7 @@
     * @param clazz
     * @param fields
     */
-   public static void createToStringFromFields(final JavaClass clazz, final Field<JavaClass>... fields)
+   public static void createToStringFromFields(final JavaClassSource clazz, final FieldSource<JavaClassSource>... fields)
    {
       createToStringFromFields(clazz, Arrays.asList(fields));
    }
@@ -288,16 +288,16 @@
     * @param clazz
     * @param fields
     */
-   public static void createToStringFromFields(final JavaClass clazz, final List<Field<JavaClass>> fields)
+   public static void createToStringFromFields(final JavaClassSource clazz, final List<FieldSource<JavaClassSource>> fields)
    {
-      Method<JavaClass> method = clazz.addMethod().setName(""toString"").setReturnType(String.class)
+      MethodSource<JavaClassSource> method = clazz.addMethod().setName(""toString"").setReturnType(String.class)
                .setPublic();
       method.addAnnotation(Override.class);
 
       List<String> list = new ArrayList<String>();
 
       String delimeter = ""\n"";
-      for (Field<JavaClass> field : fields)
+      for (FieldSource<JavaClassSource> field : fields)
       {
          if (clazz.hasField(field))
          {
"
3be61b82e6518aaa23f450d669221359d668ac96,George Gastaldi,AnnotationAccessor.java,MODIFY,"addAnnotation -> [AnnotationTargetSource target, List modifiers, String className] | [AnnotationTargetSource target, ASTNode body]","diff --git a/impl/src/main/java/org/jboss/forge/parser/java/ast/AnnotationAccessor.java b/impl/src/main/java/org/jboss/forge/parser/java/ast/AnnotationAccessor.java
index f528252..3def7e9 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/ast/AnnotationAccessor.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/ast/AnnotationAccessor.java
@@ -18,9 +18,10 @@
 import org.eclipse.jdt.core.dom.PackageDeclaration;
 import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
 import org.jboss.forge.parser.java.Annotation;
-import org.jboss.forge.parser.java.AnnotationTarget;
-import org.jboss.forge.parser.java.JavaSource;
 import org.jboss.forge.parser.java.impl.AnnotationImpl;
+import org.jboss.forge.parser.java.source.AnnotationSource;
+import org.jboss.forge.parser.java.source.AnnotationTargetSource;
+import org.jboss.forge.parser.java.source.JavaSource;
 import org.jboss.forge.parser.java.util.Types;
 
 /**
@@ -29,18 +30,18 @@
 public class AnnotationAccessor<O extends JavaSource<O>, T>
 {
 
-   public Annotation<O> addAnnotation(final AnnotationTarget<O, T> target, final ASTNode body)
+   public AnnotationSource<O> addAnnotation(final AnnotationTargetSource<O, T> target, final ASTNode body)
    {
       return addAnnotation(target, getModifiers(body));
    }
 
-   public Annotation<O> addAnnotation(final AnnotationTarget<O, T> target,
+   public AnnotationSource<O> addAnnotation(final AnnotationTargetSource<O, T> target,
             final SingleVariableDeclaration variableDeclaration)
    {
       return addAnnotation(target, variableDeclaration.modifiers());
    }
 
-   private Annotation<O> addAnnotation(final AnnotationTarget<O, T> target, final List<?> modifiers)
+   private AnnotationSource<O> addAnnotation(final AnnotationTargetSource<O, T> target, final List<?> modifiers)
    {
       @SuppressWarnings(""unchecked"")
       ListIterator<IExtendedModifier> iter = (ListIterator<IExtendedModifier>) modifiers.listIterator();
@@ -52,38 +53,38 @@
       {
          iter.next();
       }
-      Annotation<O> annotation = new AnnotationImpl<O, T>(target);
+      AnnotationSource<O> annotation = new AnnotationImpl<O, T>(target);
       iter.add((IExtendedModifier) annotation.getInternal());
       return annotation;
    }
 
-   public Annotation<O> addAnnotation(final AnnotationTarget<O, T> target, final ASTNode body,
+   public AnnotationSource<O> addAnnotation(final AnnotationTargetSource<O, T> target, final ASTNode body,
             final Class<?> clazz)
    {
       return addAnnotation(target, getModifiers(body), clazz.getName());
    }
 
-   public Annotation<O> addAnnotation(final AnnotationTarget<O, T> target,
+   public AnnotationSource<O> addAnnotation(final AnnotationTargetSource<O, T> target,
             final SingleVariableDeclaration variableDeclaration,
             final Class<?> clazz)
    {
       return addAnnotation(target, variableDeclaration.modifiers(), clazz.getName());
    }
 
-   public Annotation<O> addAnnotation(final AnnotationTarget<O, T> target, final ASTNode body,
+   public AnnotationSource<O> addAnnotation(final AnnotationTargetSource<O, T> target, final ASTNode body,
             final String className)
    {
       return addAnnotation(target, getModifiers(body), className);
    }
 
-   public Annotation<O> addAnnotation(final AnnotationTarget<O, T> target,
+   public AnnotationSource<O> addAnnotation(final AnnotationTargetSource<O, T> target,
             final SingleVariableDeclaration variableDeclaration,
             final String className)
    {
       return addAnnotation(target, variableDeclaration.modifiers(), className);
    }
 
-   private Annotation<O> addAnnotation(final AnnotationTarget<O, T> target, final List<?> modifiers,
+   private AnnotationSource<O> addAnnotation(final AnnotationTargetSource<O, T> target, final List<?> modifiers,
             final String className)
    {
       if (!target.getOrigin().hasImport(className) && Types.isQualified(className))
@@ -93,26 +94,26 @@
       return addAnnotation(target, modifiers).setName(Types.toSimpleName(className));
    }
 
-   public List<Annotation<O>> getAnnotations(final AnnotationTarget<O, T> target, final ASTNode body)
+   public List<AnnotationSource<O>> getAnnotations(final AnnotationTargetSource<O, T> target, final ASTNode body)
    {
       return getAnnotations(target, getModifiers(body));
    }
 
-   public List<Annotation<O>> getAnnotations(final AnnotationTarget<O, T> target,
+   public List<AnnotationSource<O>> getAnnotations(final AnnotationTargetSource<O, T> target,
             final SingleVariableDeclaration variableDeclaration)
    {
       return getAnnotations(target, variableDeclaration.modifiers());
    }
 
-   private List<Annotation<O>> getAnnotations(final AnnotationTarget<O, T> target, final List<?> modifiers)
+   private List<AnnotationSource<O>> getAnnotations(final AnnotationTargetSource<O, T> target, final List<?> modifiers)
    {
-      List<Annotation<O>> result = new ArrayList<Annotation<O>>();
+      List<AnnotationSource<O>> result = new ArrayList<AnnotationSource<O>>();
 
       for (Object object : modifiers)
       {
          if (object instanceof org.eclipse.jdt.core.dom.Annotation)
          {
-            Annotation<O> annotation = new AnnotationImpl<O, T>(target, object);
+            AnnotationSource<O> annotation = new AnnotationImpl<O, T>(target, object);
             result.add(annotation);
          }
       }
@@ -120,20 +121,20 @@
       return Collections.unmodifiableList(result);
    }
 
-   public <E extends AnnotationTarget<O, T>> E removeAnnotation(final E target, final ASTNode body,
+   public <E extends AnnotationTargetSource<O, T>> E removeAnnotation(final E target, final ASTNode body,
             final Annotation<O> annotation)
    {
       return removeAnnotation(target, getModifiers(body), annotation);
    }
 
-   public <E extends AnnotationTarget<O, T>> E removeAnnotation(final E target,
+   public <E extends AnnotationTargetSource<O, T>> E removeAnnotation(final E target,
             final SingleVariableDeclaration variableDeclaration,
             final Annotation<O> annotation)
    {
       return removeAnnotation(target, variableDeclaration.modifiers(), annotation);
    }
 
-   private <E extends AnnotationTarget<O, T>> E removeAnnotation(final E target, final List<?> modifiers,
+   private <E extends AnnotationTargetSource<O, T>> E removeAnnotation(final E target, final List<?> modifiers,
             final Annotation<O> annotation)
    {
       for (Object object : modifiers)
@@ -147,27 +148,27 @@
       return target;
    }
 
-   public <E extends AnnotationTarget<O, T>> boolean hasAnnotation(final E target, final ASTNode body,
+   public <E extends AnnotationTargetSource<O, T>> boolean hasAnnotation(final E target, final ASTNode body,
             final String type)
    {
       return hasAnnotation(target, getModifiers(body), type);
    }
 
-   public <E extends AnnotationTarget<O, T>> boolean hasAnnotation(final E target,
+   public <E extends AnnotationTargetSource<O, T>> boolean hasAnnotation(final E target,
             final SingleVariableDeclaration variableDeclaration,
             final String type)
    {
       return hasAnnotation(target, variableDeclaration.modifiers(), type);
    }
 
-   private <E extends AnnotationTarget<O, T>> boolean hasAnnotation(final E target, final List<?> modifiers,
+   private <E extends AnnotationTargetSource<O, T>> boolean hasAnnotation(final E target, final List<?> modifiers,
             final String type)
    {
       for (Object object : modifiers)
       {
          if (object instanceof org.eclipse.jdt.core.dom.Annotation)
          {
-            Annotation<O> annotation = new AnnotationImpl<O, T>(target, object);
+            AnnotationSource<O> annotation = new AnnotationImpl<O, T>(target, object);
             String annotationType = annotation.getName();
             if (Types.areEquivalent(type, annotationType))
             {
@@ -178,34 +179,34 @@
       return false;
    }
 
-   public Annotation<O> getAnnotation(final AnnotationTarget<O, T> target, final ASTNode body,
+   public AnnotationSource<O> getAnnotation(final AnnotationTargetSource<O, T> target, final ASTNode body,
             final Class<? extends java.lang.annotation.Annotation> type)
    {
       return getAnnotation(target, getModifiers(body), type.getName());
    }
 
-   public Annotation<O> getAnnotation(final AnnotationTarget<O, T> target,
+   public AnnotationSource<O> getAnnotation(final AnnotationTargetSource<O, T> target,
             final SingleVariableDeclaration variableDeclaration,
             final Class<? extends java.lang.annotation.Annotation> type)
    {
       return getAnnotation(target, variableDeclaration.modifiers(), type.getName());
    }
 
-   public Annotation<O> getAnnotation(final AnnotationTarget<O, T> target, final ASTNode body, final String type)
+   public AnnotationSource<O> getAnnotation(final AnnotationTargetSource<O, T> target, final ASTNode body, final String type)
    {
       return getAnnotation(target, getModifiers(body), type);
    }
 
-   public Annotation<O> getAnnotation(final AnnotationTarget<O, T> target,
+   public AnnotationSource<O> getAnnotation(final AnnotationTargetSource<O, T> target,
             final SingleVariableDeclaration variableDeclaration, final String type)
    {
       return getAnnotation(target, variableDeclaration.modifiers(), type);
    }
 
-   private Annotation<O> getAnnotation(final AnnotationTarget<O, T> target, final List<?> modifiers, final String type)
+   private AnnotationSource<O> getAnnotation(final AnnotationTargetSource<O, T> target, final List<?> modifiers, final String type)
    {
-      List<Annotation<O>> annotations = getAnnotations(target, modifiers);
-      for (Annotation<O> annotation : annotations)
+      List<AnnotationSource<O>> annotations = getAnnotations(target, modifiers);
+      for (AnnotationSource<O> annotation : annotations)
       {
          if (Types.areEquivalent(type, annotation.getName()))
          {
"
3be61b82e6518aaa23f450d669221359d668ac96,George Gastaldi,AbstractGenericCapableJavaSource.java,MODIFY,removeTypeVariable -> [TypeVariable typeVariable] | [String name],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractGenericCapableJavaSource.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractGenericCapableJavaSource.java
index 7714c0b..93b303f 100755
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractGenericCapableJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractGenericCapableJavaSource.java
@@ -16,70 +16,86 @@
 import org.eclipse.jdt.core.dom.TypeDeclaration;
 import org.eclipse.jdt.core.dom.TypeParameter;
 import org.eclipse.jface.text.Document;
-import org.jboss.forge.parser.java.GenericCapable;
-import org.jboss.forge.parser.java.JavaSource;
+import org.jboss.forge.parser.java.TypeVariable;
+import org.jboss.forge.parser.java.source.GenericCapableSource;
+import org.jboss.forge.parser.java.source.JavaSource;
+import org.jboss.forge.parser.java.source.TypeVariableSource;
+import org.jboss.forge.parser.java.util.Strings;
 
 /**
  * 
  * @author mbenson
- *
+ * 
  * @param <O>
  */
 @SuppressWarnings(""unchecked"")
 public abstract class AbstractGenericCapableJavaSource<O extends JavaSource<O>> extends AbstractJavaSourceMemberHolder<O>
-         implements GenericCapable<O>
+         implements GenericCapableSource<O, O>
 {
 
-   public AbstractGenericCapableJavaSource(JavaSource<?> enclosingType, Document document, CompilationUnit unit,
+   protected AbstractGenericCapableJavaSource(JavaSource<?> enclosingType, Document document, CompilationUnit unit,
             BodyDeclaration declaration)
    {
       super(enclosingType, document, unit, declaration);
    }
 
    @Override
-   public List<String> getGenericTypes()
+   public List<TypeVariableSource<O>> getTypeVariables()
    {
-      List<String> result = new ArrayList<String>();
       TypeDeclaration type = (TypeDeclaration) body;
       List<TypeParameter> typeParameters = type.typeParameters();
-      if (typeParameters != null)
+      List<TypeVariableSource<O>> result = new ArrayList<TypeVariableSource<O>>();
+      for (TypeParameter typeParameter : typeParameters)
       {
-         for (TypeParameter typeParameter : typeParameters)
-         {
-            result.add(typeParameter.getName().getIdentifier());
-         }
+         result.add(new TypeVariableImpl<O>((O) this, typeParameter));
       }
       return Collections.unmodifiableList(result);
    }
 
    @Override
-   public O addGenericType(String genericType)
+   public TypeVariableSource<O> getTypeVariable(String name)
+   {
+      TypeDeclaration type = (TypeDeclaration) body;
+      List<TypeParameter> typeParameters = type.typeParameters();
+      for (TypeParameter typeParameter : typeParameters)
+      {
+         if (Strings.areEqual(name, typeParameter.getName().getIdentifier()))
+         {
+            return new TypeVariableImpl<O>((O) this, typeParameter);
+         }
+      }
+      return null;
+   }
+
+   @Override
+   public TypeVariableSource<O> addTypeVariable()
    {
       TypeDeclaration type = (TypeDeclaration) body;
       TypeParameter tp2 = unit.getAST().newTypeParameter();
-      tp2.setName(unit.getAST().newSimpleName(genericType));
       type.typeParameters().add(tp2);
+      return new TypeVariableImpl<O>((O) this, tp2);
+   }
+
+   @Override
+   public O removeTypeVariable(String name)
+   {
+      TypeDeclaration type = (TypeDeclaration) body;
+      List<TypeParameter> typeParameters = type.typeParameters();
+      for (Iterator<TypeParameter> iter = typeParameters.iterator(); iter.hasNext();)
+      {
+         if (Strings.areEqual(name, iter.next().getName().getIdentifier()))
+         {
+            iter.remove();
+            break;
+         }
+      }
       return (O) this;
    }
 
    @Override
-   public O removeGenericType(String genericType)
+   public O removeTypeVariable(TypeVariable<?> typeVariable)
    {
-      TypeDeclaration type = (TypeDeclaration) body;
-      List<TypeParameter> typeParameters = type.typeParameters();
-      if (typeParameters != null)
-      {
-         Iterator<TypeParameter> it = typeParameters.iterator();
-         while (it.hasNext())
-         {
-            TypeParameter typeParameter = it.next();
-            if (typeParameter.getName().getIdentifier().equals(genericType))
-            {
-               it.remove();
-            }
-         }
-      }
-      return (O) this;
+      return removeTypeVariable(typeVariable.getName());
    }
 
 }
"
3be61b82e6518aaa23f450d669221359d668ac96,George Gastaldi,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
index decde2e..0b7c9d0 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSource.java
@@ -14,7 +14,6 @@
 
 import org.eclipse.jdt.core.JavaCore;
 import org.eclipse.jdt.core.compiler.IProblem;
-import org.eclipse.jdt.core.dom.ASTNode;
 import org.eclipse.jdt.core.dom.AbstractTypeDeclaration;
 import org.eclipse.jdt.core.dom.AnnotationTypeDeclaration;
 import org.eclipse.jdt.core.dom.BodyDeclaration;
@@ -23,24 +22,21 @@
 import org.eclipse.jdt.core.dom.ImportDeclaration;
 import org.eclipse.jdt.core.dom.Modifier.ModifierKeyword;
 import org.eclipse.jdt.core.dom.PackageDeclaration;
-import org.eclipse.jdt.core.dom.Type;
 import org.eclipse.jdt.core.dom.TypeDeclaration;
 import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
 import org.eclipse.jface.text.Document;
 import org.eclipse.text.edits.TextEdit;
-import org.jboss.forge.parser.JavaParser;
 import org.jboss.forge.parser.ParserException;
 import org.jboss.forge.parser.java.Annotation;
-import org.jboss.forge.parser.java.Import;
-import org.jboss.forge.parser.java.InterfaceCapable;
-import org.jboss.forge.parser.java.JavaInterface;
-import org.jboss.forge.parser.java.JavaSource;
-import org.jboss.forge.parser.java.Member;
+import org.jboss.forge.parser.java.JavaType;
 import org.jboss.forge.parser.java.SyntaxError;
 import org.jboss.forge.parser.java.Visibility;
 import org.jboss.forge.parser.java.ast.AnnotationAccessor;
 import org.jboss.forge.parser.java.ast.ModifierAccessor;
 import org.jboss.forge.parser.java.ast.TypeDeclarationFinderVisitor;
+import org.jboss.forge.parser.java.source.AnnotationSource;
+import org.jboss.forge.parser.java.source.Import;
+import org.jboss.forge.parser.java.source.JavaSource;
 import org.jboss.forge.parser.java.util.Formatter;
 import org.jboss.forge.parser.java.util.Strings;
 import org.jboss.forge.parser.java.util.Types;
@@ -49,12 +45,12 @@
 
 /**
  * Represents a Java Source File
- *
+ * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
 @SuppressWarnings(""unchecked"")
 public abstract class AbstractJavaSource<O extends JavaSource<O>> implements
-         JavaSource<O>, InterfaceCapable<O>
+         JavaSource<O>
 {
    private final AnnotationAccessor<O, O> annotations = new AnnotationAccessor<O, O>();
    private final ModifierAccessor modifiers = new ModifierAccessor();
@@ -67,7 +63,7 @@
    public static ServiceLoader<WildcardImportResolver> loader = ServiceLoader.load(WildcardImportResolver.class);
    private static List<WildcardImportResolver> resolvers;
 
-   public AbstractJavaSource(JavaSource<?> enclosingType, final Document document, final CompilationUnit unit,
+   protected AbstractJavaSource(JavaSource<?> enclosingType, final Document document, final CompilationUnit unit,
             BodyDeclaration body)
    {
       this.enclosingType = enclosingType == null ? this : enclosingType;
@@ -86,25 +82,25 @@
     * Annotation modifiers
     */
    @Override
-   public Annotation<O> addAnnotation()
+   public AnnotationSource<O> addAnnotation()
    {
       return annotations.addAnnotation(this, getBodyDeclaration());
    }
 
    @Override
-   public Annotation<O> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
+   public AnnotationSource<O> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
    {
       return annotations.addAnnotation(this, getBodyDeclaration(), clazz.getName());
    }
 
    @Override
-   public Annotation<O> addAnnotation(final String className)
+   public AnnotationSource<O> addAnnotation(final String className)
    {
       return annotations.addAnnotation(this, getBodyDeclaration(), className);
    }
 
    @Override
-   public List<Annotation<O>> getAnnotations()
+   public List<AnnotationSource<O>> getAnnotations()
    {
       return annotations.getAnnotations(this, getBodyDeclaration());
    }
@@ -128,13 +124,13 @@
    }
 
    @Override
-   public Annotation<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
+   public AnnotationSource<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
    {
       return annotations.getAnnotation(this, getBodyDeclaration(), type);
    }
 
    @Override
-   public Annotation<O> getAnnotation(final String type)
+   public AnnotationSource<O> getAnnotation(final String type)
    {
       return annotations.getAnnotation(this, getBodyDeclaration(), type);
    }
@@ -150,7 +146,7 @@
    }
 
    @Override
-   public <T extends JavaSource<?>> Import addImport(final T type)
+   public <T extends JavaType<?>> Import addImport(final T type)
    {
       String qualifiedName = type.getQualifiedName();
       return this.addImport(qualifiedName);
@@ -209,7 +205,7 @@
    }
 
    @Override
-   public <T extends JavaSource<?>> Import getImport(final T type)
+   public <T extends JavaType<?>> Import getImport(final T type)
    {
       return getImport(type.getQualifiedName());
    }
@@ -240,7 +236,7 @@
    }
 
    @Override
-   public <T extends JavaSource<T>> boolean hasImport(final T type)
+   public <T extends JavaType<T>> boolean hasImport(final T type)
    {
       return hasImport(type.getQualifiedName());
    }
@@ -286,7 +282,8 @@
       }
       if (!validImport(resultType)
                || hasImport(resultType)
-               || Types.isJavaLang(resultType))
+               || Types.isJavaLang(resultType)
+               || Strings.areEqual(getPackage(), Types.getPackage(resultType)))
       {
          return false;
       }
@@ -411,7 +408,7 @@
    }
 
    @Override
-   public <T extends JavaSource<?>> O removeImport(final T type)
+   public <T extends JavaType<?>> O removeImport(final T type)
    {
       return removeImport(type.getQualifiedName());
    }
@@ -427,14 +424,6 @@
       return (O) this;
    }
 
-   @Override
-   public List<Member<O, ?>> getMembers()
-   {
-      List<Member<O, ?>> result = new ArrayList<Member<O, ?>>();
-
-      return result;
-   }
-
    protected AbstractTypeDeclaration getBodyDeclaration()
    {
       if (body instanceof AbstractTypeDeclaration)
@@ -463,7 +452,7 @@
    {
       String result = getName();
 
-      JavaSource<?> enclosingType = this;
+      JavaType<?> enclosingType = this;
       while (enclosingType != enclosingType.getEnclosingType())
       {
          enclosingType = getEnclosingType();
@@ -487,7 +476,7 @@
    {
       String result = getName();
 
-      JavaSource<?> enclosingType = this;
+      JavaType<?> enclosingType = this;
       while (enclosingType != enclosingType.getEnclosingType())
       {
          enclosingType = getEnclosingType();
@@ -616,7 +605,7 @@
     * Non-manipulation methods.
     */
    /**
-    * Return this {@link JavaSource} file as a String
+    * Return this {@link JavaType} file as a String
     */
    @Override
    public String toString()
@@ -763,116 +752,6 @@
     */
 
    @Override
-   public List<String> getInterfaces()
-   {
-      List<String> result = new ArrayList<String>();
-      List<Type> superTypes = JDTHelper.getInterfaces(getBodyDeclaration());
-      for (Type type : superTypes)
-      {
-         String name = JDTHelper.getTypeName(type);
-         if (Types.isSimpleName(name) && this.hasImport(name))
-         {
-            Import imprt = this.getImport(name);
-            String pkg = imprt.getPackage();
-            if (!Strings.isNullOrEmpty(pkg))
-            {
-               name = pkg + ""."" + name;
-            }
-         }
-         result.add(name);
-      }
-      return result;
-   }
-
-   @Override
-   public O addInterface(final String type)
-   {
-      if (!this.hasInterface(type))
-      {
-         Type interfaceType = JDTHelper.getInterfaces(
-                  JavaParser.parse(JavaInterfaceImpl.class,
-                           ""public interface Mock extends "" + Types.toSimpleName(type)
-                                    + "" {}"").getBodyDeclaration()).get(0);
-
-         if (this.hasInterface(Types.toSimpleName(type)) || this.hasImport(Types.toSimpleName(type)))
-         {
-            interfaceType = JDTHelper.getInterfaces(JavaParser.parse(JavaInterfaceImpl.class,
-                     ""public interface Mock extends "" + type + "" {}"").getBodyDeclaration()).get(0);
-         }
-
-         this.addImport(type);
-
-         ASTNode node = ASTNode.copySubtree(unit.getAST(), interfaceType);
-         JDTHelper.getInterfaces(getBodyDeclaration()).add((Type) node);
-      }
-      return (O) this;
-   }
-
-   @Override
-   public O addInterface(final Class<?> type)
-   {
-      return addInterface(type.getName());
-   }
-
-   @Override
-   public O addInterface(final JavaInterface type)
-   {
-      return addInterface(type.getQualifiedName());
-   }
-
-   @Override
-   public boolean hasInterface(final String type)
-   {
-      for (String name : getInterfaces())
-      {
-         if (Types.areEquivalent(name, type))
-         {
-            return true;
-         }
-      }
-      return false;
-   }
-
-   @Override
-   public boolean hasInterface(final Class<?> type)
-   {
-      return hasInterface(type.getName());
-   }
-
-   @Override
-   public boolean hasInterface(final JavaInterface type)
-   {
-      return hasInterface(type.getQualifiedName());
-   }
-
-   @Override
-   public O removeInterface(final String type)
-   {
-      List<Type> interfaces = JDTHelper.getInterfaces(getBodyDeclaration());
-      for (Type i : interfaces)
-      {
-         if (Types.areEquivalent(i.toString(), type))
-         {
-            interfaces.remove(i);
-            break;
-         }
-      }
-      return (O) this;
-   }
-
-   @Override
-   public O removeInterface(final Class<?> type)
-   {
-      return removeInterface(type.getName());
-   }
-
-   @Override
-   public O removeInterface(final JavaInterface type)
-   {
-      return removeInterface(type.getQualifiedName());
-   }
-
-   @Override
    public List<JavaSource<?>> getNestedClasses()
    {
       List<AbstractTypeDeclaration> declarations = getNestedDeclarations(body);
"
3be61b82e6518aaa23f450d669221359d668ac96,George Gastaldi,AbstractJavaSourceMemberHolder.java,MODIFY,addField -> [Field field] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java
index ea4b1f4..973982f 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java
@@ -11,22 +11,31 @@
 import java.util.Iterator;
 import java.util.List;
 
+import org.eclipse.jdt.core.dom.ASTNode;
 import org.eclipse.jdt.core.dom.BodyDeclaration;
 import org.eclipse.jdt.core.dom.CompilationUnit;
 import org.eclipse.jdt.core.dom.FieldDeclaration;
 import org.eclipse.jdt.core.dom.MethodDeclaration;
+import org.eclipse.jdt.core.dom.Type;
 import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
 import org.eclipse.jface.text.Document;
 import org.jboss.forge.parser.JavaParser;
 import org.jboss.forge.parser.java.Field;
-import org.jboss.forge.parser.java.FieldHolder;
-import org.jboss.forge.parser.java.JavaClass;
-import org.jboss.forge.parser.java.JavaSource;
-import org.jboss.forge.parser.java.Member;
+import org.jboss.forge.parser.java.JavaInterface;
+import org.jboss.forge.parser.java.JavaType;
 import org.jboss.forge.parser.java.Method;
-import org.jboss.forge.parser.java.MethodHolder;
 import org.jboss.forge.parser.java.Parameter;
 import org.jboss.forge.parser.java.ast.MethodFinderVisitor;
+import org.jboss.forge.parser.java.source.FieldHolderSource;
+import org.jboss.forge.parser.java.source.FieldSource;
+import org.jboss.forge.parser.java.source.Import;
+import org.jboss.forge.parser.java.source.InterfaceCapableSource;
+import org.jboss.forge.parser.java.source.JavaClassSource;
+import org.jboss.forge.parser.java.source.JavaSource;
+import org.jboss.forge.parser.java.source.MemberSource;
+import org.jboss.forge.parser.java.source.MethodHolderSource;
+import org.jboss.forge.parser.java.source.MethodSource;
+import org.jboss.forge.parser.java.source.ParameterSource;
 import org.jboss.forge.parser.java.util.Strings;
 import org.jboss.forge.parser.java.util.Types;
 
@@ -34,10 +43,11 @@
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * 
  */
-public abstract class AbstractJavaSourceMemberHolder<O extends JavaSource<O>> extends AbstractJavaSource<O> implements
-         MethodHolder<O>, FieldHolder<O>
+public abstract class AbstractJavaSourceMemberHolder<O extends JavaSource<O>> extends AbstractJavaSource<O>
+         implements InterfaceCapableSource<O>,
+         MethodHolderSource<O>, FieldHolderSource<O>
 {
-   public AbstractJavaSourceMemberHolder(JavaSource<?> enclosingType, final Document document,
+   protected AbstractJavaSourceMemberHolder(JavaSource<?> enclosingType, final Document document,
             final CompilationUnit unit, BodyDeclaration declaration)
    {
       super(enclosingType, document, unit, declaration);
@@ -48,25 +58,25 @@
     */
    @Override
    @SuppressWarnings(""unchecked"")
-   public Field<O> addField()
+   public FieldSource<O> addField()
    {
-      Field<O> field = new FieldImpl<O>((O) this);
+      FieldSource<O> field = new FieldImpl<O>((O) this);
       addField(field);
       return field;
    }
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public Field<O> addField(final String declaration)
+   public FieldSource<O> addField(final String declaration)
    {
       String stub = ""public class Stub { "" + declaration + "" }"";
-      JavaClass temp = (JavaClass) JavaParser.parse(stub);
-      List<Field<JavaClass>> fields = temp.getFields();
-      Field<O> result = null;
-      for (Field<JavaClass> stubField : fields)
+      JavaClassSource temp = (JavaClassSource) JavaParser.parse(stub);
+      List<FieldSource<JavaClassSource>> fields = temp.getFields();
+      FieldSource<O> result = null;
+      for (FieldSource<JavaClassSource> stubField : fields)
       {
          Object variableDeclaration = stubField.getInternal();
-         Field<O> field = new FieldImpl<O>((O) this, variableDeclaration, true);
+         FieldSource<O> field = new FieldImpl<O>((O) this, variableDeclaration, true);
          addField(field);
          if (result == null)
          {
@@ -93,9 +103,9 @@
    }
 
    @Override
-   public List<Member<O, ?>> getMembers()
+   public List<MemberSource<O, ?>> getMembers()
    {
-      List<Member<O, ?>> result = new ArrayList<Member<O, ?>>();
+      List<MemberSource<O, ?>> result = new ArrayList<MemberSource<O, ?>>();
 
       result.addAll(getFields());
       result.addAll(getMethods());
@@ -105,9 +115,9 @@
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public List<Field<O>> getFields()
+   public List<FieldSource<O>> getFields()
    {
-      List<Field<O>> result = new ArrayList<Field<O>>();
+      List<FieldSource<O>> result = new ArrayList<FieldSource<O>>();
 
       List<BodyDeclaration> bodyDeclarations = getBodyDeclaration().bodyDeclarations();
       for (BodyDeclaration bodyDeclaration : bodyDeclarations)
@@ -127,9 +137,9 @@
    }
 
    @Override
-   public Field<O> getField(final String name)
+   public FieldSource<O> getField(final String name)
    {
-      for (Field<O> field : getFields())
+      for (FieldSource<O> field : getFields())
       {
          if (field.getName().equals(name))
          {
@@ -142,7 +152,7 @@
    @Override
    public boolean hasField(final String name)
    {
-      for (Field<O> field : getFields())
+      for (FieldSource<O> field : getFields())
       {
          if (field.getName().equals(name))
          {
@@ -192,7 +202,7 @@
    }
 
    @Override
-   public boolean hasMethod(final Method<O> method)
+   public boolean hasMethod(final Method<O, ?> method)
    {
       return getMethods().contains(method);
    }
@@ -227,9 +237,9 @@
    }
 
    @Override
-   public Method<O> getMethod(final String name)
+   public MethodSource<O> getMethod(final String name)
    {
-      for (Method<O> method : getMethods())
+      for (MethodSource<O> method : getMethods())
       {
          if (method.getName().equals(name) && (method.getParameters().size() == 0))
          {
@@ -240,13 +250,13 @@
    }
 
    @Override
-   public Method<O> getMethod(final String name, final String... paramTypes)
+   public MethodSource<O> getMethod(final String name, final String... paramTypes)
    {
-      for (Method<O> local : getMethods())
+      for (MethodSource<O> local : getMethods())
       {
          if (local.getName().equals(name))
          {
-            List<Parameter<O>> localParams = local.getParameters();
+            List<ParameterSource<O>> localParams = local.getParameters();
             if (paramTypes != null)
             {
                if (localParams.isEmpty() || (localParams.size() == paramTypes.length))
@@ -254,7 +264,7 @@
                   boolean matches = true;
                   for (int i = 0; i < localParams.size(); i++)
                   {
-                     Parameter<O> localParam = localParams.get(i);
+                     ParameterSource<O> localParam = localParams.get(i);
                      String type = paramTypes[i];
                      if (!Types.areEquivalent(localParam.getType(), type))
                      {
@@ -271,7 +281,7 @@
    }
 
    @Override
-   public Method<O> getMethod(final String name, Class<?>... paramTypes)
+   public MethodSource<O> getMethod(final String name, Class<?>... paramTypes)
    {
       if (paramTypes == null)
       {
@@ -288,14 +298,14 @@
    }
 
    @Override
-   public boolean hasMethodSignature(final Method<?> method)
+   public boolean hasMethodSignature(final Method<?, ?> method)
    {
-      for (Method<O> local : getMethods())
+      for (MethodSource<O> local : getMethods())
       {
          if (local.getName().equals(method.getName()))
          {
-            Iterator<Parameter<O>> localParams = local.getParameters().iterator();
-            for (Parameter<? extends JavaSource<?>> methodParam : method.getParameters())
+            Iterator<ParameterSource<O>> localParams = local.getParameters().iterator();
+            for (Parameter<? extends JavaType<?>> methodParam : method.getParameters())
             {
                if (localParams.hasNext() && Strings.areEqual(localParams.next().getType(), methodParam.getType()))
                {
@@ -311,7 +321,7 @@
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public O removeMethod(final Method<O> method)
+   public O removeMethod(final Method<O, ?> method)
    {
       getBodyDeclaration().bodyDeclarations().remove(method.getInternal());
       return (O) this;
@@ -319,27 +329,27 @@
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public Method<O> addMethod()
+   public MethodSource<O> addMethod()
    {
-      Method<O> m = new MethodImpl<O>((O) this);
+      MethodSource<O> m = new MethodImpl<O>((O) this);
       getBodyDeclaration().bodyDeclarations().add(m.getInternal());
       return m;
    }
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public Method<O> addMethod(final String method)
+   public MethodSource<O> addMethod(final String method)
    {
-      Method<O> m = new MethodImpl<O>((O) this, method);
+      MethodSource<O> m = new MethodImpl<O>((O) this, method);
       getBodyDeclaration().bodyDeclarations().add(m.getInternal());
       return m;
    }
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public List<Method<O>> getMethods()
+   public List<MethodSource<O>> getMethods()
    {
-      List<Method<O>> result = new ArrayList<Method<O>>();
+      List<MethodSource<O>> result = new ArrayList<MethodSource<O>>();
 
       MethodFinderVisitor methodFinderVisitor = new MethodFinderVisitor();
       body.accept(methodFinderVisitor);
@@ -351,4 +361,116 @@
       }
       return Collections.unmodifiableList(result);
    }
+
+   @Override
+   public List<String> getInterfaces()
+   {
+      List<String> result = new ArrayList<String>();
+      List<Type> superTypes = JDTHelper.getInterfaces(getBodyDeclaration());
+      for (Type type : superTypes)
+      {
+         String name = JDTHelper.getTypeName(type);
+         if (Types.isSimpleName(name) && this.hasImport(name))
+         {
+            Import imprt = this.getImport(name);
+            String pkg = imprt.getPackage();
+            if (!Strings.isNullOrEmpty(pkg))
+            {
+               name = pkg + ""."" + name;
+            }
+         }
+         result.add(name);
+      }
+      return result;
+   }
+
+   @SuppressWarnings(""unchecked"")
+   @Override
+   public O addInterface(final String type)
+   {
+      if (!this.hasInterface(type))
+      {
+         Type interfaceType = JDTHelper.getInterfaces(
+                  JavaParser.parse(JavaInterfaceImpl.class,
+                           ""public interface Mock extends "" + Types.toSimpleName(type)
+                                    + "" {}"").getBodyDeclaration()).get(0);
+   
+         if (this.hasInterface(Types.toSimpleName(type)) || this.hasImport(Types.toSimpleName(type)))
+         {
+            interfaceType = JDTHelper.getInterfaces(JavaParser.parse(JavaInterfaceImpl.class,
+                     ""public interface Mock extends "" + type + "" {}"").getBodyDeclaration()).get(0);
+         }
+   
+         this.addImport(type);
+   
+         ASTNode node = ASTNode.copySubtree(unit.getAST(), interfaceType);
+         JDTHelper.getInterfaces(getBodyDeclaration()).add((Type) node);
+      }
+      return (O) this;
+   }
+
+   @Override
+   public O addInterface(final Class<?> type)
+   {
+      return addInterface(type.getName());
+   }
+
+   @Override
+   public O addInterface(final JavaInterface<?> type)
+   {
+      return addInterface(type.getQualifiedName());
+   }
+
+   @Override
+   public boolean hasInterface(final String type)
+   {
+      for (String name : getInterfaces())
+      {
+         if (Types.areEquivalent(name, type))
+         {
+            return true;
+         }
+      }
+      return false;
+   }
+
+   @Override
+   public boolean hasInterface(final Class<?> type)
+   {
+      return hasInterface(type.getName());
+   }
+
+   @Override
+   public boolean hasInterface(final JavaInterface<?> type)
+   {
+      return hasInterface(type.getQualifiedName());
+   }
+
+   @SuppressWarnings(""unchecked"")
+   @Override
+   public O removeInterface(final String type)
+   {
+      List<Type> interfaces = JDTHelper.getInterfaces(getBodyDeclaration());
+      for (Type i : interfaces)
+      {
+         if (Types.areEquivalent(i.toString(), type))
+         {
+            interfaces.remove(i);
+            break;
+         }
+      }
+      return (O) this;
+   }
+
+   @Override
+   public O removeInterface(final Class<?> type)
+   {
+      return removeInterface(type.getName());
+   }
+
+   @Override
+   public O removeInterface(final JavaInterface<?> type)
+   {
+      return removeInterface(type.getQualifiedName());
+   }
 }
"
3be61b82e6518aaa23f450d669221359d668ac96,George Gastaldi,AnnotationElementImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationElementImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationElementImpl.java
index e849b56..acb4530 100755
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationElementImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationElementImpl.java
@@ -22,11 +22,12 @@
 import org.eclipse.jdt.core.dom.TypeLiteral;
 import org.jboss.forge.parser.JavaParser;
 import org.jboss.forge.parser.java.Annotation;
-import org.jboss.forge.parser.java.AnnotationElement;
-import org.jboss.forge.parser.java.JavaAnnotation;
-import org.jboss.forge.parser.java.JavaSource;
+import org.jboss.forge.parser.java.JavaType;
 import org.jboss.forge.parser.java.Type;
 import org.jboss.forge.parser.java.ast.AnnotationAccessor;
+import org.jboss.forge.parser.java.source.AnnotationSource;
+import org.jboss.forge.parser.java.source.AnnotationElementSource;
+import org.jboss.forge.parser.java.source.JavaAnnotationSource;
 import org.jboss.forge.parser.java.util.Assert;
 import org.jboss.forge.parser.java.util.Strings;
 import org.jboss.forge.parser.java.util.Types;
@@ -35,17 +36,17 @@
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * @author Matt Benson
  */
-public class AnnotationElementImpl implements AnnotationElement
+public class AnnotationElementImpl implements AnnotationElementSource
 {
-   private class AnnotationValue extends AnnotationImpl<JavaAnnotation, JavaAnnotation>
+   private class AnnotationValue extends AnnotationImpl<JavaAnnotationSource, JavaAnnotationSource>
    {
 
-      AnnotationValue(JavaAnnotation parent)
+      AnnotationValue(JavaAnnotationSource parent)
       {
          super(parent);
       }
 
-      AnnotationValue(JavaAnnotation parent, Object internal)
+      AnnotationValue(JavaAnnotationSource parent, Object internal)
       {
          super(parent, internal);
       }
@@ -80,7 +81,7 @@
       }
 
       @Override
-      public Annotation<JavaAnnotation> getAnnotation()
+      public AnnotationSource<JavaAnnotationSource> getAnnotation()
       {
          Expression expr = member.getDefault();
          if (expr instanceof org.eclipse.jdt.core.dom.Annotation)
@@ -100,7 +101,7 @@
          else
          {
             String stub = ""public @interface Stub { String stub() default "" + value + ""; }"";
-            JavaAnnotation temp = (JavaAnnotation) JavaParser.parse(stub);
+            JavaAnnotationSource temp = (JavaAnnotationSource) JavaParser.parse(stub);
             AnnotationTypeMemberDeclaration internal = (AnnotationTypeMemberDeclaration) temp.getAnnotationElements()
                      .get(0).getInternal();
             member.setDefault((Expression) ASTNode.copySubtree(ast, internal.getDefault()));
@@ -141,7 +142,7 @@
       }
 
       @Override
-      public Annotation<JavaAnnotation> setAnnotation()
+      public AnnotationSource<JavaAnnotationSource> setAnnotation()
       {
          AnnotationValue result = new AnnotationValue(parent);
          member.setDefault((Expression) result.getInternal());
@@ -258,7 +259,7 @@
       
       private Class<?> resolveTypeLiteral(TypeLiteral typeLiteral)
       {
-         final Type<JavaAnnotation> type = new TypeImpl<JavaAnnotation>(getOrigin(), typeLiteral.getType());
+         final Type<JavaAnnotationSource> type = new TypeImpl<JavaAnnotationSource>(getOrigin(), typeLiteral.getType());
          if (type.isPrimitive())
          {
             final Class<?>[] primitiveTypes = { boolean.class, byte.class, short.class, int.class, long.class,
@@ -286,44 +287,44 @@
       }
    }
 
-   private final AnnotationAccessor<JavaAnnotation, AnnotationElement> annotations = new AnnotationAccessor<JavaAnnotation, AnnotationElement>();
+   private final AnnotationAccessor<JavaAnnotationSource, AnnotationElementSource> annotations = new AnnotationAccessor<JavaAnnotationSource, AnnotationElementSource>();
 
-   private JavaAnnotation parent;
+   private JavaAnnotationSource parent;
    private AST ast;
    private final AnnotationTypeMemberDeclaration member;
 
-   public AnnotationElementImpl(final JavaAnnotation parent)
+   public AnnotationElementImpl(final JavaAnnotationSource parent)
    {
       this(parent, ((ASTNode) parent.getInternal()).getAST().newAnnotationTypeMemberDeclaration());
    }
 
-   public AnnotationElementImpl(final JavaAnnotation parent, final String declaration)
+   public AnnotationElementImpl(final JavaAnnotationSource parent, final String declaration)
    {
       this(parent, parseElement(parent, declaration));
    }
 
-   public AnnotationElementImpl(final JavaAnnotation parent, final Object internal)
+   public AnnotationElementImpl(final JavaAnnotationSource parent, final Object internal)
    {
       this.parent = parent;
       ast = ((ASTNode) parent.getInternal()).getAST();
       member = (AnnotationTypeMemberDeclaration) internal;
    }
 
-   private static AnnotationTypeMemberDeclaration parseElement(JavaAnnotation parent, String declaration)
+   private static AnnotationTypeMemberDeclaration parseElement(JavaAnnotationSource parent, String declaration)
    {
       if (!declaration.trim().endsWith("";""))
       {
          declaration = declaration + "";"";
       }
       String stub = ""public @interface Stub { "" + declaration + "" }"";
-      JavaAnnotation temp = (JavaAnnotation) JavaParser.parse(stub);
-      List<AnnotationElement> fields = temp.getAnnotationElements();
+      JavaAnnotationSource temp = (JavaAnnotationSource) JavaParser.parse(stub);
+      List<AnnotationElementSource> fields = temp.getAnnotationElements();
       AnnotationTypeMemberDeclaration newField = (AnnotationTypeMemberDeclaration) fields.get(0).getInternal();
       return (AnnotationTypeMemberDeclaration) ASTNode.copySubtree(((ASTNode) parent.getInternal()).getAST(), newField);
    }
 
    @Override
-   public JavaAnnotation getOrigin()
+   public JavaAnnotationSource getOrigin()
    {
       return parent.getOrigin();
    }
@@ -338,13 +339,13 @@
     * Annotation<O> Modifiers
     */
    @Override
-   public Annotation<JavaAnnotation> addAnnotation()
+   public AnnotationSource<JavaAnnotationSource> addAnnotation()
    {
       return annotations.addAnnotation(this, member);
    }
 
    @Override
-   public Annotation<JavaAnnotation> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
+   public AnnotationSource<JavaAnnotationSource> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
    {
       if (parent.requiresImport(clazz))
       {
@@ -354,13 +355,13 @@
    }
 
    @Override
-   public Annotation<JavaAnnotation> addAnnotation(final String className)
+   public AnnotationSource<JavaAnnotationSource> addAnnotation(final String className)
    {
       return annotations.addAnnotation(this, member, className);
    }
 
    @Override
-   public List<Annotation<JavaAnnotation>> getAnnotations()
+   public List<AnnotationSource<JavaAnnotationSource>> getAnnotations()
    {
       return annotations.getAnnotations(this, member);
    }
@@ -378,19 +379,19 @@
    }
 
    @Override
-   public Annotation<JavaAnnotation> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
+   public AnnotationSource<JavaAnnotationSource> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
    {
       return annotations.getAnnotation(this, member, type);
    }
 
    @Override
-   public Annotation<JavaAnnotation> getAnnotation(final String type)
+   public AnnotationSource<JavaAnnotationSource> getAnnotation(final String type)
    {
       return annotations.getAnnotation(this, member, type);
    }
 
    @Override
-   public AnnotationElement removeAnnotation(final Annotation<JavaAnnotation> annotation)
+   public AnnotationElementSource removeAnnotation(final Annotation<JavaAnnotationSource> annotation)
    {
       return annotations.removeAnnotation(this, member, annotation);
    }
@@ -412,7 +413,7 @@
    }
 
    @Override
-   public AnnotationElement setName(final String name)
+   public AnnotationElementSource setName(final String name)
    {
       member.setName(ast.newSimpleName(name));
       return this;
@@ -432,9 +433,9 @@
    }
 
    @Override
-   public org.jboss.forge.parser.java.Type<JavaAnnotation> getTypeInspector()
+   public org.jboss.forge.parser.java.Type<JavaAnnotationSource> getTypeInspector()
    {
-      return new TypeImpl<JavaAnnotation>(parent,
+      return new TypeImpl<JavaAnnotationSource>(parent,
                member.getStructuralProperty(AnnotationTypeMemberDeclaration.TYPE_PROPERTY));
    }
 
@@ -477,7 +478,7 @@
    }
 
    @Override
-   public AnnotationElement setType(final Class<?> clazz)
+   public AnnotationElementSource setType(final Class<?> clazz)
    {
       if (parent.requiresImport(clazz))
       {
@@ -487,17 +488,17 @@
    }
 
    @Override
-   public AnnotationElement setType(final JavaSource<?> source)
+   public AnnotationElementSource setType(final JavaType<?> source)
    {
       return setType(source.getQualifiedName());
    }
 
    @Override
-   public AnnotationElement setType(final String typeName)
+   public AnnotationElementSource setType(final String typeName)
    {
       String simpleName = Types.toSimpleName(typeName);
 
-      JavaAnnotation origin = getOrigin();
+      JavaAnnotationSource origin = getOrigin();
       if (!Strings.areEqual(typeName, simpleName) && origin.requiresImport(typeName))
       {
          origin.addImport(typeName);
"
3be61b82e6518aaa23f450d669221359d668ac96,George Gastaldi,AnnotationImpl.java,MODIFY,getLiteralValue -> [String name] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationImpl.java
index 2a0fd92..5cee92d 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationImpl.java
@@ -24,19 +24,19 @@
 import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
 import org.eclipse.jdt.core.dom.TypeLiteral;
 import org.jboss.forge.parser.JavaParser;
-import org.jboss.forge.parser.java.Annotation;
-import org.jboss.forge.parser.java.AnnotationTarget;
 import org.jboss.forge.parser.java.JavaClass;
-import org.jboss.forge.parser.java.JavaSource;
 import org.jboss.forge.parser.java.Type;
 import org.jboss.forge.parser.java.ValuePair;
+import org.jboss.forge.parser.java.source.AnnotationSource;
+import org.jboss.forge.parser.java.source.AnnotationTargetSource;
+import org.jboss.forge.parser.java.source.JavaSource;
 import org.jboss.forge.parser.java.util.Assert;
 import org.jboss.forge.parser.java.util.Strings;
 
 /**
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
-public class AnnotationImpl<O extends JavaSource<O>, T> implements Annotation<O>
+public class AnnotationImpl<O extends JavaSource<O>, T> implements AnnotationSource<O>
 {
    private class Nested extends AnnotationImpl<O, T>
    {
@@ -66,7 +66,7 @@
 
    private static final String DEFAULT_VALUE = ""value"";
 
-   private AnnotationTarget<O, T> parent = null;
+   private AnnotationTargetSource<O, T> parent = null;
    private AST ast = null;
    private org.eclipse.jdt.core.dom.Annotation annotation;
 
@@ -75,24 +75,24 @@
       MARKER, SINGLE, NORMAL
    }
 
-   public AnnotationImpl(final AnnotationTarget<O, T> parent)
+   public AnnotationImpl(final AnnotationTargetSource<O, T> parent)
    {
       this(parent, AnnotationType.MARKER);
    }
 
-   public AnnotationImpl(final AnnotationTarget<O, T> parent, final Object internal)
+   public AnnotationImpl(final AnnotationTargetSource<O, T> parent, final Object internal)
    {
       this.parent = parent;
       ast = ((ASTNode) parent.getInternal()).getAST();
       annotation = (org.eclipse.jdt.core.dom.Annotation) internal;
    }
 
-   public AnnotationImpl(final AnnotationTarget<O, T> parent, final AnnotationType type)
+   public AnnotationImpl(final AnnotationTargetSource<O, T> parent, final AnnotationType type)
    {
       this(parent, createAnnotation(parent, type));
    }
 
-   private static org.eclipse.jdt.core.dom.Annotation createAnnotation(final AnnotationTarget<?, ?> parent,
+   private static org.eclipse.jdt.core.dom.Annotation createAnnotation(final AnnotationTargetSource<?, ?> parent,
             final AnnotationType type)
    {
       AST ast = ((ASTNode) parent.getInternal()).getAST();
@@ -226,7 +226,7 @@
    }
 
    @Override
-   public Annotation<O> removeAllValues()
+   public AnnotationSource<O> removeAllValues()
    {
       convertTo(AnnotationType.MARKER);
       return this;
@@ -234,7 +234,7 @@
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public Annotation<O> removeValue(final String name)
+   public AnnotationSource<O> removeValue(final String name)
    {
       if (annotation.isNormalAnnotation())
       {
@@ -271,14 +271,14 @@
    }
 
    @Override
-   public Annotation<O> setName(final String className)
+   public AnnotationSource<O> setName(final String className)
    {
       annotation.setTypeName(ast.newName(className));
       return this;
    }
 
    @Override
-   public Annotation<O> setLiteralValue(final String value)
+   public AnnotationSource<O> setLiteralValue(final String value)
    {
       Assert.notNull(value, ""null not accepted"");
 
@@ -292,7 +292,7 @@
          SingleMemberAnnotation sa = (SingleMemberAnnotation) annotation;
 
          String stub = ""@"" + getName() + ""("" + value + "") public class Stub { }"";
-         JavaClass temp = (JavaClass) JavaParser.parse(stub);
+         JavaClass<?> temp = JavaParser.parse(JavaClass.class, stub);
 
          SingleMemberAnnotation anno = (SingleMemberAnnotation) temp.getAnnotations().get(0).getInternal();
 
@@ -309,7 +309,7 @@
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public Annotation<O> setLiteralValue(final String name, final String value)
+   public AnnotationSource<O> setLiteralValue(final String name, final String value)
    {
       Assert.notNull(value, ""null not accepted"");
 
@@ -329,7 +329,7 @@
       NormalAnnotation na = (NormalAnnotation) annotation;
 
       String stub = ""@"" + getName() + ""("" + name + ""="" + value + "" ) public class Stub { }"";
-      JavaClass temp = (JavaClass) JavaParser.parse(stub);
+      JavaClass<?> temp = JavaParser.parse(JavaClass.class, stub);
 
       NormalAnnotation anno = (NormalAnnotation) temp.getAnnotations().get(0).getInternal();
       MemberValuePair mvp = (MemberValuePair) anno.values().get(0);
@@ -350,13 +350,13 @@
    }
 
    @Override
-   public Annotation<O> setStringValue(final String value)
+   public AnnotationSource<O> setStringValue(final String value)
    {
       return setLiteralValue(Strings.enquote(value));
    }
 
    @Override
-   public Annotation<O> setStringValue(final String name, final String value)
+   public AnnotationSource<O> setStringValue(final String name, final String value)
    {
       return setLiteralValue(name, Strings.enquote(value));
    }
@@ -396,25 +396,25 @@
    }
 
    @Override
-   public Annotation<O> setEnumValue(final String name, final Enum<?> value)
+   public AnnotationSource<O> setEnumValue(final String name, final Enum<?> value)
    {
       return setEnumArrayValue(name, value);
    }
 
    @Override
-   public Annotation<O> setEnumValue(final Enum<?>... values)
+   public AnnotationSource<O> setEnumValue(final Enum<?>... values)
    {
       return setEnumArrayValue(values);
    }
 
    @Override
-   public Annotation<O> setEnumArrayValue(Enum<?>... values)
+   public AnnotationSource<O> setEnumArrayValue(Enum<?>... values)
    {
       return setEnumArrayValue(DEFAULT_VALUE, values);
    }
 
    @Override
-   public Annotation<O> setEnumArrayValue(String name, final Enum<?>... values)
+   public AnnotationSource<O> setEnumArrayValue(String name, final Enum<?>... values)
    {
       Assert.notNull(values, ""null array not accepted"");
 
@@ -530,7 +530,7 @@
    }
 
    @Override
-   public Annotation<O> setAnnotationValue()
+   public AnnotationSource<O> setAnnotationValue()
    {
       if (isMarker())
       {
@@ -539,7 +539,7 @@
 
       if (isSingleValue())
       {
-         final Annotation<O> result = new Nested(this);
+         final AnnotationSource<O> result = new Nested(this);
          ((SingleMemberAnnotation) annotation).setValue((Expression) result.getInternal());
          return result;
       }
@@ -547,7 +547,7 @@
    }
 
    @Override
-   public Annotation<O> setAnnotationValue(String name)
+   public AnnotationSource<O> setAnnotationValue(String name)
    {
       if (!isNormal() && DEFAULT_VALUE.equals(name)) {
          return setAnnotationValue();
@@ -556,10 +556,10 @@
       {
          convertTo(AnnotationType.NORMAL);
       }
-      Annotation<O> result = new Nested(this);
+      AnnotationSource<O> result = new Nested(this);
       
       String stub = ""@"" + getName() + ""("" + name + ""= 0 ) public class Stub { }"";
-      JavaClass temp = (JavaClass) JavaParser.parse(stub);
+      JavaClass<?> temp = JavaParser.parse(JavaClass.class, stub);
 
       NormalAnnotation anno = (NormalAnnotation) temp.getAnnotations().get(0).getInternal();
       MemberValuePair mvp = (MemberValuePair) anno.values().get(0);
@@ -583,7 +583,7 @@
    }
 
    @Override
-   public Annotation<O> getAnnotationValue()
+   public AnnotationSource<O> getAnnotationValue()
    {
       if (isSingleValue())
       {
@@ -602,7 +602,7 @@
    }
 
    @Override
-   public Annotation<O> getAnnotationValue(String name)
+   public AnnotationSource<O> getAnnotationValue(String name)
    {
       if (isNormal())
       {
@@ -705,7 +705,7 @@
    }
 
    @Override
-   public Annotation<O> setClassValue(String name, Class<?> value)
+   public AnnotationSource<O> setClassValue(String name, Class<?> value)
    {
       Assert.notNull(value, ""null not accepted"");
 
@@ -717,19 +717,19 @@
    }
 
    @Override
-   public Annotation<O> setClassValue(Class<?> value)
+   public AnnotationSource<O> setClassValue(Class<?> value)
    {
       return setClassValue(DEFAULT_VALUE, value);
    }
 
    @Override
-   public Annotation<O> setClassArrayValue(Class<?>... values)
+   public AnnotationSource<O> setClassArrayValue(Class<?>... values)
    {
       return setClassArrayValue(DEFAULT_VALUE, values);
    }
 
    @Override
-   public Annotation<O> setClassArrayValue(String name, Class<?>... values)
+   public AnnotationSource<O> setClassArrayValue(String name, Class<?>... values)
    {
       Assert.notNull(values, ""null array not accepted"");
 
"
3be61b82e6518aaa23f450d669221359d668ac96,George Gastaldi,EnumConstantBodyImpl.java,MODIFY,addImport -> [JavaType type] | [String className],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java
index 3510738..0725dec 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java
@@ -24,34 +24,38 @@
 import org.eclipse.jface.text.Document;
 import org.jboss.forge.parser.JavaParser;
 import org.jboss.forge.parser.java.Annotation;
-import org.jboss.forge.parser.java.EnumConstant;
-import org.jboss.forge.parser.java.EnumConstant.Body;
 import org.jboss.forge.parser.java.Field;
-import org.jboss.forge.parser.java.Import;
-import org.jboss.forge.parser.java.JavaClass;
-import org.jboss.forge.parser.java.JavaEnum;
-import org.jboss.forge.parser.java.JavaSource;
-import org.jboss.forge.parser.java.Member;
+import org.jboss.forge.parser.java.JavaType;
 import org.jboss.forge.parser.java.Method;
 import org.jboss.forge.parser.java.Parameter;
-import org.jboss.forge.parser.java.SourceType;
 import org.jboss.forge.parser.java.SyntaxError;
 import org.jboss.forge.parser.java.Visibility;
 import org.jboss.forge.parser.java.ast.MethodFinderVisitor;
 import org.jboss.forge.parser.java.ast.TypeDeclarationFinderVisitor;
+import org.jboss.forge.parser.java.source.AnnotationSource;
+import org.jboss.forge.parser.java.source.EnumConstantSource;
+import org.jboss.forge.parser.java.source.EnumConstantSource.Body;
+import org.jboss.forge.parser.java.source.FieldSource;
+import org.jboss.forge.parser.java.source.Import;
+import org.jboss.forge.parser.java.source.JavaClassSource;
+import org.jboss.forge.parser.java.source.JavaEnumSource;
+import org.jboss.forge.parser.java.source.JavaSource;
+import org.jboss.forge.parser.java.source.MemberSource;
+import org.jboss.forge.parser.java.source.MethodSource;
+import org.jboss.forge.parser.java.source.ParameterSource;
 import org.jboss.forge.parser.java.util.Strings;
 import org.jboss.forge.parser.java.util.Types;
 import org.jboss.forge.parser.spi.JavaParserImpl;
 
-class EnumConstantBodyImpl implements EnumConstant.Body
+class EnumConstantBodyImpl implements EnumConstantSource.Body
 {
-   private final JavaEnum javaEnum;
-   private final EnumConstant<?> enumConstant;
+   private final EnumConstantSource enumConstant;
+   private final JavaEnumSource javaEnum;
 
-   EnumConstantBodyImpl(JavaEnum javaEnum, EnumConstant<?> enumConstant)
+   EnumConstantBodyImpl(EnumConstantSource enumConstant)
    {
-      this.javaEnum = javaEnum;
       this.enumConstant = enumConstant;
+      this.javaEnum = enumConstant.getOrigin();
       getBody();
    }
 
@@ -132,12 +136,6 @@
    }
 
    @Override
-   public SourceType getSourceType()
-   {
-      return SourceType.CLASS;
-   }
-
-   @Override
    public String getPackage()
    {
       return javaEnum.getPackage();
@@ -180,7 +178,7 @@
    }
 
    @Override
-   public <T extends JavaSource<?>> Import addImport(T type)
+   public <T extends JavaType<?>> Import addImport(T type)
    {
       return javaEnum.addImport(type);
    }
@@ -210,7 +208,7 @@
    }
 
    @Override
-   public <T extends JavaSource<T>> boolean hasImport(T type)
+   public <T extends JavaType<T>> boolean hasImport(T type)
    {
       return javaEnum.hasImport(type);
    }
@@ -234,7 +232,7 @@
    }
 
    @Override
-   public <T extends JavaSource<?>> Import getImport(T type)
+   public <T extends JavaType<?>> Import getImport(T type)
    {
       return javaEnum.getImport(type);
    }
@@ -260,7 +258,7 @@
    }
 
    @Override
-   public <T extends JavaSource<?>> Body removeImport(T type)
+   public <T extends JavaType<?>> Body removeImport(T type)
    {
       javaEnum.removeImport(type);
       return this;
@@ -359,7 +357,7 @@
    }
 
    @Override
-   public Annotation<Body> addAnnotation()
+   public AnnotationSource<Body> addAnnotation()
    {
       // could pass through to enumConstant, but would require then pretending its Annotation was ours
       // which should cause no problem at the moment, but could theoretically do so in the future
@@ -367,7 +365,7 @@
    }
 
    @Override
-   public Annotation<Body> addAnnotation(Class<? extends java.lang.annotation.Annotation> type)
+   public AnnotationSource<Body> addAnnotation(Class<? extends java.lang.annotation.Annotation> type)
    {
       // could pass through to enumConstant, but would require then pretending its Annotation was ours
       // which should cause no problem at the moment, but could theoretically do so in the future
@@ -375,7 +373,7 @@
    }
 
    @Override
-   public Annotation<Body> addAnnotation(String className)
+   public AnnotationSource<Body> addAnnotation(String className)
    {
       // could pass through to enumConstant, but would require then pretending its Annotation was ours
       // which should cause no problem at the moment, but could theoretically do so in the future
@@ -383,7 +381,7 @@
    }
 
    @Override
-   public List<Annotation<Body>> getAnnotations()
+   public List<AnnotationSource<Body>> getAnnotations()
    {
       // could pass through to enumConstant, but would require then pretending its Annotation was ours
       // which should cause no problem at the moment, but could theoretically do so in the future
@@ -407,7 +405,7 @@
    }
 
    @Override
-   public Annotation<Body> getAnnotation(Class<? extends java.lang.annotation.Annotation> type)
+   public AnnotationSource<Body> getAnnotation(Class<? extends java.lang.annotation.Annotation> type)
    {
       // could pass through to enumConstant, but would require then pretending its Annotation was ours
       // which should cause no problem at the moment, but could theoretically do so in the future
@@ -415,7 +413,7 @@
    }
 
    @Override
-   public Annotation<Body> getAnnotation(String type)
+   public AnnotationSource<Body> getAnnotation(String type)
    {
       // could pass through to enumConstant, but would require then pretending its Annotation was ours
       // which should cause no problem at the moment, but could theoretically do so in the future
@@ -445,7 +443,7 @@
          if (result == null)
          {
             final String stub = ""enum StubEnum { FOO() {}; }"";
-            final JavaEnum temp = JavaParser.parse(JavaEnum.class, stub);
+            final JavaEnumSource temp = JavaParser.parse(JavaEnumSource.class, stub);
             final AnonymousClassDeclaration body = ((EnumConstantBodyImpl) temp.getEnumConstants().get(0).getBody())
                      .getBody();
             final AST ast = ((ASTNode) javaEnum.getInternal()).getAST();
@@ -463,33 +461,33 @@
    }
 
    @Override
-   public List<Member<Body, ?>> getMembers()
+   public List<MemberSource<Body, ?>> getMembers()
    {
-      final List<Member<Body, ?>> result = new ArrayList<Member<Body, ?>>();
+      final List<MemberSource<Body, ?>> result = new ArrayList<MemberSource<Body, ?>>();
       result.addAll(getFields());
       result.addAll(getMethods());
       return Collections.unmodifiableList(result);
    }
 
    @Override
-   public Field<Body> addField()
+   public FieldSource<Body> addField()
    {
-      Field<Body> field = new FieldImpl<Body>(this);
+      FieldSource<Body> field = new FieldImpl<Body>(this);
       addField(field);
       return field;
    }
 
    @Override
-   public Field<Body> addField(final String declaration)
+   public FieldSource<Body> addField(final String declaration)
    {
       String stub = ""public class Stub { "" + declaration + "" }"";
-      JavaClass temp = (JavaClass) JavaParser.parse(stub);
-      List<Field<JavaClass>> fields = temp.getFields();
-      Field<Body> result = null;
-      for (Field<JavaClass> stubField : fields)
+      JavaClassSource temp = (JavaClassSource) JavaParser.parse(stub);
+      List<FieldSource<JavaClassSource>> fields = temp.getFields();
+      FieldSource<Body> result = null;
+      for (FieldSource<JavaClassSource> stubField : fields)
       {
          Object variableDeclaration = stubField.getInternal();
-         Field<Body> field = new FieldImpl<Body>(this, variableDeclaration, true);
+         FieldSource<Body> field = new FieldImpl<Body>(this, variableDeclaration, true);
          addField(field);
          if (result == null)
          {
@@ -517,9 +515,9 @@
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public List<Field<Body>> getFields()
+   public List<FieldSource<Body>> getFields()
    {
-      final List<Field<Body>> result = new ArrayList<Field<Body>>();
+      final List<FieldSource<Body>> result = new ArrayList<FieldSource<Body>>();
 
       final List<BodyDeclaration> bodyDeclarations = getBody().bodyDeclarations();
       for (BodyDeclaration bodyDeclaration : bodyDeclarations)
@@ -538,9 +536,9 @@
    }
 
    @Override
-   public Field<Body> getField(final String name)
+   public FieldSource<Body> getField(final String name)
    {
-      for (Field<Body> field : getFields())
+      for (FieldSource<Body> field : getFields())
       {
          if (field.getName().equals(name))
          {
@@ -603,7 +601,7 @@
    }
 
    @Override
-   public boolean hasMethod(final Method<Body> method)
+   public boolean hasMethod(final Method<Body, ?> method)
    {
       return getMethods().contains(method);
    }
@@ -633,9 +631,9 @@
    }
 
    @Override
-   public Method<Body> getMethod(final String name)
+   public MethodSource<Body> getMethod(final String name)
    {
-      for (Method<Body> method : getMethods())
+      for (MethodSource<Body> method : getMethods())
       {
          if (method.getName().equals(name) && (method.getParameters().isEmpty()))
          {
@@ -646,13 +644,13 @@
    }
 
    @Override
-   public Method<Body> getMethod(final String name, final String... paramTypes)
+   public MethodSource<Body> getMethod(final String name, final String... paramTypes)
    {
-      for (Method<Body> local : getMethods())
+      for (MethodSource<Body> local : getMethods())
       {
          if (local.getName().equals(name))
          {
-            final List<Parameter<Body>> localParams = local.getParameters();
+            final List<ParameterSource<Body>> localParams = local.getParameters();
             if (paramTypes != null)
             {
                if (localParams.isEmpty() || (localParams.size() == paramTypes.length))
@@ -677,7 +675,7 @@
    }
 
    @Override
-   public Method<Body> getMethod(final String name, Class<?>... paramTypes)
+   public MethodSource<Body> getMethod(final String name, Class<?>... paramTypes)
    {
       final String[] types = new String[paramTypes == null ? 0 : paramTypes.length];
       for (int i = 0; i < types.length; i++)
@@ -689,14 +687,14 @@
    }
 
    @Override
-   public boolean hasMethodSignature(final Method<?> method)
+   public boolean hasMethodSignature(final Method<?, ?> method)
    {
-      for (Method<Body> local : getMethods())
+      for (MethodSource<Body> local : getMethods())
       {
          if (local.getName().equals(method.getName()))
          {
-            final Iterator<Parameter<Body>> localParams = local.getParameters().iterator();
-            for (Parameter<? extends JavaSource<?>> methodParam : method.getParameters())
+            final Iterator<ParameterSource<Body>> localParams = local.getParameters().iterator();
+            for (Parameter<? extends JavaType<?>> methodParam : method.getParameters())
             {
                if (localParams.hasNext() && Strings.areEqual(localParams.next().getType(), methodParam.getType()))
                {
@@ -711,7 +709,7 @@
    }
 
    @Override
-   public Body removeMethod(final Method<Body> method)
+   public Body removeMethod(final Method<Body, ?> method)
    {
       getBody().bodyDeclarations().remove(method.getInternal());
       return this;
@@ -719,26 +717,26 @@
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public Method<Body> addMethod()
+   public MethodSource<Body> addMethod()
    {
-      final Method<Body> m = new MethodImpl<Body>(this);
+      final MethodSource<Body> m = new MethodImpl<Body>(this);
       getBody().bodyDeclarations().add(m.getInternal());
       return m;
    }
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public Method<Body> addMethod(final String method)
+   public MethodSource<Body> addMethod(final String method)
    {
-      final Method<Body> m = new MethodImpl<Body>(this, method);
+      final MethodSource<Body> m = new MethodImpl<Body>(this, method);
       getBody().bodyDeclarations().add(m.getInternal());
       return m;
    }
 
    @Override
-   public List<Method<Body>> getMethods()
+   public List<MethodSource<Body>> getMethods()
    {
-      final List<Method<Body>> result = new ArrayList<Method<Body>>();
+      final List<MethodSource<Body>> result = new ArrayList<MethodSource<Body>>();
 
       final MethodFinderVisitor methodFinderVisitor = new MethodFinderVisitor();
       getBody().accept(methodFinderVisitor);
@@ -769,4 +767,5 @@
       }
       return result;
    }
-}
\ No newline at end of file
+
+}
"
3be61b82e6518aaa23f450d669221359d668ac96,George Gastaldi,EnumConstantImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java
index 52ddeb0..94819cf 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantImpl.java
@@ -17,43 +17,43 @@
 import org.eclipse.jdt.core.dom.Expression;
 import org.jboss.forge.parser.JavaParser;
 import org.jboss.forge.parser.java.Annotation;
-import org.jboss.forge.parser.java.EnumConstant;
-import org.jboss.forge.parser.java.JavaEnum;
-import org.jboss.forge.parser.java.JavaSource;
 import org.jboss.forge.parser.java.ast.AnnotationAccessor;
+import org.jboss.forge.parser.java.source.AnnotationSource;
+import org.jboss.forge.parser.java.source.EnumConstantSource;
+import org.jboss.forge.parser.java.source.JavaEnumSource;
 import org.jboss.forge.parser.java.util.Strings;
 
-public class EnumConstantImpl<O extends JavaSource<O>> implements EnumConstant<O>
+public class EnumConstantImpl implements EnumConstantSource
 {
-   private final AnnotationAccessor<O, EnumConstant<O>> annotations = new AnnotationAccessor<O, EnumConstant<O>>();
-   private O parent;
+   private final AnnotationAccessor<JavaEnumSource, EnumConstantSource> annotations = new AnnotationAccessor<JavaEnumSource, EnumConstantSource>();
+   private JavaEnumSource parent;
    private AST ast;
    private EnumConstantDeclaration enumConstant;
 
-   private void init(final O parent)
+   private void init(final JavaEnumSource parent)
    {
       this.parent = parent;
       this.ast = ((ASTNode) parent.getInternal()).getAST();
    }
    
-   public EnumConstantImpl(final O parent) {
+   public EnumConstantImpl(final JavaEnumSource parent) {
       init(parent);
       this.enumConstant = ast.newEnumConstantDeclaration();
    }
    
-   public EnumConstantImpl(final O parent, final String declaration)
+   public EnumConstantImpl(final JavaEnumSource parent, final String declaration)
    {
       init(parent);
 
       String stub = ""public enum Stub { "" + declaration + "" }"";
-      JavaEnum temp = (JavaEnum) JavaParser.parse(stub);
-      List<EnumConstant<JavaEnum>> constants = temp.getEnumConstants();
+      JavaEnumSource temp = (JavaEnumSource) JavaParser.parse(stub);
+      List<EnumConstantSource> constants = temp.getEnumConstants();
       EnumConstantDeclaration newField = (EnumConstantDeclaration) constants.get(0).getInternal();
       EnumConstantDeclaration subtree = (EnumConstantDeclaration) ASTNode.copySubtree(ast, newField);
       this.enumConstant = subtree;
    }
    
-   public EnumConstantImpl(final O parent, final Object internal)
+   public EnumConstantImpl(final JavaEnumSource parent, final Object internal)
    {
       init(parent);
       this.enumConstant = (EnumConstantDeclaration) internal;
@@ -66,7 +66,7 @@
    }
 
    @Override
-   public EnumConstant<O> setName(String name)
+   public EnumConstantSource setName(String name)
    {
       this.enumConstant.setName(ast.newSimpleName(name));
       return this;
@@ -79,7 +79,7 @@
    }
 
    @Override
-   public O getOrigin()
+   public JavaEnumSource getOrigin()
    {
       return parent;
    }
@@ -96,14 +96,14 @@
 
    @SuppressWarnings(""unchecked"")
    @Override
-   public EnumConstant<O> setConstructorArguments(String... literalArguments)
+   public EnumConstantSource setConstructorArguments(String... literalArguments)
    {
       enumConstant.arguments().clear();
       if (literalArguments != null && literalArguments.length > 0)
       {
          final String stub = ""public enum Stub { FOO("" + Strings.join(Arrays.asList(literalArguments), "", "") + ""); }"";
-         final JavaEnum temp = JavaParser.parse(JavaEnum.class, stub);
-         final List<EnumConstant<JavaEnum>> constants = temp.getEnumConstants();
+         final JavaEnumSource temp = JavaParser.parse(JavaEnumSource.class, stub);
+         final List<EnumConstantSource> constants = temp.getEnumConstants();
          final EnumConstantDeclaration newConstant = (EnumConstantDeclaration) constants.get(0).getInternal();
          final List<Expression> arguments = newConstant.arguments();
          for (Expression argument : arguments)
@@ -118,11 +118,11 @@
    @Override
    public Body getBody()
    {
-      return new EnumConstantBodyImpl((JavaEnum) parent, this);
+      return new EnumConstantBodyImpl(this);
    }
 
    @Override
-   public EnumConstant<O> removeBody()
+   public EnumConstantSource removeBody()
    {
       enumConstant.setAnonymousClassDeclaration(null);
       return this;
@@ -133,13 +133,13 @@
     */
 
    @Override
-   public Annotation<O> addAnnotation()
+   public AnnotationSource<JavaEnumSource> addAnnotation()
    {
       return annotations.addAnnotation(this, enumConstant);
    }
 
    @Override
-   public Annotation<O> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
+   public AnnotationSource<JavaEnumSource> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
    {
       if (!parent.hasImport(clazz))
       {
@@ -149,13 +149,13 @@
    }
 
    @Override
-   public Annotation<O> addAnnotation(final String className)
+   public AnnotationSource<JavaEnumSource> addAnnotation(final String className)
    {
       return annotations.addAnnotation(this, enumConstant, className);
    }
 
    @Override
-   public List<Annotation<O>> getAnnotations()
+   public List<AnnotationSource<JavaEnumSource>> getAnnotations()
    {
       return annotations.getAnnotations(this, enumConstant);
    }
@@ -173,19 +173,19 @@
    }
 
    @Override
-   public EnumConstant<O> removeAnnotation(final Annotation<O> annotation)
+   public EnumConstantSource removeAnnotation(final Annotation<JavaEnumSource> annotation)
    {
       return annotations.removeAnnotation(this, enumConstant, annotation);
    }
 
    @Override
-   public Annotation<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
+   public AnnotationSource<JavaEnumSource> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
    {
       return annotations.getAnnotation(this, enumConstant, type);
    }
 
    @Override
-   public Annotation<O> getAnnotation(final String type)
+   public AnnotationSource<JavaEnumSource> getAnnotation(final String type)
    {
       return annotations.getAnnotation(this, enumConstant, type);
    }
@@ -205,7 +205,7 @@
       {
          return false;
       }
-      final EnumConstantImpl<?> other = (EnumConstantImpl<?>) obj;
+      final EnumConstantImpl other = (EnumConstantImpl) obj;
       return other.enumConstant == enumConstant || other.enumConstant != null
                && other.enumConstant.equals(enumConstant);
    }
"
3be61b82e6518aaa23f450d669221359d668ac96,George Gastaldi,FieldImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
index d65b95f..94bd7b0 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
@@ -23,21 +23,23 @@
 import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
 import org.jboss.forge.parser.JavaParser;
 import org.jboss.forge.parser.java.Annotation;
-import org.jboss.forge.parser.java.Field;
 import org.jboss.forge.parser.java.JavaClass;
-import org.jboss.forge.parser.java.JavaSource;
+import org.jboss.forge.parser.java.JavaType;
 import org.jboss.forge.parser.java.Visibility;
 import org.jboss.forge.parser.java.ast.AnnotationAccessor;
 import org.jboss.forge.parser.java.ast.ModifierAccessor;
+import org.jboss.forge.parser.java.source.AnnotationSource;
+import org.jboss.forge.parser.java.source.FieldSource;
+import org.jboss.forge.parser.java.source.JavaSource;
 import org.jboss.forge.parser.java.util.Strings;
 import org.jboss.forge.parser.java.util.Types;
 
 /**
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
-public class FieldImpl<O extends JavaSource<O>> implements Field<O>
+public class FieldImpl<O extends JavaSource<O>> implements FieldSource<O>
 {
-   private final AnnotationAccessor<O, Field<O>> annotations = new AnnotationAccessor<O, Field<O>>();
+   private final AnnotationAccessor<O, FieldSource<O>> annotations = new AnnotationAccessor<O, FieldSource<O>>();
    private final ModifierAccessor modifiers = new ModifierAccessor();
 
    private O parent;
@@ -112,13 +114,13 @@
     * Annotation<O> Modifiers
     */
    @Override
-   public Annotation<O> addAnnotation()
+   public AnnotationSource<O> addAnnotation()
    {
       return annotations.addAnnotation(this, field);
    }
 
    @Override
-   public Annotation<O> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
+   public AnnotationSource<O> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
    {
       if (parent.requiresImport(clazz))
       {
@@ -128,13 +130,13 @@
    }
 
    @Override
-   public Annotation<O> addAnnotation(final String className)
+   public AnnotationSource<O> addAnnotation(final String className)
    {
       return annotations.addAnnotation(this, field, className);
    }
 
    @Override
-   public List<Annotation<O>> getAnnotations()
+   public List<AnnotationSource<O>> getAnnotations()
    {
       return annotations.getAnnotations(this, field);
    }
@@ -152,19 +154,19 @@
    }
 
    @Override
-   public Annotation<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
+   public AnnotationSource<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
    {
       return annotations.getAnnotation(this, field, type);
    }
 
    @Override
-   public Annotation<O> getAnnotation(final String type)
+   public AnnotationSource<O> getAnnotation(final String type)
    {
       return annotations.getAnnotation(this, field, type);
    }
 
    @Override
-   public Field<O> removeAnnotation(final Annotation<O> annotation)
+   public FieldSource<O> removeAnnotation(final Annotation<O> annotation)
    {
       return annotations.removeAnnotation(this, field, annotation);
    }
@@ -186,7 +188,7 @@
    }
 
    @Override
-   public Field<O> setFinal(final boolean finl)
+   public FieldSource<O> setFinal(final boolean finl)
    {
       if (finl)
          modifiers.addModifier(field, ModifierKeyword.FINAL_KEYWORD);
@@ -202,7 +204,7 @@
    }
 
    @Override
-   public Field<O> setStatic(final boolean statc)
+   public FieldSource<O> setStatic(final boolean statc)
    {
       if (statc)
          modifiers.addModifier(field, ModifierKeyword.STATIC_KEYWORD);
@@ -218,7 +220,7 @@
    }
 
    @Override
-   public Field<O> setPackagePrivate()
+   public FieldSource<O> setPackagePrivate()
    {
       modifiers.clearVisibility(field);
       return this;
@@ -231,7 +233,7 @@
    }
 
    @Override
-   public Field<O> setPublic()
+   public FieldSource<O> setPublic()
    {
       modifiers.clearVisibility(field);
       modifiers.addModifier(field, ModifierKeyword.PUBLIC_KEYWORD);
@@ -245,7 +247,7 @@
    }
 
    @Override
-   public Field<O> setPrivate()
+   public FieldSource<O> setPrivate()
    {
       modifiers.clearVisibility(field);
       modifiers.addModifier(field, ModifierKeyword.PRIVATE_KEYWORD);
@@ -259,7 +261,7 @@
    }
 
    @Override
-   public Field<O> setProtected()
+   public FieldSource<O> setProtected()
    {
       modifiers.clearVisibility(field);
       modifiers.addModifier(field, ModifierKeyword.PROTECTED_KEYWORD);
@@ -273,7 +275,7 @@
    }
 
    @Override
-   public Field<O> setVisibility(final Visibility scope)
+   public FieldSource<O> setVisibility(final Visibility scope)
    {
       return Visibility.set(this, scope);
    }
@@ -299,7 +301,7 @@
    }
 
    @Override
-   public Field<O> setName(final String name)
+   public FieldSource<O> setName(final String name)
    {
       fragment.setName(ast.newSimpleName(name));
       return this;
@@ -383,7 +385,7 @@
    }
 
    @Override
-   public Field<O> setType(final Class<?> clazz)
+   public FieldSource<O> setType(final Class<?> clazz)
    {
       if (parent.requiresImport(clazz))
       {
@@ -393,13 +395,13 @@
    }
 
    @Override
-   public Field<O> setType(final JavaSource<?> source)
+   public FieldSource<O> setType(final JavaType<?> source)
    {
       return setType(source.getQualifiedName());
    }
 
    @Override
-   public Field<O> setType(final String typeName)
+   public FieldSource<O> setType(final String typeName)
    {
       String simpleName = Types.toSimpleName(typeName);
 
@@ -464,17 +466,17 @@
    }
 
    @Override
-   public Field<O> setLiteralInitializer(final String value)
+   public FieldSource<O> setLiteralInitializer(final String value)
    {
       String stub = ""public class Stub { private String stub = "" + value + "" }"";
-      JavaClass temp = (JavaClass) JavaParser.parse(stub);
+      JavaClass<?> temp = JavaParser.parse(JavaClass.class, stub);
       VariableDeclarationFragment tempFrag = (VariableDeclarationFragment) temp.getFields().get(0).getInternal();
       fragment.setInitializer((Expression) ASTNode.copySubtree(ast, tempFrag.getInitializer()));
       return this;
    }
 
    @Override
-   public Field<O> setStringInitializer(final String value)
+   public FieldSource<O> setStringInitializer(final String value)
    {
       return setLiteralInitializer(Strings.enquote(value));
    }
"
3be61b82e6518aaa23f450d669221359d668ac96,George Gastaldi,JavaAnnotationImpl.java,MODIFY,addAnnotationElement -> [String declaration] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaAnnotationImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaAnnotationImpl.java
index 6aedc74..e379453 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaAnnotationImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaAnnotationImpl.java
@@ -16,16 +16,16 @@
 import org.eclipse.jdt.core.dom.CompilationUnit;
 import org.eclipse.jface.text.Document;
 import org.jboss.forge.parser.java.AnnotationElement;
-import org.jboss.forge.parser.java.JavaAnnotation;
-import org.jboss.forge.parser.java.JavaSource;
-import org.jboss.forge.parser.java.SourceType;
+import org.jboss.forge.parser.java.source.AnnotationElementSource;
+import org.jboss.forge.parser.java.source.JavaAnnotationSource;
+import org.jboss.forge.parser.java.source.JavaSource;
 import org.jboss.forge.parser.java.util.Strings;
 
 /**
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * 
  */
-public class JavaAnnotationImpl extends AbstractJavaSource<JavaAnnotation> implements JavaAnnotation
+public class JavaAnnotationImpl extends AbstractJavaSource<JavaAnnotationSource> implements JavaAnnotationSource
 {
 
    public JavaAnnotationImpl(JavaSource<?> enclosingType, final Document document, final CompilationUnit unit,
@@ -35,30 +35,24 @@
    }
 
    @Override
-   protected JavaAnnotation updateTypeNames(final String name)
+   protected JavaAnnotationSource updateTypeNames(final String name)
    {
       return this;
    }
 
    @Override
-   public SourceType getSourceType()
-   {
-      return SourceType.ANNOTATION;
-   }
-
-   @Override
-   public AnnotationElement addAnnotationElement()
+   public AnnotationElementSource addAnnotationElement()
    {
       return add(new AnnotationElementImpl(this));
    }
 
    @Override
-   public AnnotationElement addAnnotationElement(String declaration)
+   public AnnotationElementSource addAnnotationElement(String declaration)
    {
       return add(new AnnotationElementImpl(this, declaration));
    }
 
-   private AnnotationElement add(AnnotationElement annotationElement)
+   private AnnotationElementSource add(AnnotationElementSource annotationElement)
    {
       @SuppressWarnings(""unchecked"")
       final ListIterator<BodyDeclaration> members = getBodyDeclaration().bodyDeclarations().listIterator();
@@ -89,7 +83,7 @@
    @Override
    public boolean hasAnnotationElement(String name)
    {
-      for (AnnotationElement annotationElement : getAnnotationElements())
+      for (AnnotationElementSource annotationElement : getAnnotationElements())
       {
          if (Strings.areEqual(name, annotationElement.getName()))
          {
@@ -100,15 +94,15 @@
    }
 
    @Override
-   public boolean hasAnnotationElement(AnnotationElement annotationElement)
+   public boolean hasAnnotationElement(AnnotationElement<?> annotationElement)
    {
       return getAnnotationElements().contains(annotationElement);
    }
 
    @Override
-   public AnnotationElement getAnnotationElement(String name)
+   public AnnotationElementSource getAnnotationElement(String name)
    {
-      for (AnnotationElement annotationElement : getAnnotationElements())
+      for (AnnotationElementSource annotationElement : getAnnotationElements())
       {
          if (Strings.areEqual(name, annotationElement.getName()))
          {
@@ -119,9 +113,9 @@
    }
 
    @Override
-   public List<AnnotationElement> getAnnotationElements()
+   public List<AnnotationElementSource> getAnnotationElements()
    {
-      List<AnnotationElement> result = new ArrayList<AnnotationElement>();
+      List<AnnotationElementSource> result = new ArrayList<AnnotationElementSource>();
       @SuppressWarnings(""unchecked"")
       List<BodyDeclaration> bodyDeclarations = getBodyDeclaration().bodyDeclarations();
       for (BodyDeclaration bodyDeclaration : bodyDeclarations)
@@ -136,7 +130,7 @@
    }
 
    @Override
-   public JavaAnnotation removeAnnotationElement(AnnotationElement annotationElement)
+   public JavaAnnotationSource removeAnnotationElement(AnnotationElement<?> annotationElement)
    {
       getBodyDeclaration().bodyDeclarations().remove(annotationElement.getInternal());
       return this;
"
3be61b82e6518aaa23f450d669221359d668ac96,George Gastaldi,JavaClassImpl.java,MODIFY,setSuperType -> [String type] | [JavaType type],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaClassImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaClassImpl.java
index 466a0b4..5d29c74 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaClassImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaClassImpl.java
@@ -12,11 +12,11 @@
 import org.eclipse.jdt.core.dom.SimpleType;
 import org.eclipse.jdt.core.dom.TypeDeclaration;
 import org.eclipse.jface.text.Document;
-import org.jboss.forge.parser.java.JavaClass;
-import org.jboss.forge.parser.java.JavaSource;
-import org.jboss.forge.parser.java.Method;
-import org.jboss.forge.parser.java.SourceType;
+import org.jboss.forge.parser.java.JavaType;
 import org.jboss.forge.parser.java.ast.ModifierAccessor;
+import org.jboss.forge.parser.java.source.JavaClassSource;
+import org.jboss.forge.parser.java.source.JavaSource;
+import org.jboss.forge.parser.java.source.MethodSource;
 import org.jboss.forge.parser.java.util.Types;
 
 /**
@@ -24,7 +24,7 @@
  *
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
-public class JavaClassImpl extends AbstractGenericCapableJavaSource<JavaClass> implements JavaClass
+public class JavaClassImpl extends AbstractGenericCapableJavaSource<JavaClassSource> implements JavaClassSource
 {
    private final ModifierAccessor modifiers = new ModifierAccessor();
 
@@ -35,9 +35,9 @@
    }
 
    @Override
-   protected JavaClass updateTypeNames(final String newName)
+   protected JavaClassSource updateTypeNames(final String newName)
    {
-      for (Method<JavaClass> m : getMethods())
+      for (MethodSource<JavaClassSource> m : getMethods())
       {
          if (m.isConstructor())
          {
@@ -58,7 +58,7 @@
    }
 
    @Override
-   public JavaClass setAbstract(final boolean abstrct)
+   public JavaClassSource setAbstract(final boolean abstrct)
    {
       if (abstrct)
       {
@@ -97,13 +97,13 @@
    }
 
    @Override
-   public JavaClass setSuperType(final JavaClass type)
+   public JavaClassSource setSuperType(final JavaType<?> type)
    {
       return setSuperType(type.getQualifiedName());
    }
 
    @Override
-   public JavaClass setSuperType(final Class<?> type)
+   public JavaClassSource setSuperType(final Class<?> type)
    {
       if (type.isAnnotation() || type.isEnum() || type.isInterface() || type.isPrimitive())
       {
@@ -114,7 +114,7 @@
 
    @SuppressWarnings(""unchecked"")
    @Override
-   public JavaClass setSuperType(final String type)
+   public JavaClassSource setSuperType(final String type)
    {
       if (type == null || type.trim().isEmpty())
       {
@@ -160,9 +160,4 @@
       return this;
    }
 
-   @Override
-   public SourceType getSourceType()
-   {
-      return SourceType.CLASS;
-   }
 }
\ No newline at end of file
"
3be61b82e6518aaa23f450d669221359d668ac96,George Gastaldi,JavaEnumImpl.java,MODIFY,addEnumConstant -> [String declaration] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
index 94745b1..a559bc0 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaEnumImpl.java
@@ -15,17 +15,16 @@
 import org.eclipse.jdt.core.dom.EnumConstantDeclaration;
 import org.eclipse.jdt.core.dom.EnumDeclaration;
 import org.eclipse.jface.text.Document;
-import org.jboss.forge.parser.java.EnumConstant;
-import org.jboss.forge.parser.java.JavaEnum;
-import org.jboss.forge.parser.java.JavaSource;
-import org.jboss.forge.parser.java.SourceType;
+import org.jboss.forge.parser.java.source.EnumConstantSource;
+import org.jboss.forge.parser.java.source.JavaEnumSource;
+import org.jboss.forge.parser.java.source.JavaSource;
 
 /**
  * Represents a Java Source File containing an Enum Type.
  *
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
-public class JavaEnumImpl extends AbstractJavaSourceMemberHolder<JavaEnum> implements JavaEnum
+public class JavaEnumImpl extends AbstractJavaSourceMemberHolder<JavaEnumSource> implements JavaEnumSource
 {
    public JavaEnumImpl(JavaSource<?> enclosingType, final Document document, final CompilationUnit unit,
             BodyDeclaration body)
@@ -34,14 +33,14 @@
    }
 
    @Override
-   public List<EnumConstant<JavaEnum>> getEnumConstants()
+   public List<EnumConstantSource> getEnumConstants()
    {
-      List<EnumConstant<JavaEnum>> result = new ArrayList<EnumConstant<JavaEnum>>();
+      List<EnumConstantSource> result = new ArrayList<EnumConstantSource>();
 
       for (Object o : (((EnumDeclaration) getBodyDeclaration()).enumConstants()))
       {
          EnumConstantDeclaration constant = (EnumConstantDeclaration) o;
-         result.add(new EnumConstantImpl<JavaEnum>(this, constant));
+         result.add(new EnumConstantImpl(this, constant));
       }
 
       return Collections.unmodifiableList(result);
@@ -49,9 +48,9 @@
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public EnumConstant<JavaEnum> addEnumConstant()
+   public EnumConstantSource addEnumConstant()
    {
-      EnumConstantImpl<JavaEnum> enumConst = new EnumConstantImpl<JavaEnum>(this);
+      EnumConstantImpl enumConst = new EnumConstantImpl(this);
       EnumDeclaration enumDeclaration = (EnumDeclaration) getBodyDeclaration();
       List<EnumConstantDeclaration> constants = enumDeclaration.enumConstants();
       constants.add((EnumConstantDeclaration) enumConst.getInternal());
@@ -61,9 +60,9 @@
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public EnumConstant<JavaEnum> addEnumConstant(final String declaration)
+   public EnumConstantSource addEnumConstant(final String declaration)
    {
-      EnumConstantImpl<JavaEnum> enumConst = new EnumConstantImpl<JavaEnum>(this, declaration);
+      EnumConstantImpl enumConst = new EnumConstantImpl(this, declaration);
 
       EnumDeclaration enumDeclaration = (EnumDeclaration) getBodyDeclaration();
       List<EnumConstantDeclaration> constants = enumDeclaration.enumConstants();
@@ -73,9 +72,9 @@
    }
 
    @Override
-   public EnumConstant<JavaEnum> getEnumConstant(String name)
+   public EnumConstantSource getEnumConstant(String name)
    {
-      for (EnumConstant<JavaEnum> enumConst : getEnumConstants())
+      for (EnumConstantSource enumConst : getEnumConstants())
       {
          if (enumConst.getName().equals(name))
          {
@@ -86,14 +85,9 @@
    }
 
    @Override
-   protected JavaEnum updateTypeNames(final String newName)
+   protected JavaEnumSource updateTypeNames(final String newName)
    {
       return this;
    }
 
-   @Override
-   public SourceType getSourceType()
-   {
-      return SourceType.ENUM;
-   }
 }
"
3be61b82e6518aaa23f450d669221359d668ac96,George Gastaldi,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
index 4ac1fec..ca511d8 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaPackageInfoImpl.java
@@ -16,23 +16,23 @@
 import org.eclipse.text.edits.TextEdit;
 import org.jboss.forge.parser.ParserException;
 import org.jboss.forge.parser.java.Annotation;
-import org.jboss.forge.parser.java.Import;
-import org.jboss.forge.parser.java.JavaPackageInfo;
-import org.jboss.forge.parser.java.JavaSource;
-import org.jboss.forge.parser.java.Member;
-import org.jboss.forge.parser.java.SourceType;
+import org.jboss.forge.parser.java.JavaType;
 import org.jboss.forge.parser.java.SyntaxError;
 import org.jboss.forge.parser.java.Visibility;
 import org.jboss.forge.parser.java.ast.AnnotationAccessor;
 import org.jboss.forge.parser.java.ast.ModifierAccessor;
 import org.jboss.forge.parser.java.ast.TypeDeclarationFinderVisitor;
+import org.jboss.forge.parser.java.source.AnnotationSource;
+import org.jboss.forge.parser.java.source.Import;
+import org.jboss.forge.parser.java.source.JavaPackageInfoSource;
+import org.jboss.forge.parser.java.source.JavaSource;
 import org.jboss.forge.parser.java.util.Formatter;
 import org.jboss.forge.parser.java.util.Strings;
 import org.jboss.forge.parser.java.util.Types;
 import org.jboss.forge.parser.spi.JavaParserImpl;
 import org.jboss.forge.parser.spi.WildcardImportResolver;
 
-public class JavaPackageInfoImpl implements JavaPackageInfo
+public class JavaPackageInfoImpl implements JavaPackageInfoSource
 {
 
    public JavaPackageInfoImpl(JavaSource<?> enclosingType, Document document,
@@ -45,18 +45,12 @@
    }
 
    @Override
-   public SourceType getSourceType()
-   {
-      return SourceType.PACKAGEINFO;
-   }
-
-   @Override
    public String getName()
    {
       return ""package-info"";
    }
 
-   private final AnnotationAccessor<JavaPackageInfo, JavaPackageInfo> annotations = new AnnotationAccessor<JavaPackageInfo, JavaPackageInfo>();
+   private final AnnotationAccessor<JavaPackageInfoSource, JavaPackageInfoSource> annotations = new AnnotationAccessor<JavaPackageInfoSource, JavaPackageInfoSource>();
    private final ModifierAccessor modifiers = new ModifierAccessor();
 
    protected final Document document;
@@ -77,25 +71,25 @@
     * Annotation modifiers
     */
    @Override
-   public Annotation<JavaPackageInfo> addAnnotation()
+   public AnnotationSource<JavaPackageInfoSource> addAnnotation()
    {
       return annotations.addAnnotation(this, getPackageDeclaration());
    }
 
    @Override
-   public Annotation<JavaPackageInfo> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
+   public AnnotationSource<JavaPackageInfoSource> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
    {
       return annotations.addAnnotation(this, getPackageDeclaration(), clazz.getName());
    }
 
    @Override
-   public Annotation<JavaPackageInfo> addAnnotation(final String className)
+   public AnnotationSource<JavaPackageInfoSource> addAnnotation(final String className)
    {
       return annotations.addAnnotation(this, getPackageDeclaration(), className);
    }
 
    @Override
-   public List<Annotation<JavaPackageInfo>> getAnnotations()
+   public List<AnnotationSource<JavaPackageInfoSource>> getAnnotations()
    {
       return annotations.getAnnotations(this, getPackageDeclaration());
    }
@@ -113,19 +107,19 @@
    }
 
    @Override
-   public JavaPackageInfo removeAnnotation(final Annotation<JavaPackageInfo> annotation)
+   public JavaPackageInfoSource removeAnnotation(final Annotation<JavaPackageInfoSource> annotation)
    {
       return annotations.removeAnnotation(this, getPackageDeclaration(), annotation);
    }
 
    @Override
-   public Annotation<JavaPackageInfo> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
+   public AnnotationSource<JavaPackageInfoSource> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
    {
       return annotations.getAnnotation(this, getPackageDeclaration(), type);
    }
 
    @Override
-   public Annotation<JavaPackageInfo> getAnnotation(final String type)
+   public AnnotationSource<JavaPackageInfoSource> getAnnotation(final String type)
    {
       return annotations.getAnnotation(this, getPackageDeclaration(), type);
    }
@@ -141,7 +135,7 @@
    }
 
    @Override
-   public <T extends JavaSource<?>> Import addImport(final T type)
+   public <T extends JavaType<?>> Import addImport(final T type)
    {
       String qualifiedName = type.getQualifiedName();
       return this.addImport(qualifiedName);
@@ -201,7 +195,7 @@
    }
 
    @Override
-   public <T extends JavaSource<?>> Import getImport(final T type)
+   public <T extends JavaType<?>> Import getImport(final T type)
    {
       return getImport(type.getQualifiedName());
    }
@@ -233,7 +227,7 @@
    }
 
    @Override
-   public <T extends JavaSource<T>> boolean hasImport(final T type)
+   public <T extends JavaType<T>> boolean hasImport(final T type)
    {
       return hasImport(type.getQualifiedName());
    }
@@ -384,7 +378,7 @@
    }
 
    @Override
-   public JavaPackageInfo removeImport(final String name)
+   public JavaPackageInfoSource removeImport(final String name)
    {
       for (Import i : getImports())
       {
@@ -398,19 +392,19 @@
    }
 
    @Override
-   public JavaPackageInfo removeImport(final Class<?> clazz)
+   public JavaPackageInfoSource removeImport(final Class<?> clazz)
    {
       return removeImport(clazz.getName());
    }
 
    @Override
-   public <T extends JavaSource<?>> JavaPackageInfo removeImport(final T type)
+   public <T extends JavaType<?>> JavaPackageInfoSource removeImport(final T type)
    {
       return removeImport(type.getQualifiedName());
    }
 
    @Override
-   public JavaPackageInfo removeImport(final Import imprt)
+   public JavaPackageInfoSource removeImport(final Import imprt)
    {
       Object internal = imprt.getInternal();
       if (unit.imports().contains(internal))
@@ -420,12 +414,6 @@
       return this;
    }
 
-   @Override
-   public List<Member<JavaPackageInfo, ?>> getMembers()
-   {
-      return Collections.emptyList();
-   }
-
    protected PackageDeclaration getPackageDeclaration()
    {
       if (pkg instanceof PackageDeclaration)
@@ -434,7 +422,7 @@
    }
 
    @Override
-   public JavaPackageInfo setName(final String name)
+   public JavaPackageInfoSource setName(final String name)
    {
       throw new UnsupportedOperationException(""Changing name of ["" + getQualifiedName() + ""] not supported."");
    }
@@ -444,7 +432,7 @@
    {
       String result = getName();
 
-      JavaSource<?> enclosingType = this;
+      JavaType<?> enclosingType = this;
       while (enclosingType != enclosingType.getEnclosingType())
       {
          enclosingType = getEnclosingType();
@@ -463,7 +451,7 @@
    {
       String result = getName();
 
-      JavaSource<?> enclosingType = this;
+      JavaType<?> enclosingType = this;
       while (enclosingType != enclosingType.getEnclosingType())
       {
          enclosingType = getEnclosingType();
@@ -495,7 +483,7 @@
    }
 
    @Override
-   public JavaPackageInfo setPackage(final String name)
+   public JavaPackageInfoSource setPackage(final String name)
    {
       if (unit.getPackage() == null)
       {
@@ -506,7 +494,7 @@
    }
 
    @Override
-   public JavaPackageInfo setDefaultPackage()
+   public JavaPackageInfoSource setDefaultPackage()
    {
       unit.setPackage(null);
       return this;
@@ -528,7 +516,7 @@
    }
 
    @Override
-   public JavaPackageInfo setPackagePrivate()
+   public JavaPackageInfoSource setPackagePrivate()
    {
       modifiers.clearVisibility(getPackageDeclaration());
       return this;
@@ -541,7 +529,7 @@
    }
 
    @Override
-   public JavaPackageInfo setPublic()
+   public JavaPackageInfoSource setPublic()
    {
       modifiers.clearVisibility(getPackageDeclaration());
       modifiers.addModifier(getPackageDeclaration(), ModifierKeyword.PUBLIC_KEYWORD);
@@ -555,7 +543,7 @@
    }
 
    @Override
-   public JavaPackageInfo setPrivate()
+   public JavaPackageInfoSource setPrivate()
    {
       modifiers.clearVisibility(getPackageDeclaration());
       modifiers.addModifier(getPackageDeclaration(), ModifierKeyword.PRIVATE_KEYWORD);
@@ -569,7 +557,7 @@
    }
 
    @Override
-   public JavaPackageInfo setProtected()
+   public JavaPackageInfoSource setProtected()
    {
       modifiers.clearVisibility(getPackageDeclaration());
       modifiers.addModifier(getPackageDeclaration(), ModifierKeyword.PROTECTED_KEYWORD);
@@ -583,7 +571,7 @@
    }
 
    @Override
-   public JavaPackageInfo setVisibility(final Visibility scope)
+   public JavaPackageInfoSource setVisibility(final Visibility scope)
    {
       return Visibility.set(this, scope);
    }
@@ -592,7 +580,7 @@
     * Non-manipulation methods.
     */
    /**
-    * Return this {@link JavaSource} file as a String
+    * Return this {@link JavaType} file as a String
     */
    @Override
    public String toString()
@@ -619,7 +607,7 @@
    }
 
    @Override
-   public JavaPackageInfo getOrigin()
+   public JavaPackageInfoSource getOrigin()
    {
       return this;
    }
"
3be61b82e6518aaa23f450d669221359d668ac96,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java
index c8f38cd..74dd0a7 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java
@@ -8,6 +8,7 @@
 
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.Iterator;
 import java.util.List;
 
 import org.eclipse.jdt.core.dom.AST;
@@ -20,25 +21,31 @@
 import org.eclipse.jdt.core.dom.SimpleName;
 import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
 import org.eclipse.jdt.core.dom.Statement;
+import org.eclipse.jdt.core.dom.TypeParameter;
 import org.eclipse.jdt.core.dom.VariableDeclaration;
 import org.jboss.forge.parser.JavaParser;
 import org.jboss.forge.parser.java.Annotation;
-import org.jboss.forge.parser.java.JavaClass;
-import org.jboss.forge.parser.java.JavaSource;
-import org.jboss.forge.parser.java.Method;
-import org.jboss.forge.parser.java.Parameter;
+import org.jboss.forge.parser.java.JavaType;
 import org.jboss.forge.parser.java.Type;
+import org.jboss.forge.parser.java.TypeVariable;
 import org.jboss.forge.parser.java.Visibility;
 import org.jboss.forge.parser.java.ast.AnnotationAccessor;
 import org.jboss.forge.parser.java.ast.ModifierAccessor;
+import org.jboss.forge.parser.java.source.AnnotationSource;
+import org.jboss.forge.parser.java.source.JavaClassSource;
+import org.jboss.forge.parser.java.source.JavaSource;
+import org.jboss.forge.parser.java.source.MethodSource;
+import org.jboss.forge.parser.java.source.ParameterSource;
+import org.jboss.forge.parser.java.source.TypeVariableSource;
+import org.jboss.forge.parser.java.util.Strings;
 import org.jboss.forge.parser.java.util.Types;
 
 /**
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
-public class MethodImpl<O extends JavaSource<O>> implements Method<O>
+public class MethodImpl<O extends JavaSource<O>> implements MethodSource<O>
 {
-   private final AnnotationAccessor<O, Method<O>> annotations = new AnnotationAccessor<O, Method<O>>();
+   private final AnnotationAccessor<O, MethodSource<O>> annotations = new AnnotationAccessor<O, MethodSource<O>>();
    private final ModifierAccessor modifiers = new ModifierAccessor();
 
    private O parent = null;
@@ -71,8 +78,8 @@
       init(parent);
 
       String stub = ""public class Stub { "" + method + "" }"";
-      JavaClass temp = (JavaClass) JavaParser.parse(stub);
-      List<Method<JavaClass>> methods = temp.getMethods();
+      JavaClassSource temp = (JavaClassSource) JavaParser.parse(stub);
+      List<MethodSource<JavaClassSource>> methods = temp.getMethods();
       MethodDeclaration newMethod = (MethodDeclaration) methods.get(0).getInternal();
       MethodDeclaration subtree = (MethodDeclaration) ASTNode.copySubtree(cu.getAST(), newMethod);
       this.method = subtree;
@@ -85,8 +92,8 @@
                .scope()) + "" "";
       signature += this.getName() + ""("";
 
-      List<Parameter<O>> parameters = this.getParameters();
-      for (Parameter<O> p : parameters)
+      List<ParameterSource<O>> parameters = this.getParameters();
+      for (ParameterSource<O> p : parameters)
       {
          signature += p.getType();
          if (parameters.indexOf(p) < (parameters.size() - 1))
@@ -104,13 +111,13 @@
     */
 
    @Override
-   public Annotation<O> addAnnotation()
+   public AnnotationSource<O> addAnnotation()
    {
       return annotations.addAnnotation(this, method);
    }
 
    @Override
-   public Annotation<O> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
+   public AnnotationSource<O> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
    {
       if (!parent.hasImport(clazz))
       {
@@ -120,13 +127,13 @@
    }
 
    @Override
-   public Annotation<O> addAnnotation(final String className)
+   public AnnotationSource<O> addAnnotation(final String className)
    {
       return annotations.addAnnotation(this, method, className);
    }
 
    @Override
-   public List<Annotation<O>> getAnnotations()
+   public List<AnnotationSource<O>> getAnnotations()
    {
       return annotations.getAnnotations(this, method);
    }
@@ -144,19 +151,19 @@
    }
 
    @Override
-   public Method<O> removeAnnotation(final Annotation<O> annotation)
+   public MethodSource<O> removeAnnotation(final Annotation<O> annotation)
    {
       return annotations.removeAnnotation(this, method, annotation);
    }
 
    @Override
-   public Annotation<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
+   public AnnotationSource<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
    {
       return annotations.getAnnotation(this, method, type);
    }
 
    @Override
-   public Annotation<O> getAnnotation(final String type)
+   public AnnotationSource<O> getAnnotation(final String type)
    {
       return annotations.getAnnotation(this, method, type);
    }
@@ -181,11 +188,11 @@
    }
 
    @Override
-   public Method<O> setBody(final String body)
+   public MethodSource<O> setBody(final String body)
    {
       String stub = ""public class Stub { public void method() {"" + body + ""} }"";
-      JavaClass temp = (JavaClass) JavaParser.parse(stub);
-      List<Method<JavaClass>> methods = temp.getMethods();
+      JavaClassSource temp = (JavaClassSource) JavaParser.parse(stub);
+      List<MethodSource<JavaClassSource>> methods = temp.getMethods();
       Block block = ((MethodDeclaration) methods.get(0).getInternal()).getBody();
 
       block = (Block) ASTNode.copySubtree(method.getAST(), block);
@@ -195,7 +202,7 @@
    }
 
    @Override
-   public Method<O> setConstructor(final boolean constructor)
+   public MethodSource<O> setConstructor(final boolean constructor)
    {
       method.setConstructor(constructor);
       if (isConstructor())
@@ -258,17 +265,17 @@
    }
 
    @Override
-   public Method<O> setReturnType(final Class<?> type)
+   public MethodSource<O> setReturnType(final Class<?> type)
    {
       return setReturnType(type.getSimpleName());
    }
 
    @Override
-   public Method<O> setReturnType(final String typeName)
+   public MethodSource<O> setReturnType(final String typeName)
    {
       String stub = ""public class Stub { public "" + typeName + "" method() {} }"";
-      JavaClass temp = (JavaClass) JavaParser.parse(stub);
-      List<Method<JavaClass>> methods = temp.getMethods();
+      JavaClassSource temp = (JavaClassSource) JavaParser.parse(stub);
+      List<MethodSource<JavaClassSource>> methods = temp.getMethods();
       org.eclipse.jdt.core.dom.Type returnType = ((MethodDeclaration) methods.get(0).getInternal()).getReturnType2();
 
       returnType = (org.eclipse.jdt.core.dom.Type) ASTNode.copySubtree(method.getAST(), returnType);
@@ -278,7 +285,7 @@
    }
 
    @Override
-   public Method<O> setReturnType(final JavaSource<?> type)
+   public MethodSource<O> setReturnType(final JavaType<?> type)
    {
       return setReturnType(type.getName());
    }
@@ -290,7 +297,7 @@
    }
 
    @Override
-   public Method<O> setReturnTypeVoid()
+   public MethodSource<O> setReturnTypeVoid()
    {
       method.setReturnType2(null);
       return this;
@@ -307,7 +314,7 @@
    }
 
    @Override
-   public Method<O> setAbstract(final boolean abstrct)
+   public MethodSource<O> setAbstract(final boolean abstrct)
    {
       if (abstrct)
       {
@@ -327,7 +334,7 @@
    }
 
    @Override
-   public Method<O> setFinal(final boolean finl)
+   public MethodSource<O> setFinal(final boolean finl)
    {
       if (finl)
          modifiers.addModifier(method, ModifierKeyword.FINAL_KEYWORD);
@@ -343,7 +350,7 @@
    }
 
    @Override
-   public Method<O> setStatic(final boolean statc)
+   public MethodSource<O> setStatic(final boolean statc)
    {
       if (statc)
          modifiers.addModifier(method, ModifierKeyword.STATIC_KEYWORD);
@@ -359,7 +366,7 @@
    }
 
    @Override
-   public Method<O> setName(final String name)
+   public MethodSource<O> setName(final String name)
    {
       if (method.isConstructor())
       {
@@ -371,11 +378,11 @@
 
    @Override
    @SuppressWarnings(""unchecked"")
-   public Method<O> setParameters(final String parameters)
+   public MethodSource<O> setParameters(final String parameters)
    {
       String stub = ""public class Stub { public void method( "" + parameters + "" ) {} }"";
-      JavaClass temp = (JavaClass) JavaParser.parse(stub);
-      List<Method<JavaClass>> methods = temp.getMethods();
+      JavaClassSource temp = (JavaClassSource) JavaParser.parse(stub);
+      List<MethodSource<JavaClassSource>> methods = temp.getMethods();
       List<VariableDeclaration> astParameters = ((MethodDeclaration) methods.get(0).getInternal()).parameters();
 
       method.parameters().clear();
@@ -389,9 +396,9 @@
    }
 
    @Override
-   public List<Parameter<O>> getParameters()
+   public List<ParameterSource<O>> getParameters()
    {
-      List<Parameter<O>> results = new ArrayList<Parameter<O>>();
+      List<ParameterSource<O>> results = new ArrayList<ParameterSource<O>>();
       @SuppressWarnings(""unchecked"")
       List<SingleVariableDeclaration> parameters = method.parameters();
       for (SingleVariableDeclaration param : parameters)
@@ -412,7 +419,7 @@
    }
 
    @Override
-   public Method<O> setPackagePrivate()
+   public MethodSource<O> setPackagePrivate()
    {
       modifiers.clearVisibility(method);
       return this;
@@ -425,7 +432,7 @@
    }
 
    @Override
-   public Method<O> setPublic()
+   public MethodSource<O> setPublic()
    {
       modifiers.clearVisibility(method);
       modifiers.addModifier(method, ModifierKeyword.PUBLIC_KEYWORD);
@@ -439,7 +446,7 @@
    }
 
    @Override
-   public Method<O> setPrivate()
+   public MethodSource<O> setPrivate()
    {
       modifiers.clearVisibility(method);
       modifiers.addModifier(method, ModifierKeyword.PRIVATE_KEYWORD);
@@ -453,7 +460,7 @@
    }
 
    @Override
-   public Method<O> setProtected()
+   public MethodSource<O> setProtected()
    {
       modifiers.clearVisibility(method);
       modifiers.addModifier(method, ModifierKeyword.PROTECTED_KEYWORD);
@@ -467,7 +474,7 @@
    }
 
    @Override
-   public Method<O> setVisibility(final Visibility scope)
+   public MethodSource<O> setVisibility(final Visibility scope)
    {
       return Visibility.set(this, scope);
    }
@@ -534,14 +541,14 @@
    }
 
    @Override
-   public Method<O> addThrows(final Class<? extends Exception> type)
+   public MethodSource<O> addThrows(final Class<? extends Exception> type)
    {
       return addThrows(type.getName());
    }
 
    @Override
    @SuppressWarnings({ ""unchecked"", ""rawtypes"" })
-   public Method<O> addThrows(final String type)
+   public MethodSource<O> addThrows(final String type)
    {
       String packg = Types.getPackage(type);
       String name = Types.toSimpleName(type);
@@ -574,13 +581,13 @@
    }
 
    @Override
-   public Method<O> removeThrows(final Class<? extends Exception> type)
+   public MethodSource<O> removeThrows(final Class<? extends Exception> type)
    {
       return removeThrows(type.getName());
    }
 
    @Override
-   public Method<O> removeThrows(final String type)
+   public MethodSource<O> removeThrows(final String type)
    {
       List<?> list = (List<?>) method.getStructuralProperty(MethodDeclaration.THROWN_EXCEPTIONS_PROPERTY);
 
@@ -614,4 +621,66 @@
 
       return this;
    }
+
+   @Override
+   public List<TypeVariableSource<O>> getTypeVariables()
+   {
+      List<TypeVariableSource<O>> result = new ArrayList<TypeVariableSource<O>>();
+      @SuppressWarnings(""unchecked"")
+      List<TypeParameter> typeParameters = method.typeParameters();
+      if (typeParameters != null)
+      {
+         for (TypeParameter typeParameter : typeParameters)
+         {
+            result.add(new TypeVariableImpl<O>(parent, typeParameter));
+         }
+      }
+      return Collections.unmodifiableList(result);
+   }
+
+   @Override
+   public TypeVariableSource<O> getTypeVariable(String name)
+   {
+      @SuppressWarnings(""unchecked"")
+      List<TypeParameter> typeParameters = method.typeParameters();
+      for (TypeParameter typeParameter : typeParameters)
+      {
+         if (Strings.areEqual(name, typeParameter.getName().getIdentifier()))
+         {
+            return(new TypeVariableImpl<O>(parent, typeParameter));
+         }
+      }
+      return null;
+   }
+
+   @SuppressWarnings(""unchecked"")
+   @Override
+   public TypeVariableSource<O> addTypeVariable()
+   {
+      TypeParameter tp2 = method.getAST().newTypeParameter();
+      method.typeParameters().add(tp2);
+      return new TypeVariableImpl<O>(parent, tp2);
+   }
+
+   @Override
+   public MethodSource<O> removeTypeVariable(String name)
+   {
+      @SuppressWarnings(""unchecked"")
+      List<TypeParameter> typeParameters = method.typeParameters();
+      for (Iterator<TypeParameter> iter = typeParameters.iterator(); iter.hasNext();)
+      {
+         if (Strings.areEqual(name, iter.next().getName().getIdentifier()))
+         {
+            iter.remove();
+            break;
+         }
+      }
+      return this;
+   }
+
+   @Override
+   public MethodSource<O> removeTypeVariable(TypeVariable<?> typeVariable)
+   {
+      return removeTypeVariable(typeVariable.getName());
+   }
 }
"
3be61b82e6518aaa23f450d669221359d668ac96,George Gastaldi,ParameterImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/ParameterImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/ParameterImpl.java
index 5664287..0cd30c4 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/ParameterImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/ParameterImpl.java
@@ -11,18 +11,19 @@
 import org.eclipse.jdt.core.dom.SimpleName;
 import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
 import org.jboss.forge.parser.java.Annotation;
-import org.jboss.forge.parser.java.JavaSource;
-import org.jboss.forge.parser.java.Parameter;
 import org.jboss.forge.parser.java.Type;
 import org.jboss.forge.parser.java.ast.AnnotationAccessor;
+import org.jboss.forge.parser.java.source.AnnotationSource;
+import org.jboss.forge.parser.java.source.JavaSource;
+import org.jboss.forge.parser.java.source.ParameterSource;
 
 /**
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * 
  */
-public class ParameterImpl<O extends JavaSource<O>> implements Parameter<O>
+public class ParameterImpl<O extends JavaSource<O>> implements ParameterSource<O>
 {
-   private final AnnotationAccessor<O, Parameter<O>> annotations = new AnnotationAccessor<O, Parameter<O>>();
+   private final AnnotationAccessor<O, ParameterSource<O>> annotations = new AnnotationAccessor<O, ParameterSource<O>>();
    private final O parent;
    private final SingleVariableDeclaration param;
 
@@ -63,13 +64,13 @@
    }
 
    @Override
-   public Annotation<O> addAnnotation()
+   public AnnotationSource<O> addAnnotation()
    {
       return annotations.addAnnotation(this, param);
    }
 
    @Override
-   public Annotation<O> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
+   public AnnotationSource<O> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
    {
       if (parent.requiresImport(clazz))
       {
@@ -79,13 +80,13 @@
    }
 
    @Override
-   public Annotation<O> addAnnotation(final String className)
+   public AnnotationSource<O> addAnnotation(final String className)
    {
       return annotations.addAnnotation(this, param, className);
    }
 
    @Override
-   public List<Annotation<O>> getAnnotations()
+   public List<AnnotationSource<O> > getAnnotations()
    {
       return annotations.getAnnotations(this, param);
    }
@@ -103,19 +104,19 @@
    }
 
    @Override
-   public Annotation<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
+   public AnnotationSource<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
    {
       return annotations.getAnnotation(this, param, type);
    }
 
    @Override
-   public Annotation<O> getAnnotation(final String type)
+   public AnnotationSource<O> getAnnotation(final String type)
    {
       return annotations.getAnnotation(this, param, type);
    }
 
    @Override
-   public Parameter<O> removeAnnotation(final Annotation<O> annotation)
+   public ParameterSource<O> removeAnnotation(final Annotation<O> annotation)
    {
       return annotations.removeAnnotation(this, param, annotation);
    }
"
3be61b82e6518aaa23f450d669221359d668ac96,George Gastaldi,Formatter.java,MODIFY,format -> [String source] | [JavaClassSource javaClass],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/util/Formatter.java b/impl/src/main/java/org/jboss/forge/parser/java/util/Formatter.java
index 946f8cc..61a80ec 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/util/Formatter.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/util/Formatter.java
@@ -17,14 +17,14 @@
 import org.eclipse.jface.text.Document;
 import org.eclipse.jface.text.IDocument;
 import org.eclipse.text.edits.TextEdit;
-import org.jboss.forge.parser.java.JavaClass;
+import org.jboss.forge.parser.java.source.JavaClassSource;
 
 /**
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
 public abstract class Formatter
 {
-   public static String format(JavaClass javaClass)
+   public static String format(JavaClassSource javaClass)
    {
       return format(javaClass.toString());
    }
"
3be61b82e6518aaa23f450d669221359d668ac96,George Gastaldi,JavaParserImpl.java,MODIFY,parse -> [String data] | [InputStream data],"diff --git a/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java b/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
index 5900cce..3e95af2 100644
--- a/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/spi/JavaParserImpl.java
@@ -7,13 +7,8 @@
 
 package org.jboss.forge.parser.spi;
 
-import java.io.BufferedInputStream;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
-import java.net.URL;
 import java.util.List;
 import java.util.Map;
 
@@ -31,18 +26,19 @@
 import org.eclipse.jdt.internal.compiler.util.Util;
 import org.eclipse.jface.text.Document;
 import org.jboss.forge.parser.ParserException;
-import org.jboss.forge.parser.java.JavaAnnotation;
-import org.jboss.forge.parser.java.JavaClass;
-import org.jboss.forge.parser.java.JavaEnum;
-import org.jboss.forge.parser.java.JavaInterface;
-import org.jboss.forge.parser.java.JavaPackageInfo;
-import org.jboss.forge.parser.java.JavaSource;
+import org.jboss.forge.parser.java.JavaType;
 import org.jboss.forge.parser.java.ast.TypeDeclarationFinderVisitor;
 import org.jboss.forge.parser.java.impl.JavaAnnotationImpl;
 import org.jboss.forge.parser.java.impl.JavaClassImpl;
 import org.jboss.forge.parser.java.impl.JavaEnumImpl;
 import org.jboss.forge.parser.java.impl.JavaInterfaceImpl;
 import org.jboss.forge.parser.java.impl.JavaPackageInfoImpl;
+import org.jboss.forge.parser.java.source.JavaAnnotationSource;
+import org.jboss.forge.parser.java.source.JavaClassSource;
+import org.jboss.forge.parser.java.source.JavaEnumSource;
+import org.jboss.forge.parser.java.source.JavaInterfaceSource;
+import org.jboss.forge.parser.java.source.JavaPackageInfoSource;
+import org.jboss.forge.parser.java.source.JavaSource;
 
 /**
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
@@ -51,37 +47,16 @@
 {
 
    @Override
-   public JavaSource<?> parse(final File file) throws FileNotFoundException
-   {
-      FileInputStream stream = null;
-      try
-      {
-         stream = new FileInputStream(file);
-         return parse(new BufferedInputStream(stream));
-      }
-      finally
-      {
-         Streams.closeQuietly(stream);
-      }
-   }
-
-   @Override
-   public JavaSource<?> parse(URL url) throws IOException
-   {
-      return parse(url.openStream());
-   }
-
-   @Override
-   public JavaSource<?> parse(final InputStream data)
+   public JavaType<?> parse(final InputStream data)
    {
       try
       {
          char[] source = Util.getInputStreamAsCharArray(data, data.available(), ""ISO8859_1"");
-         return parse(source);
+         return parse(new String(source));
       }
       catch (IOException e)
       {
-         throw new IllegalArgumentException(""InputStream must be a parsable java file: "", e);
+         return null;
       }
       finally
       {
@@ -89,15 +64,8 @@
       }
    }
 
-   @Override
-   public JavaSource<?> parse(final char[] data)
-   {
-      return parse(new String(data));
-   }
-
-   @Override
    @SuppressWarnings({ ""rawtypes"", ""unchecked"" })
-   public JavaSource<?> parse(final String data)
+   private JavaType<?> parse(final String data)
    {
       Document document = new Document(data);
       ASTParser parser = ASTParser.newParser(AST.JLS4);
@@ -130,8 +98,8 @@
    }
 
    /**
-    * Create a {@link JavaSource} instance from the given {@link Document}, {@link CompilationUnit},
-    * {@link TypeDeclaration}, and enclosing {@link JavaSource} type.
+    * Create a {@link JavaType} instance from the given {@link Document}, {@link CompilationUnit},
+    * {@link TypeDeclaration}, and enclosing {@link JavaType} type.
     */
    public static JavaSource<?> getJavaSource(JavaSource<?> enclosingType, Document document, CompilationUnit unit,
             ASTNode declaration)
@@ -173,88 +141,24 @@
    @SuppressWarnings(""unchecked"")
    public <T extends JavaSource<?>> T create(final Class<T> type)
    {
-      if (JavaClass.class.isAssignableFrom(type))
-         return (T) parse(""public class JavaClass { }"");
-
-      if (JavaEnum.class.isAssignableFrom(type))
-         return (T) parse(""public enum JavaEnum { }"");
-
-      if (JavaAnnotation.class.isAssignableFrom(type))
-         return (T) parse(""public @interface JavaAnnotation { }"");
-
-      if (JavaInterface.class.isAssignableFrom(type))
-         return (T) parse(""public interface JavaInterface { }"");
-
-      if (JavaPackageInfo.class.isAssignableFrom(type))
-         return (T) parse(""package org.example;"");
-
-      throw new ParserException(""Unknown JavaSource type ["" + type.getName() + ""]"");
-   }
-
-   @Override
-   @SuppressWarnings(""unchecked"")
-   public <T extends JavaSource<?>> T parse(final Class<T> type, final InputStream data)
-   {
-
-      JavaSource<?> source = parse(data);
-      if (type.isAssignableFrom(source.getClass()))
+      if (type != null)
       {
-         return (T) source;
+         if (type.isAssignableFrom(JavaClassSource.class))
+            return (T) parse(""public class JavaClass { }"");
+   
+         if (type.isAssignableFrom(JavaEnumSource.class))
+            return (T) parse(""public enum JavaEnum { }"");
+   
+         if (type.isAssignableFrom(JavaAnnotationSource.class))
+            return (T) parse(""public @interface JavaAnnotation { }"");
+   
+         if (type.isAssignableFrom(JavaInterfaceSource.class))
+            return (T) parse(""public interface JavaInterface { }"");
+   
+         if (type.isAssignableFrom(JavaPackageInfoSource.class))
+            return (T) parse(""package org.example;"");
       }
-      throw new ParserException(""Source does not represent a ["" + type.getSimpleName() + ""], instead was [""
-               + source.getClass().getSimpleName() + ""] - Cannot convert."");
-   }
-
-   @Override
-   @SuppressWarnings(""unchecked"")
-   public <T extends JavaSource<?>> T parse(final Class<T> type, final char[] data)
-   {
-      JavaSource<?> source = parse(data);
-      if (type.isAssignableFrom(source.getClass()))
-      {
-         return (T) source;
-      }
-      throw new ParserException(""Source does not represent a ["" + type.getSimpleName() + ""], instead was [""
-               + source.getClass().getSimpleName() + ""] - Cannot convert."");
-   }
-
-   @Override
-   @SuppressWarnings(""unchecked"")
-   public <T extends JavaSource<?>> T parse(final Class<T> type, final String data)
-   {
-      JavaSource<?> source = parse(data);
-      if (type.isAssignableFrom(source.getClass()))
-      {
-         return (T) source;
-      }
-      throw new ParserException(""Source does not represent a ["" + type.getSimpleName() + ""], instead was [""
-               + source.getClass().getSimpleName() + ""] - Cannot convert."");
-   }
-
-   @Override
-   @SuppressWarnings(""unchecked"")
-   public <T extends JavaSource<?>> T parse(final Class<T> type, final File file) throws FileNotFoundException
-   {
-      JavaSource<?> source = parse(file);
-      if (type.isAssignableFrom(source.getClass()))
-      {
-         return (T) source;
-      }
-      throw new ParserException(""Source does not represent a ["" + type.getSimpleName() + ""], instead was [""
-               + source.getClass().getSimpleName() + ""] - Cannot convert."");
-   }
-
-   @Override
-   @SuppressWarnings(""unchecked"")
-   public <T extends JavaSource<?>> T parse(final Class<T> type, final URL url) throws IOException
-   {
-      JavaSource<?> source = parse(url.openStream());
-      if (type.isAssignableFrom(source.getClass()))
-      {
-         return (T) source;
-      }
-      throw new ParserException(""Source does not represent a ["" + type.getSimpleName() + ""], instead was [""
-               + source.getClass().getSimpleName() + ""] - Cannot convert."");
+      return null;
    }
 
 }
"
3be61b82e6518aaa23f450d669221359d668ac96,George Gastaldi,MethodSignatureTest.java,MODIFY,"assertVisibility -> [String visibility, MethodSource method] | [Visibility visibility, MethodSource method]","diff --git a/impl/src/test/java/org/jboss/forge/test/parser/java/MethodSignatureTest.java b/impl/src/test/java/org/jboss/forge/test/parser/java/MethodSignatureTest.java
index b7e78eb..a56db90 100644
--- a/impl/src/test/java/org/jboss/forge/test/parser/java/MethodSignatureTest.java
+++ b/impl/src/test/java/org/jboss/forge/test/parser/java/MethodSignatureTest.java
@@ -11,10 +11,10 @@
 import java.util.List;
 
 import org.jboss.forge.parser.JavaParser;
-import org.jboss.forge.parser.java.JavaClass;
-import org.jboss.forge.parser.java.Method;
-import org.jboss.forge.parser.java.Parameter;
 import org.jboss.forge.parser.java.Visibility;
+import org.jboss.forge.parser.java.source.JavaClassSource;
+import org.jboss.forge.parser.java.source.MethodSource;
+import org.jboss.forge.parser.java.source.ParameterSource;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -26,7 +26,7 @@
    @Test
    public void testEmptyMethodSignature() throws Exception
    {
-      Method<JavaClass> method = JavaParser.create(JavaClass.class).addMethod(""public void hello()"");
+      MethodSource<JavaClassSource> method = JavaParser.create(JavaClassSource.class).addMethod(""public void hello()"");
       String signature = method.toSignature();
       assertEquals(""public hello() : void"", signature);
    }
@@ -34,7 +34,7 @@
    @Test
    public void testMethodSignatureParams() throws Exception
    {
-      Method<JavaClass> method = JavaParser.create(JavaClass.class).addMethod(""public void hello(String foo, int bar)"");
+      MethodSource<JavaClassSource> method = JavaParser.create(JavaClassSource.class).addMethod(""public void hello(String foo, int bar)"");
       String signature = method.toSignature();
       assertEquals(""public hello(String, int) : void"", signature);
    }
@@ -42,8 +42,8 @@
    @Test
    public void testMethodParams() throws Exception
    {
-      Method<JavaClass> method = JavaParser.create(JavaClass.class).addMethod(""public void hello(String foo, int bar)"");
-      List<Parameter<JavaClass>> parameters = method.getParameters();
+      MethodSource<JavaClassSource> method = JavaParser.create(JavaClassSource.class).addMethod(""public void hello(String foo, int bar)"");
+      List<ParameterSource<JavaClassSource>> parameters = method.getParameters();
 
       Assert.assertEquals(""String"", parameters.get(0).getTypeInspector().toString());
       Assert.assertEquals(""int"", parameters.get(1).getTypeInspector().toString());
@@ -52,14 +52,14 @@
    @Test(expected = UnsupportedOperationException.class)
    public void testUnmodifiableMethodParams() throws Exception
    {
-      JavaParser.create(JavaClass.class).addMethod(""public void hello(String foo, int bar)"").getParameters().add(null);
+      JavaParser.create(JavaClassSource.class).addMethod(""public void hello(String foo, int bar)"").getParameters().add(null);
    }
 
    @Test
    public void testMethodVisibility() throws Exception {
-       JavaClass javaClass = JavaParser.create(JavaClass.class);
+       JavaClassSource javaClass = JavaParser.create(JavaClassSource.class);
 
-       Method<JavaClass> method = javaClass.addMethod(""public void hello()"");
+       MethodSource<JavaClassSource> method = javaClass.addMethod(""public void hello()"");
        assertVisibility(Visibility.PUBLIC, method);
        assertVisibility(""public"", method);
 
@@ -78,8 +78,8 @@
 
    @Test
    public void testMethodVisibilityWithSetter() throws Exception {
-       JavaClass javaClass = JavaParser.create(JavaClass.class);
-       Method<JavaClass> method = javaClass.addMethod().setName(""hello"");
+       JavaClassSource javaClass = JavaParser.create(JavaClassSource.class);
+       MethodSource<JavaClassSource> method = javaClass.addMethod().setName(""hello"");
        assertVisibility("""", method);
 
        method.setVisibility(Visibility.PUBLIC);
@@ -95,11 +95,11 @@
        assertVisibility("""", method);
    }
 
-   private void assertVisibility(Visibility visibility, Method<JavaClass> method) {
+   private void assertVisibility(Visibility visibility, MethodSource<JavaClassSource> method) {
        Assert.assertEquals(visibility, method.getVisibility());
    }
 
-   private void assertVisibility(String visibility, Method<JavaClass> method) {
+   private void assertVisibility(String visibility, MethodSource<JavaClassSource> method) {
        Assert.assertEquals(visibility, method.getVisibility().toString());
    }
 }
"
687994a8ed02ffb1c7ffcbb9c7e8dcfca8d2e12a,Matt Benson,AnnotationElementSource.java,MODIFY,setType -> [JavaType entity] | [Class clazz],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/source/AnnotationElementSource.java b/api/src/main/java/org/jboss/forge/parser/java/source/AnnotationElementSource.java
index 1a1576b..2fc0acc 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/source/AnnotationElementSource.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/source/AnnotationElementSource.java
@@ -1,3 +1,10 @@
+/*
+ * Copyright 2012 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Eclipse Public License version 1.0, available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */
+
 package org.jboss.forge.parser.java.source;
 
 import org.jboss.forge.parser.java.AnnotationElement;
"
687994a8ed02ffb1c7ffcbb9c7e8dcfca8d2e12a,Matt Benson,AnnotationSource.java,MODIFY,getAnnotationValue -> [String name] | [],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/source/AnnotationSource.java b/api/src/main/java/org/jboss/forge/parser/java/source/AnnotationSource.java
index f3fdc4b..6daade2 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/source/AnnotationSource.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/source/AnnotationSource.java
@@ -1,3 +1,10 @@
+/*
+ * Copyright 2012 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Eclipse Public License version 1.0, available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */
+
 package org.jboss.forge.parser.java.source;
 
 import org.jboss.forge.parser.java.Annotation;
"
687994a8ed02ffb1c7ffcbb9c7e8dcfca8d2e12a,Matt Benson,AnnotationTargetSource.java,MODIFY,getAnnotation -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/source/AnnotationTargetSource.java b/api/src/main/java/org/jboss/forge/parser/java/source/AnnotationTargetSource.java
index 53865b4..5e01ddc 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/source/AnnotationTargetSource.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/source/AnnotationTargetSource.java
@@ -1,3 +1,10 @@
+/*
+ * Copyright 2012 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Eclipse Public License version 1.0, available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */
+
 package org.jboss.forge.parser.java.source;
 
 import java.util.List;
"
687994a8ed02ffb1c7ffcbb9c7e8dcfca8d2e12a,Matt Benson,ExtendableSource.java,MODIFY,setSuperType -> [String type] | [JavaType type],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/source/ExtendableSource.java b/api/src/main/java/org/jboss/forge/parser/java/source/ExtendableSource.java
index 4dd6c44..c742078 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/source/ExtendableSource.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/source/ExtendableSource.java
@@ -1,3 +1,10 @@
+/*
+ * Copyright 2012 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Eclipse Public License version 1.0, available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */
+
 package org.jboss.forge.parser.java.source;
 
 import org.jboss.forge.parser.java.Extendable;
"
687994a8ed02ffb1c7ffcbb9c7e8dcfca8d2e12a,Matt Benson,FieldHolderSource.java,MODIFY,addField -> [String declaration] | [],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/source/FieldHolderSource.java b/api/src/main/java/org/jboss/forge/parser/java/source/FieldHolderSource.java
index fede5cd..81826e2 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/source/FieldHolderSource.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/source/FieldHolderSource.java
@@ -1,3 +1,10 @@
+/*
+ * Copyright 2012 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Eclipse Public License version 1.0, available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */
+
 package org.jboss.forge.parser.java.source;
 
 import java.util.List;
"
687994a8ed02ffb1c7ffcbb9c7e8dcfca8d2e12a,Matt Benson,FieldSource.java,MODIFY,setType -> [JavaType entity] | [Class clazz],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/source/FieldSource.java b/api/src/main/java/org/jboss/forge/parser/java/source/FieldSource.java
index db75799..aaab895 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/source/FieldSource.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/source/FieldSource.java
@@ -1,3 +1,10 @@
+/*
+ * Copyright 2012 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Eclipse Public License version 1.0, available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */
+
 package org.jboss.forge.parser.java.source;
 
 import org.jboss.forge.parser.java.Field;
"
687994a8ed02ffb1c7ffcbb9c7e8dcfca8d2e12a,Matt Benson,GenericCapableSource.java,MODIFY,removeTypeVariable -> [TypeVariable typeVariable] | [String name],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/source/GenericCapableSource.java b/api/src/main/java/org/jboss/forge/parser/java/source/GenericCapableSource.java
index 2ddf589..95a880f 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/source/GenericCapableSource.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/source/GenericCapableSource.java
@@ -1,3 +1,10 @@
+/*
+ * Copyright 2012 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Eclipse Public License version 1.0, available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */
+
 package org.jboss.forge.parser.java.source;
 
 import java.util.List;
"
687994a8ed02ffb1c7ffcbb9c7e8dcfca8d2e12a,Matt Benson,InterfaceCapableSource.java,MODIFY,addInterface -> [JavaInterface type] | [String type],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/source/InterfaceCapableSource.java b/api/src/main/java/org/jboss/forge/parser/java/source/InterfaceCapableSource.java
index 3567291..34b9793 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/source/InterfaceCapableSource.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/source/InterfaceCapableSource.java
@@ -1,3 +1,10 @@
+/*
+ * Copyright 2012 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Eclipse Public License version 1.0, available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */
+
 package org.jboss.forge.parser.java.source;
 
 import org.jboss.forge.parser.java.InterfaceCapable;
"
687994a8ed02ffb1c7ffcbb9c7e8dcfca8d2e12a,Matt Benson,JavaAnnotationSource.java,MODIFY,addAnnotationElement -> [String declaration] | [],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/source/JavaAnnotationSource.java b/api/src/main/java/org/jboss/forge/parser/java/source/JavaAnnotationSource.java
index 311f23c..9f4abb2 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/source/JavaAnnotationSource.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/source/JavaAnnotationSource.java
@@ -1,3 +1,10 @@
+/*
+ * Copyright 2012 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Eclipse Public License version 1.0, available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */
+
 package org.jboss.forge.parser.java.source;
 
 import java.util.List;
"
687994a8ed02ffb1c7ffcbb9c7e8dcfca8d2e12a,Matt Benson,JavaEnumSource.java,MODIFY,addEnumConstant -> [String declaration] | [],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/source/JavaEnumSource.java b/api/src/main/java/org/jboss/forge/parser/java/source/JavaEnumSource.java
index 34cb5ae..727c4df 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/source/JavaEnumSource.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/source/JavaEnumSource.java
@@ -1,3 +1,10 @@
+/*
+ * Copyright 2012 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Eclipse Public License version 1.0, available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */
+
 package org.jboss.forge.parser.java.source;
 
 import java.util.List;
"
687994a8ed02ffb1c7ffcbb9c7e8dcfca8d2e12a,Matt Benson,MethodHolderSource.java,MODIFY,"getMethod -> [String name, Class paramTypes] | [String name]","diff --git a/api/src/main/java/org/jboss/forge/parser/java/source/MethodHolderSource.java b/api/src/main/java/org/jboss/forge/parser/java/source/MethodHolderSource.java
index 6a4c3e4..f704e61 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/source/MethodHolderSource.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/source/MethodHolderSource.java
@@ -1,3 +1,10 @@
+/*
+ * Copyright 2012 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Eclipse Public License version 1.0, available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */
+
 package org.jboss.forge.parser.java.source;
 
 import java.util.List;
"
687994a8ed02ffb1c7ffcbb9c7e8dcfca8d2e12a,Matt Benson,MethodSource.java,MODIFY,setReturnType -> [JavaType type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/source/MethodSource.java b/api/src/main/java/org/jboss/forge/parser/java/source/MethodSource.java
index e2bebb7..e6fd315 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/source/MethodSource.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/source/MethodSource.java
@@ -1,3 +1,10 @@
+/*
+ * Copyright 2012 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Eclipse Public License version 1.0, available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */
+
 package org.jboss.forge.parser.java.source;
 
 import java.util.List;
"
c26a0b999b64300f99edac0c1ab7d9eb1aa500fd,Matt Benson,MethodSource.java,MODIFY,setReturnType -> [JavaType type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/source/MethodSource.java b/api/src/main/java/org/jboss/forge/parser/java/source/MethodSource.java
index e6fd315..2872b59 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/source/MethodSource.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/source/MethodSource.java
@@ -25,63 +25,63 @@
    /**
     * Set this {@link Method} to return the given type.
     */
-   public MethodSource<O> setReturnType(final Class<?> type);
+   MethodSource<O> setReturnType(final Class<?> type);
 
    /**
     * Set the inner body of this {@link Method}
     */
-   public MethodSource<O> setBody(final String body);
+   MethodSource<O> setBody(final String body);
 
    /**
     * Toggle this method as a constructor. If true, and the name of the {@link Method} is not the same as the name
     * of its parent {@link JavaClass} , update the name of the to match.
     */
-   public MethodSource<O> setConstructor(final boolean constructor);
+   MethodSource<O> setConstructor(final boolean constructor);
 
    /**
     * Set this {@link Method} to return the given type.
     */
-   public MethodSource<O> setReturnType(final String type);
+   MethodSource<O> setReturnType(final String type);
 
    /**
     * Set this {@link Method} to return the given {@link JavaType} type.
     */
-   public MethodSource<O> setReturnType(JavaType<?> type);
+   MethodSource<O> setReturnType(JavaType<?> type);
 
    /**
     * Set this {@link Method} to return 'void'
     */
-   public MethodSource<O> setReturnTypeVoid();
+   MethodSource<O> setReturnTypeVoid();
 
    /**
     * Set this {@link Method}'s parameters.
     */
-   public MethodSource<O> setParameters(String string);
+   MethodSource<O> setParameters(String string);
 
    /**
     * Add a thrown {@link Exception} to this method's signature.
     */
-   public MethodSource<O> addThrows(String type);
+   MethodSource<O> addThrows(String type);
 
    /**
     * Add a thrown {@link Exception} to this method's signature.
     */
-   public MethodSource<O> addThrows(Class<? extends Exception> type);
+   MethodSource<O> addThrows(Class<? extends Exception> type);
 
    /**
     * Remove a thrown {@link Exception} to this method's signature.
     */
-   public MethodSource<O> removeThrows(String type);
+   MethodSource<O> removeThrows(String type);
 
    /**
     * Remove a thrown {@link Exception} to this method's signature.
     */
-   public MethodSource<O> removeThrows(Class<? extends Exception> type);
+   MethodSource<O> removeThrows(Class<? extends Exception> type);
 
    /**
     * Get a list of this {@link Method}'s parameters.
     */
    @Override
-   public List<ParameterSource<O>> getParameters();
+   List<ParameterSource<O>> getParameters();
 
 }
\ No newline at end of file
"
c26a0b999b64300f99edac0c1ab7d9eb1aa500fd,Matt Benson,Refactory.java,MODIFY,"createHashCodeAndEquals -> [JavaClassSource clazz, FieldSource fields] | [JavaClassSource clazz]","diff --git a/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java b/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java
index 80d77ae..2b49ab1 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/util/Refactory.java
@@ -40,14 +40,14 @@
 
       String fieldName = field.getName();
       String methodNameSuffix = Strings.capitalize(fieldName);
-      clazz.addMethod().setReturnType(field.getTypeInspector().toString()).setName(""get"" + methodNameSuffix)
+      clazz.addMethod().setReturnType(field.getType().toString()).setName(""get"" + methodNameSuffix)
                .setPublic()
                .setBody(""return this."" + fieldName + "";"");
 
       if (!field.isFinal())
       {
          clazz.addMethod().setReturnTypeVoid().setName(""set"" + methodNameSuffix).setPublic()
-                  .setParameters(""final "" + field.getTypeInspector().toString() + "" "" + fieldName)
+                  .setParameters(""final "" + field.getType().toString() + "" "" + fieldName)
                   .setBody(""this."" + fieldName + "" = "" + fieldName + "";"");
       }
    }
@@ -115,7 +115,7 @@
       StringBuilder hashCodeComputation = new StringBuilder();
       for (FieldSource<?> field : fields)
       {
-         if(field == null)
+         if (field == null)
          {
             throw new IllegalArgumentException(""A supplied field was null. The equals and hashCode computation will be aborted."");
          }
@@ -125,9 +125,21 @@
          }
 
          String fieldName = field.getName();
-         if (field.isPrimitive())
+         if (field.getType().isArray())
          {
-            if (field.isType(""float""))
+            // if(!Arrays.equals(array, other.array)) {
+            //    return false;
+            // }
+            fieldEqualityChecks.append(""if (!Arrays.equals("").append(fieldName).append("", other."").append(fieldName)
+                     .append("")) {"");
+            fieldEqualityChecks.append("" return false; }"");
+
+            // result = prime * result + Arrays.hashCode(array);
+            hashCodeComputation.append(""result = prime * result + Arrays.hashCode("").append(fieldName).append("");"");
+         }
+         else if (field.getType().isPrimitive())
+         {
+            if (field.getType().isType(""float""))
             {
                // if(Float.floatToIntBits(floatValue) != Float.floatToIntBits(other.floatValue)) {
                //   return false;
@@ -142,7 +154,7 @@
                hashCodeComputation.append(""result = prime * result + "").append(""Float.floatToIntBits("")
                         .append(fieldName).append("");"");
             }
-            else if (field.isType(""double""))
+            else if (field.getType().isType(""double""))
             {
                // if(Double.doubleToLongBits(doubleValue) != Double.doubleToLongBits(other.doubleValue)) {
                //   return false;
@@ -174,13 +186,13 @@
                fieldEqualityChecks.append("" return false;"");
                fieldEqualityChecks.append(""} "");
 
-               if (field.isType(""long""))
+               if (field.getType().isType(""long""))
                {
                   // result = prime * result + (int) (longValue ^ (longValue >>> 32));
                   hashCodeComputation.append(""result = prime * result + (int) ("").append(fieldName).append("" ^ ("")
                            .append(fieldName).append("" >>> 32));"");
                }
-               else if (field.isType(""boolean""))
+               else if (field.getType().isType(""boolean""))
                {
                   // result = prime * result + (booleanValue : 1231 : 1237);
                   hashCodeComputation.append(""result = prime * result + ("").append(fieldName)
@@ -194,18 +206,6 @@
                }
             }
          }
-         else if (field.getTypeInspector().isArray())
-         {
-            // if(!Arrays.equals(array, other.array)) {
-            //    return false;
-            // }
-            fieldEqualityChecks.append(""if (!Arrays.equals("").append(fieldName).append("", other."").append(fieldName)
-                     .append("")) {"");
-            fieldEqualityChecks.append("" return false; }"");
-
-            // result = prime * result + Arrays.hashCode(array);
-            hashCodeComputation.append(""result = prime * result + Arrays.hashCode("").append(fieldName).append("");"");
-         }
          else
          {
             // if(value != null) {
@@ -303,8 +303,8 @@
          {
             StringBuilder line = new StringBuilder();
 
-            if (!field.isPrimitive())
-               if (field.isType(String.class))
+            if (!field.getType().isPrimitive())
+               if (field.getType().isType(String.class))
                {
                   line.append(""if("").append(field.getName()).append("" != null && !"").append(field.getName())
                            .append("".trim().isEmpty())\n"");
"
c26a0b999b64300f99edac0c1ab7d9eb1aa500fd,Matt Benson,AbstractJavaSourceMemberHolder.java,MODIFY,addField -> [Field field] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java
index 973982f..8ed501a 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java
@@ -266,7 +266,7 @@
                   {
                      ParameterSource<O> localParam = localParams.get(i);
                      String type = paramTypes[i];
-                     if (!Types.areEquivalent(localParam.getType(), type))
+                     if (!Types.areEquivalent(localParam.getType().getName(), type))
                      {
                         matches = false;
                      }
@@ -307,7 +307,7 @@
             Iterator<ParameterSource<O>> localParams = local.getParameters().iterator();
             for (Parameter<? extends JavaType<?>> methodParam : method.getParameters())
             {
-               if (localParams.hasNext() && Strings.areEqual(localParams.next().getType(), methodParam.getType()))
+               if (localParams.hasNext() && Strings.areEqual(localParams.next().getType().getName(), methodParam.getType().getName()))
                {
                   continue;
                }
"
c26a0b999b64300f99edac0c1ab7d9eb1aa500fd,Matt Benson,AnnotationElementImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationElementImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationElementImpl.java
index acb4530..690c865 100755
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationElementImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AnnotationElementImpl.java
@@ -420,64 +420,13 @@
    }
 
    @Override
-   public String getType()
-   {
-      return Types.toSimpleName(getQualifiedType());
-   }
-
-   @Override
-   public String getQualifiedType()
-   {
-      Object type = member.getStructuralProperty(AnnotationTypeMemberDeclaration.TYPE_PROPERTY);
-      return parent.resolveType(type.toString());
-   }
-
-   @Override
-   public org.jboss.forge.parser.java.Type<JavaAnnotationSource> getTypeInspector()
+   public Type<JavaAnnotationSource> getType()
    {
       return new TypeImpl<JavaAnnotationSource>(parent,
                member.getStructuralProperty(AnnotationTypeMemberDeclaration.TYPE_PROPERTY));
    }
 
    @Override
-   public boolean isType(final Class<?> type)
-   {
-      if (Strings.areEqual(type.getName(), getQualifiedType()))
-      {
-         return true;
-      }
-
-      if (getTypeInspector().isPrimitive() && type.getSimpleName().equals(getType()))
-      {
-         return true;
-      }
-
-      String simpleName = type.getSimpleName();
-      if (Strings.areEqual(simpleName, getQualifiedType())
-               && (getOrigin().hasImport(type) || !getOrigin().requiresImport(type)))
-      {
-         return true;
-      }
-      return false;
-   }
-
-   @Override
-   public boolean isType(final String name)
-   {
-      if (Strings.areEqual(name, getQualifiedType()))
-      {
-         return true;
-      }
-
-      if ((!Types.isQualified(name) || getOrigin().hasImport(name) || !getOrigin().requiresImport(name))
-               && Types.areEquivalent(name, getQualifiedType()))
-      {
-         return true;
-      }
-      return false;
-   }
-
-   @Override
    public AnnotationElementSource setType(final Class<?> clazz)
    {
       if (parent.requiresImport(clazz))
"
c26a0b999b64300f99edac0c1ab7d9eb1aa500fd,Matt Benson,EnumConstantBodyImpl.java,MODIFY,addImport -> [JavaType type] | [String className],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java
index 0725dec..1e0d455 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/EnumConstantBodyImpl.java
@@ -658,7 +658,7 @@
                   boolean matches = true;
                   for (int i = 0; i < localParams.size(); i++)
                   {
-                     if (!Types.areEquivalent(localParams.get(i).getType(), paramTypes[i]))
+                     if (!Types.areEquivalent(localParams.get(i).getType().getName(), paramTypes[i]))
                      {
                         matches = false;
                      }
@@ -696,7 +696,7 @@
             final Iterator<ParameterSource<Body>> localParams = local.getParameters().iterator();
             for (Parameter<? extends JavaType<?>> methodParam : method.getParameters())
             {
-               if (localParams.hasNext() && Strings.areEqual(localParams.next().getType(), methodParam.getType()))
+               if (localParams.hasNext() && Strings.areEqual(localParams.next().getType().getName(), methodParam.getType().getName()))
                {
                   continue;
                }
"
c26a0b999b64300f99edac0c1ab7d9eb1aa500fd,Matt Benson,FieldImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
index 94bd7b0..6354fb6 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
@@ -12,19 +12,18 @@
 
 import org.eclipse.jdt.core.dom.AST;
 import org.eclipse.jdt.core.dom.ASTNode;
-import org.eclipse.jdt.core.dom.ArrayType;
 import org.eclipse.jdt.core.dom.Expression;
 import org.eclipse.jdt.core.dom.FieldDeclaration;
 import org.eclipse.jdt.core.dom.Modifier.ModifierKeyword;
 import org.eclipse.jdt.core.dom.Name;
 import org.eclipse.jdt.core.dom.PrimitiveType;
 import org.eclipse.jdt.core.dom.PrimitiveType.Code;
-import org.eclipse.jdt.core.dom.Type;
 import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
 import org.jboss.forge.parser.JavaParser;
 import org.jboss.forge.parser.java.Annotation;
 import org.jboss.forge.parser.java.JavaClass;
 import org.jboss.forge.parser.java.JavaType;
+import org.jboss.forge.parser.java.Type;
 import org.jboss.forge.parser.java.Visibility;
 import org.jboss.forge.parser.java.ast.AnnotationAccessor;
 import org.jboss.forge.parser.java.ast.ModifierAccessor;
@@ -308,83 +307,12 @@
    }
 
    @Override
-   public String getType()
-   {
-      return Types.toSimpleName(getQualifiedType());
-   }
-
-   @Override
-   public String getQualifiedType()
-   {
-      Type fieldType = field.getType();
-      String result = parent.resolveType(fieldType.toString());
-      int extraDimensions = fragment.getExtraDimensions();
-      if (fieldType != null)
-      {
-         if (fieldType.isArrayType())
-         {
-            // The resolved type lacks information about arrays since arrays would be stripped from it
-            // We recreate it using the dimensions in the JDT Type to ensure that arrays are not lost in the return
-            // value.
-            int dimensions = ((ArrayType) fieldType).getDimensions();
-            for (int ctr = 0; ctr < dimensions; ctr++)
-            {
-               result += ""[]"";
-            }
-         }
-         for (int dimensionsToAdd = 0; dimensionsToAdd < extraDimensions; dimensionsToAdd++)
-         {
-            result += ""[]"";
-         }
-      }
-      return result;
-   }
-
-   @Override
-   public org.jboss.forge.parser.java.Type<O> getTypeInspector()
+   public Type<O> getType()
    {
       return new TypeImpl<O>(parent, field.getStructuralProperty(FieldDeclaration.TYPE_PROPERTY));
    }
 
    @Override
-   public boolean isType(final Class<?> type)
-   {
-      if (Strings.areEqual(type.getName(), getQualifiedType()))
-      {
-         return true;
-      }
-
-      if (isPrimitive() && type.getSimpleName().equals(getType()))
-      {
-         return true;
-      }
-
-      String simpleName = type.getSimpleName();
-      if (Strings.areEqual(simpleName, getQualifiedType())
-               && (getOrigin().hasImport(type) || !getOrigin().requiresImport(type)))
-      {
-         return true;
-      }
-      return false;
-   }
-
-   @Override
-   public boolean isType(final String name)
-   {
-      if (Strings.areEqual(name, getQualifiedType()))
-      {
-         return true;
-      }
-
-      if ((!Types.isQualified(name) || getOrigin().hasImport(name) || !getOrigin().requiresImport(name))
-               && Types.areEquivalent(name, getQualifiedType()))
-      {
-         return true;
-      }
-      return false;
-   }
-
-   @Override
    public FieldSource<O> setType(final Class<?> clazz)
    {
       if (parent.requiresImport(clazz))
@@ -413,7 +341,7 @@
 
       Code primitive = PrimitiveType.toCode(typeName);
 
-      Type type = null;
+      org.eclipse.jdt.core.dom.Type type = null;
       if (primitive != null)
       {
          type = ast.newPrimitiveType(primitive);
@@ -506,7 +434,7 @@
          if (other.field != null)
             return false;
       }
-      else if (!field.equals(other.field))
+      else if (!field.equals(other.field ))
          return false;
       if (fragment == null)
       {
@@ -518,21 +446,6 @@
       return true;
    }
 
-   /**
-    * TODO: Should we deprecate this method in favor of {@link Field#getTypeInspector()#isPrimitive()} ?
-    */
-   @Override
-   public boolean isPrimitive()
-   {
-      boolean result = false;
-      Type type = field.getType();
-      if (type != null)
-      {
-         result = type.isPrimitiveType();
-      }
-      return result;
-   }
-
    @Override
    public boolean isTransient()
    {
"
c26a0b999b64300f99edac0c1ab7d9eb1aa500fd,Matt Benson,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java
index 74dd0a7..f7b028c 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/MethodImpl.java
@@ -13,7 +13,6 @@
 
 import org.eclipse.jdt.core.dom.AST;
 import org.eclipse.jdt.core.dom.ASTNode;
-import org.eclipse.jdt.core.dom.ArrayType;
 import org.eclipse.jdt.core.dom.Block;
 import org.eclipse.jdt.core.dom.CompilationUnit;
 import org.eclipse.jdt.core.dom.MethodDeclaration;
@@ -95,14 +94,14 @@
       List<ParameterSource<O>> parameters = this.getParameters();
       for (ParameterSource<O> p : parameters)
       {
-         signature += p.getType();
+         signature += p.getType().getName();
          if (parameters.indexOf(p) < (parameters.size() - 1))
          {
             signature += "", "";
          }
       }
 
-      signature += "") : "" + (this.getReturnType() == null ? ""void"" : this.getReturnType());
+      signature += "") : "" + (this.getReturnType() == null ? ""void"" : this.getReturnType().getName());
       return signature;
    }
 
@@ -219,58 +218,35 @@
    }
 
    @Override
-   public String getReturnType()
+   public Type<O> getReturnType()
    {
-      return Types.toSimpleName(getQualifiedReturnType());
-   }
-
-   @Override
-   public String getQualifiedReturnType()
-   {
-      String result = null;
-      org.eclipse.jdt.core.dom.Type returnType = method.getReturnType2();
-
-      if (returnType != null)
+      if (isConstructor())
       {
-         if (""void"".equals(returnType.toString()))
-         {
-            return null;
-         }
-         else if (!isConstructor())
-         {
-            result = returnType.toString();
-         }
+         return null;
       }
-
-      result = parent.resolveType(result);
-      if (returnType != null && returnType.isArrayType())
-      {
-         // FIXME: This is a hack and needs fixing in the design of the Forge parser.
-         // The resolved type lacks information about arrays since arrays would be stripped from it
-         // We recreate it using the dimensions in the JDT Type to ensure that arrays are not lost in the return type.
-         int dimensions = ((ArrayType) returnType).getDimensions();
-         for (int ctr = 0; ctr < dimensions; ctr++)
-         {
-            result += ""[]"";
-         }
-      }
-
-      return result;
-   }
-
-   @Override
-   public Type<O> getReturnTypeInspector()
-   {
       return new TypeImpl<O>(parent, method.getReturnType2());
    }
+   
+   @Override
+   public boolean isReturnTypeVoid()
+   {
+      return getReturnType().isType(Void.TYPE);
+   }
 
    @Override
    public MethodSource<O> setReturnType(final Class<?> type)
    {
+      // TODO add import?
       return setReturnType(type.getSimpleName());
    }
 
    @Override
+   public MethodSource<O> setReturnTypeVoid()
+   {
+      return setReturnType(Void.TYPE);
+   }
+
+   @Override
    public MethodSource<O> setReturnType(final String typeName)
    {
       String stub = ""public class Stub { public "" + typeName + "" method() {} }"";
@@ -290,19 +266,6 @@
       return setReturnType(type.getName());
    }
 
-   @Override
-   public boolean isReturnTypeVoid()
-   {
-      return getReturnType() == null;
-   }
-
-   @Override
-   public MethodSource<O> setReturnTypeVoid()
-   {
-      method.setReturnType2(null);
-      return this;
-   }
-
    /*
     * Abstract Modifiers
     */
"
c26a0b999b64300f99edac0c1ab7d9eb1aa500fd,Matt Benson,ParameterImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/ParameterImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/ParameterImpl.java
index 0cd30c4..6f70a9b 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/ParameterImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/ParameterImpl.java
@@ -51,14 +51,8 @@
    }
 
    @Override
-   public String getType()
-   {
-      return param.getType().toString();
-   }
-
-   @Override
    @SuppressWarnings({ ""rawtypes"", ""unchecked"" })
-   public Type<?> getTypeInspector()
+   public Type<?> getType()
    {
       return new TypeImpl(parent, param.getType());
    }
"
c26a0b999b64300f99edac0c1ab7d9eb1aa500fd,Matt Benson,MethodSignatureTest.java,MODIFY,"assertVisibility -> [String visibility, MethodSource method] | [Visibility visibility, MethodSource method]","diff --git a/impl/src/test/java/org/jboss/forge/test/parser/java/MethodSignatureTest.java b/impl/src/test/java/org/jboss/forge/test/parser/java/MethodSignatureTest.java
index a56db90..63456c0 100644
--- a/impl/src/test/java/org/jboss/forge/test/parser/java/MethodSignatureTest.java
+++ b/impl/src/test/java/org/jboss/forge/test/parser/java/MethodSignatureTest.java
@@ -45,8 +45,8 @@
       MethodSource<JavaClassSource> method = JavaParser.create(JavaClassSource.class).addMethod(""public void hello(String foo, int bar)"");
       List<ParameterSource<JavaClassSource>> parameters = method.getParameters();
 
-      Assert.assertEquals(""String"", parameters.get(0).getTypeInspector().toString());
-      Assert.assertEquals(""int"", parameters.get(1).getTypeInspector().toString());
+      Assert.assertEquals(""String"", parameters.get(0).getType().toString());
+      Assert.assertEquals(""int"", parameters.get(1).getType().toString());
    }
 
    @Test(expected = UnsupportedOperationException.class)
"
404f95220572cd70f39a7521f6f648f51d8c8f35,Matt Benson,JavaEnumSource.java,MODIFY,addEnumConstant -> [String declaration] | [],"diff --git a/api/src/main/java/org/jboss/forge/parser/java/source/JavaEnumSource.java b/api/src/main/java/org/jboss/forge/parser/java/source/JavaEnumSource.java
index 727c4df..42a84f5 100644
--- a/api/src/main/java/org/jboss/forge/parser/java/source/JavaEnumSource.java
+++ b/api/src/main/java/org/jboss/forge/parser/java/source/JavaEnumSource.java
@@ -21,7 +21,8 @@
  */
 public interface JavaEnumSource extends JavaEnum<JavaEnumSource>, JavaSource<JavaEnumSource>, InterfaceCapableSource<JavaEnumSource>,
          FieldHolderSource<JavaEnumSource>,
-         MethodHolderSource<JavaEnumSource>
+         MethodHolderSource<JavaEnumSource>,
+         PropertyHolderSource<JavaEnumSource>
 {
    /**
     * Return the {@link EnumConstant} with the given name, or return null if no such constant exists.
"
404f95220572cd70f39a7521f6f648f51d8c8f35,Matt Benson,AbstractGenericCapableJavaSource.java,MODIFY,removeTypeVariable -> [TypeVariable typeVariable] | [String name],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractGenericCapableJavaSource.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractGenericCapableJavaSource.java
index 93b303f..2ac63eb 100755
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractGenericCapableJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractGenericCapableJavaSource.java
@@ -19,6 +19,7 @@
 import org.jboss.forge.parser.java.TypeVariable;
 import org.jboss.forge.parser.java.source.GenericCapableSource;
 import org.jboss.forge.parser.java.source.JavaSource;
+import org.jboss.forge.parser.java.source.PropertyHolderSource;
 import org.jboss.forge.parser.java.source.TypeVariableSource;
 import org.jboss.forge.parser.java.util.Strings;
 
@@ -29,7 +30,7 @@
  * @param <O>
  */
 @SuppressWarnings(""unchecked"")
-public abstract class AbstractGenericCapableJavaSource<O extends JavaSource<O>> extends AbstractJavaSourceMemberHolder<O>
+public abstract class AbstractGenericCapableJavaSource<O extends JavaSource<O> & PropertyHolderSource<O>> extends AbstractJavaSourceMemberHolder<O>
          implements GenericCapableSource<O, O>
 {
 
"
404f95220572cd70f39a7521f6f648f51d8c8f35,Matt Benson,AbstractJavaSourceMemberHolder.java,MODIFY,addField -> [Field field] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java
index 8ed501a..b768eb7 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/AbstractJavaSourceMemberHolder.java
@@ -9,7 +9,9 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Iterator;
+import java.util.LinkedHashSet;
 import java.util.List;
+import java.util.Set;
 
 import org.eclipse.jdt.core.dom.ASTNode;
 import org.eclipse.jdt.core.dom.BodyDeclaration;
@@ -25,17 +27,19 @@
 import org.jboss.forge.parser.java.JavaType;
 import org.jboss.forge.parser.java.Method;
 import org.jboss.forge.parser.java.Parameter;
+import org.jboss.forge.parser.java.Property;
 import org.jboss.forge.parser.java.ast.MethodFinderVisitor;
-import org.jboss.forge.parser.java.source.FieldHolderSource;
 import org.jboss.forge.parser.java.source.FieldSource;
 import org.jboss.forge.parser.java.source.Import;
 import org.jboss.forge.parser.java.source.InterfaceCapableSource;
 import org.jboss.forge.parser.java.source.JavaClassSource;
 import org.jboss.forge.parser.java.source.JavaSource;
 import org.jboss.forge.parser.java.source.MemberSource;
-import org.jboss.forge.parser.java.source.MethodHolderSource;
 import org.jboss.forge.parser.java.source.MethodSource;
 import org.jboss.forge.parser.java.source.ParameterSource;
+import org.jboss.forge.parser.java.source.PropertyHolderSource;
+import org.jboss.forge.parser.java.source.PropertySource;
+import org.jboss.forge.parser.java.util.Assert;
 import org.jboss.forge.parser.java.util.Strings;
 import org.jboss.forge.parser.java.util.Types;
 
@@ -43,9 +47,8 @@
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * 
  */
-public abstract class AbstractJavaSourceMemberHolder<O extends JavaSource<O>> extends AbstractJavaSource<O>
-         implements InterfaceCapableSource<O>,
-         MethodHolderSource<O>, FieldHolderSource<O>
+public abstract class AbstractJavaSourceMemberHolder<O extends JavaSource<O> & PropertyHolderSource<O>> extends AbstractJavaSource<O>
+         implements InterfaceCapableSource<O>, PropertyHolderSource<O>
 {
    protected AbstractJavaSourceMemberHolder(JavaSource<?> enclosingType, final Document document,
             final CompilationUnit unit, BodyDeclaration declaration)
@@ -473,4 +476,105 @@
    {
       return removeInterface(type.getQualifiedName());
    }
+
+   @Override
+   public final boolean hasProperty(String name)
+   {
+      return getProperty(name) != null;
+   }
+
+   @Override
+   public final boolean hasProperty(Property<O> property)
+   {
+      return getProperties().contains(property);
+   }
+
+   @Override
+   public final PropertySource<O> addProperty(String type, String name)
+   {
+      Assert.isFalse(hasProperty(name), ""Cannot create existing property "" + name);
+
+      final org.jboss.forge.parser.java.Type<O> typeObject = new TypeImpl<O>(getOrigin(), null, type);
+      final PropertySource<O> result = new PropertyImpl<O>(name, getOrigin())
+      {
+         @Override
+         public org.jboss.forge.parser.java.Type<O> getType()
+         {
+            final org.jboss.forge.parser.java.Type<O> result = super.getType();
+            return result == null ? typeObject : result;
+         }
+      };
+
+      if (!isInterface())
+      {
+         result.createField();
+      }
+      result.setAccessible(true);
+      result.setMutable(!isEnum());
+
+      return getProperty(name);
+   }
+
+   @Override
+   public final AbstractJavaSourceMemberHolder<O> removeProperty(Property<O> property)
+   {
+      if (hasProperty(property))
+      {
+         getProperty(property.getName()).setMutable(false).setAccessible(false).removeField();
+      }
+      return this;
+   }
+
+   @Override
+   public final PropertySource<O> getProperty(String name)
+   {
+      Assert.notNull(name, ""name is null"");
+      final PropertyImpl<O> result = new PropertyImpl<O>(name, getOrigin());
+      return result.isValid() ? result : null;
+   }
+   
+   @Override
+   public final List<PropertySource<O>> getProperties()
+   {
+      final Set<String> propertyNames = new LinkedHashSet<String>();
+      for (MethodSource<O> method : getMethods())
+      {
+         if (isAccessor(method) || isMutator(method))
+         {
+            propertyNames.add(extractPropertyName(method));
+         }
+      }
+      for (FieldSource<O> field : getFields())
+      {
+         if (!field.isStatic())
+         {
+            propertyNames.add(field.getName());
+         }
+      }
+      final List<PropertySource<O>> result = new ArrayList<PropertySource<O>>(propertyNames.size());
+      for (String name : propertyNames)
+      {
+         result.add(new PropertyImpl<O>(name, getOrigin()));
+      }
+      return result;
+   }
+
+   private boolean isAccessor(Method<O, ?> method)
+   {
+      return extractPropertyName(method) != null && method.getParameters().isEmpty() && !method.isReturnTypeVoid();
+   }
+
+   private boolean isMutator(Method<O, ?> method)
+   {
+      return extractPropertyName(method) != null && method.getParameters().size() == 1 && method.isReturnTypeVoid();
+   }
+   
+   private String extractPropertyName(Method<O, ?> method)
+   {
+      if (method.getName().matches(""^[gs]et.+$""))
+      {
+         return method.getName().substring(3);
+      }
+      return null;
+   }
 }
"
404f95220572cd70f39a7521f6f648f51d8c8f35,Matt Benson,FieldImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
index 6354fb6..c707558 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/FieldImpl.java
@@ -199,7 +199,7 @@
    @Override
    public boolean isStatic()
    {
-      return modifiers.hasModifier(field, ModifierKeyword.STATIC_KEYWORD);
+      return getOrigin().isInterface() || modifiers.hasModifier(field, ModifierKeyword.STATIC_KEYWORD);
    }
 
    @Override
"
404f95220572cd70f39a7521f6f648f51d8c8f35,Matt Benson,JavaClassImpl.java,MODIFY,setSuperType -> [String type] | [JavaType type],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaClassImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaClassImpl.java
index 5d29c74..4b3ddba 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaClassImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/JavaClassImpl.java
@@ -21,7 +21,7 @@
 
 /**
  * Represents a Java Source File
- *
+ * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
 public class JavaClassImpl extends AbstractGenericCapableJavaSource<JavaClassSource> implements JavaClassSource
@@ -125,25 +125,26 @@
          String typeD = Types.stripGenerics(type);
          String sympleTypeDName = Types.toSimpleName(typeD);
          String typesGeneric = Types.getGenericsTypeParameter(type);
-         
+
          org.eclipse.jdt.core.dom.ParameterizedType pt = body.getAST().newParameterizedType(
-                     body.getAST().newSimpleType(body.getAST().newSimpleName(sympleTypeDName)));
-         
+                  body.getAST().newSimpleType(body.getAST().newSimpleName(sympleTypeDName)));
+
          if (!hasImport(typeD) && Types.isQualified(typeD))
          {
-             addImport(typeD);
+            addImport(typeD);
          }
-         
+
          for (String typeP : typesGeneric.split("",""))
          {
-            pt.typeArguments().add(body.getAST().newSimpleType(body.getAST().newSimpleName(Types.toSimpleName(typeP.trim()))));
-            
+            pt.typeArguments().add(
+                     body.getAST().newSimpleType(body.getAST().newSimpleName(Types.toSimpleName(typeP.trim()))));
+
             if (!hasImport(typeP) && Types.isQualified(typeP))
             {
                addImport(typeP);
             }
          }
-         
+
          getBodyDeclaration().setStructuralProperty(TypeDeclaration.SUPERCLASS_TYPE_PROPERTY, pt);
       }
       else
"
404f95220572cd70f39a7521f6f648f51d8c8f35,Matt Benson,ParameterImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/parser/java/impl/ParameterImpl.java b/impl/src/main/java/org/jboss/forge/parser/java/impl/ParameterImpl.java
index 6f70a9b..eb80415 100644
--- a/impl/src/main/java/org/jboss/forge/parser/java/impl/ParameterImpl.java
+++ b/impl/src/main/java/org/jboss/forge/parser/java/impl/ParameterImpl.java
@@ -52,7 +52,7 @@
 
    @Override
    @SuppressWarnings({ ""rawtypes"", ""unchecked"" })
-   public Type<?> getType()
+   public Type<O> getType()
    {
       return new TypeImpl(parent, param.getType());
    }
"
ea2fa8a02235d4fa0497de4fa85a01ee3f4405c8,George Gastaldi,AbstractJavaSourceMemberHolder.java,MODIFY,addField -> [Field field] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
index 3071c88..ce8e355 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
@@ -45,7 +45,7 @@
 
 /**
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
- * 
+ *
  */
 public abstract class AbstractJavaSourceMemberHolder<O extends JavaSource<O> & PropertyHolderSource<O>> extends AbstractJavaSource<O>
          implements InterfaceCapableSource<O>, PropertyHolderSource<O>
@@ -397,15 +397,15 @@
                   Roaster.parse(JavaInterfaceImpl.class,
                            ""public interface Mock extends "" + Types.toSimpleName(type)
                                     + "" {}"").getBodyDeclaration()).get(0);
-   
+
          if (this.hasInterface(Types.toSimpleName(type)) || this.hasImport(Types.toSimpleName(type)))
          {
             interfaceType = JDTHelper.getInterfaces(Roaster.parse(JavaInterfaceImpl.class,
                      ""public interface Mock extends "" + type + "" {}"").getBodyDeclaration()).get(0);
          }
-   
+
          this.addImport(type);
-   
+
          ASTNode node = ASTNode.copySubtree(unit.getAST(), interfaceType);
          JDTHelper.getInterfaces(getBodyDeclaration()).add((Type) node);
       }
@@ -532,7 +532,7 @@
       final PropertyImpl<O> result = new PropertyImpl<O>(name, getOrigin());
       return result.isValid() ? result : null;
    }
-   
+
    @Override
    public final List<PropertySource<O>> getProperties()
    {
@@ -568,12 +568,12 @@
    {
       return extractPropertyName(method) != null && method.getParameters().size() == 1 && method.isReturnTypeVoid();
    }
-   
+
    private String extractPropertyName(Method<O, ?> method)
    {
       if (method.getName().matches(""^[gs]et.+$""))
       {
-         return method.getName().substring(3);
+         return Strings.uncapitalize(method.getName().substring(3));
       }
       return null;
    }
"
e1b6aad50cf9afc390ab7ec89b232a97dc1089d5,George Gastaldi,Strings.java,MODIFY,"getLevenshteinDistance -> [CharSequence s, CharSequence t, int threshold] | [CharSequence s, CharSequence t]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Strings.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Strings.java
index 2ae1572..98cc43a 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Strings.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Strings.java
@@ -38,7 +38,7 @@
       {
          result = value.replaceAll(""\""(.*)\"""", ""$1"");
       }
-      return result;
+      return StringEscapeUtils.unescapeJava(result);
    }
 
    public static String enquote(final String value)
@@ -46,7 +46,7 @@
       String result = null;
       if (value != null)
       {
-         result = ""\"""" + value + ""\"""";
+         result = ""\"""" + StringEscapeUtils.escapeJava(value) + ""\"""";
       }
       return result;
    }
@@ -75,7 +75,7 @@
    {
       return string == null || string.trim().isEmpty();
    }
-   
+
    public static boolean isTrue(final String value)
    {
       return value == null ? false : ""true"".equalsIgnoreCase(value.trim());
@@ -424,7 +424,7 @@
       {
          return count;
       }
-      
+
       String wholeText = text;
       int idx = 0;
       while((idx = wholeText.indexOf(toMatch, idx)) != -1)
"
3a6115ea60a3eb54d3965c9cc81bc87f0fc92365,George Gastaldi,Strings.java,MODIFY,"getLevenshteinDistance -> [CharSequence s, CharSequence t, int threshold] | [CharSequence s, CharSequence t]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Strings.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Strings.java
index 2ae1572..98cc43a 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Strings.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Strings.java
@@ -38,7 +38,7 @@
       {
          result = value.replaceAll(""\""(.*)\"""", ""$1"");
       }
-      return result;
+      return StringEscapeUtils.unescapeJava(result);
    }
 
    public static String enquote(final String value)
@@ -46,7 +46,7 @@
       String result = null;
       if (value != null)
       {
-         result = ""\"""" + value + ""\"""";
+         result = ""\"""" + StringEscapeUtils.escapeJava(value) + ""\"""";
       }
       return result;
    }
@@ -75,7 +75,7 @@
    {
       return string == null || string.trim().isEmpty();
    }
-   
+
    public static boolean isTrue(final String value)
    {
       return value == null ? false : ""true"".equalsIgnoreCase(value.trim());
@@ -424,7 +424,7 @@
       {
          return count;
       }
-      
+
       String wholeText = text;
       int idx = 0;
       while((idx = wholeText.indexOf(toMatch, idx)) != -1)
"
476fd04862ce132727471962665a7ec3691880d6,Matt Benson,StringEscapeUtils.java,MODIFY,"escapeJava -> [Writer out, String str] | [String str]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/StringEscapeUtils.java b/api/src/main/java/org/jboss/forge/roaster/model/util/StringEscapeUtils.java
index 6a2357a..5557814 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/StringEscapeUtils.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/StringEscapeUtils.java
@@ -1,4 +1,3 @@
-/**
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
@@ -45,6 +44,8 @@
  * @since 2.0
  * @version $Id: StringEscapeUtils.java 1057072 2011-01-10 01:55:57Z niallp $
  */
+// *** THIS FILE HAS BEEN MODIFIED FROM THE ORIGINAL VERSION. IT PROVIDES ***
+// *** ONLY THE REQUIRED FUNCTIONALITY, WITH REDUCED ACCESSIBILITY.       ***
 class StringEscapeUtils
 {
 
"
40d30245154d56efdd3e1fe2e3833c0f26beae55,George Gastaldi,AnnotationElementImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationElementImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationElementImpl.java
index 6042273..b2c1f22 100755
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationElementImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationElementImpl.java
@@ -123,6 +123,7 @@
          return setEnumArray(values);
       }
 
+      @SuppressWarnings(""unchecked"")
       @Override
       public <T extends Enum<T>> DefaultValue setEnumArray(T... values)
       {
@@ -221,7 +222,7 @@
             }
          }
          return null;
-         
+
       }
 
       @Override
@@ -256,7 +257,7 @@
          }
          return null;
       }
-      
+
       private Class<?> resolveTypeLiteral(TypeLiteral typeLiteral)
       {
          final Type<JavaAnnotationSource> type = new TypeImpl<JavaAnnotationSource>(getOrigin(), typeLiteral.getType());
"
40d30245154d56efdd3e1fe2e3833c0f26beae55,George Gastaldi,PropertyImpl.java,MODIFY,setType -> [JavaType entity] | [Class clazz],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/PropertyImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/PropertyImpl.java
index eb3c6fe..3035e87 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/PropertyImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/PropertyImpl.java
@@ -8,16 +8,20 @@
 package org.jboss.forge.roaster.model.impl;
 
 import java.text.ParsePosition;
+import java.util.ArrayList;
+import java.util.List;
 import java.util.Objects;
 
 import org.eclipse.jdt.core.dom.ASTVisitor;
 import org.eclipse.jdt.core.dom.MethodDeclaration;
 import org.eclipse.jdt.core.dom.SimpleName;
 import org.eclipse.jdt.core.dom.TextElement;
+import org.jboss.forge.roaster.model.Annotation;
 import org.jboss.forge.roaster.model.JavaType;
 import org.jboss.forge.roaster.model.Method;
 import org.jboss.forge.roaster.model.Type;
 import org.jboss.forge.roaster.model.Visibility;
+import org.jboss.forge.roaster.model.source.AnnotationSource;
 import org.jboss.forge.roaster.model.source.FieldSource;
 import org.jboss.forge.roaster.model.source.JavaSource;
 import org.jboss.forge.roaster.model.source.MethodSource;
@@ -28,9 +32,10 @@
 
 /**
  * Implementation of PropertySource.
- * 
+ *
  * @author mbenson
- * 
+ * @author <a href=""ggastald@redhat.com"">George Gastaldi</a>
+ *
  * @param <O>
  */
 class PropertyImpl<O extends JavaSource<O> & PropertyHolderSource<O>> implements PropertySource<O>
@@ -389,7 +394,7 @@
       }
       return this;
    }
-   
+
    private PropertySource<O> removeAccessor()
    {
       if (isAccessible())
@@ -496,4 +501,140 @@
       return prefix + Strings.capitalize(property);
    }
 
+   @Override
+   public Annotation<O> getAnnotation(Class<? extends java.lang.annotation.Annotation> type)
+   {
+      Annotation<O> ann = null;
+      FieldSource<O> field = getField();
+      if (field != null)
+      {
+         ann = field.getAnnotation(type);
+      }
+      if (ann == null)
+      {
+         MethodSource<O> accessor = getAccessor();
+         if (accessor != null)
+         {
+            ann = accessor.getAnnotation(type);
+         }
+      }
+      if (ann == null)
+      {
+         MethodSource<O> mutator = getMutator();
+         if (mutator != null)
+         {
+            ann = mutator.getAnnotation(type);
+         }
+      }
+      return ann;
+   }
+
+   @Override
+   public Annotation<O> getAnnotation(String type)
+   {
+      Annotation<O> ann = null;
+      FieldSource<O> field = getField();
+      if (field != null)
+      {
+         ann = field.getAnnotation(type);
+      }
+      if (ann == null)
+      {
+         MethodSource<O> accessor = getAccessor();
+         if (accessor != null)
+         {
+            ann = accessor.getAnnotation(type);
+         }
+      }
+      if (ann == null)
+      {
+         MethodSource<O> mutator = getMutator();
+         if (mutator != null)
+         {
+            ann = mutator.getAnnotation(type);
+         }
+      }
+      return ann;
+   }
+
+   @Override
+   public List<? extends Annotation<O>> getAnnotations()
+   {
+      List<Annotation<O>> annotations = new ArrayList<>();
+      FieldSource<O> field = getField();
+      if (field != null)
+      {
+         List<AnnotationSource<O>> fieldAnnotations = field.getAnnotations();
+         annotations.addAll(fieldAnnotations);
+      }
+      MethodSource<O> accessor = getAccessor();
+      if (accessor != null)
+      {
+         List<AnnotationSource<O>> accessorAnnotations = accessor.getAnnotations();
+         annotations.addAll(accessorAnnotations);
+      }
+      MethodSource<O> mutator = getMutator();
+      if (mutator != null)
+      {
+         List<AnnotationSource<O>> mutatorAnnotations = mutator.getAnnotations();
+         annotations.addAll(mutatorAnnotations);
+      }
+      return annotations;
+   }
+
+   @Override
+   public boolean hasAnnotation(Class<? extends java.lang.annotation.Annotation> type)
+   {
+      boolean hasAnnotation = false;
+      FieldSource<O> field = getField();
+      if (field != null)
+      {
+         hasAnnotation = field.hasAnnotation(type);
+      }
+      if (!hasAnnotation)
+      {
+         MethodSource<O> accessor = getAccessor();
+         if (accessor != null)
+         {
+            hasAnnotation = accessor.hasAnnotation(type);
+         }
+      }
+      if (!hasAnnotation)
+      {
+         MethodSource<O> mutator = getMutator();
+         if (mutator != null)
+         {
+            hasAnnotation = mutator.hasAnnotation(type);
+         }
+      }
+      return hasAnnotation;
+   }
+
+   @Override
+   public boolean hasAnnotation(String type)
+   {
+      boolean hasAnnotation = false;
+      FieldSource<O> field = getField();
+      if (field != null)
+      {
+         hasAnnotation = field.hasAnnotation(type);
+      }
+      if (!hasAnnotation)
+      {
+         MethodSource<O> accessor = getAccessor();
+         if (accessor != null)
+         {
+            hasAnnotation = accessor.hasAnnotation(type);
+         }
+      }
+      if (!hasAnnotation)
+      {
+         MethodSource<O> mutator = getMutator();
+         if (mutator != null)
+         {
+            hasAnnotation = mutator.hasAnnotation(type);
+         }
+      }
+      return hasAnnotation;
+   }
 }
"
4fb6247cd3b7a7a4b7f24a293540be4fe8d57c75,George Gastaldi,AnnotationElementSource.java,MODIFY,setType -> [JavaType entity] | [Class clazz],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationElementSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationElementSource.java
index 2c817a0..b208df2 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationElementSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationElementSource.java
@@ -12,7 +12,7 @@
 
 /**
  * Represents an element definition of a {@link JavaAnnotationSource}.
- * 
+ *
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * @author Matt Benson
  */
@@ -33,6 +33,7 @@
 
       <T extends Enum<T>> AnnotationElementSource.DefaultValue setEnum(T value);
 
+      @SuppressWarnings(""unchecked"")
       <T extends Enum<T>> AnnotationElementSource.DefaultValue setEnumArray(T... values);
 
       AnnotationSource<JavaAnnotationSource> setAnnotation();
"
4fb6247cd3b7a7a4b7f24a293540be4fe8d57c75,George Gastaldi,Refactory.java,MODIFY,"createHashCodeAndEquals -> [JavaClassSource clazz, FieldSource fields] | [JavaClassSource clazz]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
index 3499dfa..03031b1 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
@@ -16,7 +16,7 @@
 
 /**
  * Utility refactory methods for {@link JavaClassSource} objects
- * 
+ *
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * @author <a href=""mailto:ggastald@redhat.com"">George Gastaldi</a>
  * @author <a href=""mailto:vreynolds@redhat.com"">Vineet Reynolds</a>
@@ -25,7 +25,7 @@
 {
    /**
     * Generates a getXXX and setXXX method for the supplied field
-    * 
+    *
     * @param clazz
     * @param field
     */
@@ -54,7 +54,7 @@
 
    /**
     * Create a <i>hashCode</i> and <i>equals</i> implementation for the given class and fields
-    * 
+    *
     * @deprecated Use {@link Refactory#createHashCodeAndEquals(JavaClass, Field<O>...)} instead, since this method relies
     *             on the existence of the id field
     */
@@ -83,11 +83,11 @@
     * Create a <i>hashCode</i> and <i>equals</i> implementation for the given class and fields. Callers must verify that
     * the types of the fields override the default identity based equals and hashcode implementations. No warnings are
     * issued in an event where the field type uses the implementation of java.lang.Object.
-    * 
+    *
     * This method ignores static fields for generating the equals and hashCode methods, since they are ideally not meant
     * to be used in these cases. Although transient fields could also be ignored, they are not since there is no
     * mechanism to convey warnings (not errors) in this case.
-    * 
+    *
     * @param clazz class to be changed
     * @param fields fields to be used in the equals/hashCode methods
     */
@@ -262,7 +262,7 @@
 
    /**
     * Create a <i>toString</i> implementation using all the fields in this class
-    * 
+    *
     * @param clazz
     */
    public static void createToStringFromFields(final JavaClassSource clazz)
@@ -273,10 +273,11 @@
 
    /**
     * Create a <i>toString</i> implementation using the supplied fields
-    * 
+    *
     * @param clazz
     * @param fields
     */
+   @SuppressWarnings(""unchecked"")
    public static void createToStringFromFields(final JavaClassSource clazz, final FieldSource<JavaClassSource>... fields)
    {
       createToStringFromFields(clazz, Arrays.asList(fields));
@@ -284,7 +285,7 @@
 
    /**
     * Create a <i>toString</i> implementation using the supplied fields
-    * 
+    *
     * @param clazz
     * @param fields
     */
"
478c0bb4f294a49bbdc5f0478a16ca3255f4a4a3,George Gastaldi,JavaAnnotation.java,MODIFY,hasAnnotationElement -> [AnnotationElement annotationElement] | [String name],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/JavaAnnotation.java b/api/src/main/java/org/jboss/forge/roaster/model/JavaAnnotation.java
index 146bb56..013b57c 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/JavaAnnotation.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/JavaAnnotation.java
@@ -14,10 +14,10 @@
 /**
  * Represents a Java {@code @interface} annotation type. See {@link Roaster} for various options in generating
  * {@link JavaAnnotation} instances.
- * 
+ *
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
-public interface JavaAnnotation<O extends JavaAnnotation<O>> extends JavaType<O>
+public interface JavaAnnotation<O extends JavaAnnotation<O>> extends JavaType<O>, TypeHolder<O>
 {
 
    /**
"
478c0bb4f294a49bbdc5f0478a16ca3255f4a4a3,George Gastaldi,JavaAnnotationSource.java,MODIFY,addAnnotationElement -> [String declaration] | [],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/JavaAnnotationSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/JavaAnnotationSource.java
index 7450eef..c214f7f 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/JavaAnnotationSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/JavaAnnotationSource.java
@@ -16,10 +16,10 @@
 /**
  * Represents a Java {@code @interface} annotation source file as an in-memory modifiable element. See
  * {@link Roaster} for various options in generating {@link JavaAnnotationSource} instances.
- * 
+ *
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
-public interface JavaAnnotationSource extends JavaAnnotation<JavaAnnotationSource>, JavaSource<JavaAnnotationSource>
+public interface JavaAnnotationSource extends JavaAnnotation<JavaAnnotationSource>, JavaSource<JavaAnnotationSource>, TypeHolderSource<JavaAnnotationSource>
 {
    /**
     * Get the {@link AnnotationElementSource} with the given name and return it, otherwise, return null.
"
478c0bb4f294a49bbdc5f0478a16ca3255f4a4a3,George Gastaldi,JavaEnumSource.java,MODIFY,addEnumConstant -> [String declaration] | [],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/JavaEnumSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/JavaEnumSource.java
index e7ee014..5024c50 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/JavaEnumSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/JavaEnumSource.java
@@ -16,17 +16,18 @@
 /**
  * Represents a Java {@code enum} source file as an in-memory modifiable element. See {@link Roaster} for various
  * options in generating {@link JavaEnumSource} instances.
- * 
+ *
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
-public interface JavaEnumSource extends JavaEnum<JavaEnumSource>, JavaSource<JavaEnumSource>, InterfaceCapableSource<JavaEnumSource>,
+public interface JavaEnumSource extends JavaEnum<JavaEnumSource>, JavaSource<JavaEnumSource>,
+         InterfaceCapableSource<JavaEnumSource>,
          FieldHolderSource<JavaEnumSource>,
          MethodHolderSource<JavaEnumSource>,
-         PropertyHolderSource<JavaEnumSource>
+         PropertyHolderSource<JavaEnumSource>, TypeHolderSource<JavaEnumSource>
 {
    /**
     * Return the {@link EnumConstant} with the given name, or return null if no such constant exists.
-    * 
+    *
     * @param name
     * @return
     */
"
478c0bb4f294a49bbdc5f0478a16ca3255f4a4a3,George Gastaldi,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
index 19da027..745c807 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
@@ -14,6 +14,7 @@
 
 import org.eclipse.jdt.core.JavaCore;
 import org.eclipse.jdt.core.compiler.IProblem;
+import org.eclipse.jdt.core.dom.ASTNode;
 import org.eclipse.jdt.core.dom.AbstractTypeDeclaration;
 import org.eclipse.jdt.core.dom.AnnotationTypeDeclaration;
 import org.eclipse.jdt.core.dom.BodyDeclaration;
@@ -27,6 +28,7 @@
 import org.eclipse.jface.text.Document;
 import org.eclipse.text.edits.TextEdit;
 import org.jboss.forge.roaster.ParserException;
+import org.jboss.forge.roaster.Roaster;
 import org.jboss.forge.roaster.model.Annotation;
 import org.jboss.forge.roaster.model.JavaType;
 import org.jboss.forge.roaster.model.SyntaxError;
@@ -37,6 +39,7 @@
 import org.jboss.forge.roaster.model.source.AnnotationSource;
 import org.jboss.forge.roaster.model.source.Import;
 import org.jboss.forge.roaster.model.source.JavaSource;
+import org.jboss.forge.roaster.model.source.TypeHolderSource;
 import org.jboss.forge.roaster.model.util.Formatter;
 import org.jboss.forge.roaster.model.util.Strings;
 import org.jboss.forge.roaster.model.util.Types;
@@ -45,12 +48,12 @@
 
 /**
  * Represents a Java Source File
- * 
+ *
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
 @SuppressWarnings(""unchecked"")
 public abstract class AbstractJavaSource<O extends JavaSource<O>> implements
-         JavaSource<O>
+         JavaSource<O>, TypeHolderSource<O>
 {
    private final AnnotationAccessor<O, O> annotations = new AnnotationAccessor<O, O>();
    private final ModifierAccessor modifiers = new ModifierAccessor();
@@ -764,9 +767,104 @@
       return result;
    }
 
+   @Override
+   public boolean hasNestedType(JavaType<?> type)
+   {
+      for (JavaSource<?> nested : getNestedClasses())
+      {
+         if (Strings.areEqual(nested.getQualifiedName(), type.getQualifiedName())
+                  || Strings.areEqual(nested.getName(), type.getName()))
+         {
+            return true;
+         }
+      }
+      return false;
+   }
+
+   @Override
+   public boolean hasNestedType(String name)
+   {
+      for (JavaSource<?> nested : getNestedClasses())
+      {
+         if (Strings.areEqual(nested.getName(), name) || Strings.areEqual(nested.getQualifiedName(), name))
+         {
+            return true;
+         }
+      }
+      return false;
+   }
+
+   @Override
+   public boolean hasNestedType(Class<?> type)
+   {
+      for (JavaSource<?> nested : getNestedClasses())
+      {
+         if (Strings.areEqual(nested.getName(), type.getSimpleName())
+                  || Strings.areEqual(nested.getQualifiedName(), type.getName()))
+         {
+            return true;
+         }
+      }
+      return false;
+   }
+
+   @Override
+   public JavaSource<?> getNestedType(String name)
+   {
+      for (JavaSource<?> nested : getNestedClasses())
+      {
+         if (Strings.areEqual(nested.getName(), name) || Strings.areEqual(nested.getQualifiedName(), name))
+         {
+            return nested;
+         }
+      }
+      return null;
+   }
+
+   @Override
+   public <NESTEDTYPE extends JavaSource<?>> NESTEDTYPE addNestedType(NESTEDTYPE type)
+   {
+      if (type instanceof AbstractJavaSource)
+      {
+         List<Object> bodyDeclarations = getBodyDeclaration().bodyDeclarations();
+         BodyDeclaration nestedBody = ((AbstractJavaSource<?>) type).body;
+         bodyDeclarations.add(ASTNode.copySubtree(unit.getAST(), nestedBody));
+      }
+      else
+      {
+         throw new IllegalArgumentException(""type must be an AbstractJavaSource instance"");
+      }
+      return (NESTEDTYPE) getNestedType(type.getName());
+   }
+
+   @Override
+   public O removeNestedType(JavaSource<?> type)
+   {
+      if (type instanceof AbstractJavaSource)
+      {
+         BodyDeclaration bodyDeclaration = ((AbstractJavaSource<?>) type).body;
+         List<Object> bodyDeclarations = getBodyDeclaration().bodyDeclarations();
+         bodyDeclarations.remove(bodyDeclaration);
+      }
+      return (O) this;
+   }
+
+   @Override
+   public <NESTEDTYPE extends JavaSource<?>> NESTEDTYPE addNestedType(Class<NESTEDTYPE> type)
+   {
+      JavaSource<?> nestedType = Roaster.create(type);
+      return (NESTEDTYPE) addNestedType(nestedType);
+   }
+
+   @Override
+   public <NESTEDTYPE extends JavaSource<?>> NESTEDTYPE addNestedType(String declaration)
+   {
+      JavaSource<?> nestedType = Roaster.parse(JavaSource.class, declaration);
+      return (NESTEDTYPE) addNestedType(nestedType);
+   }
+
    private List<AbstractTypeDeclaration> getNestedDeclarations(BodyDeclaration body)
    {
-
       TypeDeclarationFinderVisitor typeDeclarationFinder = new TypeDeclarationFinderVisitor();
       body.accept(typeDeclarationFinder);
       List<AbstractTypeDeclaration> declarations = typeDeclarationFinder.getTypeDeclarations();
"
478c0bb4f294a49bbdc5f0478a16ca3255f4a4a3,George Gastaldi,EnumConstantBodyImpl.java,MODIFY,addImport -> [JavaType type] | [String className],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
index e4ba97e..9b9a35f 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
@@ -34,6 +34,7 @@
 import org.jboss.forge.roaster.model.ast.TypeDeclarationFinderVisitor;
 import org.jboss.forge.roaster.model.source.AnnotationSource;
 import org.jboss.forge.roaster.model.source.EnumConstantSource;
+import org.jboss.forge.roaster.model.source.EnumConstantSource.Body;
 import org.jboss.forge.roaster.model.source.FieldSource;
 import org.jboss.forge.roaster.model.source.Import;
 import org.jboss.forge.roaster.model.source.JavaClassSource;
@@ -42,11 +43,11 @@
 import org.jboss.forge.roaster.model.source.MemberSource;
 import org.jboss.forge.roaster.model.source.MethodSource;
 import org.jboss.forge.roaster.model.source.ParameterSource;
-import org.jboss.forge.roaster.model.source.EnumConstantSource.Body;
 import org.jboss.forge.roaster.model.util.Strings;
 import org.jboss.forge.roaster.model.util.Types;
 import org.jboss.forge.roaster.spi.JavaParserImpl;
 
+@SuppressWarnings(""unchecked"")
 class EnumConstantBodyImpl implements EnumConstantSource.Body
 {
    private final EnumConstantSource enumConstant;
@@ -108,34 +109,6 @@
    }
 
    @Override
-   public JavaSource<?> getEnclosingType()
-   {
-      return javaEnum;
-   }
-
-   @Override
-   public List<JavaSource<?>> getNestedClasses()
-   {
-      final JavaEnumImpl parentImpl = (JavaEnumImpl) javaEnum;
-      Document document = parentImpl.document;
-      CompilationUnit unit = parentImpl.unit;
-
-      final List<JavaSource<?>> result = new ArrayList<JavaSource<?>>();
-
-      @SuppressWarnings(""unchecked"")
-      final List<BodyDeclaration> bodyDeclarations = getBody().bodyDeclarations();
-      for (BodyDeclaration body : bodyDeclarations)
-      {
-         final List<AbstractTypeDeclaration> declarations = getNestedDeclarations(body);
-         for (AbstractTypeDeclaration declaration : declarations)
-         {
-            result.add(JavaParserImpl.getJavaSource(this, document, unit, declaration));
-         }
-      }
-      return result;
-   }
-
-   @Override
    public String getPackage()
    {
       return javaEnum.getPackage();
@@ -497,7 +470,6 @@
       return result;
    }
 
-   @SuppressWarnings(""unchecked"")
    private void addField(Field<Body> field)
    {
       final List<BodyDeclaration> bodyDeclarations = getBody().bodyDeclarations();
@@ -514,7 +486,6 @@
    }
 
    @Override
-   @SuppressWarnings(""unchecked"")
    public List<FieldSource<Body>> getFields()
    {
       final List<FieldSource<Body>> result = new ArrayList<FieldSource<Body>>();
@@ -567,7 +538,6 @@
       return getFields().contains(field);
    }
 
-   @SuppressWarnings(""unchecked"")
    @Override
    public Body removeField(final Field<Body> field)
    {
@@ -696,7 +666,8 @@
             final Iterator<ParameterSource<Body>> localParams = local.getParameters().iterator();
             for (Parameter<? extends JavaType<?>> methodParam : method.getParameters())
             {
-               if (localParams.hasNext() && Strings.areEqual(localParams.next().getType().getName(), methodParam.getType().getName()))
+               if (localParams.hasNext()
+                        && Strings.areEqual(localParams.next().getType().getName(), methodParam.getType().getName()))
                {
                   continue;
                }
@@ -716,7 +687,6 @@
    }
 
    @Override
-   @SuppressWarnings(""unchecked"")
    public MethodSource<Body> addMethod()
    {
       final MethodSource<Body> m = new MethodImpl<Body>(this);
@@ -725,7 +695,6 @@
    }
 
    @Override
-   @SuppressWarnings(""unchecked"")
    public MethodSource<Body> addMethod(final String method)
    {
       final MethodSource<Body> m = new MethodImpl<Body>(this, method);
@@ -748,6 +717,33 @@
       return Collections.unmodifiableList(result);
    }
 
+   @Override
+   public JavaSource<?> getEnclosingType()
+   {
+      return javaEnum;
+   }
+
+   @Override
+   public List<JavaSource<?>> getNestedClasses()
+   {
+      final JavaEnumImpl parentImpl = (JavaEnumImpl) javaEnum;
+      Document document = parentImpl.document;
+      CompilationUnit unit = parentImpl.unit;
+
+      final List<JavaSource<?>> result = new ArrayList<JavaSource<?>>();
+
+      final List<BodyDeclaration> bodyDeclarations = getBody().bodyDeclarations();
+      for (BodyDeclaration body : bodyDeclarations)
+      {
+         final List<AbstractTypeDeclaration> declarations = getNestedDeclarations(body);
+         for (AbstractTypeDeclaration declaration : declarations)
+         {
+            result.add(JavaParserImpl.getJavaSource(this, document, unit, declaration));
+         }
+      }
+      return result;
+   }
+
    private List<AbstractTypeDeclaration> getNestedDeclarations(BodyDeclaration body)
    {
       final TypeDeclarationFinderVisitor typeDeclarationFinder = new TypeDeclarationFinderVisitor();
@@ -768,4 +764,117 @@
       return result;
    }
 
+   @Override
+   public boolean hasNestedType(String name)
+   {
+      for (JavaSource<?> nested : getNestedClasses())
+      {
+         if (nested.getName().equals(name))
+         {
+            return true;
+         }
+      }
+      return false;
+   }
+
+   @Override
+   public boolean hasNestedType(JavaType<?> type)
+   {
+      if (!type.isClass())
+      {
+         return false;
+      }
+      for (JavaSource<?> nested : getNestedClasses())
+      {
+         if (Strings.areEqual(nested.getQualifiedName(), type.getQualifiedName())
+                  || Strings.areEqual(nested.getName(), type.getName()))
+         {
+            return true;
+         }
+      }
+      return false;
+   }
+
+   @Override
+   public JavaSource<?> getNestedType(String name)
+   {
+      for (JavaSource<?> nested : getNestedClasses())
+      {
+         if (Strings.areEqual(nested.getName(), name) || Strings.areEqual(nested.getQualifiedName(), name))
+         {
+            return nested;
+         }
+      }
+      return null;
+   }
+
+   @Override
+   public boolean hasNestedType(Class<?> type)
+   {
+      for (JavaSource<?> nested : getNestedClasses())
+      {
+         if (Strings.areEqual(nested.getName(), type.getSimpleName())
+                  || Strings.areEqual(nested.getQualifiedName(), type.getName()))
+         {
+            return true;
+         }
+      }
+      return false;
+   }
+
+   @Override
+   public <NESTEDTYPE extends JavaSource<?>> NESTEDTYPE addNestedType(Class<NESTEDTYPE> type)
+   {
+      if (type != JavaClassSource.class)
+      {
+         throw new IllegalArgumentException(""Enum constants body allow only classes to be added "");
+      }
+      JavaSource<?> nestedType = Roaster.create(type);
+      return (NESTEDTYPE) addNestedType(nestedType);
+   }
+
+   @Override
+   public <NESTEDTYPE extends JavaSource<?>> NESTEDTYPE addNestedType(String declaration)
+   {
+      JavaType<?> source = Roaster.parse(declaration);
+      if (!source.isClass())
+      {
+         throw new IllegalArgumentException(""Enum constants body allow only classes to be added "");
+      }
+      JavaSource<?> nestedType = Roaster.parse(JavaSource.class, declaration);
+      return (NESTEDTYPE) addNestedType(nestedType);
+   }
+
+   @Override
+   public Body removeNestedType(JavaSource<?> type)
+   {
+      if (type instanceof AbstractJavaSource)
+      {
+         BodyDeclaration bodyDeclaration = ((AbstractJavaSource<?>) type).body;
+         List<Object> bodyDeclarations = getBody().bodyDeclarations();
+         bodyDeclarations.remove(bodyDeclaration);
+      }
+      return this;
+   }
+
+   @Override
+   public <NESTEDTYPE extends JavaSource<?>> NESTEDTYPE addNestedType(NESTEDTYPE type)
+   {
+      if (!type.isClass())
+      {
+         throw new IllegalArgumentException(""Enum constants body allow only classes to be added "");
+      }
+      if (type instanceof AbstractJavaSource)
+      {
+         List<Object> bodyDeclarations = getBody().bodyDeclarations();
+         BodyDeclaration nestedBody = ((AbstractJavaSource<?>) type).body;
+         bodyDeclarations.add(ASTNode.copySubtree(getBody().getAST(), nestedBody));
+      }
+      else
+      {
+         throw new IllegalArgumentException(""type must be an AbstractJavaSource instance"");
+      }
+      return (NESTEDTYPE) getNestedType(type.getName());
+   }
+
 }
"
478c0bb4f294a49bbdc5f0478a16ca3255f4a4a3,George Gastaldi,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
index 7f2fec4..b82e761 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
@@ -7,7 +7,6 @@
 
 import org.eclipse.jdt.core.compiler.IProblem;
 import org.eclipse.jdt.core.dom.ASTNode;
-import org.eclipse.jdt.core.dom.AbstractTypeDeclaration;
 import org.eclipse.jdt.core.dom.CompilationUnit;
 import org.eclipse.jdt.core.dom.ImportDeclaration;
 import org.eclipse.jdt.core.dom.Modifier.ModifierKeyword;
@@ -21,7 +20,6 @@
 import org.jboss.forge.roaster.model.Visibility;
 import org.jboss.forge.roaster.model.ast.AnnotationAccessor;
 import org.jboss.forge.roaster.model.ast.ModifierAccessor;
-import org.jboss.forge.roaster.model.ast.TypeDeclarationFinderVisitor;
 import org.jboss.forge.roaster.model.source.AnnotationSource;
 import org.jboss.forge.roaster.model.source.Import;
 import org.jboss.forge.roaster.model.source.JavaPackageInfoSource;
@@ -29,7 +27,6 @@
 import org.jboss.forge.roaster.model.util.Formatter;
 import org.jboss.forge.roaster.model.util.Strings;
 import org.jboss.forge.roaster.model.util.Types;
-import org.jboss.forge.roaster.spi.JavaParserImpl;
 import org.jboss.forge.roaster.spi.WildcardImportResolver;
 
 public class JavaPackageInfoImpl implements JavaPackageInfoSource
@@ -77,7 +74,8 @@
    }
 
    @Override
-   public AnnotationSource<JavaPackageInfoSource> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
+   public AnnotationSource<JavaPackageInfoSource> addAnnotation(
+            final Class<? extends java.lang.annotation.Annotation> clazz)
    {
       return annotations.addAnnotation(this, getPackageDeclaration(), clazz.getName());
    }
@@ -113,7 +111,8 @@
    }
 
    @Override
-   public AnnotationSource<JavaPackageInfoSource> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
+   public AnnotationSource<JavaPackageInfoSource> getAnnotation(
+            final Class<? extends java.lang.annotation.Annotation> type)
    {
       return annotations.getAnnotation(this, getPackageDeclaration(), type);
    }
@@ -710,39 +709,4 @@
    {
       return false;
    }
-
-   @Override
-   public List<JavaSource<?>> getNestedClasses()
-   {
-      List<AbstractTypeDeclaration> declarations = getNestedDeclarations(pkg);
-
-      List<JavaSource<?>> result = new ArrayList<JavaSource<?>>();
-      for (AbstractTypeDeclaration declaration : declarations)
-      {
-         result.add(JavaParserImpl.getJavaSource(this, document, unit, declaration));
-      }
-      return result;
-   }
-
-   private List<AbstractTypeDeclaration> getNestedDeclarations(ASTNode body)
-   {
-
-      TypeDeclarationFinderVisitor typeDeclarationFinder = new TypeDeclarationFinderVisitor();
-      body.accept(typeDeclarationFinder);
-      List<AbstractTypeDeclaration> declarations = typeDeclarationFinder.getTypeDeclarations();
-
-      List<AbstractTypeDeclaration> result = new ArrayList<AbstractTypeDeclaration>(declarations);
-      if (!declarations.isEmpty())
-      {
-         // We don't want to return the current class' declaration.
-         result.remove(declarations.remove(0));
-         for (AbstractTypeDeclaration declaration : declarations)
-         {
-            result.removeAll(getNestedDeclarations(declaration));
-         }
-      }
-
-      return result;
-   }
-
 }
"
b9ae609602a088004cbd42ffe760ba64b581d979,Matt Benson,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
index 745c807..a6b6c16 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
@@ -755,7 +755,7 @@
     */
 
    @Override
-   public List<JavaSource<?>> getNestedClasses()
+   public List<JavaSource<?>> getNestedTypes()
    {
       List<AbstractTypeDeclaration> declarations = getNestedDeclarations(body);
 
@@ -770,7 +770,7 @@
    @Override
    public boolean hasNestedType(JavaType<?> type)
    {
-      for (JavaSource<?> nested : getNestedClasses())
+      for (JavaSource<?> nested : getNestedTypes())
       {
          if (Strings.areEqual(nested.getQualifiedName(), type.getQualifiedName())
                   || Strings.areEqual(nested.getName(), type.getName()))
@@ -784,7 +784,7 @@
    @Override
    public boolean hasNestedType(String name)
    {
-      for (JavaSource<?> nested : getNestedClasses())
+      for (JavaSource<?> nested : getNestedTypes())
       {
          if (Strings.areEqual(nested.getName(), name) || Strings.areEqual(nested.getQualifiedName(), name))
          {
@@ -797,7 +797,7 @@
    @Override
    public boolean hasNestedType(Class<?> type)
    {
-      for (JavaSource<?> nested : getNestedClasses())
+      for (JavaSource<?> nested : getNestedTypes())
       {
          if (Strings.areEqual(nested.getName(), type.getSimpleName())
                   || Strings.areEqual(nested.getQualifiedName(), type.getName()))
@@ -811,7 +811,7 @@
    @Override
    public JavaSource<?> getNestedType(String name)
    {
-      for (JavaSource<?> nested : getNestedClasses())
+      for (JavaSource<?> nested : getNestedTypes())
       {
          if (Strings.areEqual(nested.getName(), name) || Strings.areEqual(nested.getQualifiedName(), name))
          {
@@ -863,6 +863,12 @@
       return (NESTEDTYPE) addNestedType(nestedType);
    }
 
+   @Override
+   public List<JavaSource<?>> getNestedClasses()
+   {
+      return getNestedTypes();
+   }
+
    private List<AbstractTypeDeclaration> getNestedDeclarations(BodyDeclaration body)
    {
       TypeDeclarationFinderVisitor typeDeclarationFinder = new TypeDeclarationFinderVisitor();
"
b9ae609602a088004cbd42ffe760ba64b581d979,Matt Benson,EnumConstantBodyImpl.java,MODIFY,addImport -> [JavaType type] | [String className],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
index 9b9a35f..24529a7 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
@@ -724,7 +724,7 @@
    }
 
    @Override
-   public List<JavaSource<?>> getNestedClasses()
+   public List<JavaSource<?>> getNestedTypes()
    {
       final JavaEnumImpl parentImpl = (JavaEnumImpl) javaEnum;
       Document document = parentImpl.document;
@@ -767,7 +767,7 @@
    @Override
    public boolean hasNestedType(String name)
    {
-      for (JavaSource<?> nested : getNestedClasses())
+      for (JavaSource<?> nested : getNestedTypes())
       {
          if (nested.getName().equals(name))
          {
@@ -784,7 +784,7 @@
       {
          return false;
       }
-      for (JavaSource<?> nested : getNestedClasses())
+      for (JavaSource<?> nested : getNestedTypes())
       {
          if (Strings.areEqual(nested.getQualifiedName(), type.getQualifiedName())
                   || Strings.areEqual(nested.getName(), type.getName()))
@@ -798,7 +798,7 @@
    @Override
    public JavaSource<?> getNestedType(String name)
    {
-      for (JavaSource<?> nested : getNestedClasses())
+      for (JavaSource<?> nested : getNestedTypes())
       {
          if (Strings.areEqual(nested.getName(), name) || Strings.areEqual(nested.getQualifiedName(), name))
          {
@@ -811,7 +811,7 @@
    @Override
    public boolean hasNestedType(Class<?> type)
    {
-      for (JavaSource<?> nested : getNestedClasses())
+      for (JavaSource<?> nested : getNestedTypes())
       {
          if (Strings.areEqual(nested.getName(), type.getSimpleName())
                   || Strings.areEqual(nested.getQualifiedName(), type.getName()))
@@ -877,4 +877,10 @@
       return (NESTEDTYPE) getNestedType(type.getName());
    }
 
+   @Override
+   public List<JavaSource<?>> getNestedClasses()
+   {
+      return getNestedTypes();
+   }
+
 }
"
b9ae609602a088004cbd42ffe760ba64b581d979,Matt Benson,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
index b82e761..7a5495b 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
@@ -709,4 +709,11 @@
    {
       return false;
    }
+
+   @Override
+   public List<JavaSource<?>> getNestedClasses()
+   {
+      return Collections.emptyList();
+   }
+
 }
"
1b04c5f27141e28973f931bde9f9e77ab0af8c23,Matt Benson,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
index a6b6c16..94dfe96 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
@@ -822,7 +822,7 @@
    }
 
    @Override
-   public <NESTEDTYPE extends JavaSource<?>> NESTEDTYPE addNestedType(NESTEDTYPE type)
+   public <NESTED_TYPE extends JavaSource<?>> NESTED_TYPE addNestedType(NESTED_TYPE type)
    {
       if (type instanceof AbstractJavaSource)
       {
@@ -834,7 +834,7 @@
       {
          throw new IllegalArgumentException(""type must be an AbstractJavaSource instance"");
       }
-      return (NESTEDTYPE) getNestedType(type.getName());
+      return (NESTED_TYPE) getNestedType(type.getName());
    }
 
    @Override
@@ -850,17 +850,17 @@
    }
 
    @Override
-   public <NESTEDTYPE extends JavaSource<?>> NESTEDTYPE addNestedType(Class<NESTEDTYPE> type)
+   public <NESTED_TYPE extends JavaSource<?>> NESTED_TYPE addNestedType(Class<NESTED_TYPE> type)
    {
       JavaSource<?> nestedType = Roaster.create(type);
-      return (NESTEDTYPE) addNestedType(nestedType);
+      return (NESTED_TYPE) addNestedType(nestedType);
    }
 
    @Override
-   public <NESTEDTYPE extends JavaSource<?>> NESTEDTYPE addNestedType(String declaration)
+   public <NESTED_TYPE extends JavaSource<?>> NESTED_TYPE addNestedType(String declaration)
    {
       JavaSource<?> nestedType = Roaster.parse(JavaSource.class, declaration);
-      return (NESTEDTYPE) addNestedType(nestedType);
+      return (NESTED_TYPE) addNestedType(nestedType);
    }
 
    @Override
"
1b04c5f27141e28973f931bde9f9e77ab0af8c23,Matt Benson,EnumConstantBodyImpl.java,MODIFY,addImport -> [JavaType type] | [String className],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
index 24529a7..4c06c9e 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
@@ -823,18 +823,18 @@
    }
 
    @Override
-   public <NESTEDTYPE extends JavaSource<?>> NESTEDTYPE addNestedType(Class<NESTEDTYPE> type)
+   public <NESTED_TYPE extends JavaSource<?>> NESTED_TYPE addNestedType(Class<NESTED_TYPE> type)
    {
       if (type != JavaClassSource.class)
       {
          throw new IllegalArgumentException(""Enum constants body allow only classes to be added "");
       }
       JavaSource<?> nestedType = Roaster.create(type);
-      return (NESTEDTYPE) addNestedType(nestedType);
+      return (NESTED_TYPE) addNestedType(nestedType);
    }
 
    @Override
-   public <NESTEDTYPE extends JavaSource<?>> NESTEDTYPE addNestedType(String declaration)
+   public <NESTED_TYPE extends JavaSource<?>> NESTED_TYPE addNestedType(String declaration)
    {
       JavaType<?> source = Roaster.parse(declaration);
       if (!source.isClass())
@@ -842,7 +842,7 @@
          throw new IllegalArgumentException(""Enum constants body allow only classes to be added "");
       }
       JavaSource<?> nestedType = Roaster.parse(JavaSource.class, declaration);
-      return (NESTEDTYPE) addNestedType(nestedType);
+      return (NESTED_TYPE) addNestedType(nestedType);
    }
 
    @Override
@@ -858,7 +858,7 @@
    }
 
    @Override
-   public <NESTEDTYPE extends JavaSource<?>> NESTEDTYPE addNestedType(NESTEDTYPE type)
+   public <NESTED_TYPE extends JavaSource<?>> NESTED_TYPE addNestedType(NESTED_TYPE type)
    {
       if (!type.isClass())
       {
@@ -874,7 +874,7 @@
       {
          throw new IllegalArgumentException(""type must be an AbstractJavaSource instance"");
       }
-      return (NESTEDTYPE) getNestedType(type.getName());
+      return (NESTED_TYPE) getNestedType(type.getName());
    }
 
    @Override
"
f66b7422e8eba814fbcfc66b7b59e2d58badbe64,George Gastaldi,MethodSource.java,MODIFY,setReturnType -> [JavaType type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/MethodSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/MethodSource.java
index 1791a41..688dfc7 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/MethodSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/MethodSource.java
@@ -15,11 +15,12 @@
 
 /**
  * Represents a Java Method in source form.
- * 
+ *
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
- * 
+ *
  */
-public interface MethodSource<O extends JavaSource<O>> extends Method<O, MethodSource<O>>, AbstractableSource<MethodSource<O>>,
+public interface MethodSource<O extends JavaSource<O>> extends Method<O, MethodSource<O>>,
+         AbstractableSource<MethodSource<O>>,
          MemberSource<O, MethodSource<O>>, GenericCapableSource<O, MethodSource<O>>
 {
    /**
@@ -33,8 +34,8 @@
    MethodSource<O> setBody(final String body);
 
    /**
-    * Toggle this method as a constructor. If true, and the name of the {@link Method} is not the same as the name
-    * of its parent {@link JavaClass} , update the name of the to match.
+    * Toggle this method as a constructor. If true, and the name of the {@link Method} is not the same as the name of
+    * its parent {@link JavaClass} , update the name of the to match.
     */
    MethodSource<O> setConstructor(final boolean constructor);
 
@@ -84,4 +85,18 @@
    @Override
    List<ParameterSource<O>> getParameters();
 
+   /**
+    * Add a parameter with the specified {@link Class} type and name to this method
+    */
+   ParameterSource<O> addParameter(Class<?> type, String name);
+
+   /**
+    * Add a parameter with the specified type and name to this method
+    */
+   ParameterSource<O> addParameter(String type, String name);
+
+   /**
+    * Remove a parameter from this method
+    */
+   MethodSource<O> removeParameter(ParameterSource<O> parameter);
 }
\ No newline at end of file
"
f66b7422e8eba814fbcfc66b7b59e2d58badbe64,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index e8b8464..b540450 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -226,7 +226,7 @@
       }
       return new TypeImpl<O>(parent, method.getReturnType2());
    }
-   
+
    @Override
    public boolean isReturnTypeVoid()
    {
@@ -610,7 +610,7 @@
       {
          if (Strings.areEqual(name, typeParameter.getName().getIdentifier()))
          {
-            return(new TypeVariableImpl<O>(parent, typeParameter));
+            return (new TypeVariableImpl<O>(parent, typeParameter));
          }
       }
       return null;
@@ -646,4 +646,37 @@
    {
       return removeTypeVariable(typeVariable.getName());
    }
+
+   @Override
+   public ParameterSource<O> addParameter(Class<?> type, String name)
+   {
+      return addParameter(type.getName(), name);
+   }
+
+   @SuppressWarnings(""unchecked"")
+   @Override
+   public ParameterSource<O> addParameter(String type, String name)
+   {
+      getOrigin().addImport(type);
+      String stub = ""public class Stub { public void method( "" + Types.toSimpleName(type) + "" "" + name + "" ) {} }"";
+      JavaClassSource temp = (JavaClassSource) Roaster.parse(stub);
+      List<MethodSource<JavaClassSource>> methods = temp.getMethods();
+      List<VariableDeclaration> astParameters = ((MethodDeclaration) methods.get(0).getInternal()).parameters();
+
+      ParameterSource<O> param = null;
+      for (VariableDeclaration declaration : astParameters)
+      {
+         VariableDeclaration copy = (VariableDeclaration) ASTNode.copySubtree(method.getAST(), declaration);
+         method.parameters().add(copy);
+         param = new ParameterImpl<O>(parent, copy);
+      }
+      return param;
+   }
+
+   @Override
+   public MethodSource<O> removeParameter(ParameterSource<O> parameter)
+   {
+      method.parameters().remove(parameter.getInternal());
+      return this;
+   }
 }
"
ea46069c270c6375a5ea0a373397a123561b0519,George Gastaldi,MethodSource.java,MODIFY,setReturnType -> [JavaType type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/MethodSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/MethodSource.java
index 688dfc7..d6ef1cf 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/MethodSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/MethodSource.java
@@ -96,6 +96,11 @@
    ParameterSource<O> addParameter(String type, String name);
 
    /**
+    * Add a parameter with the specified {@link JavaType} type and name to this method
+    */
+   ParameterSource<O> addParameter(JavaType<?> type, String name);
+
+   /**
     * Remove a parameter from this method
     */
    MethodSource<O> removeParameter(ParameterSource<O> parameter);
"
ea46069c270c6375a5ea0a373397a123561b0519,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index b540450..7b6557e 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -653,6 +653,12 @@
       return addParameter(type.getName(), name);
    }
 
+   @Override
+   public ParameterSource<O> addParameter(JavaType<?> type, String name)
+   {
+      return addParameter(type.getQualifiedName(), name);
+   }
+
    @SuppressWarnings(""unchecked"")
    @Override
    public ParameterSource<O> addParameter(String type, String name)
"
828ddd4594fb0752dc155ae50c6e26d0788c4de1,George Gastaldi,MethodSource.java,MODIFY,setReturnType -> [JavaType type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/MethodSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/MethodSource.java
index 1791a41..d6ef1cf 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/MethodSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/MethodSource.java
@@ -15,11 +15,12 @@
 
 /**
  * Represents a Java Method in source form.
- * 
+ *
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
- * 
+ *
  */
-public interface MethodSource<O extends JavaSource<O>> extends Method<O, MethodSource<O>>, AbstractableSource<MethodSource<O>>,
+public interface MethodSource<O extends JavaSource<O>> extends Method<O, MethodSource<O>>,
+         AbstractableSource<MethodSource<O>>,
          MemberSource<O, MethodSource<O>>, GenericCapableSource<O, MethodSource<O>>
 {
    /**
@@ -33,8 +34,8 @@
    MethodSource<O> setBody(final String body);
 
    /**
-    * Toggle this method as a constructor. If true, and the name of the {@link Method} is not the same as the name
-    * of its parent {@link JavaClass} , update the name of the to match.
+    * Toggle this method as a constructor. If true, and the name of the {@link Method} is not the same as the name of
+    * its parent {@link JavaClass} , update the name of the to match.
     */
    MethodSource<O> setConstructor(final boolean constructor);
 
@@ -84,4 +85,23 @@
    @Override
    List<ParameterSource<O>> getParameters();
 
+   /**
+    * Add a parameter with the specified {@link Class} type and name to this method
+    */
+   ParameterSource<O> addParameter(Class<?> type, String name);
+
+   /**
+    * Add a parameter with the specified type and name to this method
+    */
+   ParameterSource<O> addParameter(String type, String name);
+
+   /**
+    * Add a parameter with the specified {@link JavaType} type and name to this method
+    */
+   ParameterSource<O> addParameter(JavaType<?> type, String name);
+
+   /**
+    * Remove a parameter from this method
+    */
+   MethodSource<O> removeParameter(ParameterSource<O> parameter);
 }
\ No newline at end of file
"
828ddd4594fb0752dc155ae50c6e26d0788c4de1,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index e8b8464..7b6557e 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -226,7 +226,7 @@
       }
       return new TypeImpl<O>(parent, method.getReturnType2());
    }
-   
+
    @Override
    public boolean isReturnTypeVoid()
    {
@@ -610,7 +610,7 @@
       {
          if (Strings.areEqual(name, typeParameter.getName().getIdentifier()))
          {
-            return(new TypeVariableImpl<O>(parent, typeParameter));
+            return (new TypeVariableImpl<O>(parent, typeParameter));
          }
       }
       return null;
@@ -646,4 +646,43 @@
    {
       return removeTypeVariable(typeVariable.getName());
    }
+
+   @Override
+   public ParameterSource<O> addParameter(Class<?> type, String name)
+   {
+      return addParameter(type.getName(), name);
+   }
+
+   @Override
+   public ParameterSource<O> addParameter(JavaType<?> type, String name)
+   {
+      return addParameter(type.getQualifiedName(), name);
+   }
+
+   @SuppressWarnings(""unchecked"")
+   @Override
+   public ParameterSource<O> addParameter(String type, String name)
+   {
+      getOrigin().addImport(type);
+      String stub = ""public class Stub { public void method( "" + Types.toSimpleName(type) + "" "" + name + "" ) {} }"";
+      JavaClassSource temp = (JavaClassSource) Roaster.parse(stub);
+      List<MethodSource<JavaClassSource>> methods = temp.getMethods();
+      List<VariableDeclaration> astParameters = ((MethodDeclaration) methods.get(0).getInternal()).parameters();
+
+      ParameterSource<O> param = null;
+      for (VariableDeclaration declaration : astParameters)
+      {
+         VariableDeclaration copy = (VariableDeclaration) ASTNode.copySubtree(method.getAST(), declaration);
+         method.parameters().add(copy);
+         param = new ParameterImpl<O>(parent, copy);
+      }
+      return param;
+   }
+
+   @Override
+   public MethodSource<O> removeParameter(ParameterSource<O> parameter)
+   {
+      method.parameters().remove(parameter.getInternal());
+      return this;
+   }
 }
"
fb1ce7d8d1ead19188000d3e3dae36aa7bcf28d6,Marco Rietveld,PropertyImpl.java,MODIFY,setType -> [JavaType entity] | [Class clazz],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/PropertyImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/PropertyImpl.java
index 3035e87..4bacfa5 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/PropertyImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/PropertyImpl.java
@@ -9,8 +9,8 @@
 
 import java.text.ParsePosition;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.List;
-import java.util.Objects;
 
 import org.eclipse.jdt.core.dom.ASTVisitor;
 import org.eclipse.jdt.core.dom.MethodDeclaration;
@@ -427,7 +427,9 @@
    @Override
    public String toString()
    {
-      return ""Property "" + Objects.toString(name, ""<missing>"");
+      // incompatible with java 6: 
+      // return ""Property "" + Objects.toString(name, ""<missing>"");
+      return ""Property: "" + ((name != null) ? name.toString() : ""<missing>"");
    }
 
    @Override
@@ -448,7 +450,10 @@
    @Override
    public int hashCode()
    {
-      return Objects.hash(getOrigin(), getName());
+      // incompatible with java 6: 
+      // return Objects.hash(getOrigin(), getName());
+      Object [] values = { getOrigin(), getName() };
+      return Arrays.hashCode(values);
    }
 
    /**
@@ -560,7 +565,7 @@
    @Override
    public List<? extends Annotation<O>> getAnnotations()
    {
-      List<Annotation<O>> annotations = new ArrayList<>();
+      List<Annotation<O>> annotations = new ArrayList<Annotation<O>>();
       FieldSource<O> field = getField();
       if (field != null)
       {
"
b8a0057c1f756506c3925b3ca0a793bd20988227,George Gastaldi,PropertyImpl.java,MODIFY,setType -> [JavaType entity] | [Class clazz],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/PropertyImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/PropertyImpl.java
index 3035e87..4bacfa5 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/PropertyImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/PropertyImpl.java
@@ -9,8 +9,8 @@
 
 import java.text.ParsePosition;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.List;
-import java.util.Objects;
 
 import org.eclipse.jdt.core.dom.ASTVisitor;
 import org.eclipse.jdt.core.dom.MethodDeclaration;
@@ -427,7 +427,9 @@
    @Override
    public String toString()
    {
-      return ""Property "" + Objects.toString(name, ""<missing>"");
+      // incompatible with java 6: 
+      // return ""Property "" + Objects.toString(name, ""<missing>"");
+      return ""Property: "" + ((name != null) ? name.toString() : ""<missing>"");
    }
 
    @Override
@@ -448,7 +450,10 @@
    @Override
    public int hashCode()
    {
-      return Objects.hash(getOrigin(), getName());
+      // incompatible with java 6: 
+      // return Objects.hash(getOrigin(), getName());
+      Object [] values = { getOrigin(), getName() };
+      return Arrays.hashCode(values);
    }
 
    /**
@@ -560,7 +565,7 @@
    @Override
    public List<? extends Annotation<O>> getAnnotations()
    {
-      List<Annotation<O>> annotations = new ArrayList<>();
+      List<Annotation<O>> annotations = new ArrayList<Annotation<O>>();
       FieldSource<O> field = getField();
       if (field != null)
       {
"
6c576a531d8d9fcf14bb617068ae5c8eb2f486b7,George Gastaldi,GenericCapableSource.java,MODIFY,addTypeVariable -> [] | [String name],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/GenericCapableSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/GenericCapableSource.java
index 09d23b0..4f30762 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/GenericCapableSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/GenericCapableSource.java
@@ -14,9 +14,9 @@
 
 /**
  * Represents a Java source element that may define type variables.
- * 
+ *
  * @author mbenson
- * 
+ *
  */
 public interface GenericCapableSource<O extends JavaSource<O>, T> extends
          GenericCapable<O>
@@ -29,14 +29,22 @@
 
    /**
     * Adds a type variable.
-    * 
+    *
     * @return {@link TypeVariableSource}
     */
    TypeVariableSource<O> addTypeVariable();
 
    /**
+    * Shortcut to {@link TypeVariableSource#setName(String)}
+    *
+    * @param name
+    * @return {@link TypeVariableSource}
+    */
+   TypeVariableSource<O> addTypeVariable(String name);
+
+   /**
     * Removes a type variable.
-    * 
+    *
     * @param name should never be null
     * @return this
     */
@@ -44,7 +52,7 @@
 
    /**
     * Removes a type variable.
-    * 
+    *
     * @param typeVariable should never be null
     * @return this
     */
"
6c576a531d8d9fcf14bb617068ae5c8eb2f486b7,George Gastaldi,AbstractGenericCapableJavaSource.java,MODIFY,addTypeVariable -> [] | [String name],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractGenericCapableJavaSource.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractGenericCapableJavaSource.java
index 1daaf17..9f2435c 100755
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractGenericCapableJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractGenericCapableJavaSource.java
@@ -24,9 +24,9 @@
 import org.jboss.forge.roaster.model.util.Strings;
 
 /**
- * 
+ *
  * @author mbenson
- * 
+ *
  * @param <O>
  */
 @SuppressWarnings(""unchecked"")
@@ -78,6 +78,12 @@
    }
 
    @Override
+   public TypeVariableSource<O> addTypeVariable(String name)
+   {
+      return addTypeVariable().setName(name);
+   }
+
+   @Override
    public O removeTypeVariable(String name)
    {
       TypeDeclaration type = (TypeDeclaration) body;
"
6c576a531d8d9fcf14bb617068ae5c8eb2f486b7,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index 7b6557e..ac314e9 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -626,6 +626,12 @@
    }
 
    @Override
+   public TypeVariableSource<O> addTypeVariable(String name)
+   {
+      return addTypeVariable().setName(name);
+   }
+
+   @Override
    public MethodSource<O> removeTypeVariable(String name)
    {
       @SuppressWarnings(""unchecked"")
"
8381302493cc57a3790936690f9f4c7aa670da0f,George Gastaldi,Roaster.java,MODIFY,"parse -> [Class type, InputStream data] | [File file]","diff --git a/api/src/main/java/org/jboss/forge/roaster/Roaster.java b/api/src/main/java/org/jboss/forge/roaster/Roaster.java
index a105f28..b047c2f 100644
--- a/api/src/main/java/org/jboss/forge/roaster/Roaster.java
+++ b/api/src/main/java/org/jboss/forge/roaster/Roaster.java
@@ -23,7 +23,7 @@
 
 /**
  * Responsible for parsing data into new {@link JavaType} instances.
- * 
+ *
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
 public final class Roaster
@@ -34,10 +34,10 @@
    {
       synchronized (Roaster.class)
       {
-         if (parsers == null)
+         if (parsers == null || parsers.isEmpty())
          {
             parsers = new ArrayList<JavaParser>();
-            for (JavaParser p : ServiceLoader.load(JavaParser.class))
+            for (JavaParser p : ServiceLoader.load(JavaParser.class, Roaster.class.getClassLoader()))
             {
                parsers.add(p);
             }
@@ -110,7 +110,7 @@
 
    /**
     * Read the given {@link URL} and parse its data into a new {@link JavaType} instance of the given type.
-    * 
+    *
     * @throws FileNotFoundException
     */
    public static <T extends JavaType<?>> T parse(final Class<T> type, final URL url) throws IOException
@@ -120,7 +120,7 @@
 
    /**
     * Read the given {@link File} and parse its data into a new {@link JavaType} instance of the given type.
-    * 
+    *
     * @throws FileNotFoundException
     */
    public static <T extends JavaType<?>> T parse(final Class<T> type, final File file) throws FileNotFoundException
@@ -145,8 +145,8 @@
    }
 
    /**
-    * Read the given {@link InputStream} and parse its data into a new {@link JavaType} instance of the given type.
-    * The caller is responsible for closing the stream.
+    * Read the given {@link InputStream} and parse its data into a new {@link JavaType} instance of the given type. The
+    * caller is responsible for closing the stream.
     */
    public static <T extends JavaType<?>> T parse(final Class<T> type, final InputStream data)
    {
"
51ec05ddfdd04d522ed4dbaf625eef65c8680dcc,Matt Benson,PropertyImpl.java,MODIFY,setType -> [JavaType entity] | [Class clazz],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/PropertyImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/PropertyImpl.java
index 4bacfa5..09d03bc 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/PropertyImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/PropertyImpl.java
@@ -427,9 +427,7 @@
    @Override
    public String toString()
    {
-      // incompatible with java 6: 
-      // return ""Property "" + Objects.toString(name, ""<missing>"");
-      return ""Property: "" + ((name != null) ? name.toString() : ""<missing>"");
+      return ""Property: "" + getName();
    }
 
    @Override
@@ -450,10 +448,8 @@
    @Override
    public int hashCode()
    {
-      // incompatible with java 6: 
-      // return Objects.hash(getOrigin(), getName());
-      Object [] values = { getOrigin(), getName() };
-      return Arrays.hashCode(values);
+      // compatible with Java 6: 
+      return Arrays.hashCode(new Object[] { getOrigin(), getName() });
    }
 
    /**
"
2298cd703b8cab9b6e6fa49456da3b93053a099e,George Gastaldi,AnnotationElementSource.java,MODIFY,setType -> [JavaType entity] | [Class clazz],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationElementSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationElementSource.java
index b208df2..a8cef4d 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationElementSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationElementSource.java
@@ -33,7 +33,6 @@
 
       <T extends Enum<T>> AnnotationElementSource.DefaultValue setEnum(T value);
 
-      @SuppressWarnings(""unchecked"")
       <T extends Enum<T>> AnnotationElementSource.DefaultValue setEnumArray(T... values);
 
       AnnotationSource<JavaAnnotationSource> setAnnotation();
"
2298cd703b8cab9b6e6fa49456da3b93053a099e,George Gastaldi,Refactory.java,MODIFY,"createHashCodeAndEquals -> [JavaClassSource clazz, FieldSource fields] | [JavaClassSource clazz]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
index 03031b1..b30edc2 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
@@ -277,7 +277,6 @@
     * @param clazz
     * @param fields
     */
-   @SuppressWarnings(""unchecked"")
    public static void createToStringFromFields(final JavaClassSource clazz, final FieldSource<JavaClassSource>... fields)
    {
       createToStringFromFields(clazz, Arrays.asList(fields));
"
2298cd703b8cab9b6e6fa49456da3b93053a099e,George Gastaldi,AnnotationElementImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationElementImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationElementImpl.java
index b2c1f22..c0b2716 100755
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationElementImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationElementImpl.java
@@ -123,7 +123,6 @@
          return setEnumArray(values);
       }
 
-      @SuppressWarnings(""unchecked"")
       @Override
       public <T extends Enum<T>> DefaultValue setEnumArray(T... values)
       {
"
db627cfd349637fa0c221138cc2a09ec607e5423,George Gastaldi,Annotation.java,MODIFY,"getEnumValue -> [Class type, String name] | [Class type]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/Annotation.java b/api/src/main/java/org/jboss/forge/roaster/model/Annotation.java
index 6988f11..66de53d 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/Annotation.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/Annotation.java
@@ -13,7 +13,7 @@
 
 /**
  * Represents an annotation on some Java element.
- * 
+ *
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
 public interface Annotation<O extends JavaType<O>> extends Internal, Origin<O>
@@ -46,6 +46,10 @@
 
    String getStringValue(String name);
 
+   String[] getStringArrayValue();
+
+   String[] getStringArrayValue(String name);
+
    Annotation<O> getAnnotationValue();
 
    Annotation<O> getAnnotationValue(String name);
"
db627cfd349637fa0c221138cc2a09ec607e5423,George Gastaldi,AnnotationSource.java,MODIFY,getAnnotationValue -> [String name] | [],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationSource.java
index 63d1fa9..a1c612a 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationSource.java
@@ -12,7 +12,7 @@
 
 /**
  * Represents an annotation on some Java source element.
- * 
+ *
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
 public interface AnnotationSource<O extends JavaType<O>> extends Annotation<O>
@@ -57,4 +57,8 @@
    AnnotationSource<O> setClassArrayValue(String name, Class<?>... values);
 
    AnnotationSource<O> setClassArrayValue(Class<?>... values);
+
+   AnnotationSource<O> setStringArrayValue(String name, String[] values);
+
+   AnnotationSource<O> setStringArrayValue(String[] values);
 }
\ No newline at end of file
"
db627cfd349637fa0c221138cc2a09ec607e5423,George Gastaldi,AnnotationImpl.java,MODIFY,getLiteralValue -> [String name] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
index 9d99715..a630c08 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
@@ -468,7 +468,7 @@
       {
          throw new IllegalStateException(""Cannot handle annotations attached to "" + parentNode);
       }
-      
+
       int pos = modifiers.indexOf(annotation);
       if (pos >= 0)
       {
@@ -549,7 +549,8 @@
    @Override
    public AnnotationSource<O> setAnnotationValue(String name)
    {
-      if (!isNormal() && DEFAULT_VALUE.equals(name)) {
+      if (!isNormal() && DEFAULT_VALUE.equals(name))
+      {
          return setAnnotationValue();
       }
       if (!isNormal())
@@ -557,7 +558,7 @@
          convertTo(AnnotationType.NORMAL);
       }
       AnnotationSource<O> result = new Nested(this);
-      
+
       String stub = ""@"" + getName() + ""("" + name + ""= 0 ) public class Stub { }"";
       JavaClass<?> temp = Roaster.parse(JavaClass.class, stub);
 
@@ -705,6 +706,29 @@
    }
 
    @Override
+   public String[] getStringArrayValue()
+   {
+      return getStringArrayValue(DEFAULT_VALUE);
+   }
+
+   @Override
+   public String[] getStringArrayValue(String name)
+   {
+      final List<String> result = new ArrayList<String>();
+      String literalValue = getLiteralValue(name);
+      // Remove {}
+      if (literalValue.startsWith(""{"") && literalValue.endsWith(""}""))
+      {
+         literalValue = literalValue.substring(1, literalValue.length() - 1);
+      }
+      for (String value : literalValue.split("",""))
+      {
+         result.add(Strings.unquote(value));
+      }
+      return result.toArray(new String[result.size()]);
+   }
+
+   @Override
    public AnnotationSource<O> setClassValue(String name, Class<?> value)
    {
       Assert.notNull(value, ""null not accepted"");
@@ -729,6 +753,28 @@
    }
 
    @Override
+   public AnnotationSource<O> setStringArrayValue(String[] values)
+   {
+      return setStringArrayValue(DEFAULT_VALUE, values);
+   }
+
+   @Override
+   public AnnotationSource<O> setStringArrayValue(String name, String[] values)
+   {
+      Assert.notNull(values, ""null array not accepted"");
+
+      final List<String> literals = new ArrayList<String>();
+
+      for (String value : values)
+      {
+         Assert.notNull(value, ""null value not accepted"");
+         literals.add(Strings.enquote(value));
+      }
+      return setLiteralValue(name,
+               literals.size() == 1 ? literals.get(0) : String.format(""{%s}"", Strings.join(literals, "","")));
+   }
+
+   @Override
    public AnnotationSource<O> setClassArrayValue(String name, Class<?>... values)
    {
       Assert.notNull(values, ""null array not accepted"");
"
1946a3e3e04e05f1f54443cc2ef8493dbcdec624,George Gastaldi,Annotation.java,MODIFY,"getEnumValue -> [Class type, String name] | [Class type]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/Annotation.java b/api/src/main/java/org/jboss/forge/roaster/model/Annotation.java
index 6988f11..66de53d 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/Annotation.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/Annotation.java
@@ -13,7 +13,7 @@
 
 /**
  * Represents an annotation on some Java element.
- * 
+ *
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
 public interface Annotation<O extends JavaType<O>> extends Internal, Origin<O>
@@ -46,6 +46,10 @@
 
    String getStringValue(String name);
 
+   String[] getStringArrayValue();
+
+   String[] getStringArrayValue(String name);
+
    Annotation<O> getAnnotationValue();
 
    Annotation<O> getAnnotationValue(String name);
"
1946a3e3e04e05f1f54443cc2ef8493dbcdec624,George Gastaldi,AnnotationSource.java,MODIFY,getAnnotationValue -> [String name] | [],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationSource.java
index 63d1fa9..a1c612a 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationSource.java
@@ -12,7 +12,7 @@
 
 /**
  * Represents an annotation on some Java source element.
- * 
+ *
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
 public interface AnnotationSource<O extends JavaType<O>> extends Annotation<O>
@@ -57,4 +57,8 @@
    AnnotationSource<O> setClassArrayValue(String name, Class<?>... values);
 
    AnnotationSource<O> setClassArrayValue(Class<?>... values);
+
+   AnnotationSource<O> setStringArrayValue(String name, String[] values);
+
+   AnnotationSource<O> setStringArrayValue(String[] values);
 }
\ No newline at end of file
"
1946a3e3e04e05f1f54443cc2ef8493dbcdec624,George Gastaldi,AnnotationImpl.java,MODIFY,getLiteralValue -> [String name] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
index 9d99715..a630c08 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
@@ -468,7 +468,7 @@
       {
          throw new IllegalStateException(""Cannot handle annotations attached to "" + parentNode);
       }
-      
+
       int pos = modifiers.indexOf(annotation);
       if (pos >= 0)
       {
@@ -549,7 +549,8 @@
    @Override
    public AnnotationSource<O> setAnnotationValue(String name)
    {
-      if (!isNormal() && DEFAULT_VALUE.equals(name)) {
+      if (!isNormal() && DEFAULT_VALUE.equals(name))
+      {
          return setAnnotationValue();
       }
       if (!isNormal())
@@ -557,7 +558,7 @@
          convertTo(AnnotationType.NORMAL);
       }
       AnnotationSource<O> result = new Nested(this);
-      
+
       String stub = ""@"" + getName() + ""("" + name + ""= 0 ) public class Stub { }"";
       JavaClass<?> temp = Roaster.parse(JavaClass.class, stub);
 
@@ -705,6 +706,29 @@
    }
 
    @Override
+   public String[] getStringArrayValue()
+   {
+      return getStringArrayValue(DEFAULT_VALUE);
+   }
+
+   @Override
+   public String[] getStringArrayValue(String name)
+   {
+      final List<String> result = new ArrayList<String>();
+      String literalValue = getLiteralValue(name);
+      // Remove {}
+      if (literalValue.startsWith(""{"") && literalValue.endsWith(""}""))
+      {
+         literalValue = literalValue.substring(1, literalValue.length() - 1);
+      }
+      for (String value : literalValue.split("",""))
+      {
+         result.add(Strings.unquote(value));
+      }
+      return result.toArray(new String[result.size()]);
+   }
+
+   @Override
    public AnnotationSource<O> setClassValue(String name, Class<?> value)
    {
       Assert.notNull(value, ""null not accepted"");
@@ -729,6 +753,28 @@
    }
 
    @Override
+   public AnnotationSource<O> setStringArrayValue(String[] values)
+   {
+      return setStringArrayValue(DEFAULT_VALUE, values);
+   }
+
+   @Override
+   public AnnotationSource<O> setStringArrayValue(String name, String[] values)
+   {
+      Assert.notNull(values, ""null array not accepted"");
+
+      final List<String> literals = new ArrayList<String>();
+
+      for (String value : values)
+      {
+         Assert.notNull(value, ""null value not accepted"");
+         literals.add(Strings.enquote(value));
+      }
+      return setLiteralValue(name,
+               literals.size() == 1 ? literals.get(0) : String.format(""{%s}"", Strings.join(literals, "","")));
+   }
+
+   @Override
    public AnnotationSource<O> setClassArrayValue(String name, Class<?>... values)
    {
       Assert.notNull(values, ""null array not accepted"");
"
4463440c9547a7dafe1b4f64b202d728dad3f86a,"Lincoln Baxter, III",Formatter.java,MODIFY,format -> [String source] | [JavaClassSource javaClass],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java b/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
index b1f18d9..295c3da 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
@@ -32,7 +32,7 @@
    public static String format(String source)
    {
        // TODO locate user's eclipse project settings, use those if we can.
-       Properties options = readConfig(""org.eclipse.jdt.core.prefs"");
+       Properties options = readConfig(""eclipse.formatter.prefs"");
 
        final CodeFormatter codeFormatter = ToolFactory.createCodeFormatter(options);
        return ensureCorrectNewLines(formatFile(source, codeFormatter));
"
d769644f1aacbadd60260e06342be61485dbcbaa,"Lincoln Baxter, III",Formatter.java,MODIFY,format -> [String source] | [JavaClassSource javaClass],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java b/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
index 295c3da..b1f18d9 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
@@ -32,7 +32,7 @@
    public static String format(String source)
    {
        // TODO locate user's eclipse project settings, use those if we can.
-       Properties options = readConfig(""eclipse.formatter.prefs"");
+       Properties options = readConfig(""org.eclipse.jdt.core.prefs"");
 
        final CodeFormatter codeFormatter = ToolFactory.createCodeFormatter(options);
        return ensureCorrectNewLines(formatFile(source, codeFormatter));
"
265cb416fe36a3bae036d88a444a23efc1c15662,"Lincoln Baxter, III",PropertySource.java,MODIFY,setType -> [JavaType entity] | [Class clazz],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/PropertySource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/PropertySource.java
index a329e6a..0465dec 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/PropertySource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/PropertySource.java
@@ -38,6 +38,14 @@
     */
    PropertySource<O> setType(JavaType<?> entity);
 
+
+   /**
+    * Create the accessor method.
+    * 
+    * @throws IllegalStateException if property name unset or method already exists
+    */
+   MethodSource<O> createAccessor();
+   
    /**
     * Override.
     */
@@ -45,6 +53,11 @@
    MethodSource<O> getAccessor();
 
    /**
+    * Remove the accessor method.
+    */
+   PropertySource<O> removeAccessor();
+
+   /**
     * Create the mutator method.
     * 
     * @throws IllegalStateException if property name unset or method already exists
@@ -54,6 +67,7 @@
    /**
     * Override.
     */
+   @Override
    MethodSource<O> getMutator();
 
    /**
@@ -81,6 +95,7 @@
    /**
     * Override.
     */
+   @Override
    FieldSource<O> getField();
 
    /**
"
265cb416fe36a3bae036d88a444a23efc1c15662,"Lincoln Baxter, III",PropertyImpl.java,MODIFY,setType -> [JavaType entity] | [Class clazz],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/PropertyImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/PropertyImpl.java
index 09d03bc..70c85ed 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/PropertyImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/PropertyImpl.java
@@ -161,7 +161,8 @@
       return null;
    }
 
-   private MethodSource<O> createAccessor()
+   @Override
+   public MethodSource<O> createAccessor()
    {
       Assert.isTrue(getAccessor() == null, ""Accessor method already exists"");
 
@@ -395,7 +396,8 @@
       return this;
    }
 
-   private PropertySource<O> removeAccessor()
+   @Override
+   public PropertySource<O> removeAccessor()
    {
       if (isAccessible())
       {
"
0e0bce15b78d23481ec5b5444e8024f1fa0fdc8d,Walter Medvedeo,FieldImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
index 021331a..2e78c59 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
@@ -382,15 +382,15 @@
    @Override
    public String getLiteralInitializer()
    {
-      String result = fragment.getInitializer().toString();
-      return result;
+      Expression expression = fragment.getInitializer();
+      return expression != null ? expression.toString() : null;
    }
 
    @Override
    public String getStringInitializer()
    {
-      String result = Strings.unquote(fragment.getInitializer().toString());
-      return result;
+      Expression expression = fragment.getInitializer();
+      return expression != null ? Strings.unquote(expression.toString()) : null;
    }
 
    @Override
"
a23b7d66d16b467bba298d41f3970f6b27ca5c03,George Gastaldi,FieldImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
index 021331a..2e78c59 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
@@ -382,15 +382,15 @@
    @Override
    public String getLiteralInitializer()
    {
-      String result = fragment.getInitializer().toString();
-      return result;
+      Expression expression = fragment.getInitializer();
+      return expression != null ? expression.toString() : null;
    }
 
    @Override
    public String getStringInitializer()
    {
-      String result = Strings.unquote(fragment.getInitializer().toString());
-      return result;
+      Expression expression = fragment.getInitializer();
+      return expression != null ? Strings.unquote(expression.toString()) : null;
    }
 
    @Override
"
9d0c327efa1bb914c6af925da8696369c003c772,Matej Briskar,Refactory.java,MODIFY,"createHashCodeAndEquals -> [JavaClassSource clazz, FieldSource fields] | [JavaClassSource clazz]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
index b30edc2..563435c 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
@@ -93,6 +93,24 @@
     */
    public static void createHashCodeAndEquals(final JavaClassSource clazz, final FieldSource<?>... fields)
    {
+      createEquals(clazz,fields);
+      createHashCode(clazz,fields);
+   }
+   
+   /**
+    * Create an <i>equals</i> implementation for the given class and fields. Callers must verify that
+    * the types of the fields override the default identity based equals implementation. No warnings are
+    * issued in an event where the field type uses the implementation of java.lang.Object.
+    *
+    * This method ignores static fields for generating the equals method, since they are ideally not meant
+    * to be used in these cases. Although transient fields could also be ignored, they are not since there is no
+    * mechanism to convey warnings (not errors) in this case.
+    *
+    * @param clazz class to be changed
+    * @param fields fields to be used in the equals/hashCode methods
+    */
+   public static void createEquals(final JavaClassSource clazz, final FieldSource<?>... fields)
+   {
       if (clazz == null)
       {
          throw new IllegalArgumentException(""The provided class cannot be null."");
@@ -103,15 +121,119 @@
       }
 
       String superEqualsCheck = """";
-      String defaultHashcode = ""int result = 1;"";
       if (!clazz.getSuperType().equals(""java.lang.Object""))
       {
          superEqualsCheck = ""if (!super.equals(obj)) { return false;} "";
+      }
+      StringBuilder fieldEqualityChecks = new StringBuilder();
+      for (FieldSource<?> field : fields)
+      {
+         if (field == null)
+         {
+            throw new IllegalArgumentException(""A supplied field was null. The equals and hashCode computation will be aborted."");
+         }
+         if (field.isStatic())
+         {
+            throw new IllegalArgumentException(""A static field was detected. The equals and hashCode computation will be aborted."");
+         }
+
+         String fieldName = field.getName();
+         if (field.getType().isArray())
+         {
+            fieldEqualityChecks.append(""if (!Arrays.equals("").append(fieldName).append("", other."").append(fieldName)
+                     .append("")) {"");
+            fieldEqualityChecks.append("" return false; }"");
+         }
+         else if (field.getType().isPrimitive())
+         {
+            if (field.getType().isType(""float""))
+            {
+               fieldEqualityChecks.append(""if (Float.floatToIntBits("").append(fieldName)
+                        .append("") != Float.floatToIntBits(other."").append(fieldName)
+                        .append("")) { "");
+               fieldEqualityChecks.append("" return false;"");
+               fieldEqualityChecks.append(""} "");
+
+            }
+            else if (field.getType().isType(""double""))
+            {
+               fieldEqualityChecks.append(""if (Double.doubleToLongBits("").append(fieldName)
+                        .append("") != Double.doubleToLongBits(other."").append(fieldName)
+                        .append("")) { "");
+               fieldEqualityChecks.append("" return false;"");
+               fieldEqualityChecks.append(""} "");
+            }
+            else
+            {
+               fieldEqualityChecks.append(""if ("").append(fieldName).append("" != other."").append(fieldName)
+                        .append("") { "");
+               fieldEqualityChecks.append("" return false;"");
+               fieldEqualityChecks.append(""} "");
+            }
+         }
+         else
+         {
+            fieldEqualityChecks.append(""if ("").append(fieldName).append("" != null) { "");
+            fieldEqualityChecks.append("" if(!"").append(fieldName).append("".equals("");
+            fieldEqualityChecks.append(""other."").append(fieldName);
+            fieldEqualityChecks.append("")) { return false;} } "");
+         }
+      }
+
+      if (fieldEqualityChecks.length() < 1 )
+      {
+         throw new IllegalArgumentException(
+                  ""A failure was detected when generating the equals and hashCode methods. Verify the type and modifiers of the provided fields."");
+      }
+
+      StringBuilder typeCheckAndAssignment = new StringBuilder();
+      String klassName = clazz.getName();
+
+      typeCheckAndAssignment.append(""if (!(obj instanceof "").append(klassName).append("")) {"");
+      typeCheckAndAssignment.append("" return false;}"");
+      typeCheckAndAssignment.append(klassName).append("" other = ("").append(klassName).append("") obj;"");
+
+      clazz.addMethod(
+               ""public boolean equals(Object obj) { "" +
+                        ""if (this == obj) { return true; } "" +
+                        superEqualsCheck.toString() +
+                        typeCheckAndAssignment.toString() +
+                        fieldEqualityChecks.toString() +
+                        ""return true; "" +
+                        ""}"")
+               .addAnnotation(Override.class);
+   }
+   
+   /**
+    * Create a <i>hashCode</i> implementation for the given class and fields. Callers must verify that
+    * the types of the fields override the default identity based hashcode implementation. No warnings are
+    * issued in an event where the field type uses the implementation of java.lang.Object.
+    *
+    * This method ignores static fields for generating the equals method, since they are ideally not meant
+    * to be used in these cases. Although transient fields could also be ignored, they are not since there is no
+    * mechanism to convey warnings (not errors) in this case.
+    *
+    * @param clazz class to be changed
+    * @param fields fields to be used in the equals/hashCode methods
+    */
+   public static void createHashCode(final JavaClassSource clazz, final FieldSource<?>... fields)
+   {
+      if (clazz == null)
+      {
+         throw new IllegalArgumentException(""The provided class cannot be null."");
+      }
+      if (fields == null || fields.length < 1)
+      {
+         throw new IllegalArgumentException(""The provided fields cannot be null or empty."");
+      }
+
+      String defaultHashcode = ""int result = 1;"";
+      if (!clazz.getSuperType().equals(""java.lang.Object""))
+      {
          defaultHashcode = ""int result = super.hashCode();"";
       }
 
       boolean isTempFieldCreated = false;
-      StringBuilder fieldEqualityChecks = new StringBuilder();
       StringBuilder hashCodeComputation = new StringBuilder();
       for (FieldSource<?> field : fields)
       {
@@ -127,47 +249,17 @@
          String fieldName = field.getName();
          if (field.getType().isArray())
          {
-            // if(!Arrays.equals(array, other.array)) {
-            //    return false;
-            // }
-            fieldEqualityChecks.append(""if (!Arrays.equals("").append(fieldName).append("", other."").append(fieldName)
-                     .append("")) {"");
-            fieldEqualityChecks.append("" return false; }"");
-
-            // result = prime * result + Arrays.hashCode(array);
             hashCodeComputation.append(""result = prime * result + Arrays.hashCode("").append(fieldName).append("");"");
          }
          else if (field.getType().isPrimitive())
          {
             if (field.getType().isType(""float""))
             {
-               // if(Float.floatToIntBits(floatValue) != Float.floatToIntBits(other.floatValue)) {
-               //   return false;
-               // }
-               fieldEqualityChecks.append(""if (Float.floatToIntBits("").append(fieldName)
-                        .append("") != Float.floatToIntBits(other."").append(fieldName)
-                        .append("")) { "");
-               fieldEqualityChecks.append("" return false;"");
-               fieldEqualityChecks.append(""} "");
-
-               // result = prime * result + Float.floatToIntBits(floatValue);
                hashCodeComputation.append(""result = prime * result + "").append(""Float.floatToIntBits("")
                         .append(fieldName).append("");"");
             }
             else if (field.getType().isType(""double""))
             {
-               // if(Double.doubleToLongBits(doubleValue) != Double.doubleToLongBits(other.doubleValue)) {
-               //   return false;
-               // }
-               fieldEqualityChecks.append(""if (Double.doubleToLongBits("").append(fieldName)
-                        .append("") != Double.doubleToLongBits(other."").append(fieldName)
-                        .append("")) { "");
-               fieldEqualityChecks.append("" return false;"");
-               fieldEqualityChecks.append(""} "");
-
-               // long temp;
-               // temp = Double.doubleToLongBits(doubleValue);
-               // result = prime * result + (int) (temp ^ (temp >>> 32));
                if (!isTempFieldCreated)
                {
                   hashCodeComputation.append(""long temp;"");
@@ -178,14 +270,6 @@
             }
             else
             {
-               // if(value != other.value) {
-               //   return false;
-               // }
-               fieldEqualityChecks.append(""if ("").append(fieldName).append("" != other."").append(fieldName)
-                        .append("") { "");
-               fieldEqualityChecks.append("" return false;"");
-               fieldEqualityChecks.append(""} "");
-
                if (field.getType().isType(""long""))
                {
                   // result = prime * result + (int) (longValue ^ (longValue >>> 32));
@@ -208,49 +292,16 @@
          }
          else
          {
-            // if(value != null) {
-            //    if(!value.equals(other.value)) {
-            //       return false;
-            //    }
-            // }
-            fieldEqualityChecks.append(""if ("").append(fieldName).append("" != null) { "");
-            fieldEqualityChecks.append("" if(!"").append(fieldName).append("".equals("");
-            fieldEqualityChecks.append(""other."").append(fieldName);
-            fieldEqualityChecks.append("")) { return false;} } "");
-
-            // result = prime * result + (( obj == null) ? 0 : obj.hashCode());
             hashCodeComputation.append(""result = prime * result + (("").append(fieldName).append("" == null) ? 0 : "")
                      .append(fieldName).append("".hashCode());"");
          }
       }
 
-      if (fieldEqualityChecks.length() < 1 || hashCodeComputation.length() < 1)
+      if (hashCodeComputation.length() < 1)
       {
          throw new IllegalArgumentException(
                   ""A failure was detected when generating the equals and hashCode methods. Verify the type and modifiers of the provided fields."");
       }
-
-      StringBuilder typeCheckAndAssignment = new StringBuilder();
-      String klassName = clazz.getName();
-
-      // if (!(obj instanceof Type)) {
-      //    return false;
-      // }
-      // Type other = (Type) obj;
-      typeCheckAndAssignment.append(""if (!(obj instanceof "").append(klassName).append("")) {"");
-      typeCheckAndAssignment.append("" return false;}"");
-      typeCheckAndAssignment.append(klassName).append("" other = ("").append(klassName).append("") obj;"");
-
-      clazz.addMethod(
-               ""public boolean equals(Object obj) { "" +
-                        ""if (this == obj) { return true; } "" +
-                        superEqualsCheck.toString() +
-                        typeCheckAndAssignment.toString() +
-                        fieldEqualityChecks.toString() +
-                        ""return true; "" +
-                        ""}"")
-               .addAnnotation(Override.class);
-
       clazz.addMethod(
                ""public int hashCode() { "" +
                         ""final int prime = 31;"" +
@@ -259,7 +310,7 @@
                         ""return result; }"")
                .addAnnotation(Override.class);
    }
-
+   
    /**
     * Create a <i>toString</i> implementation using all the fields in this class
     *
"
89a1758c6d5caee4737d0abfbff2986547e7b644,George Gastaldi,Refactory.java,MODIFY,"createHashCodeAndEquals -> [JavaClassSource clazz, FieldSource fields] | [JavaClassSource clazz]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
index b30edc2..563435c 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
@@ -93,6 +93,24 @@
     */
    public static void createHashCodeAndEquals(final JavaClassSource clazz, final FieldSource<?>... fields)
    {
+      createEquals(clazz,fields);
+      createHashCode(clazz,fields);
+   }
+   
+   /**
+    * Create an <i>equals</i> implementation for the given class and fields. Callers must verify that
+    * the types of the fields override the default identity based equals implementation. No warnings are
+    * issued in an event where the field type uses the implementation of java.lang.Object.
+    *
+    * This method ignores static fields for generating the equals method, since they are ideally not meant
+    * to be used in these cases. Although transient fields could also be ignored, they are not since there is no
+    * mechanism to convey warnings (not errors) in this case.
+    *
+    * @param clazz class to be changed
+    * @param fields fields to be used in the equals/hashCode methods
+    */
+   public static void createEquals(final JavaClassSource clazz, final FieldSource<?>... fields)
+   {
       if (clazz == null)
       {
          throw new IllegalArgumentException(""The provided class cannot be null."");
@@ -103,15 +121,119 @@
       }
 
       String superEqualsCheck = """";
-      String defaultHashcode = ""int result = 1;"";
       if (!clazz.getSuperType().equals(""java.lang.Object""))
       {
          superEqualsCheck = ""if (!super.equals(obj)) { return false;} "";
+      }
+      StringBuilder fieldEqualityChecks = new StringBuilder();
+      for (FieldSource<?> field : fields)
+      {
+         if (field == null)
+         {
+            throw new IllegalArgumentException(""A supplied field was null. The equals and hashCode computation will be aborted."");
+         }
+         if (field.isStatic())
+         {
+            throw new IllegalArgumentException(""A static field was detected. The equals and hashCode computation will be aborted."");
+         }
+
+         String fieldName = field.getName();
+         if (field.getType().isArray())
+         {
+            fieldEqualityChecks.append(""if (!Arrays.equals("").append(fieldName).append("", other."").append(fieldName)
+                     .append("")) {"");
+            fieldEqualityChecks.append("" return false; }"");
+         }
+         else if (field.getType().isPrimitive())
+         {
+            if (field.getType().isType(""float""))
+            {
+               fieldEqualityChecks.append(""if (Float.floatToIntBits("").append(fieldName)
+                        .append("") != Float.floatToIntBits(other."").append(fieldName)
+                        .append("")) { "");
+               fieldEqualityChecks.append("" return false;"");
+               fieldEqualityChecks.append(""} "");
+
+            }
+            else if (field.getType().isType(""double""))
+            {
+               fieldEqualityChecks.append(""if (Double.doubleToLongBits("").append(fieldName)
+                        .append("") != Double.doubleToLongBits(other."").append(fieldName)
+                        .append("")) { "");
+               fieldEqualityChecks.append("" return false;"");
+               fieldEqualityChecks.append(""} "");
+            }
+            else
+            {
+               fieldEqualityChecks.append(""if ("").append(fieldName).append("" != other."").append(fieldName)
+                        .append("") { "");
+               fieldEqualityChecks.append("" return false;"");
+               fieldEqualityChecks.append(""} "");
+            }
+         }
+         else
+         {
+            fieldEqualityChecks.append(""if ("").append(fieldName).append("" != null) { "");
+            fieldEqualityChecks.append("" if(!"").append(fieldName).append("".equals("");
+            fieldEqualityChecks.append(""other."").append(fieldName);
+            fieldEqualityChecks.append("")) { return false;} } "");
+         }
+      }
+
+      if (fieldEqualityChecks.length() < 1 )
+      {
+         throw new IllegalArgumentException(
+                  ""A failure was detected when generating the equals and hashCode methods. Verify the type and modifiers of the provided fields."");
+      }
+
+      StringBuilder typeCheckAndAssignment = new StringBuilder();
+      String klassName = clazz.getName();
+
+      typeCheckAndAssignment.append(""if (!(obj instanceof "").append(klassName).append("")) {"");
+      typeCheckAndAssignment.append("" return false;}"");
+      typeCheckAndAssignment.append(klassName).append("" other = ("").append(klassName).append("") obj;"");
+
+      clazz.addMethod(
+               ""public boolean equals(Object obj) { "" +
+                        ""if (this == obj) { return true; } "" +
+                        superEqualsCheck.toString() +
+                        typeCheckAndAssignment.toString() +
+                        fieldEqualityChecks.toString() +
+                        ""return true; "" +
+                        ""}"")
+               .addAnnotation(Override.class);
+   }
+   
+   /**
+    * Create a <i>hashCode</i> implementation for the given class and fields. Callers must verify that
+    * the types of the fields override the default identity based hashcode implementation. No warnings are
+    * issued in an event where the field type uses the implementation of java.lang.Object.
+    *
+    * This method ignores static fields for generating the equals method, since they are ideally not meant
+    * to be used in these cases. Although transient fields could also be ignored, they are not since there is no
+    * mechanism to convey warnings (not errors) in this case.
+    *
+    * @param clazz class to be changed
+    * @param fields fields to be used in the equals/hashCode methods
+    */
+   public static void createHashCode(final JavaClassSource clazz, final FieldSource<?>... fields)
+   {
+      if (clazz == null)
+      {
+         throw new IllegalArgumentException(""The provided class cannot be null."");
+      }
+      if (fields == null || fields.length < 1)
+      {
+         throw new IllegalArgumentException(""The provided fields cannot be null or empty."");
+      }
+
+      String defaultHashcode = ""int result = 1;"";
+      if (!clazz.getSuperType().equals(""java.lang.Object""))
+      {
          defaultHashcode = ""int result = super.hashCode();"";
       }
 
       boolean isTempFieldCreated = false;
-      StringBuilder fieldEqualityChecks = new StringBuilder();
       StringBuilder hashCodeComputation = new StringBuilder();
       for (FieldSource<?> field : fields)
       {
@@ -127,47 +249,17 @@
          String fieldName = field.getName();
          if (field.getType().isArray())
          {
-            // if(!Arrays.equals(array, other.array)) {
-            //    return false;
-            // }
-            fieldEqualityChecks.append(""if (!Arrays.equals("").append(fieldName).append("", other."").append(fieldName)
-                     .append("")) {"");
-            fieldEqualityChecks.append("" return false; }"");
-
-            // result = prime * result + Arrays.hashCode(array);
             hashCodeComputation.append(""result = prime * result + Arrays.hashCode("").append(fieldName).append("");"");
          }
          else if (field.getType().isPrimitive())
          {
             if (field.getType().isType(""float""))
             {
-               // if(Float.floatToIntBits(floatValue) != Float.floatToIntBits(other.floatValue)) {
-               //   return false;
-               // }
-               fieldEqualityChecks.append(""if (Float.floatToIntBits("").append(fieldName)
-                        .append("") != Float.floatToIntBits(other."").append(fieldName)
-                        .append("")) { "");
-               fieldEqualityChecks.append("" return false;"");
-               fieldEqualityChecks.append(""} "");
-
-               // result = prime * result + Float.floatToIntBits(floatValue);
                hashCodeComputation.append(""result = prime * result + "").append(""Float.floatToIntBits("")
                         .append(fieldName).append("");"");
             }
             else if (field.getType().isType(""double""))
             {
-               // if(Double.doubleToLongBits(doubleValue) != Double.doubleToLongBits(other.doubleValue)) {
-               //   return false;
-               // }
-               fieldEqualityChecks.append(""if (Double.doubleToLongBits("").append(fieldName)
-                        .append("") != Double.doubleToLongBits(other."").append(fieldName)
-                        .append("")) { "");
-               fieldEqualityChecks.append("" return false;"");
-               fieldEqualityChecks.append(""} "");
-
-               // long temp;
-               // temp = Double.doubleToLongBits(doubleValue);
-               // result = prime * result + (int) (temp ^ (temp >>> 32));
                if (!isTempFieldCreated)
                {
                   hashCodeComputation.append(""long temp;"");
@@ -178,14 +270,6 @@
             }
             else
             {
-               // if(value != other.value) {
-               //   return false;
-               // }
-               fieldEqualityChecks.append(""if ("").append(fieldName).append("" != other."").append(fieldName)
-                        .append("") { "");
-               fieldEqualityChecks.append("" return false;"");
-               fieldEqualityChecks.append(""} "");
-
                if (field.getType().isType(""long""))
                {
                   // result = prime * result + (int) (longValue ^ (longValue >>> 32));
@@ -208,49 +292,16 @@
          }
          else
          {
-            // if(value != null) {
-            //    if(!value.equals(other.value)) {
-            //       return false;
-            //    }
-            // }
-            fieldEqualityChecks.append(""if ("").append(fieldName).append("" != null) { "");
-            fieldEqualityChecks.append("" if(!"").append(fieldName).append("".equals("");
-            fieldEqualityChecks.append(""other."").append(fieldName);
-            fieldEqualityChecks.append("")) { return false;} } "");
-
-            // result = prime * result + (( obj == null) ? 0 : obj.hashCode());
             hashCodeComputation.append(""result = prime * result + (("").append(fieldName).append("" == null) ? 0 : "")
                      .append(fieldName).append("".hashCode());"");
          }
       }
 
-      if (fieldEqualityChecks.length() < 1 || hashCodeComputation.length() < 1)
+      if (hashCodeComputation.length() < 1)
       {
          throw new IllegalArgumentException(
                   ""A failure was detected when generating the equals and hashCode methods. Verify the type and modifiers of the provided fields."");
       }
-
-      StringBuilder typeCheckAndAssignment = new StringBuilder();
-      String klassName = clazz.getName();
-
-      // if (!(obj instanceof Type)) {
-      //    return false;
-      // }
-      // Type other = (Type) obj;
-      typeCheckAndAssignment.append(""if (!(obj instanceof "").append(klassName).append("")) {"");
-      typeCheckAndAssignment.append("" return false;}"");
-      typeCheckAndAssignment.append(klassName).append("" other = ("").append(klassName).append("") obj;"");
-
-      clazz.addMethod(
-               ""public boolean equals(Object obj) { "" +
-                        ""if (this == obj) { return true; } "" +
-                        superEqualsCheck.toString() +
-                        typeCheckAndAssignment.toString() +
-                        fieldEqualityChecks.toString() +
-                        ""return true; "" +
-                        ""}"")
-               .addAnnotation(Override.class);
-
       clazz.addMethod(
                ""public int hashCode() { "" +
                         ""final int prime = 31;"" +
@@ -259,7 +310,7 @@
                         ""return result; }"")
                .addAnnotation(Override.class);
    }
-
+   
    /**
     * Create a <i>toString</i> implementation using all the fields in this class
     *
"
9c3fcecf1fb4a2d806662550e456f705a9841f80,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index ac314e9..a2fa39f 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -230,7 +230,7 @@
    @Override
    public boolean isReturnTypeVoid()
    {
-      return getReturnType().isType(Void.TYPE);
+      return getReturnType() == null || getReturnType().isType(Void.TYPE);
    }
 
    @Override
"
a4a859c9899476d06117b49491d221eab35f26d3,Daniel Cunha,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
index 7a5495b..69ad6f5 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
@@ -1,3 +1,9 @@
+/*
+ * Copyright 2014 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Eclipse Public License version 1.0, available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */
 package org.jboss.forge.roaster.model.impl;
 
 import java.util.ArrayList;
"
1102e5e0f81f4ead4a3a6baac553f020fd96f825,George Gastaldi,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
index 7a5495b..69ad6f5 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
@@ -1,3 +1,9 @@
+/*
+ * Copyright 2014 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Eclipse Public License version 1.0, available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */
 package org.jboss.forge.roaster.model.impl;
 
 import java.util.ArrayList;
"
d107d57dc13ffa0c2b01c5ec9d133a49eee5074e,George Gastaldi,Annotation.java,MODIFY,"getEnumValue -> [Class type, String name] | [Class type]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/Annotation.java b/api/src/main/java/org/jboss/forge/roaster/model/Annotation.java
index 66de53d..21dfc22 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/Annotation.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/Annotation.java
@@ -54,6 +54,10 @@
 
    Annotation<O> getAnnotationValue(String name);
 
+   Annotation<O>[] getAnnotationArrayValue();
+
+   Annotation<O>[] getAnnotationArrayValue(String name);
+
    Class<?> getClassValue();
 
    Class<?> getClassValue(String name);
"
d107d57dc13ffa0c2b01c5ec9d133a49eee5074e,George Gastaldi,AnnotationImpl.java,MODIFY,getLiteralValue -> [String name] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
index a630c08..c0c939a 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
@@ -626,6 +626,34 @@
    }
 
    @Override
+   public AnnotationSource<O>[] getAnnotationArrayValue()
+   {
+      return getAnnotationArrayValue(DEFAULT_VALUE);
+   }
+   
+   @Override
+   public AnnotationSource<O>[] getAnnotationArrayValue(String name)
+   {
+      final Expression expr = getElementValueExpression(name);
+      if (expr instanceof ArrayInitializer)
+      {
+         final List<AnnotationSource<O>> results = new ArrayList<AnnotationSource<O>>();
+         @SuppressWarnings(""unchecked"")
+         final List<Expression> arrayElements = ((ArrayInitializer) expr).expressions();
+         for (Expression arrayElement : arrayElements)
+         {
+            final AnnotationSource<O> instance = new Nested(this, arrayElement);
+            results.add(instance);
+         }
+         @SuppressWarnings(""unchecked"")
+         final AnnotationSource<O>[] result = new AnnotationSource[results.size()];
+         return results.toArray(result);
+      }
+      return null;
+   }
+
+   
+   @Override
    public <E extends Enum<E>> E[] getEnumArrayValue(Class<E> type)
    {
       return getEnumArrayValue(type, DEFAULT_VALUE);
"
3bd7cbe6f4b4231398a0b91a848189946c84bb80,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index a2fa39f..fbcb582 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -523,8 +523,8 @@
 
       SimpleName simpleName = method.getAST().newSimpleName(name);
 
-      List list = (List) method.getStructuralProperty(MethodDeclaration.THROWN_EXCEPTIONS_PROPERTY);
-      list.add(simpleName);
+      List list = (List) method.getStructuralProperty(MethodDeclaration.THROWN_EXCEPTION_TYPES_PROPERTY);
+      list.add(method.getAST().newSimpleType(simpleName));
 
       return this;
    }
@@ -533,7 +533,7 @@
    public List<String> getThrownExceptions()
    {
       ArrayList<String> result = new ArrayList<String>();
-      List<?> list = (List<?>) method.getStructuralProperty(MethodDeclaration.THROWN_EXCEPTIONS_PROPERTY);
+      List<?> list = (List<?>) method.getStructuralProperty(MethodDeclaration.THROWN_EXCEPTION_TYPES_PROPERTY);
 
       for (Object object : list)
       {
@@ -552,7 +552,7 @@
    @Override
    public MethodSource<O> removeThrows(final String type)
    {
-      List<?> list = (List<?>) method.getStructuralProperty(MethodDeclaration.THROWN_EXCEPTIONS_PROPERTY);
+      List<?> list = (List<?>) method.getStructuralProperty(MethodDeclaration.THROWN_EXCEPTION_TYPES_PROPERTY);
 
       for (Object object : list)
       {
"
3bd7cbe6f4b4231398a0b91a848189946c84bb80,George Gastaldi,TypeImpl.java,MODIFY,isType -> [String name] | [Class type],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/TypeImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/TypeImpl.java
index b42bfd3..e1f3a2f 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/TypeImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/TypeImpl.java
@@ -90,7 +90,7 @@
 
       if (type.isArrayType())
       {
-         type = ((ArrayType) type).getComponentType();
+         type = ((ArrayType) type).getElementType();
       }
 
       if (type instanceof ParameterizedType)
@@ -117,7 +117,7 @@
    {
       if (type.isArrayType())
       {
-         return ((ArrayType) type).getComponentType().isParameterizedType();
+         return ((ArrayType) type).getElementType().isParameterizedType();
       }
       return type.isParameterizedType();
    }
@@ -127,7 +127,7 @@
    {
       if (type.isArrayType())
       {
-         return ((ArrayType) type).getComponentType().isPrimitiveType();
+         return ((ArrayType) type).getElementType().isPrimitiveType();
       }
       return type.isPrimitiveType();
    }
@@ -137,7 +137,7 @@
    {
       if (type.isArrayType())
       {
-         return ((ArrayType) type).getComponentType().isQualifiedType();
+         return ((ArrayType) type).getElementType().isQualifiedType();
       }
       return type.isQualifiedType();
    }
@@ -147,7 +147,7 @@
    {
       if (type.isArrayType())
       {
-         return ((ArrayType) type).getComponentType().isWildcardType();
+         return ((ArrayType) type).getElementType().isWildcardType();
       }
       return type.isWildcardType();
    }
"
3bd7cbe6f4b4231398a0b91a848189946c84bb80,George Gastaldi,JavaParserImpl.java,MODIFY,parse -> [String data] | [InputStream data],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/spi/JavaParserImpl.java b/impl/src/main/java/org/jboss/forge/roaster/spi/JavaParserImpl.java
index 58cf04c..f34ca14 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/spi/JavaParserImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/spi/JavaParserImpl.java
@@ -69,11 +69,11 @@
    private JavaType<?> parse(final String data)
    {
       Document document = new Document(data);
-      ASTParser parser = ASTParser.newParser(AST.JLS4);
+      ASTParser parser = ASTParser.newParser(AST.JLS8);
 
       parser.setSource(document.get().toCharArray());
       Map options = JavaCore.getOptions();
-      options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_7);
+      options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_8);
       options.put(CompilerOptions.OPTION_Encoding, ""UTF-8"");
       parser.setCompilerOptions(options);
 
"
c44e400361fa3238e8dd72d63de0daf3dc12b809,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index fbcb582..7b482b8 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -175,15 +175,14 @@
    @SuppressWarnings(""unchecked"")
    public String getBody()
    {
-      String result = """";
-
+      StringBuilder result = new StringBuilder();
       List<Statement> statements = (List<Statement>) method.getBody().getStructuralProperty(Block.STATEMENTS_PROPERTY);
       for (Statement statement : statements)
       {
-         result += statement + "" "";
+         result.append(statement).append("" "");
       }
 
-      return result;
+      return result.toString().trim();
    }
 
    @Override
"
3c8aa81d62341fe8bd62d02433ff762f0b395c43,George Gastaldi,JavaParserImpl.java,MODIFY,parse -> [String data] | [InputStream data],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/spi/JavaParserImpl.java b/impl/src/main/java/org/jboss/forge/roaster/spi/JavaParserImpl.java
index f34ca14..1ee5596 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/spi/JavaParserImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/spi/JavaParserImpl.java
@@ -39,7 +39,6 @@
 import org.jboss.forge.roaster.model.source.JavaInterfaceSource;
 import org.jboss.forge.roaster.model.source.JavaPackageInfoSource;
 import org.jboss.forge.roaster.model.source.JavaSource;
-import org.jboss.forge.roaster.spi.JavaParser;
 
 /**
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
@@ -52,7 +51,8 @@
    {
       try
       {
-         char[] source = Util.getInputStreamAsCharArray(data, data.available(), ""ISO8859_1"");
+         String encoding = System.getProperty(""file.encoding"", ""ISO8859_1"");
+         char[] source = Util.getInputStreamAsCharArray(data, data.available(), encoding);
          return parse(new String(source));
       }
       catch (IOException e)
@@ -146,16 +146,16 @@
       {
          if (type.isAssignableFrom(JavaClassSource.class))
             return (T) parse(""public class JavaClass { }"");
-   
+
          if (type.isAssignableFrom(JavaEnumSource.class))
             return (T) parse(""public enum JavaEnum { }"");
-   
+
          if (type.isAssignableFrom(JavaAnnotationSource.class))
             return (T) parse(""public @interface JavaAnnotation { }"");
-   
+
          if (type.isAssignableFrom(JavaInterfaceSource.class))
             return (T) parse(""public interface JavaInterface { }"");
-   
+
          if (type.isAssignableFrom(JavaPackageInfoSource.class))
             return (T) parse(""package org.example;"");
       }
"
92a4210907120097f4880b03116652fc84742feb,Adam Wyłuda,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
index 94dfe96..8e2bea6 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
@@ -372,7 +372,7 @@
       if (resolvers == null)
       {
          resolvers = new ArrayList<WildcardImportResolver>();
-         for (WildcardImportResolver r : resolvers)
+         for (WildcardImportResolver r : loader)
          {
             resolvers.add(r);
          }
"
30188c42ee96271384554eaf18eca08bdefa571c,George Gastaldi,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
index 94dfe96..8e2bea6 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
@@ -372,7 +372,7 @@
       if (resolvers == null)
       {
          resolvers = new ArrayList<WildcardImportResolver>();
-         for (WildcardImportResolver r : resolvers)
+         for (WildcardImportResolver r : loader)
          {
             resolvers.add(r);
          }
"
4a8729b7667b5edff4a2a5e59ff6f96bf0d04e86,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index 7b482b8..c393ea9 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -668,7 +668,10 @@
    @Override
    public ParameterSource<O> addParameter(String type, String name)
    {
-      getOrigin().addImport(type);
+      if (!Types.isBasicType(type))
+      {
+         getOrigin().addImport(type);
+      }
       String stub = ""public class Stub { public void method( "" + Types.toSimpleName(type) + "" "" + name + "" ) {} }"";
       JavaClassSource temp = (JavaClassSource) Roaster.parse(stub);
       List<MethodSource<JavaClassSource>> methods = temp.getMethods();
"
47e58d6211e245dcde9d95352cf897625ffd1a55,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index c393ea9..614bd52 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -668,11 +668,11 @@
    @Override
    public ParameterSource<O> addParameter(String type, String name)
    {
-      if (!Types.isBasicType(type))
+      if (getOrigin().requiresImport(type))
       {
          getOrigin().addImport(type);
       }
-      String stub = ""public class Stub { public void method( "" + Types.toSimpleName(type) + "" "" + name + "" ) {} }"";
+      String stub = ""public class Stub { public void method( "" + Types.toSimpleName(Types.stripGenerics(type)) + "" "" + name + "" ) {} }"";
       JavaClassSource temp = (JavaClassSource) Roaster.parse(stub);
       List<MethodSource<JavaClassSource>> methods = temp.getMethods();
       List<VariableDeclaration> astParameters = ((MethodDeclaration) methods.get(0).getInternal()).parameters();
"
47e58d6211e245dcde9d95352cf897625ffd1a55,George Gastaldi,MethodSignatureTest.java,MODIFY,"assertVisibility -> [String visibility, MethodSource method] | [Visibility visibility, MethodSource method]","diff --git a/impl/src/test/java/org/jboss/forge/test/roaster/model/MethodSignatureTest.java b/impl/src/test/java/org/jboss/forge/test/roaster/model/MethodSignatureTest.java
index b412191..21ff021 100644
--- a/impl/src/test/java/org/jboss/forge/test/roaster/model/MethodSignatureTest.java
+++ b/impl/src/test/java/org/jboss/forge/test/roaster/model/MethodSignatureTest.java
@@ -107,11 +107,13 @@
       MethodSource<JavaClassSource> method = javaClass.addMethod().setPublic().setName(""doSomething"").setReturnType(Integer.TYPE).setBody(""return 0;"");
       method.addParameter(Integer.TYPE, ""initValue"");
       method.addParameter(int.class,""intValueClass"");
+      method.addParameter(int[].class,""intValueClassArray"");
       Assert.assertEquals(1, javaClass.getMethods().size());
       List<ParameterSource<JavaClassSource>> parameters = javaClass.getMethods().get(0).getParameters();
-      Assert.assertEquals(2, parameters.size());
+      Assert.assertEquals(3, parameters.size());
       Assert.assertTrue(parameters.get(0).getType().isPrimitive());
       Assert.assertTrue(parameters.get(1).getType().isPrimitive());
+      Assert.assertTrue(parameters.get(2).getType().isArray());
    }
 
    private void assertVisibility(Visibility visibility, MethodSource<JavaClassSource> method)
"
1bfdf1a204b16182e04074332422049d8d101ce7,George Gastaldi,MethodSource.java,MODIFY,setReturnType -> [JavaType type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/MethodSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/MethodSource.java
index d6ef1cf..c54597e 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/MethodSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/MethodSource.java
@@ -104,4 +104,21 @@
     * Remove a parameter from this method
     */
    MethodSource<O> removeParameter(ParameterSource<O> parameter);
+
+   /**
+    * Remove a parameter with the specified {@link Class} type and name from this method
+    */
+   MethodSource<O> removeParameter(Class<?> type, String name);
+
+   /**
+    * Remove a parameter with the specified type and name from this method
+    */
+   MethodSource<O> removeParameter(String type, String name);
+
+   /**
+    * Remove a parameter with the specified {@link JavaType} type and name to this method
+    */
+   MethodSource<O> removeParameter(JavaType<?> type, String name);
+
+
 }
\ No newline at end of file
"
1bfdf1a204b16182e04074332422049d8d101ce7,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index 614bd52..bb7bc32 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -672,7 +672,8 @@
       {
          getOrigin().addImport(type);
       }
-      String stub = ""public class Stub { public void method( "" + Types.toSimpleName(Types.stripGenerics(type)) + "" "" + name + "" ) {} }"";
+      String stub = ""public class Stub { public void method( "" + Types.toSimpleName(Types.stripGenerics(type)) + "" ""
+               + name + "" ) {} }"";
       JavaClassSource temp = (JavaClassSource) Roaster.parse(stub);
       List<MethodSource<JavaClassSource>> methods = temp.getMethods();
       List<VariableDeclaration> astParameters = ((MethodDeclaration) methods.get(0).getInternal()).parameters();
@@ -693,4 +694,62 @@
       method.parameters().remove(parameter.getInternal());
       return this;
    }
+
+   @Override
+   public MethodSource<O> removeParameter(Class<?> type, String name)
+   {
+      ParameterSource<O> parameter = null;
+      for (ParameterSource<O> param : getParameters())
+      {
+         if (param.getType().isType(type) && param.getName().equals(name))
+         {
+            parameter = param;
+            break;
+         }
+      }
+      if (parameter != null)
+      {
+         removeParameter(parameter);
+      }
+      return this;
+   }
+
+   @Override
+   public MethodSource<O> removeParameter(JavaType<?> type, String name)
+   {
+      ParameterSource<O> parameter = null;
+      for (ParameterSource<O> param : getParameters())
+      {
+         if (param.getType().isType(type.getCanonicalName()) && param.getName().equals(name))
+         {
+            parameter = param;
+            break;
+         }
+      }
+      if (parameter != null)
+      {
+         removeParameter(parameter);
+      }
+      return this;
+   }
+
+   @Override
+   public MethodSource<O> removeParameter(String type, String name)
+   {
+      ParameterSource<O> parameter = null;
+      for (ParameterSource<O> param : getParameters())
+      {
+         if (param.getType().isType(type) && param.getName().equals(name))
+         {
+            parameter = param;
+            break;
+         }
+      }
+      if (parameter != null)
+      {
+         removeParameter(parameter);
+      }
+      return this;
+   }
+
 }
"
d2f27e447dd886b62ab725fe57502f7a57bd576b,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index bb7bc32..c6da277 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -720,7 +720,7 @@
       ParameterSource<O> parameter = null;
       for (ParameterSource<O> param : getParameters())
       {
-         if (param.getType().isType(type.getCanonicalName()) && param.getName().equals(name))
+         if (param.getType().isType(type.getQualifiedName()) && param.getName().equals(name))
          {
             parameter = param;
             break;
"
70f87e1d48628f2c54bcb4a7d814c617bc3c5087,George Gastaldi,PropertyHolderSource.java,MODIFY,"addProperty -> [String type, String name] | [Class type, String name]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/PropertyHolderSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/PropertyHolderSource.java
index 3ca0497..1ac5244 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/PropertyHolderSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/PropertyHolderSource.java
@@ -9,6 +9,7 @@
 
 import java.util.List;
 
+import org.jboss.forge.roaster.model.JavaType;
 import org.jboss.forge.roaster.model.Property;
 import org.jboss.forge.roaster.model.PropertyHolder;
 
@@ -26,6 +27,16 @@
    PropertySource<O> addProperty(String type, String name);
 
    /**
+    * Add a new {@link Property} declaration to this {@link O} instance.
+    */
+   PropertySource<O> addProperty(Class<?> type, String name);
+
+   /**
+    * Add a new {@link Property} declaration to this {@link O} instance.
+    */
+   PropertySource<O> addProperty(JavaType<?> type, String name);
+
+   /**
     * Remove the given {@link Property} from this {@link O} instance, if it exists; otherwise, do nothing.
     */
    PropertyHolderSource<O> removeProperty(Property<O> property);
"
70f87e1d48628f2c54bcb4a7d814c617bc3c5087,George Gastaldi,AbstractJavaSourceMemberHolder.java,MODIFY,addField -> [Field field] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
index ce8e355..6313c32 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
@@ -310,7 +310,8 @@
             Iterator<ParameterSource<O>> localParams = local.getParameters().iterator();
             for (Parameter<? extends JavaType<?>> methodParam : method.getParameters())
             {
-               if (localParams.hasNext() && Strings.areEqual(localParams.next().getType().getName(), methodParam.getType().getName()))
+               if (localParams.hasNext()
+                        && Strings.areEqual(localParams.next().getType().getName(), methodParam.getType().getName()))
                {
                   continue;
                }
@@ -516,6 +517,18 @@
    }
 
    @Override
+   public PropertySource<O> addProperty(Class<?> type, String name)
+   {
+      return addProperty(type.getName(), name);
+   }
+
+   @Override
+   public PropertySource<O> addProperty(JavaType<?> type, String name)
+   {
+      return addProperty(type.getQualifiedName(), name);
+   }
+
+   @Override
    public final AbstractJavaSourceMemberHolder<O> removeProperty(Property<O> property)
    {
       if (hasProperty(property))
"
70f87e1d48628f2c54bcb4a7d814c617bc3c5087,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index c6da277..daeb57e 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -248,7 +248,14 @@
    @Override
    public MethodSource<O> setReturnType(final String typeName)
    {
-      String stub = ""public class Stub { public "" + typeName + "" method() {} }"";
+      String simpleName = Types.toSimpleName(typeName);
+
+      O origin = getOrigin();
+      if (!Strings.areEqual(typeName, simpleName) && origin.requiresImport(typeName))
+      {
+         origin.addImport(typeName);
+      }
+      String stub = ""public class Stub { public "" + simpleName + "" method() {} }"";
       JavaClassSource temp = (JavaClassSource) Roaster.parse(stub);
       List<MethodSource<JavaClassSource>> methods = temp.getMethods();
       org.eclipse.jdt.core.dom.Type returnType = ((MethodDeclaration) methods.get(0).getInternal()).getReturnType2();
"
70f87e1d48628f2c54bcb4a7d814c617bc3c5087,George Gastaldi,PropertyImpl.java,MODIFY,setType -> [JavaType entity] | [Class clazz],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/PropertyImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/PropertyImpl.java
index 70c85ed..a23d37a 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/PropertyImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/PropertyImpl.java
@@ -25,6 +25,7 @@
 import org.jboss.forge.roaster.model.source.FieldSource;
 import org.jboss.forge.roaster.model.source.JavaSource;
 import org.jboss.forge.roaster.model.source.MethodSource;
+import org.jboss.forge.roaster.model.source.ParameterSource;
 import org.jboss.forge.roaster.model.source.PropertyHolderSource;
 import org.jboss.forge.roaster.model.source.PropertySource;
 import org.jboss.forge.roaster.model.util.Assert;
@@ -339,7 +340,9 @@
       }
       if (mutator != null)
       {
-         mutator.setParameters(String.format(""%s %s"", type, getName()));
+         for (ParameterSource<O> param : mutator.getParameters())
+            mutator.removeParameter(param);
+         mutator.addParameter(type, getName());
       }
       if (field != null)
       {
@@ -450,7 +453,7 @@
    @Override
    public int hashCode()
    {
-      // compatible with Java 6: 
+      // compatible with Java 6:
       return Arrays.hashCode(new Object[] { getOrigin(), getName() });
    }
 
"
76d71cc931c62a2eed57fa62a16de604830c4f39,George Gastaldi,Annotation.java,MODIFY,"getEnumValue -> [Class type, String name] | [Class type]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/Annotation.java b/api/src/main/java/org/jboss/forge/roaster/model/Annotation.java
index 21dfc22..beb4b0f 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/Annotation.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/Annotation.java
@@ -65,4 +65,6 @@
    Class<?>[] getClassArrayValue();
 
    Class<?>[] getClassArrayValue(String name);
+
+   boolean isTypeElementDefined(String name);
 }
"
76d71cc931c62a2eed57fa62a16de604830c4f39,George Gastaldi,AnnotationImpl.java,MODIFY,getLiteralValue -> [String name] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
index c0c939a..918ea81 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
@@ -62,6 +62,7 @@
             ((MemberValuePair) oldNode.getParent()).setValue(newNode);
          }
       }
+
    }
 
    private static final String DEFAULT_VALUE = ""value"";
@@ -878,4 +879,17 @@
          return null;
       }
    }
+
+    public boolean isTypeElementDefined( String name )
+    {
+        List<ValuePair> values = getValues();
+        for (ValuePair pair : values)
+        {
+            if ( pair.getName().equals( name ) )
+            {
+                return true;
+            }
+        }
+        return false;
+    }
 }
"
ff28cd6dc27e8fbb18c8b47ad4982620155b2c10,"Lincoln Baxter, III",Formatter.java,MODIFY,format -> [String source] | [File source],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java b/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
index b1f18d9..48266d9 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
@@ -8,9 +8,18 @@
 package org.jboss.forge.roaster.model.util;
 
 import java.io.BufferedInputStream;
+import java.io.BufferedOutputStream;
+import java.io.ByteArrayInputStream;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
 import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.util.Map.Entry;
 import java.util.Properties;
 
+import org.eclipse.jdt.core.JavaCore;
 import org.eclipse.jdt.core.ToolFactory;
 import org.eclipse.jdt.core.formatter.CodeFormatter;
 import org.eclipse.jface.text.BadLocationException;
@@ -18,32 +27,96 @@
 import org.eclipse.jface.text.IDocument;
 import org.eclipse.text.edits.TextEdit;
 import org.jboss.forge.roaster.model.source.JavaClassSource;
+import org.jboss.forge.roaster.spi.Streams;
 
 /**
+ * Formats Java source code.
+ * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
 public abstract class Formatter
 {
+   /**
+    * Format the given Java source {@link File}, using the built in code format style.
+    * 
+    * @throws IOException When the file cannot be read or written
+    */
+   public static void format(File source) throws IOException
+   {
+      format(null, source);
+   }
+
+   /**
+    * Format the given Java source {@link File} using the given Eclipse code format properties {@link File}.
+    * 
+    * @throws IOException When the file cannot be read or written, or the preferences cannot be read.
+    */
+   public static void format(File prefs, File source) throws IOException
+   {
+      Properties options = readConfig(prefs);
+      if (options == null)
+         options = readConfigInternal(""org.eclipse.jdt.core.prefs"");
+
+      InputStream in = null;
+      OutputStream out = null;
+      try
+      {
+         in = new BufferedInputStream(new FileInputStream(source));
+         String content = Streams.toString(in);
+         String formatted = format(options, content);
+
+         out = new BufferedOutputStream(new FileOutputStream(source));
+         Streams.write(new ByteArrayInputStream(formatted.getBytes()), out);
+      }
+      finally
+      {
+         Streams.closeQuietly(in);
+         Streams.closeQuietly(out);
+      }
+
+   }
+
+   /**
+    * Format the given {@link JavaClassSource}, using the built in code format style.
+    */
    public static String format(JavaClassSource javaClass)
    {
       return format(javaClass.toString());
    }
-   
-   public static String format(String source)
-   {
-       // TODO locate user's eclipse project settings, use those if we can.
-       Properties options = readConfig(""org.eclipse.jdt.core.prefs"");
 
-       final CodeFormatter codeFormatter = ToolFactory.createCodeFormatter(options);
-       return ensureCorrectNewLines(formatFile(source, codeFormatter));
+   /**
+    * Format the given {@link JavaClassSource}, using the given Eclipse code format {@link Properties}.
+    */
+   public static String format(Properties prefs, JavaClassSource javaClass)
+   {
+      return format(prefs, javaClass.toString());
    }
 
-   private static String formatFile(String contents, CodeFormatter codeFormatter)
+   /**
+    * Format the given {@link String} as a Java source file, using the built in code format style.
+    */
+   public static String format(String source)
+   {
+      Properties options = readConfigInternal(""org.eclipse.jdt.core.prefs"");
+      return format(options, source);
+   }
+
+   /**
+    * Format the given {@link String} as a Java source type, using the given Eclipse code format {@link Properties}.
+    */
+   public static String format(Properties prefs, String source)
+   {
+      final CodeFormatter codeFormatter = ToolFactory.createCodeFormatter(prefs);
+      return _format(source, codeFormatter);
+   }
+
+   private static String _format(String contents, CodeFormatter codeFormatter)
    {
       IDocument doc = new Document(contents);
       try
       {
-         TextEdit edit = codeFormatter.format(CodeFormatter.K_COMPILATION_UNIT, contents, 0, contents.length(), 0, null);
+         TextEdit edit = codeFormatter.format(CodeFormatter.K_COMPILATION_UNIT,
+                  contents, 0, contents.length(), 0, null);
          if (edit != null)
          {
             edit.apply(doc);
@@ -58,48 +131,83 @@
          throw new RuntimeException(e);
       }
 
-      return doc.get();
+      return ensureCorrectNewLines(doc.get());
    }
 
-   private static Properties readConfig(String filename)
+   private static Properties readConfig(File prefs) throws IOException
    {
-      BufferedInputStream stream = null;
+      if (prefs != null)
+      {
+         InputStream stream = new BufferedInputStream(new FileInputStream(prefs));
+         try
+         {
+            Properties config = parseConfig(stream);
+            Properties modified = new Properties();
+            for (Entry<Object, Object> property : config.entrySet())
+            {
+               String shadePackage = JavaCore.class.getPackage().getName().replaceAll(""org\\.eclipse.*$"", """");
+               modified.put(shadePackage + property.getKey(), property.getValue());
+            }
+
+            return modified;
+         }
+         catch (IOException e)
+         {
+            throw new IOException(""Error reading preferences file: [""
+                     + prefs.getAbsolutePath() + ""]"", e);
+         }
+         finally
+         {
+            Streams.closeQuietly(stream);
+         }
+      }
+
+      return null;
+   }
+
+   private static Properties readConfigInternal(String filename)
+   {
+      InputStream stream = new BufferedInputStream(org.jboss.forge.roaster.model.util.Formatter.class
+               .getResourceAsStream(filename));
       try
       {
-         stream = new BufferedInputStream(Formatter.class.getResourceAsStream(filename));
+         return parseConfig(stream);
+      }
+      catch (IOException e)
+      {
+         throw new RuntimeException(""Error reading internal configuration: [""
+                  + filename + ""]"", e);
+      }
+      finally
+      {
+         Streams.closeQuietly(stream);
+      }
+   }
+
+   private static Properties parseConfig(InputStream stream)
+            throws IOException
+   {
+      try
+      {
          final Properties formatterOptions = new Properties();
          formatterOptions.load(stream);
          return formatterOptions;
       }
-      catch (IOException e)
-      {
-         throw new RuntimeException(e);
-      }
       finally
       {
-         if (stream != null)
-         {
-            try
-            {
-               stream.close();
-            }
-            catch (IOException e)
-            {
-               /* ignore */
-            }
-         }
+         Streams.closeQuietly(stream);
       }
    }
-   
-   
-   private static String ensureCorrectNewLines(String documentString) 
+
+   private static String ensureCorrectNewLines(String content)
    {
-       String newLine = System.getProperty(""line.separator"");
-       
-       if (documentString.indexOf(""\n"") != -1 && documentString.indexOf(newLine) == -1)       
-           return documentString.replaceAll(""\n"", newLine);
-       
-       return documentString;
+      String newLine = System.getProperty(""line.separator"");
+
+      if (content.indexOf(""\n"") != -1
+               && content.indexOf(newLine) == -1)
+         return content.replaceAll(""\n"", newLine);
+
+      return content;
    }
 
 }
"
c7938633067920af2772fc4ad6b8bb0bc40d9e66,George Gastaldi,Refactory.java,MODIFY,"createHashCodeAndEquals -> [JavaClassSource clazz, FieldSource fields] | [JavaClassSource clazz]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
index 563435c..d76f713 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
@@ -140,7 +140,7 @@
          String fieldName = field.getName();
          if (field.getType().isArray())
          {
-            fieldEqualityChecks.append(""if (!Arrays.equals("").append(fieldName).append("", other."").append(fieldName)
+            fieldEqualityChecks.append(""if (!java.util.Arrays.equals("").append(fieldName).append("", other."").append(fieldName)
                      .append("")) {"");
             fieldEqualityChecks.append("" return false; }"");
          }
@@ -249,7 +249,7 @@
          String fieldName = field.getName();
          if (field.getType().isArray())
          {
-            hashCodeComputation.append(""result = prime * result + Arrays.hashCode("").append(fieldName).append("");"");
+            hashCodeComputation.append(""result = prime * result + java.util.Arrays.hashCode("").append(fieldName).append("");"");
          }
          else if (field.getType().isPrimitive())
          {
"
51edf4c190d3973dc8f434f0ee2c29567b658c80,George Gastaldi,Bootstrap.java,MODIFY,"format -> [List files, String configFile, boolean recursive] | [List files, String configFile, boolean recursive, boolean quiet]","diff --git a/dist/src/main/java/org/jboss/forge/roaster/Bootstrap.java b/dist/src/main/java/org/jboss/forge/roaster/Bootstrap.java
index 15e5a0e..b4d31ea 100644
--- a/dist/src/main/java/org/jboss/forge/roaster/Bootstrap.java
+++ b/dist/src/main/java/org/jboss/forge/roaster/Bootstrap.java
@@ -49,49 +49,51 @@
 
    private void run(List<String> args) throws IOException
    {
-      if (args.size() > 0)
+      if (args.isEmpty() || args.contains(""--help"") || args.contains(""-h""))
       {
-         if (args.contains(""--help"") || args.contains(""-h""))
-         {
-            System.out.println(help());
-            return;
-         }
-
-         boolean recursive = false;
-         String configFile = null;
-         List<File> files = new ArrayList<File>();
-         for (int i = 0; i < args.size(); i++)
-         {
-            String arg = args.get(i);
-            if (""--config"".equals(arg) || ""-c"".equals(arg))
-            {
-               configFile = args.get(++i);
-               if (!new File(configFile).isFile())
-               {
-                  System.out.println(""roaster: configuration file ["" + configFile + ""] does not exist."");
-                  return;
-               }
-            }
-            else if (""--recursive"".equals(arg) || ""-r"".equals(arg))
-            {
-               recursive = true;
-            }
-            else if (new File(arg).exists())
-            {
-               files.add(new File(arg));
-            }
-            else
-            {
-               System.out.println(""roaster: no such file: '"" + arg + ""'"");
-               System.out.println(""Try 'roaster --help' for more information."");
-            }
-         }
-
-         format(files, configFile, recursive);
+         System.out.println(help());
+         return;
       }
+      boolean quiet = false;
+      boolean recursive = false;
+      String configFile = null;
+      List<File> files = new ArrayList<File>();
+      for (int i = 0; i < args.size(); i++)
+      {
+         String arg = args.get(i);
+         if (""--config"".equals(arg) || ""-c"".equals(arg))
+         {
+            configFile = args.get(++i);
+            if (!new File(configFile).isFile())
+            {
+               System.err.println(""roaster: configuration file ["" + configFile + ""] does not exist."");
+               return;
+            }
+         }
+         else if (""--recursive"".equals(arg) || ""-r"".equals(arg))
+         {
+            recursive = true;
+         }
+         else if (""--quiet"".equals(arg) || ""-q"".equals(arg))
+         {
+            quiet = true;
+         }
+         else if (new File(arg).exists())
+         {
+            files.add(new File(arg));
+         }
+         else
+         {
+            System.err.println(""roaster: no such file: '"" + arg + ""'"");
+            System.err.println(""Try 'roaster --help' for more information."");
+         }
+      }
+
+      format(files, configFile, recursive, quiet);
    }
 
-   private void format(List<File> files, String configFile, final boolean recursive) throws IOException
+   private void format(List<File> files, String configFile, final boolean recursive, final boolean quiet)
+            throws IOException
    {
       for (File file : files)
       {
@@ -104,14 +106,26 @@
                {
                   return recursive || file.isFile();
                }
-            })), configFile, recursive);
+            })), configFile, recursive, quiet);
          }
          else if (file.getName().endsWith("".java""))
          {
+            if (!quiet)
+               System.out.printf(""Formatting %s "", file);
             if (configFile != null)
+            {
+               if (!quiet)
+                  System.out.printf(""using %s ... "", configFile);
                Formatter.format(new File(configFile), file);
+            }
             else
+            {
+               if (!quiet)
+                  System.out.printf(""... "");
                Formatter.format(file);
+            }
+            if (!quiet)
+               System.out.println(""OK!"");
          }
       }
    }
@@ -131,6 +145,9 @@
       sb.append(""FILES... \n"");
       sb.append(""\t specify one or more space-separated files or directories to format \n"");
       sb.append(""\n"");
+      sb.append(""-q, --quiet\n"");
+      sb.append(""\t do not display any output \n"");
+      sb.append(""\n"");
       sb.append(""-h, --help\n"");
       sb.append(""\t display this help and exit \n"");
       return sb.toString();
"
d6e5461f23ac6942c2ca3f742ee8fe54787d631b,George Gastaldi,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
index 8e2bea6..7c5eb4c 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
@@ -63,7 +63,6 @@
    protected final BodyDeclaration body;
    protected final JavaSource<?> enclosingType;
 
-   public static ServiceLoader<WildcardImportResolver> loader = ServiceLoader.load(WildcardImportResolver.class);
    private static List<WildcardImportResolver> resolvers;
 
    protected AbstractJavaSource(JavaSource<?> enclosingType, final Document document, final CompilationUnit unit,
@@ -372,7 +371,7 @@
       if (resolvers == null)
       {
          resolvers = new ArrayList<WildcardImportResolver>();
-         for (WildcardImportResolver r : loader)
+         for (WildcardImportResolver r : ServiceLoader.load(WildcardImportResolver.class, getClass().getClassLoader()))
          {
             resolvers.add(r);
          }
"
d6e5461f23ac6942c2ca3f742ee8fe54787d631b,George Gastaldi,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
index 69ad6f5..07203eb 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
@@ -61,7 +61,6 @@
    protected final ASTNode pkg;
    protected final JavaSource<?> enclosingType;
 
-   public static ServiceLoader<WildcardImportResolver> loader = ServiceLoader.load(WildcardImportResolver.class);
    private static List<WildcardImportResolver> resolvers;
 
    @Override
@@ -364,7 +363,7 @@
       if (resolvers == null)
       {
          resolvers = new ArrayList<WildcardImportResolver>();
-         for (WildcardImportResolver r : resolvers)
+         for (WildcardImportResolver r : ServiceLoader.load(WildcardImportResolver.class, getClass().getClassLoader()))
          {
             resolvers.add(r);
          }
"
8633b93d41475163d58f5c4a920f5a01d5fa56e2,George Gastaldi,MethodSource.java,MODIFY,setReturnType -> [JavaType type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/MethodSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/MethodSource.java
index c54597e..162501a 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/MethodSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/MethodSource.java
@@ -35,7 +35,7 @@
 
    /**
     * Toggle this method as a constructor. If true, and the name of the {@link Method} is not the same as the name of
-    * its parent {@link JavaClass} , update the name of the to match.
+    * its parent {@link JavaClass} , update the name of the method to match.
     */
    MethodSource<O> setConstructor(final boolean constructor);
 
"
5392e54664720327ed8f43116df7514bfd2b8ba7,George Gastaldi,FieldImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
index 2e78c59..c5247a3 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
@@ -15,9 +15,6 @@
 import org.eclipse.jdt.core.dom.Expression;
 import org.eclipse.jdt.core.dom.FieldDeclaration;
 import org.eclipse.jdt.core.dom.Modifier.ModifierKeyword;
-import org.eclipse.jdt.core.dom.Name;
-import org.eclipse.jdt.core.dom.PrimitiveType;
-import org.eclipse.jdt.core.dom.PrimitiveType.Code;
 import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
 import org.jboss.forge.roaster.Roaster;
 import org.jboss.forge.roaster.model.Annotation;
@@ -29,6 +26,7 @@
 import org.jboss.forge.roaster.model.ast.ModifierAccessor;
 import org.jboss.forge.roaster.model.source.AnnotationSource;
 import org.jboss.forge.roaster.model.source.FieldSource;
+import org.jboss.forge.roaster.model.source.JavaClassSource;
 import org.jboss.forge.roaster.model.source.JavaSource;
 import org.jboss.forge.roaster.model.util.Strings;
 import org.jboss.forge.roaster.model.util.Types;
@@ -339,43 +337,15 @@
          origin.addImport(typeName);
       }
 
-      Code primitive = PrimitiveType.toCode(typeName);
+      String stub = ""public class Stub { "" + simpleName + "" field; }"";
+      JavaClassSource temp = (JavaClassSource) Roaster.parse(stub);
+      List<FieldSource<JavaClassSource>> fields = temp.getFields();
+      org.eclipse.jdt.core.dom.Type fieldType = ((FieldDeclaration) ((VariableDeclarationFragment) fields.get(0)
+               .getInternal()).getParent()).getType();
 
-      org.eclipse.jdt.core.dom.Type type = null;
-      if (primitive != null)
-      {
-         type = ast.newPrimitiveType(primitive);
-      }
-      else
-      {
-         if (!origin.requiresImport(typeName))
-         {
-            if (Types.isArray(typeName))
-            {
-               String arrayType = Types.stripArray(typeName);
-               int arrayDimension = Types.getArrayDimension(typeName);
-               if (Types.isPrimitive(arrayType))
-               {
-                  type = ast.newArrayType(ast.newPrimitiveType(PrimitiveType.toCode(arrayType)), arrayDimension);
-               }
-               else
-               {
-                  type = ast.newArrayType(ast.newSimpleType(ast.newSimpleName(arrayType)), arrayDimension);
-               }
-            }
-            else
-            {
-               type = ast.newSimpleType(ast.newSimpleName(simpleName));
-            }
-         }
-         else
-         {
-            String[] className = Types.tokenizeClassName(typeName);
-            Name name = ast.newName(className);
-            type = ast.newSimpleType(name);
-         }
-      }
-      field.setType(type);
+      fieldType = (org.eclipse.jdt.core.dom.Type) ASTNode.copySubtree(field.getAST(), fieldType);
+      field.setType(fieldType);
+
       return this;
    }
 
@@ -434,7 +404,7 @@
          if (other.field != null)
             return false;
       }
-      else if (!field.equals(other.field ))
+      else if (!field.equals(other.field))
          return false;
       if (fragment == null)
       {
"
3918a08b47e1105ace13a8760b475667064f46f8,George Gastaldi,FieldImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
index c5247a3..a29a272 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
@@ -366,7 +366,7 @@
    @Override
    public FieldSource<O> setLiteralInitializer(final String value)
    {
-      String stub = ""public class Stub { private String stub = "" + value + "" }"";
+      String stub = ""public class Stub { private Object stub = "" + value + "" }"";
       JavaClass<?> temp = Roaster.parse(JavaClass.class, stub);
       VariableDeclarationFragment tempFrag = (VariableDeclarationFragment) temp.getFields().get(0).getInternal();
       fragment.setInitializer((Expression) ASTNode.copySubtree(ast, tempFrag.getInitializer()));
"
15d56fdcbc295905274c6e8eb6011697793bd856,George Gastaldi,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
index 7c5eb4c..495c2ab 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
@@ -21,6 +21,7 @@
 import org.eclipse.jdt.core.dom.CompilationUnit;
 import org.eclipse.jdt.core.dom.EnumDeclaration;
 import org.eclipse.jdt.core.dom.ImportDeclaration;
+import org.eclipse.jdt.core.dom.Javadoc;
 import org.eclipse.jdt.core.dom.Modifier.ModifierKeyword;
 import org.eclipse.jdt.core.dom.PackageDeclaration;
 import org.eclipse.jdt.core.dom.TypeDeclaration;
@@ -38,6 +39,7 @@
 import org.jboss.forge.roaster.model.ast.TypeDeclarationFinderVisitor;
 import org.jboss.forge.roaster.model.source.AnnotationSource;
 import org.jboss.forge.roaster.model.source.Import;
+import org.jboss.forge.roaster.model.source.JavaDocSource;
 import org.jboss.forge.roaster.model.source.JavaSource;
 import org.jboss.forge.roaster.model.source.TypeHolderSource;
 import org.jboss.forge.roaster.model.util.Formatter;
@@ -868,6 +870,31 @@
       return getNestedTypes();
    }
 
+   @Override
+   public JavaDocSource<O> getJavaDoc()
+   {
+      Javadoc javadoc = body.getJavadoc();
+      if (javadoc == null)
+      {
+         javadoc = body.getAST().newJavadoc();
+         body.setJavadoc(javadoc);
+      }
+      return new JavaDocImpl<O>((O) this, javadoc);
+   }
+
+   @Override
+   public O removeJavaDoc()
+   {
+      body.setJavadoc(null);
+      return (O) this;
+   }
+
+   @Override
+   public boolean hasJavaDoc()
+   {
+      return body.getJavadoc() != null;
+   }
+
    private List<AbstractTypeDeclaration> getNestedDeclarations(BodyDeclaration body)
    {
       TypeDeclarationFinderVisitor typeDeclarationFinder = new TypeDeclarationFinderVisitor();
"
15d56fdcbc295905274c6e8eb6011697793bd856,George Gastaldi,EnumConstantBodyImpl.java,MODIFY,addImport -> [JavaType type] | [String className],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
index 4c06c9e..cf4b4b4 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
@@ -19,6 +19,7 @@
 import org.eclipse.jdt.core.dom.CompilationUnit;
 import org.eclipse.jdt.core.dom.EnumConstantDeclaration;
 import org.eclipse.jdt.core.dom.FieldDeclaration;
+import org.eclipse.jdt.core.dom.Javadoc;
 import org.eclipse.jdt.core.dom.MethodDeclaration;
 import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
 import org.eclipse.jface.text.Document;
@@ -38,6 +39,7 @@
 import org.jboss.forge.roaster.model.source.FieldSource;
 import org.jboss.forge.roaster.model.source.Import;
 import org.jboss.forge.roaster.model.source.JavaClassSource;
+import org.jboss.forge.roaster.model.source.JavaDocSource;
 import org.jboss.forge.roaster.model.source.JavaEnumSource;
 import org.jboss.forge.roaster.model.source.JavaSource;
 import org.jboss.forge.roaster.model.source.MemberSource;
@@ -883,4 +885,34 @@
       return getNestedTypes();
    }
 
+   @Override
+   public JavaDocSource<Body> getJavaDoc()
+   {
+      BodyDeclaration body = getFirstBodyDeclaration();
+      Javadoc javadoc = body.getJavadoc();
+      if (javadoc == null)
+      {
+         javadoc = body.getAST().newJavadoc();
+         body.setJavadoc(javadoc);
+      }
+      return new JavaDocImpl<Body>(this, javadoc);
+   }
+
+   @Override
+   public Body removeJavaDoc()
+   {
+      getFirstBodyDeclaration().setJavadoc(null);
+      return this;
+   }
+
+   @Override
+   public boolean hasJavaDoc()
+   {
+      return getFirstBodyDeclaration().getJavadoc() != null;
+   }
+
+   private BodyDeclaration getFirstBodyDeclaration()
+   {
+      return (BodyDeclaration) getBody().bodyDeclarations().get(0);
+   }
 }
"
15d56fdcbc295905274c6e8eb6011697793bd856,George Gastaldi,FieldImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
index a29a272..7918775 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
@@ -14,6 +14,7 @@
 import org.eclipse.jdt.core.dom.ASTNode;
 import org.eclipse.jdt.core.dom.Expression;
 import org.eclipse.jdt.core.dom.FieldDeclaration;
+import org.eclipse.jdt.core.dom.Javadoc;
 import org.eclipse.jdt.core.dom.Modifier.ModifierKeyword;
 import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
 import org.jboss.forge.roaster.Roaster;
@@ -27,6 +28,7 @@
 import org.jboss.forge.roaster.model.source.AnnotationSource;
 import org.jboss.forge.roaster.model.source.FieldSource;
 import org.jboss.forge.roaster.model.source.JavaClassSource;
+import org.jboss.forge.roaster.model.source.JavaDocSource;
 import org.jboss.forge.roaster.model.source.JavaSource;
 import org.jboss.forge.roaster.model.util.Strings;
 import org.jboss.forge.roaster.model.util.Types;
@@ -428,4 +430,28 @@
       return modifiers.hasModifier(field, ModifierKeyword.VOLATILE_KEYWORD);
    }
 
+   @Override
+   public boolean hasJavaDoc()
+   {
+      return field.getJavadoc() != null;
+   }
+
+   @Override
+   public FieldSource<O> removeJavaDoc()
+   {
+      field.setJavadoc(null);
+      return this;
+   }
+
+   @Override
+   public JavaDocSource<FieldSource<O>> getJavaDoc()
+   {
+      Javadoc javadoc = field.getJavadoc();
+      if (javadoc == null)
+      {
+         javadoc = field.getAST().newJavadoc();
+         field.setJavadoc(javadoc);
+      }
+      return new JavaDocImpl<FieldSource<O>>(this, javadoc);
+   }
 }
"
15d56fdcbc295905274c6e8eb6011697793bd856,George Gastaldi,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
index 07203eb..937b8a7 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
@@ -12,9 +12,9 @@
 import java.util.ServiceLoader;
 
 import org.eclipse.jdt.core.compiler.IProblem;
-import org.eclipse.jdt.core.dom.ASTNode;
 import org.eclipse.jdt.core.dom.CompilationUnit;
 import org.eclipse.jdt.core.dom.ImportDeclaration;
+import org.eclipse.jdt.core.dom.Javadoc;
 import org.eclipse.jdt.core.dom.Modifier.ModifierKeyword;
 import org.eclipse.jdt.core.dom.PackageDeclaration;
 import org.eclipse.jface.text.Document;
@@ -28,6 +28,7 @@
 import org.jboss.forge.roaster.model.ast.ModifierAccessor;
 import org.jboss.forge.roaster.model.source.AnnotationSource;
 import org.jboss.forge.roaster.model.source.Import;
+import org.jboss.forge.roaster.model.source.JavaDocSource;
 import org.jboss.forge.roaster.model.source.JavaPackageInfoSource;
 import org.jboss.forge.roaster.model.source.JavaSource;
 import org.jboss.forge.roaster.model.util.Formatter;
@@ -37,6 +38,15 @@
 
 public class JavaPackageInfoImpl implements JavaPackageInfoSource
 {
+   protected final Document document;
+   protected final CompilationUnit unit;
+   protected final PackageDeclaration pkg;
+   protected final JavaSource<?> enclosingType;
+
+   private final AnnotationAccessor<JavaPackageInfoSource, JavaPackageInfoSource> annotations = new AnnotationAccessor<JavaPackageInfoSource, JavaPackageInfoSource>();
+   private final ModifierAccessor modifiers = new ModifierAccessor();
+
+   private static List<WildcardImportResolver> resolvers;
 
    public JavaPackageInfoImpl(JavaSource<?> enclosingType, Document document,
             CompilationUnit unit, PackageDeclaration pkg)
@@ -53,16 +63,6 @@
       return ""package-info"";
    }
 
-   private final AnnotationAccessor<JavaPackageInfoSource, JavaPackageInfoSource> annotations = new AnnotationAccessor<JavaPackageInfoSource, JavaPackageInfoSource>();
-   private final ModifierAccessor modifiers = new ModifierAccessor();
-
-   protected final Document document;
-   protected final CompilationUnit unit;
-   protected final ASTNode pkg;
-   protected final JavaSource<?> enclosingType;
-
-   private static List<WildcardImportResolver> resolvers;
-
    @Override
    public JavaSource<?> getEnclosingType()
    {
@@ -721,4 +721,28 @@
       return Collections.emptyList();
    }
 
+   @Override
+   public JavaDocSource<JavaPackageInfoSource> getJavaDoc()
+   {
+      Javadoc javadoc = pkg.getJavadoc();
+      if (javadoc == null)
+      {
+         javadoc = pkg.getAST().newJavadoc();
+         pkg.setJavadoc(javadoc);
+      }
+      return new JavaDocImpl<JavaPackageInfoSource>(this, javadoc);
+   }
+
+   @Override
+   public JavaPackageInfoSource removeJavaDoc()
+   {
+      pkg.setJavadoc(null);
+      return this;
+   }
+
+   @Override
+   public boolean hasJavaDoc()
+   {
+      return pkg.getJavadoc() != null;
+   }
 }
"
15d56fdcbc295905274c6e8eb6011697793bd856,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index daeb57e..02e5a59 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -15,6 +15,7 @@
 import org.eclipse.jdt.core.dom.ASTNode;
 import org.eclipse.jdt.core.dom.Block;
 import org.eclipse.jdt.core.dom.CompilationUnit;
+import org.eclipse.jdt.core.dom.Javadoc;
 import org.eclipse.jdt.core.dom.MethodDeclaration;
 import org.eclipse.jdt.core.dom.Modifier.ModifierKeyword;
 import org.eclipse.jdt.core.dom.SimpleName;
@@ -32,6 +33,7 @@
 import org.jboss.forge.roaster.model.ast.ModifierAccessor;
 import org.jboss.forge.roaster.model.source.AnnotationSource;
 import org.jboss.forge.roaster.model.source.JavaClassSource;
+import org.jboss.forge.roaster.model.source.JavaDocSource;
 import org.jboss.forge.roaster.model.source.JavaSource;
 import org.jboss.forge.roaster.model.source.MethodSource;
 import org.jboss.forge.roaster.model.source.ParameterSource;
@@ -759,4 +761,28 @@
       return this;
    }
 
+   @Override
+   public boolean hasJavaDoc()
+   {
+      return method.getJavadoc() != null;
+   }
+
+   @Override
+   public MethodSource<O> removeJavaDoc()
+   {
+      method.setJavadoc(null);
+      return this;
+   }
+
+   @Override
+   public JavaDocSource<MethodSource<O>> getJavaDoc()
+   {
+      Javadoc javadoc = method.getJavadoc();
+      if (javadoc == null)
+      {
+         javadoc = method.getAST().newJavadoc();
+         method.setJavadoc(javadoc);
+      }
+      return new JavaDocImpl<MethodSource<O>>(this, javadoc);
+   }
 }
"
15d56fdcbc295905274c6e8eb6011697793bd856,George Gastaldi,ParameterImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/ParameterImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/ParameterImpl.java
index 2520611..afee53f 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/ParameterImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/ParameterImpl.java
@@ -80,7 +80,7 @@
    }
 
    @Override
-   public List<AnnotationSource<O> > getAnnotations()
+   public List<AnnotationSource<O>> getAnnotations()
    {
       return annotations.getAnnotations(this, param);
    }
@@ -126,5 +126,4 @@
    {
       return parent.getOrigin();
    }
-
 }
"
cc8e27d868fb7ad576db53da758b5cc0c8e38fcf,George Gastaldi,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
index 7c5eb4c..495c2ab 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
@@ -21,6 +21,7 @@
 import org.eclipse.jdt.core.dom.CompilationUnit;
 import org.eclipse.jdt.core.dom.EnumDeclaration;
 import org.eclipse.jdt.core.dom.ImportDeclaration;
+import org.eclipse.jdt.core.dom.Javadoc;
 import org.eclipse.jdt.core.dom.Modifier.ModifierKeyword;
 import org.eclipse.jdt.core.dom.PackageDeclaration;
 import org.eclipse.jdt.core.dom.TypeDeclaration;
@@ -38,6 +39,7 @@
 import org.jboss.forge.roaster.model.ast.TypeDeclarationFinderVisitor;
 import org.jboss.forge.roaster.model.source.AnnotationSource;
 import org.jboss.forge.roaster.model.source.Import;
+import org.jboss.forge.roaster.model.source.JavaDocSource;
 import org.jboss.forge.roaster.model.source.JavaSource;
 import org.jboss.forge.roaster.model.source.TypeHolderSource;
 import org.jboss.forge.roaster.model.util.Formatter;
@@ -868,6 +870,31 @@
       return getNestedTypes();
    }
 
+   @Override
+   public JavaDocSource<O> getJavaDoc()
+   {
+      Javadoc javadoc = body.getJavadoc();
+      if (javadoc == null)
+      {
+         javadoc = body.getAST().newJavadoc();
+         body.setJavadoc(javadoc);
+      }
+      return new JavaDocImpl<O>((O) this, javadoc);
+   }
+
+   @Override
+   public O removeJavaDoc()
+   {
+      body.setJavadoc(null);
+      return (O) this;
+   }
+
+   @Override
+   public boolean hasJavaDoc()
+   {
+      return body.getJavadoc() != null;
+   }
+
    private List<AbstractTypeDeclaration> getNestedDeclarations(BodyDeclaration body)
    {
       TypeDeclarationFinderVisitor typeDeclarationFinder = new TypeDeclarationFinderVisitor();
"
cc8e27d868fb7ad576db53da758b5cc0c8e38fcf,George Gastaldi,EnumConstantBodyImpl.java,MODIFY,addImport -> [JavaType type] | [String className],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
index 4c06c9e..cf4b4b4 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
@@ -19,6 +19,7 @@
 import org.eclipse.jdt.core.dom.CompilationUnit;
 import org.eclipse.jdt.core.dom.EnumConstantDeclaration;
 import org.eclipse.jdt.core.dom.FieldDeclaration;
+import org.eclipse.jdt.core.dom.Javadoc;
 import org.eclipse.jdt.core.dom.MethodDeclaration;
 import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
 import org.eclipse.jface.text.Document;
@@ -38,6 +39,7 @@
 import org.jboss.forge.roaster.model.source.FieldSource;
 import org.jboss.forge.roaster.model.source.Import;
 import org.jboss.forge.roaster.model.source.JavaClassSource;
+import org.jboss.forge.roaster.model.source.JavaDocSource;
 import org.jboss.forge.roaster.model.source.JavaEnumSource;
 import org.jboss.forge.roaster.model.source.JavaSource;
 import org.jboss.forge.roaster.model.source.MemberSource;
@@ -883,4 +885,34 @@
       return getNestedTypes();
    }
 
+   @Override
+   public JavaDocSource<Body> getJavaDoc()
+   {
+      BodyDeclaration body = getFirstBodyDeclaration();
+      Javadoc javadoc = body.getJavadoc();
+      if (javadoc == null)
+      {
+         javadoc = body.getAST().newJavadoc();
+         body.setJavadoc(javadoc);
+      }
+      return new JavaDocImpl<Body>(this, javadoc);
+   }
+
+   @Override
+   public Body removeJavaDoc()
+   {
+      getFirstBodyDeclaration().setJavadoc(null);
+      return this;
+   }
+
+   @Override
+   public boolean hasJavaDoc()
+   {
+      return getFirstBodyDeclaration().getJavadoc() != null;
+   }
+
+   private BodyDeclaration getFirstBodyDeclaration()
+   {
+      return (BodyDeclaration) getBody().bodyDeclarations().get(0);
+   }
 }
"
cc8e27d868fb7ad576db53da758b5cc0c8e38fcf,George Gastaldi,FieldImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
index a29a272..7918775 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
@@ -14,6 +14,7 @@
 import org.eclipse.jdt.core.dom.ASTNode;
 import org.eclipse.jdt.core.dom.Expression;
 import org.eclipse.jdt.core.dom.FieldDeclaration;
+import org.eclipse.jdt.core.dom.Javadoc;
 import org.eclipse.jdt.core.dom.Modifier.ModifierKeyword;
 import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
 import org.jboss.forge.roaster.Roaster;
@@ -27,6 +28,7 @@
 import org.jboss.forge.roaster.model.source.AnnotationSource;
 import org.jboss.forge.roaster.model.source.FieldSource;
 import org.jboss.forge.roaster.model.source.JavaClassSource;
+import org.jboss.forge.roaster.model.source.JavaDocSource;
 import org.jboss.forge.roaster.model.source.JavaSource;
 import org.jboss.forge.roaster.model.util.Strings;
 import org.jboss.forge.roaster.model.util.Types;
@@ -428,4 +430,28 @@
       return modifiers.hasModifier(field, ModifierKeyword.VOLATILE_KEYWORD);
    }
 
+   @Override
+   public boolean hasJavaDoc()
+   {
+      return field.getJavadoc() != null;
+   }
+
+   @Override
+   public FieldSource<O> removeJavaDoc()
+   {
+      field.setJavadoc(null);
+      return this;
+   }
+
+   @Override
+   public JavaDocSource<FieldSource<O>> getJavaDoc()
+   {
+      Javadoc javadoc = field.getJavadoc();
+      if (javadoc == null)
+      {
+         javadoc = field.getAST().newJavadoc();
+         field.setJavadoc(javadoc);
+      }
+      return new JavaDocImpl<FieldSource<O>>(this, javadoc);
+   }
 }
"
cc8e27d868fb7ad576db53da758b5cc0c8e38fcf,George Gastaldi,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
index 07203eb..937b8a7 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
@@ -12,9 +12,9 @@
 import java.util.ServiceLoader;
 
 import org.eclipse.jdt.core.compiler.IProblem;
-import org.eclipse.jdt.core.dom.ASTNode;
 import org.eclipse.jdt.core.dom.CompilationUnit;
 import org.eclipse.jdt.core.dom.ImportDeclaration;
+import org.eclipse.jdt.core.dom.Javadoc;
 import org.eclipse.jdt.core.dom.Modifier.ModifierKeyword;
 import org.eclipse.jdt.core.dom.PackageDeclaration;
 import org.eclipse.jface.text.Document;
@@ -28,6 +28,7 @@
 import org.jboss.forge.roaster.model.ast.ModifierAccessor;
 import org.jboss.forge.roaster.model.source.AnnotationSource;
 import org.jboss.forge.roaster.model.source.Import;
+import org.jboss.forge.roaster.model.source.JavaDocSource;
 import org.jboss.forge.roaster.model.source.JavaPackageInfoSource;
 import org.jboss.forge.roaster.model.source.JavaSource;
 import org.jboss.forge.roaster.model.util.Formatter;
@@ -37,6 +38,15 @@
 
 public class JavaPackageInfoImpl implements JavaPackageInfoSource
 {
+   protected final Document document;
+   protected final CompilationUnit unit;
+   protected final PackageDeclaration pkg;
+   protected final JavaSource<?> enclosingType;
+
+   private final AnnotationAccessor<JavaPackageInfoSource, JavaPackageInfoSource> annotations = new AnnotationAccessor<JavaPackageInfoSource, JavaPackageInfoSource>();
+   private final ModifierAccessor modifiers = new ModifierAccessor();
+
+   private static List<WildcardImportResolver> resolvers;
 
    public JavaPackageInfoImpl(JavaSource<?> enclosingType, Document document,
             CompilationUnit unit, PackageDeclaration pkg)
@@ -53,16 +63,6 @@
       return ""package-info"";
    }
 
-   private final AnnotationAccessor<JavaPackageInfoSource, JavaPackageInfoSource> annotations = new AnnotationAccessor<JavaPackageInfoSource, JavaPackageInfoSource>();
-   private final ModifierAccessor modifiers = new ModifierAccessor();
-
-   protected final Document document;
-   protected final CompilationUnit unit;
-   protected final ASTNode pkg;
-   protected final JavaSource<?> enclosingType;
-
-   private static List<WildcardImportResolver> resolvers;
-
    @Override
    public JavaSource<?> getEnclosingType()
    {
@@ -721,4 +721,28 @@
       return Collections.emptyList();
    }
 
+   @Override
+   public JavaDocSource<JavaPackageInfoSource> getJavaDoc()
+   {
+      Javadoc javadoc = pkg.getJavadoc();
+      if (javadoc == null)
+      {
+         javadoc = pkg.getAST().newJavadoc();
+         pkg.setJavadoc(javadoc);
+      }
+      return new JavaDocImpl<JavaPackageInfoSource>(this, javadoc);
+   }
+
+   @Override
+   public JavaPackageInfoSource removeJavaDoc()
+   {
+      pkg.setJavadoc(null);
+      return this;
+   }
+
+   @Override
+   public boolean hasJavaDoc()
+   {
+      return pkg.getJavadoc() != null;
+   }
 }
"
cc8e27d868fb7ad576db53da758b5cc0c8e38fcf,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index daeb57e..02e5a59 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -15,6 +15,7 @@
 import org.eclipse.jdt.core.dom.ASTNode;
 import org.eclipse.jdt.core.dom.Block;
 import org.eclipse.jdt.core.dom.CompilationUnit;
+import org.eclipse.jdt.core.dom.Javadoc;
 import org.eclipse.jdt.core.dom.MethodDeclaration;
 import org.eclipse.jdt.core.dom.Modifier.ModifierKeyword;
 import org.eclipse.jdt.core.dom.SimpleName;
@@ -32,6 +33,7 @@
 import org.jboss.forge.roaster.model.ast.ModifierAccessor;
 import org.jboss.forge.roaster.model.source.AnnotationSource;
 import org.jboss.forge.roaster.model.source.JavaClassSource;
+import org.jboss.forge.roaster.model.source.JavaDocSource;
 import org.jboss.forge.roaster.model.source.JavaSource;
 import org.jboss.forge.roaster.model.source.MethodSource;
 import org.jboss.forge.roaster.model.source.ParameterSource;
@@ -759,4 +761,28 @@
       return this;
    }
 
+   @Override
+   public boolean hasJavaDoc()
+   {
+      return method.getJavadoc() != null;
+   }
+
+   @Override
+   public MethodSource<O> removeJavaDoc()
+   {
+      method.setJavadoc(null);
+      return this;
+   }
+
+   @Override
+   public JavaDocSource<MethodSource<O>> getJavaDoc()
+   {
+      Javadoc javadoc = method.getJavadoc();
+      if (javadoc == null)
+      {
+         javadoc = method.getAST().newJavadoc();
+         method.setJavadoc(javadoc);
+      }
+      return new JavaDocImpl<MethodSource<O>>(this, javadoc);
+   }
 }
"
cc8e27d868fb7ad576db53da758b5cc0c8e38fcf,George Gastaldi,ParameterImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/ParameterImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/ParameterImpl.java
index 2520611..afee53f 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/ParameterImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/ParameterImpl.java
@@ -80,7 +80,7 @@
    }
 
    @Override
-   public List<AnnotationSource<O> > getAnnotations()
+   public List<AnnotationSource<O>> getAnnotations()
    {
       return annotations.getAnnotations(this, param);
    }
@@ -126,5 +126,4 @@
    {
       return parent.getOrigin();
    }
-
 }
"
ddcc845196a3e5420f0fc11df49ddd4b1c4c1c34,George Gastaldi,AnnotationSource.java,MODIFY,getAnnotationValue -> [String name] | [],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationSource.java
index a1c612a..83a6705 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationSource.java
@@ -17,13 +17,18 @@
  */
 public interface AnnotationSource<O extends JavaType<O>> extends Annotation<O>
 {
-
    @Override
    AnnotationSource<O> getAnnotationValue();
 
    @Override
    AnnotationSource<O> getAnnotationValue(String name);
 
+   @Override
+   AnnotationSource<O>[] getAnnotationArrayValue();
+
+   @Override
+   AnnotationSource<O>[] getAnnotationArrayValue(String name);
+
    AnnotationSource<O> removeValue(String name);
 
    AnnotationSource<O> removeAllValues();
"
54b3ee938a23d00a0c8079c9b9aa2d0d6c73cc2a,George Gastaldi,JavaDocImpl.java,MODIFY,getTags -> [String tagName] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaDocImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaDocImpl.java
index 2b79193..c659c4c 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaDocImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaDocImpl.java
@@ -84,7 +84,7 @@
          {
             text.append(fragment);
          }
-         text.append(System.lineSeparator());
+         text.append(System.getProperty(""line.separator""));
       }
       return text.toString().trim();
    }
"
541ed35f2c7d6c3fcb32891ad2dca31d01bd8150,Matt Benson,AnnotationSource.java,MODIFY,getAnnotationValue -> [String name] | [],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationSource.java
index 83a6705..63b236f 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationSource.java
@@ -51,8 +51,17 @@
 
    AnnotationSource<O> setStringValue(String name, String value);
 
+   /**
+    * Set an annotation value.
+    * @return the nested {@link AnnotationSource}
+    */
    AnnotationSource<O> setAnnotationValue();
 
+   /**
+    * Set a named annotation value.
+    * @param name
+    * @return the nested {@link AnnotationSource}
+    */
    AnnotationSource<O> setAnnotationValue(String name);
 
    AnnotationSource<O> setClassValue(String name, Class<?> value);
"
3575bd1e4a7f0ce55a6db9282942d59edb16abf1,Matt Benson,AnnotationSource.java,MODIFY,getAnnotationValue -> [String name] | [],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationSource.java
index 63b236f..331f80d 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationSource.java
@@ -64,6 +64,40 @@
     */
    AnnotationSource<O> setAnnotationValue(String name);
 
+   /**
+    * Add an annotation value.
+    * @return the nested {@link AnnotationSource}
+    * @see #addAnnotationValue(String)
+    */
+   AnnotationSource<O> addAnnotationValue();
+
+   /**
+    * Add a named annotation value. When there is no existing annotation or annotation array value for {@code name}, a
+    * single unwrapped annotation value will be created (as with {@link #setAnnotationValue(String)}); otherwise an
+    * unwrapped annotation value will be promoted to an array and a new element will be added.
+    * 
+    * @param name
+    * @return the nested {@link AnnotationSource}
+    */
+   AnnotationSource<O> addAnnotationValue(String name);
+
+   /**
+    * Remove {@code element} from the array of values associated with the {@code ""value""} annotation element.
+    * 
+    * @param element
+    * @return this, fluently
+    */
+   AnnotationSource<O> removeAnnotationValue(Annotation<O> element);
+
+   /**
+    * Remove {@code element} from the array of values associated with the specified annotation element.
+    * 
+    * @param name
+    * @param element
+    * @return this, fluently
+    */
+   AnnotationSource<O> removeAnnotationValue(String name, Annotation<O> element);
+
    AnnotationSource<O> setClassValue(String name, Class<?> value);
 
    AnnotationSource<O> setClassValue(Class<?> value);
"
3575bd1e4a7f0ce55a6db9282942d59edb16abf1,Matt Benson,AnnotationImpl.java,MODIFY,getLiteralValue -> [String name] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
index 918ea81..47052cd 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2013 Red Hat, Inc. and/or its affiliates.
+ * Copyright 2012-2014 Red Hat, Inc. and/or its affiliates.
  *
  * Licensed under the Eclipse Public License version 1.0, available at
  * http://www.eclipse.org/legal/epl-v10.html
@@ -9,8 +9,11 @@
 import java.lang.reflect.Array;
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.HashSet;
+import java.util.Iterator;
 import java.util.List;
 import java.util.ListIterator;
+import java.util.Set;
 
 import org.eclipse.jdt.core.dom.AST;
 import org.eclipse.jdt.core.dom.ASTNode;
@@ -24,6 +27,7 @@
 import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
 import org.eclipse.jdt.core.dom.TypeLiteral;
 import org.jboss.forge.roaster.Roaster;
+import org.jboss.forge.roaster.model.Annotation;
 import org.jboss.forge.roaster.model.JavaClass;
 import org.jboss.forge.roaster.model.Type;
 import org.jboss.forge.roaster.model.ValuePair;
@@ -57,10 +61,16 @@
          {
             ((SingleMemberAnnotation) oldNode.getParent()).setValue(newNode);
          }
-         else
+         else if (oldNode.getParent() instanceof MemberValuePair)
          {
             ((MemberValuePair) oldNode.getParent()).setValue(newNode);
          }
+         else if (oldNode.getParent() instanceof ArrayInitializer)
+         {
+            @SuppressWarnings(""unchecked"")
+            final List<org.eclipse.jdt.core.dom.Annotation> expressions = ((ArrayInitializer) oldNode.getParent()).expressions();
+            expressions.set(expressions.indexOf(oldNode), newNode);
+         }
       }
 
    }
@@ -85,6 +95,7 @@
    {
       this.parent = parent;
       ast = ((ASTNode) parent.getInternal()).getAST();
+      Assert.notNull(internal, ""internal representation must not be null"");
       annotation = (org.eclipse.jdt.core.dom.Annotation) internal;
    }
 
@@ -125,13 +136,11 @@
    @Override
    public String getLiteralValue() throws IllegalStateException
    {
-      String result = null;
       if (isSingleValue())
       {
-         SingleMemberAnnotation sm = (SingleMemberAnnotation) annotation;
-         result = sm.getValue().toString();
+         return ((SingleMemberAnnotation) annotation).getValue().toString();
       }
-      else if (isNormal())
+      if (isNormal())
       {
          List<ValuePair> values = getValues();
          for (ValuePair pair : values)
@@ -139,18 +148,20 @@
             String name = pair.getName();
             if (DEFAULT_VALUE.equals(name))
             {
-               result = pair.getLiteralValue();
-               break;
+               return pair.getLiteralValue();
             }
          }
       }
-      return result;
+      return null;
    }
 
    @Override
    public String getLiteralValue(final String name)
    {
-      String result = null;
+      if (DEFAULT_VALUE.equals(name) && isSingleValue())
+      {
+         return getLiteralValue();
+      }
       if (isNormal())
       {
          for (Object v : ((NormalAnnotation) annotation).values())
@@ -160,17 +171,12 @@
                MemberValuePair pair = (MemberValuePair) v;
                if (pair.getName().getFullyQualifiedName().equals(name))
                {
-                  result = pair.getValue().toString();
-                  break;
+                  return pair.getValue().toString();
                }
             }
          }
       }
-      else if (DEFAULT_VALUE.equals(name) && isSingleValue())
-      {
-         return getLiteralValue();
-      }
-      return result;
+      return null;
    }
 
    @Override
@@ -479,15 +485,19 @@
 
    private void convertTo(final AnnotationType type)
    {
-      String value = this.getLiteralValue();
-      AnnotationImpl<O, T> na = new AnnotationImpl<O, T>(parent, type);
-      na.setName(getName());
-      replace(annotation, na.annotation);
-      annotation = na.annotation;
-
-      if (AnnotationType.MARKER != type && (value != null))
+      if (isMarker() && type != AnnotationType.MARKER || isSingleValue() && type != AnnotationType.SINGLE || isNormal()
+               && type != AnnotationType.NORMAL)
       {
-         setLiteralValue(value);
+         String value = this.getLiteralValue();
+         AnnotationImpl<O, T> na = new AnnotationImpl<O, T>(parent, type);
+         na.setName(getName());
+         replace(annotation, na.annotation);
+         annotation = na.annotation;
+
+         if (AnnotationType.MARKER != type && (value != null))
+         {
+            setLiteralValue(value);
+         }
       }
    }
 
@@ -585,6 +595,200 @@
    }
 
    @Override
+   public AnnotationSource<O> addAnnotationValue()
+   {
+      if (isNormal()) {
+         return addAnnotationValue(DEFAULT_VALUE);
+      }
+      if (isMarker())
+      {
+         convertTo(AnnotationType.SINGLE);
+      }
+      Expression expr = ((SingleMemberAnnotation) annotation).getValue();
+      if (expr instanceof org.eclipse.jdt.core.dom.Annotation)
+      {
+         // wrap a single annotation value:
+         ArrayInitializer arrayInit = ast.newArrayInitializer();
+         {
+            @SuppressWarnings({ ""unused"", ""unchecked"" })
+            boolean junk = arrayInit.expressions().add(ASTNode.copySubtree(ast, expr));
+         }
+         ((SingleMemberAnnotation) annotation).setValue(arrayInit);
+         expr = arrayInit;
+      }
+      if (expr instanceof ArrayInitializer)
+      {
+         // append to an annotation array:
+         final org.eclipse.jdt.core.dom.Annotation arrayElement = createAnnotation(parent, AnnotationType.MARKER);
+         if (((ArrayInitializer) expr).expressions().isEmpty())
+         {
+            ((SingleMemberAnnotation) annotation).setValue(arrayElement);
+         }
+         else
+         {
+            @SuppressWarnings({ ""unchecked"", ""unused"" })
+            boolean junk = ((ArrayInitializer) expr).expressions().add(arrayElement);
+         }
+         return new Nested(this, arrayElement);
+      }
+      // overwrite with a single annotation value:
+      return setAnnotationValue();
+   }
+
+   @Override
+   public AnnotationSource<O> addAnnotationValue(String name)
+   {
+      if (!isNormal())
+      {
+         if (DEFAULT_VALUE.equals(name))
+         {
+            return addAnnotationValue();
+         }
+         convertTo(AnnotationType.NORMAL);
+      }
+      MemberValuePair memberValuePair = null;
+      
+      for (Object value : ((NormalAnnotation) annotation).values())
+      {
+         if (value instanceof MemberValuePair && Strings.areEqual(name, ((MemberValuePair) value).getName().getIdentifier()))
+         {
+            memberValuePair = (MemberValuePair) value;
+            break;
+         }
+      }
+      if (memberValuePair != null)
+      {
+         Expression expr = memberValuePair.getValue();
+         if (expr instanceof org.eclipse.jdt.core.dom.Annotation)
+         {
+            // wrap a single annotation value:
+            ArrayInitializer arrayInit = ast.newArrayInitializer();
+            {
+               @SuppressWarnings({ ""unchecked"", ""unused"" })
+               boolean junk = arrayInit.expressions().add(ASTNode.copySubtree(ast, expr));
+            }
+            memberValuePair.setValue(arrayInit);
+            expr = arrayInit;
+         }
+         if (expr instanceof ArrayInitializer)
+         {
+            // append to an annotation array:
+            final org.eclipse.jdt.core.dom.Annotation arrayElement = createAnnotation(parent, AnnotationType.MARKER);
+            if (((ArrayInitializer) expr).expressions().isEmpty())
+            {
+               memberValuePair.setValue(arrayElement);
+            }
+            else
+            {
+               @SuppressWarnings({ ""unchecked"", ""unused"" })
+               boolean junk = ((ArrayInitializer) expr).expressions().add(arrayElement);
+            }
+            return new Nested(this, arrayElement);
+         }
+      }
+      // overwrite with a single annotation value:
+      return setAnnotationValue(name);
+   }
+
+   @Override
+   public AnnotationSource<O> removeAnnotationValue(Annotation<O> element)
+   {
+      Assert.notNull(element, ""Cannot remove null element"");
+
+      if (isSingleValue())
+      {
+         if (element.getInternal().equals(((SingleMemberAnnotation) annotation).getValue()))
+         {
+            convertTo(AnnotationType.MARKER);
+         }
+         else if (((SingleMemberAnnotation) annotation).getValue() instanceof ArrayInitializer)
+         {
+            final ArrayInitializer arrayInit = (ArrayInitializer) ((SingleMemberAnnotation) annotation).getValue();
+            if (arrayInit.expressions().remove(element.getInternal()))
+            {
+               if (arrayInit.expressions().isEmpty())
+               {
+                  convertTo(AnnotationType.MARKER);
+               }
+               else if (arrayInit.expressions().size() == 1)
+               {
+                  ((SingleMemberAnnotation) annotation).setValue((Expression) ASTNode.copySubtree(ast,
+                           (ASTNode) arrayInit.expressions().get(0)));
+               }
+            }
+         }
+         return this;
+      }
+      return removeAnnotationValue(DEFAULT_VALUE, element);
+   }
+
+   @Override
+   public AnnotationSource<O> removeAnnotationValue(String name, Annotation<O> element)
+   {
+      Assert.notNull(element, ""Cannot remove null element"");
+
+      if (isSingleValue() && Strings.areEqual(name, DEFAULT_VALUE))
+      {
+         return removeAnnotationValue(element);
+      }
+      if (isNormal())
+      {
+         final Set<String> identifiers = new HashSet<String>();
+         for (@SuppressWarnings(""unchecked"")
+         Iterator<Object> values = ((NormalAnnotation) annotation).values().iterator(); values.hasNext();)
+         {
+            final Object value = values.next();
+            if (value instanceof MemberValuePair)
+            {
+               final String identifier = ((MemberValuePair) value).getName().getIdentifier();
+               identifiers.add(identifier);
+               if (Strings.areEqual(name, identifier))
+               {
+                  Expression expr = ((MemberValuePair) value).getValue();
+                  if (element.getInternal().equals(expr))
+                  {
+                     // remove entire annotation element for inlined single-element array:
+                     values.remove();
+                     identifiers.remove(identifier);
+                     continue;
+                  }
+                  if (expr instanceof ArrayInitializer)
+                  {
+                     final ArrayInitializer arrayInit = (ArrayInitializer) expr;
+
+                     // remove element:
+                     arrayInit.expressions().remove(element.getInternal());
+
+                     if (arrayInit.expressions().isEmpty())
+                     {
+                        // remove empty array:
+                        values.remove();
+                        identifiers.remove(identifier);
+                     }
+                     else if (arrayInit.expressions().size() == 1)
+                     {
+                        // promote single-element array:
+                        ((MemberValuePair) value).setValue((Expression) ASTNode.copySubtree(ast, (ASTNode) arrayInit
+                                 .expressions().get(0)));
+                     }
+                  }
+               }
+            }
+         }
+         // finally, reduce to simplest equivalent annotation type:
+         if (identifiers.isEmpty())
+         {
+            convertTo(AnnotationType.MARKER);
+         }
+         else if (identifiers.equals(Collections.singleton(DEFAULT_VALUE)))
+         {
+            convertTo(AnnotationType.SINGLE);
+         }
+      }
+      return this;
+   }
+
+   @Override
    public AnnotationSource<O> getAnnotationValue()
    {
       if (isSingleValue())
@@ -595,6 +799,14 @@
          {
             return new Nested(this, value);
          }
+         if (value instanceof ArrayInitializer && ((ArrayInitializer) value).expressions().size() == 1)
+         {
+            value = (Expression) ((ArrayInitializer) value).expressions().get(0);
+            if (value instanceof org.eclipse.jdt.core.dom.Annotation)
+            {
+               return new Nested(this, value);
+            }
+         }
       }
       if (isNormal())
       {
@@ -615,7 +827,19 @@
          {
             if (Strings.areEqual(name, memberValuePair.getName().getIdentifier()))
             {
-               return new Nested(this, memberValuePair.getValue());
+               Expression value = memberValuePair.getValue();
+               if (value instanceof org.eclipse.jdt.core.dom.Annotation)
+               {
+                  return new Nested(this, value);
+               }
+               if (value instanceof ArrayInitializer && ((ArrayInitializer) value).expressions().size() == 1)
+               {
+                  value = (Expression) ((ArrayInitializer) value).expressions().get(0);
+                  if (value instanceof org.eclipse.jdt.core.dom.Annotation)
+                  {
+                     return new Nested(this, value);
+                  }
+               }
             }
          }
       }
@@ -631,7 +855,7 @@
    {
       return getAnnotationArrayValue(DEFAULT_VALUE);
    }
-   
+
    @Override
    public AnnotationSource<O>[] getAnnotationArrayValue(String name)
    {
@@ -650,6 +874,13 @@
          final AnnotationSource<O>[] result = new AnnotationSource[results.size()];
          return results.toArray(result);
       }
+      final AnnotationSource<O> annotationValue = getAnnotationValue(name);
+      if (annotationValue != null)
+      {
+         @SuppressWarnings(""unchecked"")
+         final AnnotationSource<O>[] result = new AnnotationSource[] { annotationValue };
+         return result;
+      }
       return null;
    }
 
@@ -880,16 +1111,16 @@
       }
    }
 
-    public boolean isTypeElementDefined( String name )
-    {
-        List<ValuePair> values = getValues();
-        for (ValuePair pair : values)
-        {
-            if ( pair.getName().equals( name ) )
-            {
-                return true;
-            }
-        }
-        return false;
-    }
+   public boolean isTypeElementDefined(String name)
+   {
+      List<ValuePair> values = getValues();
+      for (ValuePair pair : values)
+      {
+         if (pair.getName().equals(name))
+         {
+            return true;
+         }
+      }
+      return false;
+   }
 }
"
586076bbd764a06eb2552271e8ec0a0ea15eed26,George Gastaldi,AnnotationTarget.java,MODIFY,hasAnnotation -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/AnnotationTarget.java b/api/src/main/java/org/jboss/forge/roaster/model/AnnotationTarget.java
index 360be23..7cae1e9 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/AnnotationTarget.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/AnnotationTarget.java
@@ -19,13 +19,41 @@
  */
 public interface AnnotationTarget<O extends JavaType<O>> extends Internal, Origin<O>
 {
-   public List<? extends Annotation<O>> getAnnotations();
 
-   public boolean hasAnnotation(final Class<? extends java.lang.annotation.Annotation> type);
+   /**
+    * Returns a {@link List} of {@link Annotation} elements bound to this {@link AnnotationTarget} instance
+    */
+   List<? extends Annotation<O>> getAnnotations();
 
-   public boolean hasAnnotation(final String type);
+   /**
+    * Check if annotation bound of the given type in this {@link AnnotationTarget} exists
+    * 
+    * @param type The {@link java.lang.annotation.Annotation} type
+    * 
+    */
+   boolean hasAnnotation(final Class<? extends java.lang.annotation.Annotation> type);
 
-   public Annotation<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type);
+   /**
+    * Check if annotation bound of the given type in this {@link AnnotationTarget} exists
+    * 
+    * @param type The FQN of the annotation
+    * 
+    */
+   boolean hasAnnotation(final String type);
 
-   public Annotation<O> getAnnotation(final String type);
+   /**
+    * Returns the annotation bound of the given type in this {@link AnnotationTarget} or null if it doesn't exist
+    * 
+    * @param type The {@link java.lang.annotation.Annotation} type
+    * 
+    */
+   Annotation<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type);
+
+   /**
+    * Returns the annotation bound of the given type in this {@link AnnotationTarget} or null if it doesn't exist
+    * 
+    * @param type The FQN of the annotation
+    * 
+    */
+   Annotation<O> getAnnotation(final String type);
 }
\ No newline at end of file
"
586076bbd764a06eb2552271e8ec0a0ea15eed26,George Gastaldi,AnnotationTargetSource.java,MODIFY,getAnnotation -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationTargetSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationTargetSource.java
index 5cff3dd..28810f3 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationTargetSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationTargetSource.java
@@ -20,32 +20,35 @@
 public interface AnnotationTargetSource<O extends JavaSource<O>, T> extends AnnotationTarget<O>
 {
    @Override
-   public List<AnnotationSource<O>> getAnnotations();
+   List<AnnotationSource<O>> getAnnotations();
 
    @Override
-   public AnnotationSource<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type);
+   AnnotationSource<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type);
 
    @Override
-   public AnnotationSource<O> getAnnotation(final String type);
+   AnnotationSource<O> getAnnotation(final String type);
 
    /**
     * Add a new annotation instance to this {@link T}. (Note that an import statement must be added manually if
     * required.)
     */
-   public AnnotationSource<O> addAnnotation();
+   AnnotationSource<O> addAnnotation();
 
    /**
-    * Add a new annotation instance to this {@link T}, using the given {@link Class} as the annotation type. Attempt
-    * to add an import statement to this object's {@link O} if required.
+    * Add a new annotation instance to this {@link T}, using the given {@link Class} as the annotation type. Attempt to
+    * add an import statement to this object's {@link O} if required.
     */
-   public AnnotationSource<O> addAnnotation(Class<? extends java.lang.annotation.Annotation> type);
+   AnnotationSource<O> addAnnotation(Class<? extends java.lang.annotation.Annotation> type);
 
    /**
-    * Add a new annotation instance to this {@link T}, using the given {@link String} className as the annotation
-    * type. Attempt to add an import statement to this object's {@link O} if required. (Note that the given className
-    * must be fully-qualified in order to properly import required classes)
+    * Add a new annotation instance to this {@link T}, using the given {@link String} className as the annotation type.
+    * Attempt to add an import statement to this object's {@link O} if required. (Note that the given className must be
+    * fully-qualified in order to properly import required classes)
     */
-   public AnnotationSource<O> addAnnotation(final String className);
+   AnnotationSource<O> addAnnotation(final String className);
 
-   public T removeAnnotation(Annotation<O> annotation);
+   /**
+    * Remove an annotation instance from this {@link T}.
+    */
+   T removeAnnotation(Annotation<O> annotation);
 }
\ No newline at end of file
"
67931a915f8e08d61016fa5b35716cab301f05c7,Matt Benson,AnnotationTargetSource.java,MODIFY,getAnnotation -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationTargetSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationTargetSource.java
index 28810f3..17f02b9 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationTargetSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationTargetSource.java
@@ -29,8 +29,8 @@
    AnnotationSource<O> getAnnotation(final String type);
 
    /**
-    * Add a new annotation instance to this {@link T}. (Note that an import statement must be added manually if
-    * required.)
+    * Add a new annotation instance to this {@link T} (note that an import statement must be added manually if
+    * required).
     */
    AnnotationSource<O> addAnnotation();
 
@@ -42,8 +42,8 @@
 
    /**
     * Add a new annotation instance to this {@link T}, using the given {@link String} className as the annotation type.
-    * Attempt to add an import statement to this object's {@link O} if required. (Note that the given className must be
-    * fully-qualified in order to properly import required classes)
+    * Attempt to add an import statement to this object's {@link O} if required (note that the given className must be
+    * fully-qualified in order to properly import required classes).
     */
    AnnotationSource<O> addAnnotation(final String className);
 
"
a377c1001b40a1827bbbec41192892a62edc1117,Matt Benson,Strings.java,MODIFY,"getLevenshteinDistance -> [CharSequence s, CharSequence t, int threshold] | [CharSequence s, CharSequence t]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Strings.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Strings.java
index 98cc43a..e8818e7 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Strings.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Strings.java
@@ -417,17 +417,23 @@
       }
    }
 
+   @Deprecated
    public static int countNumberOfOccurences(String text, String toMatch)
    {
+      return countNumberOfOccurrences(text, toMatch);
+   }
+
+   public static int countNumberOfOccurrences(String text, String toMatch)
+   {
       int count = 0;
-      if(toMatch == null || toMatch.length() < 1)
+      if (toMatch == null || toMatch.length() < 1)
       {
          return count;
       }
 
       String wholeText = text;
       int idx = 0;
-      while((idx = wholeText.indexOf(toMatch, idx)) != -1)
+      while ((idx = wholeText.indexOf(toMatch, idx)) != -1)
       {
          count++;
          idx = idx + toMatch.length();
"
fe87340911aec230a2dfd4e7da9246a24a1d00a1,Matt Benson,Types.java,MODIFY,toSimpleName -> [String fieldType] | [String type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
index 3cc6731..3bd3335 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
@@ -12,6 +12,9 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
+import org.jboss.forge.roaster.model.source.Importer;
+import org.jboss.forge.roaster.model.source.JavaSource;
+
 /**
  * Types utilities
  *
@@ -166,16 +169,24 @@
       return false;
    }
 
-   public static String toSimpleName(final String fieldType)
+   public static String toSimpleName(final String type)
    {
-      String result = fieldType;
+      String result = type;
       if (result != null)
       {
+         if (isGeneric(type))
+         {
+            result = stripGenerics(result);
+         }
          String[] tokens = tokenizeClassName(result);
          if (tokens != null)
          {
             result = tokens[tokens.length - 1];
          }
+         if (isGeneric(type))
+         {
+            result += getGenerics(type);
+         }
       }
       return result;
    }
@@ -272,14 +283,18 @@
    {
       if (isGeneric(type))
       {
-         return type.replaceFirst(""^[^<]*(<.*?>)$"", ""$1"");
+         return new StringBuilder(""<>"").insert(1, getGenericsTypeParameter(type)).toString();
       }
       return """";
    }
 
    public static String getGenericsTypeParameter(final String type)
    {
-      return getGenerics(type).replaceAll(""<"", """").replaceAll("">"", """");
+      if (isGeneric(type))
+      {
+         return type.replaceFirst(""^[^<]*<(.*?)>$"", ""$1"");
+      }
+      return """";
    }
 
    // [Bjava.lang.Boolean;
@@ -372,4 +387,5 @@
       }
       return count;
    }
+
 }
\ No newline at end of file
"
4b36ccd39751f43cc4c3c19b9ef0f8c2d96226b6,Matt Benson,Strings.java,MODIFY,"getLevenshteinDistance -> [CharSequence s, CharSequence t, int threshold] | [CharSequence s, CharSequence t]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Strings.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Strings.java
index e8818e7..2683801 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Strings.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Strings.java
@@ -53,7 +53,7 @@
 
    public static String join(final Collection<?> collection, final String delimiter)
    {
-      StringBuffer buffer = new StringBuffer();
+      StringBuilder buffer = new StringBuilder();
       Iterator<?> iter = collection.iterator();
       while (iter.hasNext())
       {
"
8fb06e1623fa6512c6fc425253ff3a8969fce9aa,George Gastaldi,AnnotationSource.java,MODIFY,getAnnotationValue -> [String name] | [],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationSource.java
index 331f80d..fe3e283 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationSource.java
@@ -53,12 +53,14 @@
 
    /**
     * Set an annotation value.
+    * 
     * @return the nested {@link AnnotationSource}
     */
    AnnotationSource<O> setAnnotationValue();
 
    /**
     * Set a named annotation value.
+    * 
     * @param name
     * @return the nested {@link AnnotationSource}
     */
@@ -66,6 +68,7 @@
 
    /**
     * Add an annotation value.
+    * 
     * @return the nested {@link AnnotationSource}
     * @see #addAnnotationValue(String)
     */
@@ -82,6 +85,23 @@
    AnnotationSource<O> addAnnotationValue(String name);
 
    /**
+    * Add an annotation value.
+    * 
+    * @return the nested {@link AnnotationSource}
+    * @see #addAnnotationValue(String)
+    */
+   AnnotationSource<O> addAnnotationValue(Class<? extends java.lang.annotation.Annotation> type);
+
+   /**
+    * Add an annotation value.
+    * 
+    * @param name
+    * @return the nested {@link AnnotationSource}
+    * @see #addAnnotationValue(String)
+    */
+   AnnotationSource<O> addAnnotationValue(String name, Class<? extends java.lang.annotation.Annotation> type);
+
+   /**
     * Remove {@code element} from the array of values associated with the {@code ""value""} annotation element.
     * 
     * @param element
"
8fb06e1623fa6512c6fc425253ff3a8969fce9aa,George Gastaldi,AnnotationImpl.java,MODIFY,getLiteralValue -> [String name] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
index 47052cd..fa7a8bd 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
@@ -68,7 +68,8 @@
          else if (oldNode.getParent() instanceof ArrayInitializer)
          {
             @SuppressWarnings(""unchecked"")
-            final List<org.eclipse.jdt.core.dom.Annotation> expressions = ((ArrayInitializer) oldNode.getParent()).expressions();
+            final List<org.eclipse.jdt.core.dom.Annotation> expressions = ((ArrayInitializer) oldNode.getParent())
+                     .expressions();
             expressions.set(expressions.indexOf(oldNode), newNode);
          }
       }
@@ -597,7 +598,8 @@
    @Override
    public AnnotationSource<O> addAnnotationValue()
    {
-      if (isNormal()) {
+      if (isNormal())
+      {
          return addAnnotationValue(DEFAULT_VALUE);
       }
       if (isMarker())
@@ -647,10 +649,11 @@
          convertTo(AnnotationType.NORMAL);
       }
       MemberValuePair memberValuePair = null;
-      
+
       for (Object value : ((NormalAnnotation) annotation).values())
       {
-         if (value instanceof MemberValuePair && Strings.areEqual(name, ((MemberValuePair) value).getName().getIdentifier()))
+         if (value instanceof MemberValuePair
+                  && Strings.areEqual(name, ((MemberValuePair) value).getName().getIdentifier()))
          {
             memberValuePair = (MemberValuePair) value;
             break;
@@ -691,6 +694,26 @@
    }
 
    @Override
+   public AnnotationSource<O> addAnnotationValue(Class<? extends java.lang.annotation.Annotation> type)
+   {
+      if (!getOrigin().hasImport(type))
+      {
+         getOrigin().addImport(type);
+      }
+      return addAnnotationValue().setName(type.getSimpleName());
+   }
+
+   @Override
+   public AnnotationSource<O> addAnnotationValue(String name, Class<? extends java.lang.annotation.Annotation> type)
+   {
+      if (!getOrigin().hasImport(type))
+      {
+         getOrigin().addImport(type);
+      }
+      return addAnnotationValue(name).setName(type.getSimpleName());
+   }
+
+   @Override
    public AnnotationSource<O> removeAnnotationValue(Annotation<O> element)
    {
       Assert.notNull(element, ""Cannot remove null element"");
@@ -884,7 +907,6 @@
       return null;
    }
 
-   
    @Override
    public <E extends Enum<E>> E[] getEnumArrayValue(Class<E> type)
    {
"
aa177ef7d9c9563e93cb0e0b58b95b1a8dcd7dc1,George Gastaldi,Formatter.java,MODIFY,"format -> [Properties prefs, String source] | [File source]","diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java b/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
index 48266d9..56caa6a 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
@@ -143,9 +143,9 @@
          {
             Properties config = parseConfig(stream);
             Properties modified = new Properties();
+            String shadePackage = JavaCore.class.getPackage().getName().replaceAll(""org\\.eclipse.*$"", """");
             for (Entry<Object, Object> property : config.entrySet())
             {
-               String shadePackage = JavaCore.class.getPackage().getName().replaceAll(""org\\.eclipse.*$"", """");
                modified.put(shadePackage + property.getKey(), property.getValue());
             }
 
"
675c485f2306750a29455156379b25fdf2ba1d1c,George Gastaldi,Formatter.java,MODIFY,"format -> [Properties prefs, String source] | [File source]","diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java b/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
index 56caa6a..cc0301c 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
@@ -106,7 +106,8 @@
     */
    public static String format(Properties prefs, String source)
    {
-      final CodeFormatter codeFormatter = ToolFactory.createCodeFormatter(prefs);
+      Properties shadedProperties = applyShadedPackageName(prefs);
+      final CodeFormatter codeFormatter = ToolFactory.createCodeFormatter(shadedProperties);
       return _format(source, codeFormatter);
    }
 
@@ -141,15 +142,7 @@
          InputStream stream = new BufferedInputStream(new FileInputStream(prefs));
          try
          {
-            Properties config = parseConfig(stream);
-            Properties modified = new Properties();
-            String shadePackage = JavaCore.class.getPackage().getName().replaceAll(""org\\.eclipse.*$"", """");
-            for (Entry<Object, Object> property : config.entrySet())
-            {
-               modified.put(shadePackage + property.getKey(), property.getValue());
-            }
-
-            return modified;
+            return parseConfig(stream);
          }
          catch (IOException e)
          {
@@ -165,6 +158,18 @@
       return null;
    }
 
+   private static Properties applyShadedPackageName(Properties config)
+   {
+      Properties modified = new Properties();
+      String shadePackage = JavaCore.class.getPackage().getName().replaceAll(""org\\.eclipse.*$"", """");
+      for (Entry<Object, Object> property : config.entrySet())
+      {
+         modified.put(shadePackage + property.getKey(), property.getValue());
+      }
+
+      return modified;
+   }
+
    private static Properties readConfigInternal(String filename)
    {
       InputStream stream = new BufferedInputStream(org.jboss.forge.roaster.model.util.Formatter.class
"
e0c9e47144f1ad29dbe8bc42b16d6d1921325f6e,George Gastaldi,Formatter.java,MODIFY,"format -> [Properties prefs, String source] | [File source]","diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java b/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
index cc0301c..56caa6a 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
@@ -106,8 +106,7 @@
     */
    public static String format(Properties prefs, String source)
    {
-      Properties shadedProperties = applyShadedPackageName(prefs);
-      final CodeFormatter codeFormatter = ToolFactory.createCodeFormatter(shadedProperties);
+      final CodeFormatter codeFormatter = ToolFactory.createCodeFormatter(prefs);
       return _format(source, codeFormatter);
    }
 
@@ -142,7 +141,15 @@
          InputStream stream = new BufferedInputStream(new FileInputStream(prefs));
          try
          {
-            return parseConfig(stream);
+            Properties config = parseConfig(stream);
+            Properties modified = new Properties();
+            String shadePackage = JavaCore.class.getPackage().getName().replaceAll(""org\\.eclipse.*$"", """");
+            for (Entry<Object, Object> property : config.entrySet())
+            {
+               modified.put(shadePackage + property.getKey(), property.getValue());
+            }
+
+            return modified;
          }
          catch (IOException e)
          {
@@ -158,18 +165,6 @@
       return null;
    }
 
-   private static Properties applyShadedPackageName(Properties config)
-   {
-      Properties modified = new Properties();
-      String shadePackage = JavaCore.class.getPackage().getName().replaceAll(""org\\.eclipse.*$"", """");
-      for (Entry<Object, Object> property : config.entrySet())
-      {
-         modified.put(shadePackage + property.getKey(), property.getValue());
-      }
-
-      return modified;
-   }
-
    private static Properties readConfigInternal(String filename)
    {
       InputStream stream = new BufferedInputStream(org.jboss.forge.roaster.model.util.Formatter.class
"
030bfe71e1085e9a09b06ea484cba997661d2757,George Gastaldi,Formatter.java,MODIFY,"format -> [Properties prefs, String source] | [File source]","diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java b/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
index 56caa6a..bc62ac8 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
@@ -142,14 +142,7 @@
          try
          {
             Properties config = parseConfig(stream);
-            Properties modified = new Properties();
-            String shadePackage = JavaCore.class.getPackage().getName().replaceAll(""org\\.eclipse.*$"", """");
-            for (Entry<Object, Object> property : config.entrySet())
-            {
-               modified.put(shadePackage + property.getKey(), property.getValue());
-            }
-
-            return modified;
+            return applyShadedPackageName(config);
          }
          catch (IOException e)
          {
@@ -165,6 +158,18 @@
       return null;
    }
 
+   public static Properties applyShadedPackageName(Properties config)
+   {
+      Properties modified = new Properties();
+      String shadePackage = JavaCore.class.getPackage().getName().replaceAll(""org\\.eclipse.*$"", """");
+      for (Entry<Object, Object> property : config.entrySet())
+      {
+         modified.put(shadePackage + property.getKey(), property.getValue());
+      }
+
+      return modified;
+   }
+
    private static Properties readConfigInternal(String filename)
    {
       InputStream stream = new BufferedInputStream(org.jboss.forge.roaster.model.util.Formatter.class
"
030bfe71e1085e9a09b06ea484cba997661d2757,George Gastaldi,FormatterProviderImpl.java,MODIFY,"format -> [Properties properties, String source] | [String source]","diff --git a/impl/src/main/java/org/jboss/forge/roaster/spi/FormatterProviderImpl.java b/impl/src/main/java/org/jboss/forge/roaster/spi/FormatterProviderImpl.java
index e726739..7538030 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/spi/FormatterProviderImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/spi/FormatterProviderImpl.java
@@ -27,6 +27,7 @@
    @Override
    public String format(Properties properties, String source)
    {
-      return Formatter.format(properties, source);
+      Properties shadedProperties = Formatter.applyShadedPackageName(properties);
+      return Formatter.format(shadedProperties, source);
    }
 }
"
1f6c13255e3d2a08849265dd887901534c7bdade,George Gastaldi,EnumConstantImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantImpl.java
index 8bde6e0..3ddd578 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantImpl.java
@@ -15,11 +15,13 @@
 import org.eclipse.jdt.core.dom.ASTNode;
 import org.eclipse.jdt.core.dom.EnumConstantDeclaration;
 import org.eclipse.jdt.core.dom.Expression;
+import org.eclipse.jdt.core.dom.Javadoc;
 import org.jboss.forge.roaster.Roaster;
 import org.jboss.forge.roaster.model.Annotation;
 import org.jboss.forge.roaster.model.ast.AnnotationAccessor;
 import org.jboss.forge.roaster.model.source.AnnotationSource;
 import org.jboss.forge.roaster.model.source.EnumConstantSource;
+import org.jboss.forge.roaster.model.source.JavaDocSource;
 import org.jboss.forge.roaster.model.source.JavaEnumSource;
 import org.jboss.forge.roaster.model.util.Strings;
 
@@ -34,13 +36,15 @@
    {
       this.parent = parent;
       this.ast = ((ASTNode) parent.getInternal()).getAST();
+
    }
-   
-   public EnumConstantImpl(final JavaEnumSource parent) {
+
+   public EnumConstantImpl(final JavaEnumSource parent)
+   {
       init(parent);
       this.enumConstant = ast.newEnumConstantDeclaration();
    }
-   
+
    public EnumConstantImpl(final JavaEnumSource parent, final String declaration)
    {
       init(parent);
@@ -52,7 +56,7 @@
       EnumConstantDeclaration subtree = (EnumConstantDeclaration) ASTNode.copySubtree(ast, newField);
       this.enumConstant = subtree;
    }
-   
+
    public EnumConstantImpl(final JavaEnumSource parent, final Object internal)
    {
       init(parent);
@@ -88,7 +92,8 @@
    public List<String> getConstructorArguments()
    {
       final List<String> result = new ArrayList<String>();
-      for (Object o : enumConstant.arguments()) {
+      for (Object o : enumConstant.arguments())
+      {
          result.add(o.toString());
       }
       return Collections.unmodifiableList(result);
@@ -191,6 +196,31 @@
    }
 
    @Override
+   public JavaDocSource<EnumConstantSource> getJavaDoc()
+   {
+      Javadoc javadoc = enumConstant.getJavadoc();
+      if (javadoc == null)
+      {
+         javadoc = enumConstant.getAST().newJavadoc();
+         enumConstant.setJavadoc(javadoc);
+      }
+      return new JavaDocImpl<EnumConstantSource>(this, javadoc);
+   }
+
+   @Override
+   public boolean hasJavaDoc()
+   {
+      return enumConstant.getJavadoc() != null;
+   }
+
+   @Override
+   public EnumConstantSource removeJavaDoc()
+   {
+      enumConstant.setJavadoc(null);
+      return this;
+   }
+
+   @Override
    public boolean equals(Object obj)
    {
       if (obj == this)
"
37cff4685b3ddc96d5db42e2696228d5908c463e,George Gastaldi,MethodFinderVisitor.java,MODIFY,visit -> [AnonymousClassDeclaration node] | [TypeDeclaration node],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/ast/MethodFinderVisitor.java b/impl/src/main/java/org/jboss/forge/roaster/model/ast/MethodFinderVisitor.java
index 23eb0c5..ed8bc45 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/ast/MethodFinderVisitor.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/ast/MethodFinderVisitor.java
@@ -27,15 +27,21 @@
 {
    private final List<MethodDeclaration> methods = new ArrayList<MethodDeclaration>();
    private ASTNode parent;
+   private boolean outerTypeVisited;
 
    @Override
    public boolean visit(final TypeDeclaration node)
    {
+      if (outerTypeVisited)
+      {
+         return false;
+      }
+      this.outerTypeVisited = true;
       parent = node;
       addMethods(node);
       return super.visit(node);
    }
-   
+
    @Override
    public boolean visit(EnumDeclaration node)
    {
@@ -43,7 +49,7 @@
       addMethods(node);
       return super.visit(node);
    }
-   
+
    @Override
    public boolean visit(AnnotationTypeDeclaration node)
    {
@@ -83,7 +89,8 @@
    {
       for (BodyDeclaration bodyDeclaration : bodyDeclarations)
       {
-         if (bodyDeclaration instanceof MethodDeclaration) {
+         if (bodyDeclaration instanceof MethodDeclaration)
+         {
             methods.add((MethodDeclaration) bodyDeclaration);
          }
       }
"
b94f6f90ee2b857d7300ccf9ffdd043172a2e031,George Gastaldi,MethodFinderVisitor.java,MODIFY,visit -> [AnonymousClassDeclaration node] | [TypeDeclaration node],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/ast/MethodFinderVisitor.java b/impl/src/main/java/org/jboss/forge/roaster/model/ast/MethodFinderVisitor.java
index ed8bc45..687d8df 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/ast/MethodFinderVisitor.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/ast/MethodFinderVisitor.java
@@ -21,25 +21,23 @@
 import org.eclipse.jdt.core.dom.TypeDeclaration;
 
 /**
+ * Traverses the AST tree looking for Method declarations
+ * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
+ * @author <a href=""ggastald@redhat.com"">George Gastaldi</a>
+ * 
  */
 public class MethodFinderVisitor extends ASTVisitor
 {
    private final List<MethodDeclaration> methods = new ArrayList<MethodDeclaration>();
    private ASTNode parent;
-   private boolean outerTypeVisited;
 
    @Override
    public boolean visit(final TypeDeclaration node)
    {
-      if (outerTypeVisited)
-      {
-         return false;
-      }
-      this.outerTypeVisited = true;
       parent = node;
       addMethods(node);
-      return super.visit(node);
+      return false;
    }
 
    @Override
@@ -47,7 +45,7 @@
    {
       parent = node;
       addMethods(node);
-      return super.visit(node);
+      return false;
    }
 
    @Override
@@ -55,7 +53,7 @@
    {
       parent = node;
       addMethods(node);
-      return super.visit(node);
+      return false;
    }
 
    @Override
@@ -65,9 +63,9 @@
       @SuppressWarnings(""unchecked"")
       final List<BodyDeclaration> bodyDeclarations = node.bodyDeclarations();
       addMethods(bodyDeclarations);
-      return super.visit(node);
+      return false;
    }
-
+   
    public List<MethodDeclaration> getMethods()
    {
       return Collections.unmodifiableList(methods);
"
2be7d633a1953b4636731b083a84af44cb076a00,sotty,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index 02e5a59..fdf77f3 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -664,7 +664,7 @@
    @Override
    public ParameterSource<O> addParameter(Class<?> type, String name)
    {
-      return addParameter(type.getName(), name);
+      return addParameter(type.getCanonicalName(), name);
    }
 
    @Override
"
2be7d633a1953b4636731b083a84af44cb076a00,sotty,MethodSignatureTest.java,MODIFY,"assertVisibility -> [String visibility, MethodSource method] | [Visibility visibility, MethodSource method]","diff --git a/impl/src/test/java/org/jboss/forge/test/roaster/model/MethodSignatureTest.java b/impl/src/test/java/org/jboss/forge/test/roaster/model/MethodSignatureTest.java
index 21ff021..ca6bc09 100644
--- a/impl/src/test/java/org/jboss/forge/test/roaster/model/MethodSignatureTest.java
+++ b/impl/src/test/java/org/jboss/forge/test/roaster/model/MethodSignatureTest.java
@@ -125,4 +125,18 @@
    {
       Assert.assertEquals(visibility, method.getVisibility().toString());
    }
+
+   public static class Inner {}
+
+   @Test
+   public void testMethodWithInnerClassParameter() throws Exception
+   {
+      JavaClassSource javaClass = Roaster.create(JavaClassSource.class);
+      MethodSource<JavaClassSource> method = javaClass.addMethod().setPublic().setName(""doSomething"").setReturnTypeVoid();
+      method.addParameter(Inner.class, ""inner"");
+      Assert.assertEquals(1, javaClass.getMethods().size());
+      assertEquals( Inner.class.getCanonicalName(), method.getParameters().get( 0 ).getType().getQualifiedName() );
+      assertEquals( Inner.class.getCanonicalName(), javaClass.getImports().get( 0 ).getQualifiedName() );
+   }
+
 }
"
df6e5ab9653945ba348e259a33a7377cb08cc8c5,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index 02e5a59..fdf77f3 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -664,7 +664,7 @@
    @Override
    public ParameterSource<O> addParameter(Class<?> type, String name)
    {
-      return addParameter(type.getName(), name);
+      return addParameter(type.getCanonicalName(), name);
    }
 
    @Override
"
df6e5ab9653945ba348e259a33a7377cb08cc8c5,George Gastaldi,MethodSignatureTest.java,MODIFY,"assertVisibility -> [String visibility, MethodSource method] | [Visibility visibility, MethodSource method]","diff --git a/impl/src/test/java/org/jboss/forge/test/roaster/model/MethodSignatureTest.java b/impl/src/test/java/org/jboss/forge/test/roaster/model/MethodSignatureTest.java
index 21ff021..ca6bc09 100644
--- a/impl/src/test/java/org/jboss/forge/test/roaster/model/MethodSignatureTest.java
+++ b/impl/src/test/java/org/jboss/forge/test/roaster/model/MethodSignatureTest.java
@@ -125,4 +125,18 @@
    {
       Assert.assertEquals(visibility, method.getVisibility().toString());
    }
+
+   public static class Inner {}
+
+   @Test
+   public void testMethodWithInnerClassParameter() throws Exception
+   {
+      JavaClassSource javaClass = Roaster.create(JavaClassSource.class);
+      MethodSource<JavaClassSource> method = javaClass.addMethod().setPublic().setName(""doSomething"").setReturnTypeVoid();
+      method.addParameter(Inner.class, ""inner"");
+      Assert.assertEquals(1, javaClass.getMethods().size());
+      assertEquals( Inner.class.getCanonicalName(), method.getParameters().get( 0 ).getType().getQualifiedName() );
+      assertEquals( Inner.class.getCanonicalName(), javaClass.getImports().get( 0 ).getQualifiedName() );
+   }
+
 }
"
bdb5f845acef6bf482821a9dab2de1e7bf85a256,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index fdf77f3..acc6cbe 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -681,7 +681,7 @@
       {
          getOrigin().addImport(type);
       }
-      String stub = ""public class Stub { public void method( "" + Types.toSimpleName(Types.stripGenerics(type)) + "" ""
+      String stub = ""public class Stub { public void method( "" + Types.toSimpleName(Types.fixArray(type,false)) + "" ""
                + name + "" ) {} }"";
       JavaClassSource temp = (JavaClassSource) Roaster.parse(stub);
       List<MethodSource<JavaClassSource>> methods = temp.getMethods();
"
bdb5f845acef6bf482821a9dab2de1e7bf85a256,George Gastaldi,MethodSignatureTest.java,MODIFY,"assertVisibility -> [String visibility, MethodSource method] | [Visibility visibility, MethodSource method]","diff --git a/impl/src/test/java/org/jboss/forge/test/roaster/model/MethodSignatureTest.java b/impl/src/test/java/org/jboss/forge/test/roaster/model/MethodSignatureTest.java
index ca6bc09..ad2530b 100644
--- a/impl/src/test/java/org/jboss/forge/test/roaster/model/MethodSignatureTest.java
+++ b/impl/src/test/java/org/jboss/forge/test/roaster/model/MethodSignatureTest.java
@@ -138,5 +138,36 @@
       assertEquals( Inner.class.getCanonicalName(), method.getParameters().get( 0 ).getType().getQualifiedName() );
       assertEquals( Inner.class.getCanonicalName(), javaClass.getImports().get( 0 ).getQualifiedName() );
    }
+   @Test
+   public void testMethodWithGenericParameters() throws Exception
+   {
+      JavaClassSource javaClass = Roaster.create(JavaClassSource.class);
+      MethodSource<JavaClassSource> method = javaClass.addMethod().setPublic().setName( ""hello"" ).setReturnType( ""java.util.List<String>"" );
+      method.addParameter( ""java.util.Map<java.util.Set<String>,Object>"", ""map"" );
+
+      String signature = method.toSignature();
+      assertEquals( ""public hello(Map) : List"", signature );
+
+      ParameterSource ps = method.getParameters().get( 0 );
+      assertEquals( 2, ps.getType().getTypeArguments().size() );
+
+      assertEquals( 1, method.getReturnType().getTypeArguments().size() );
+   }
+
+   @Test
+   public void testMethodSignatureParamsWithGenerics() throws Exception
+   {
+      MethodSource<JavaClassSource> method = Roaster.create(JavaClassSource.class).addMethod(
+              ""public java.util.List<String> hello(java.util.Map<java.util.Set<String>,Object> map)"");
+      String signature = method.toSignature();
+      assertEquals( ""public hello(java.util.Map) : java.util.List"", signature );
+
+      ParameterSource ps = method.getParameters().get( 0 );
+      assertEquals( 2, ps.getType().getTypeArguments().size() );
+
+      assertEquals( ""public java.util.List<String> hello(java.util.Map<java.util.Set<String>,Object> map){\n}"",
+                    method.toString().trim());
+      assertEquals( 1, method.getReturnType().getTypeArguments().size() );
+   }
 
 }
"
caa959ea2ee471c4335160919d9cb215e702f1ca,George Gastaldi,FieldSource.java,MODIFY,setType -> [JavaType entity] | [Class clazz],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/FieldSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/FieldSource.java
index a0a942c..ec037f0 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/FieldSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/FieldSource.java
@@ -10,7 +10,6 @@
 import org.jboss.forge.roaster.model.Field;
 import org.jboss.forge.roaster.model.JavaType;
 
-
 /**
  * Represents a field of a {@link JavaClassSource}, {@link JavaInterfaceSource}, or {@link JavaEnumSource}.
  * 
@@ -21,25 +20,30 @@
 {
 
    /**
-    * Set the type of this {@link Field} to the given {@link Class} type. Attempt to add an import statement to
-    * this field's base {@link O} if required.
+    * Set the type of this {@link Field} to the given {@link Class} type. Attempt to add an import statement to this
+    * field's base {@link O} if required.
     */
    FieldSource<O> setType(Class<?> clazz);
 
    /**
-    * Set the type of this {@link Field} to the given type. Attempt to add an import statement to this field's
-    * base {@link O} if required. (Note that the given className must be fully-qualified in order to properly import
-    * required classes)
+    * Set the type of this {@link Field} to the given type. Attempt to add an import statement to this field's base
+    * {@link O} if required. (Note that the given className must be fully-qualified in order to properly import required
+    * classes)
     */
    FieldSource<O> setType(String type);
 
    /**
-    * Set the type of this {@link Field} to the given {@link JavaSource<?>} type. Attempt to add an import
-    * statement to this field's base {@link O} if required.
+    * Set the type of this {@link Field} to the given {@link JavaSource<?>} type. Attempt to add an import statement to
+    * this field's base {@link O} if required.
     */
    FieldSource<O> setType(JavaType<?> entity);
 
    FieldSource<O> setLiteralInitializer(String value);
 
    FieldSource<O> setStringInitializer(String value);
+
+   FieldSource<O> setTransient(boolean value);
+
+   FieldSource<O> setVolatile(boolean value);
+
 }
\ No newline at end of file
"
caa959ea2ee471c4335160919d9cb215e702f1ca,George Gastaldi,FieldImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
index 7918775..63fcc17 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
@@ -425,12 +425,32 @@
    }
 
    @Override
+   public FieldSource<O> setTransient(boolean value)
+   {
+      if (value)
+         modifiers.addModifier(field, ModifierKeyword.TRANSIENT_KEYWORD);
+      else
+         modifiers.removeModifier(field, ModifierKeyword.TRANSIENT_KEYWORD);
+      return this;
+   }
+
+   @Override
    public boolean isVolatile()
    {
       return modifiers.hasModifier(field, ModifierKeyword.VOLATILE_KEYWORD);
    }
 
    @Override
+   public FieldSource<O> setVolatile(boolean value)
+   {
+      if (value)
+         modifiers.addModifier(field, ModifierKeyword.VOLATILE_KEYWORD);
+      else
+         modifiers.removeModifier(field, ModifierKeyword.VOLATILE_KEYWORD);
+      return this;
+   }
+
+   @Override
    public boolean hasJavaDoc()
    {
       return field.getJavadoc() != null;
"
3d996ef789bef9cb3ca7bea4037167bf68302215,George Gastaldi,MethodSignatureTest.java,MODIFY,"assertVisibility -> [String visibility, MethodSource method] | [Visibility visibility, MethodSource method]","diff --git a/impl/src/test/java/org/jboss/forge/test/roaster/model/MethodSignatureTest.java b/impl/src/test/java/org/jboss/forge/test/roaster/model/MethodSignatureTest.java
index ad2530b..177a129 100644
--- a/impl/src/test/java/org/jboss/forge/test/roaster/model/MethodSignatureTest.java
+++ b/impl/src/test/java/org/jboss/forge/test/roaster/model/MethodSignatureTest.java
@@ -104,10 +104,11 @@
    public void testMethodWithPrimitiveParameters() throws Exception
    {
       JavaClassSource javaClass = Roaster.create(JavaClassSource.class);
-      MethodSource<JavaClassSource> method = javaClass.addMethod().setPublic().setName(""doSomething"").setReturnType(Integer.TYPE).setBody(""return 0;"");
+      MethodSource<JavaClassSource> method = javaClass.addMethod().setPublic().setName(""doSomething"")
+               .setReturnType(Integer.TYPE).setBody(""return 0;"");
       method.addParameter(Integer.TYPE, ""initValue"");
-      method.addParameter(int.class,""intValueClass"");
-      method.addParameter(int[].class,""intValueClassArray"");
+      method.addParameter(int.class, ""intValueClass"");
+      method.addParameter(int[].class, ""intValueClassArray"");
       Assert.assertEquals(1, javaClass.getMethods().size());
       List<ParameterSource<JavaClassSource>> parameters = javaClass.getMethods().get(0).getParameters();
       Assert.assertEquals(3, parameters.size());
@@ -126,48 +127,53 @@
       Assert.assertEquals(visibility, method.getVisibility().toString());
    }
 
-   public static class Inner {}
+   public static class Inner
+   {
+   }
 
    @Test
    public void testMethodWithInnerClassParameter() throws Exception
    {
       JavaClassSource javaClass = Roaster.create(JavaClassSource.class);
-      MethodSource<JavaClassSource> method = javaClass.addMethod().setPublic().setName(""doSomething"").setReturnTypeVoid();
+      MethodSource<JavaClassSource> method = javaClass.addMethod().setPublic().setName(""doSomething"")
+               .setReturnTypeVoid();
       method.addParameter(Inner.class, ""inner"");
       Assert.assertEquals(1, javaClass.getMethods().size());
-      assertEquals( Inner.class.getCanonicalName(), method.getParameters().get( 0 ).getType().getQualifiedName() );
-      assertEquals( Inner.class.getCanonicalName(), javaClass.getImports().get( 0 ).getQualifiedName() );
+      assertEquals(Inner.class.getCanonicalName(), method.getParameters().get(0).getType().getQualifiedName());
+      assertEquals(Inner.class.getCanonicalName(), javaClass.getImports().get(0).getQualifiedName());
    }
+
    @Test
    public void testMethodWithGenericParameters() throws Exception
    {
       JavaClassSource javaClass = Roaster.create(JavaClassSource.class);
-      MethodSource<JavaClassSource> method = javaClass.addMethod().setPublic().setName( ""hello"" ).setReturnType( ""java.util.List<String>"" );
-      method.addParameter( ""java.util.Map<java.util.Set<String>,Object>"", ""map"" );
+      MethodSource<JavaClassSource> method = javaClass.addMethod().setPublic().setName(""hello"")
+               .setReturnType(""java.util.List<String>"");
+      method.addParameter(""java.util.Map<java.util.Set<String>,Object>"", ""map"");
 
       String signature = method.toSignature();
-      assertEquals( ""public hello(Map) : List"", signature );
+      assertEquals(""public hello(Map) : List"", signature);
 
-      ParameterSource ps = method.getParameters().get( 0 );
-      assertEquals( 2, ps.getType().getTypeArguments().size() );
+      ParameterSource<?> ps = method.getParameters().get(0);
+      assertEquals(2, ps.getType().getTypeArguments().size());
 
-      assertEquals( 1, method.getReturnType().getTypeArguments().size() );
+      assertEquals(1, method.getReturnType().getTypeArguments().size());
    }
 
    @Test
    public void testMethodSignatureParamsWithGenerics() throws Exception
    {
       MethodSource<JavaClassSource> method = Roaster.create(JavaClassSource.class).addMethod(
-              ""public java.util.List<String> hello(java.util.Map<java.util.Set<String>,Object> map)"");
+               ""public java.util.List<String> hello(java.util.Map<java.util.Set<String>,Object> map)"");
       String signature = method.toSignature();
-      assertEquals( ""public hello(java.util.Map) : java.util.List"", signature );
+      assertEquals(""public hello(java.util.Map) : java.util.List"", signature);
 
-      ParameterSource ps = method.getParameters().get( 0 );
-      assertEquals( 2, ps.getType().getTypeArguments().size() );
+      ParameterSource<?> ps = method.getParameters().get(0);
+      assertEquals(2, ps.getType().getTypeArguments().size());
 
-      assertEquals( ""public java.util.List<String> hello(java.util.Map<java.util.Set<String>,Object> map){\n}"",
-                    method.toString().trim());
-      assertEquals( 1, method.getReturnType().getTypeArguments().size() );
+      assertEquals(""public java.util.List<String> hello(java.util.Map<java.util.Set<String>,Object> map){\n}"",
+               method.toString().trim());
+      assertEquals(1, method.getReturnType().getTypeArguments().size());
    }
 
 }
"
639d84c0ad324de4f793febb5442ca872a42b7b2,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index acc6cbe..c975d45 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -89,22 +89,23 @@
    @Override
    public String toSignature()
    {
-      String signature = (Visibility.PACKAGE_PRIVATE.equals(this.getVisibility().scope()) ? """" : this.getVisibility()
-               .scope()) + "" "";
-      signature += this.getName() + ""("";
-
+      StringBuilder signature = new StringBuilder();
+      signature.append((Visibility.PACKAGE_PRIVATE.equals(this.getVisibility().scope()) ? """" : this.getVisibility()
+               .scope()));
+      signature.append("" "");
+      signature.append(this.getName()).append(""("");
       List<ParameterSource<O>> parameters = this.getParameters();
       for (ParameterSource<O> p : parameters)
       {
-         signature += p.getType().getName();
+         signature.append(p.getType().getName());
          if (parameters.indexOf(p) < (parameters.size() - 1))
          {
-            signature += "", "";
+            signature.append("", "");
          }
       }
 
-      signature += "") : "" + (this.getReturnType() == null ? ""void"" : this.getReturnType().getName());
-      return signature;
+      signature.append("") : "" + (this.getReturnType() == null ? ""void"" : this.getReturnType().getName()));
+      return signature.toString();
    }
 
    /*
@@ -177,27 +178,41 @@
    @SuppressWarnings(""unchecked"")
    public String getBody()
    {
-      StringBuilder result = new StringBuilder();
-      List<Statement> statements = (List<Statement>) method.getBody().getStructuralProperty(Block.STATEMENTS_PROPERTY);
-      for (Statement statement : statements)
+      Block body = method.getBody();
+      if (body != null)
       {
-         result.append(statement).append("" "");
+         StringBuilder result = new StringBuilder();
+         List<Statement> statements = (List<Statement>) body.getStructuralProperty(Block.STATEMENTS_PROPERTY);
+         for (Statement statement : statements)
+         {
+            result.append(statement).append("" "");
+         }
+         return result.toString().trim();
       }
-
-      return result.toString().trim();
+      else
+      {
+         // No body found, probably because it's a native or an abstract method
+         return null;
+      }
    }
 
    @Override
    public MethodSource<O> setBody(final String body)
    {
-      String stub = ""public class Stub { public void method() {"" + body + ""} }"";
-      JavaClassSource temp = (JavaClassSource) Roaster.parse(stub);
-      List<MethodSource<JavaClassSource>> methods = temp.getMethods();
-      Block block = ((MethodDeclaration) methods.get(0).getInternal()).getBody();
+      if (body == null)
+      {
+         method.setBody(null);
+      }
+      else
+      {
+         String stub = ""public class Stub { public void method() {"" + body + ""} }"";
+         JavaClassSource temp = (JavaClassSource) Roaster.parse(stub);
+         List<MethodSource<JavaClassSource>> methods = temp.getMethods();
+         Block block = ((MethodDeclaration) methods.get(0).getInternal()).getBody();
 
-      block = (Block) ASTNode.copySubtree(method.getAST(), block);
-      method.setBody(block);
-
+         block = (Block) ASTNode.copySubtree(method.getAST(), block);
+         method.setBody(block);
+      }
       return this;
    }
 
@@ -237,7 +252,6 @@
    @Override
    public MethodSource<O> setReturnType(final Class<?> type)
    {
-      // TODO add import?
       return setReturnType(type.getSimpleName());
    }
 
@@ -274,10 +288,6 @@
       return setReturnType(type.getName());
    }
 
-   /*
-    * Abstract Modifiers
-    */
-
    @Override
    public boolean isAbstract()
    {
@@ -290,10 +300,16 @@
       if (abstrct)
       {
          modifiers.addModifier(method, ModifierKeyword.ABSTRACT_KEYWORD);
+         // Abstract methods do not specify a body
+         setBody(null);
       }
       else
       {
          modifiers.removeModifier(method, ModifierKeyword.ABSTRACT_KEYWORD);
+         if (getBody() == null)
+         {
+            setBody("""");
+         }
       }
       return this;
    }
@@ -331,6 +347,32 @@
    }
 
    @Override
+   public MethodSource<O> setNative(boolean value)
+   {
+      if (value)
+      {
+         modifiers.addModifier(method, ModifierKeyword.NATIVE_KEYWORD);
+         // Native methods do not specify a body
+         setBody(null);
+      }
+      else
+      {
+         modifiers.removeModifier(method, ModifierKeyword.NATIVE_KEYWORD);
+         if (getBody() == null)
+         {
+            setBody("""");
+         }
+      }
+      return this;
+   }
+
+   @Override
+   public boolean isNative()
+   {
+      return modifiers.hasModifier(method, ModifierKeyword.NATIVE_KEYWORD);
+   }
+
+   @Override
    public String getName()
    {
       return method.getName().getFullyQualifiedName();
@@ -681,7 +723,7 @@
       {
          getOrigin().addImport(type);
       }
-      String stub = ""public class Stub { public void method( "" + Types.toSimpleName(Types.fixArray(type,false)) + "" ""
+      String stub = ""public class Stub { public void method( "" + Types.toSimpleName(Types.fixArray(type, false)) + "" ""
                + name + "" ) {} }"";
       JavaClassSource temp = (JavaClassSource) Roaster.parse(stub);
       List<MethodSource<JavaClassSource>> methods = temp.getMethods();
"
71eb3b17786b9fdd2068b100913ecdffc1364075,George Gastaldi,FieldHolder.java,MODIFY,hasField -> [Field field] | [String name],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/FieldHolder.java b/api/src/main/java/org/jboss/forge/roaster/model/FieldHolder.java
index 4d15878..ace6c9a 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/FieldHolder.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/FieldHolder.java
@@ -33,9 +33,8 @@
    public Field<O> getField(String name);
 
    /**
-    * Get a list of all {@link Field}s declared by this {@link O}, or return an empty list if no {@link Field}s
-    * are declared.
+    * Get a list of all {@link Field}s declared by this {@link O}, or return an empty list if no {@link Field}s are
+    * declared.
     */
    public List<? extends Field<O>> getFields();
 }
-
"
71eb3b17786b9fdd2068b100913ecdffc1364075,George Gastaldi,JavaAnnotation.java,MODIFY,hasAnnotationElement -> [AnnotationElement annotationElement] | [String name],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/JavaAnnotation.java b/api/src/main/java/org/jboss/forge/roaster/model/JavaAnnotation.java
index 013b57c..00ea7cf 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/JavaAnnotation.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/JavaAnnotation.java
@@ -21,8 +21,7 @@
 {
 
    /**
-    * Return whether or not this {@link JavaAnnotation} declares an {@link AnnotationElement} with the given
-    * name.
+    * Return whether or not this {@link JavaAnnotation} declares an {@link AnnotationElement} with the given name.
     */
    public boolean hasAnnotationElement(String name);
 
@@ -37,8 +36,8 @@
    public AnnotationElement<O> getAnnotationElement(String name);
 
    /**
-    * Get a list of all {@link AnnotationElement}s declared by this {@link JavaAnnotation}, or return an empty
-    * list if no {@link AnnotationElement}s are declared.
+    * Get a list of all {@link AnnotationElement}s declared by this {@link JavaAnnotation}, or return an empty list if
+    * no {@link AnnotationElement}s are declared.
     */
    public List<? extends AnnotationElement<O>> getAnnotationElements();
 }
\ No newline at end of file
"
71eb3b17786b9fdd2068b100913ecdffc1364075,George Gastaldi,MethodHolder.java,MODIFY,"hasMethodSignature -> [String name, Class paramTypes] | [Method method]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/MethodHolder.java b/api/src/main/java/org/jboss/forge/roaster/model/MethodHolder.java
index ae5ff1f..9e8b31e 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/MethodHolder.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/MethodHolder.java
@@ -58,8 +58,8 @@
    public Method<O, ?> getMethod(final String name, Class<?>... paramTypes);
 
    /**
-    * Get a {@link List} of all {@link Method}s declared by this {@link O} instance, if any; otherwise, return an
-    * empty {@link List}
+    * Get a {@link List} of all {@link Method}s declared by this {@link O} instance, if any; otherwise, return an empty
+    * {@link List}
     */
    public List<? extends Method<O, ?>> getMethods();
 }
\ No newline at end of file
"
71eb3b17786b9fdd2068b100913ecdffc1364075,George Gastaldi,PropertyHolder.java,MODIFY,hasProperty -> [Property property] | [String name],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/PropertyHolder.java b/api/src/main/java/org/jboss/forge/roaster/model/PropertyHolder.java
index 07d7709..7870f31 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/PropertyHolder.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/PropertyHolder.java
@@ -33,8 +33,8 @@
    Property<O> getProperty(String name);
 
    /**
-    * Get a list of all {@link Property Properties} declared by this {@link O}, or return an empty list if no {@link Property Properties}
-    * are declared.
+    * Get a list of all {@link Property Properties} declared by this {@link O}, or return an empty list if no
+    * {@link Property Properties} are declared.
     */
    List<? extends Property<O>> getProperties();
 }
"
71eb3b17786b9fdd2068b100913ecdffc1364075,George Gastaldi,AnnotationElementSource.java,MODIFY,setType -> [JavaType entity] | [Class clazz],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationElementSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationElementSource.java
index a8cef4d..eb4d779 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationElementSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationElementSource.java
@@ -44,8 +44,8 @@
    }
 
    /**
-    * Set the type of this {@link AnnotationElement} to the given {@link Class} type. Attempt to add an import
-    * statement to this annotation element's base {@link O} if required.
+    * Set the type of this {@link AnnotationElement} to the given {@link Class} type. Attempt to add an import statement
+    * to this annotation element's base {@link O} if required.
     */
    AnnotationElementSource setType(Class<?> clazz);
 
@@ -57,8 +57,8 @@
    AnnotationElementSource setType(String type);
 
    /**
-    * Set the type of this {@link AnnotationElement} to the given {@link JavaSource<?>} type. Attempt to add an
-    * import statement to this field's base {@link O} if required.
+    * Set the type of this {@link AnnotationElement} to the given {@link JavaSource<?>} type. Attempt to add an import
+    * statement to this field's base {@link O} if required.
     */
    AnnotationElementSource setType(JavaType<?> entity);
 
"
71eb3b17786b9fdd2068b100913ecdffc1364075,George Gastaldi,ExtendableSource.java,MODIFY,setSuperType -> [String type] | [JavaType type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java
index 20fcef7..6f229a2 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java
@@ -39,8 +39,8 @@
     * In the case of "" <code>public class Foo extends Bar {}</code>"" - <code>Foo</code> is the base type, and
     * <code>Bar</code> is the super class.)
     * <p>
-    * Attempt to add an import statement to this object's {@link O} if required. (Note that the given className must
-    * be fully-qualified in order to properly import required classes)
+    * Attempt to add an import statement to this object's {@link O} if required. (Note that the given className must be
+    * fully-qualified in order to properly import required classes)
     */
    public O setSuperType(String type);
 }
\ No newline at end of file
"
71eb3b17786b9fdd2068b100913ecdffc1364075,George Gastaldi,FieldHolderSource.java,MODIFY,addField -> [String declaration] | [],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/FieldHolderSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/FieldHolderSource.java
index feb2380..86d7807 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/FieldHolderSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/FieldHolderSource.java
@@ -27,8 +27,7 @@
    public FieldSource<O> addField();
 
    /**
-    * Add a new {@link Field} declaration to this {@link O} instance, using the given {@link String} as the
-    * declaration.
+    * Add a new {@link Field} declaration to this {@link O} instance, using the given {@link String} as the declaration.
     * <p/>
     * <strong>For example:</strong><br>
     * <code>Field f = javaClass.addField(""private String newField;"");</code>
@@ -39,15 +38,16 @@
     * Remove the given {@link Field} from this {@link O} instance, if it exists; otherwise, do nothing.
     */
    public O removeField(final Field<O> field);
+
    /**
     * Get the {@link Field} with the given name and return it, otherwise, return null.
     */
    @Override
    public FieldSource<O> getField(String name);
-   
+
    /**
-    * Get a list of all {@link Field}s declared by this {@link O}, or return an empty list if no {@link Field}s
-    * are declared.
+    * Get a list of all {@link Field}s declared by this {@link O}, or return an empty list if no {@link Field}s are
+    * declared.
     */
    @Override
    public List<FieldSource<O>> getFields();
"
71eb3b17786b9fdd2068b100913ecdffc1364075,George Gastaldi,InterfaceCapableSource.java,MODIFY,addInterface -> [JavaInterface type] | [String type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/InterfaceCapableSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/InterfaceCapableSource.java
index f5570b3..2b14f6e 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/InterfaceCapableSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/InterfaceCapableSource.java
@@ -10,7 +10,6 @@
 import org.jboss.forge.roaster.model.InterfaceCapable;
 import org.jboss.forge.roaster.model.JavaInterface;
 
-
 /**
  * Represents a {@link JavaSource} that may implement one or more interfaces.
  * 
"
71eb3b17786b9fdd2068b100913ecdffc1364075,George Gastaldi,JavaAnnotationSource.java,MODIFY,addAnnotationElement -> [String declaration] | [],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/JavaAnnotationSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/JavaAnnotationSource.java
index c214f7f..5dc9925 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/JavaAnnotationSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/JavaAnnotationSource.java
@@ -14,12 +14,13 @@
 import org.jboss.forge.roaster.model.JavaAnnotation;
 
 /**
- * Represents a Java {@code @interface} annotation source file as an in-memory modifiable element. See
- * {@link Roaster} for various options in generating {@link JavaAnnotationSource} instances.
+ * Represents a Java {@code @interface} annotation source file as an in-memory modifiable element. See {@link Roaster}
+ * for various options in generating {@link JavaAnnotationSource} instances.
  *
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
-public interface JavaAnnotationSource extends JavaAnnotation<JavaAnnotationSource>, JavaSource<JavaAnnotationSource>, TypeHolderSource<JavaAnnotationSource>
+public interface JavaAnnotationSource extends JavaAnnotation<JavaAnnotationSource>, JavaSource<JavaAnnotationSource>,
+         TypeHolderSource<JavaAnnotationSource>
 {
    /**
     * Get the {@link AnnotationElementSource} with the given name and return it, otherwise, return null.
@@ -35,14 +36,14 @@
    public List<AnnotationElementSource> getAnnotationElements();
 
    /**
-    * Add a new Java {@link AnnotationElementSource} to this {@link JavaAnnotationSource} instance. This will be a stub until
-    * further modified.
+    * Add a new Java {@link AnnotationElementSource} to this {@link JavaAnnotationSource} instance. This will be a stub
+    * until further modified.
     */
    public AnnotationElementSource addAnnotationElement();
 
    /**
-    * Add a new {@link AnnotationElementSource} declaration to this {@link JavaAnnotationSource} instance, using the given
-    * {@link String} as the declaration.
+    * Add a new {@link AnnotationElementSource} declaration to this {@link JavaAnnotationSource} instance, using the
+    * given {@link String} as the declaration.
     * <p/>
     * <strong>For example:</strong><br>
     * <code>AnnotationElement e = javaClass.addAnnotationElement(""String newAnnotationElement();"");</code>
"
71eb3b17786b9fdd2068b100913ecdffc1364075,George Gastaldi,MethodHolderSource.java,MODIFY,"getMethod -> [String name, Class paramTypes] | [String name]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/MethodHolderSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/MethodHolderSource.java
index caee8f7..f9dfceb 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/MethodHolderSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/MethodHolderSource.java
@@ -47,8 +47,8 @@
    public List<MethodSource<O>> getMethods();
 
    /**
-    * Add an uninitialized {@link MethodSource} declaration to this {@link O} instance. This {@link MethodSource} will be a stub
-    * until further modified.
+    * Add an uninitialized {@link MethodSource} declaration to this {@link O} instance. This {@link MethodSource} will
+    * be a stub until further modified.
     */
    public MethodSource<O> addMethod();
 
"
71eb3b17786b9fdd2068b100913ecdffc1364075,George Gastaldi,PropertySource.java,MODIFY,setType -> [JavaType entity] | [Class clazz],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/PropertySource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/PropertySource.java
index 0465dec..2689606 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/PropertySource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/PropertySource.java
@@ -12,6 +12,7 @@
 
 /**
  * Source variant of {@link Property} interface.
+ * 
  * @author mbenson
  *
  * @param <O>
@@ -38,14 +39,13 @@
     */
    PropertySource<O> setType(JavaType<?> entity);
 
-
    /**
     * Create the accessor method.
     * 
     * @throws IllegalStateException if property name unset or method already exists
     */
    MethodSource<O> createAccessor();
-   
+
    /**
     * Override.
     */
"
71eb3b17786b9fdd2068b100913ecdffc1364075,George Gastaldi,Refactory.java,MODIFY,"createHashCodeAndEquals -> [JavaClassSource clazz, FieldSource fields] | [JavaClassSource clazz]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
index d76f713..8d1f199 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
@@ -55,8 +55,8 @@
    /**
     * Create a <i>hashCode</i> and <i>equals</i> implementation for the given class and fields
     *
-    * @deprecated Use {@link Refactory#createHashCodeAndEquals(JavaClass, Field<O>...)} instead, since this method relies
-    *             on the existence of the id field
+    * @deprecated Use {@link Refactory#createHashCodeAndEquals(JavaClass, Field<O>...)} instead, since this method
+    *             relies on the existence of the id field
     */
    @Deprecated
    public static void createHashCodeAndEquals(final JavaClassSource clazz)
@@ -93,18 +93,18 @@
     */
    public static void createHashCodeAndEquals(final JavaClassSource clazz, final FieldSource<?>... fields)
    {
-      createEquals(clazz,fields);
-      createHashCode(clazz,fields);
+      createEquals(clazz, fields);
+      createHashCode(clazz, fields);
    }
-   
+
    /**
-    * Create an <i>equals</i> implementation for the given class and fields. Callers must verify that
-    * the types of the fields override the default identity based equals implementation. No warnings are
-    * issued in an event where the field type uses the implementation of java.lang.Object.
+    * Create an <i>equals</i> implementation for the given class and fields. Callers must verify that the types of the
+    * fields override the default identity based equals implementation. No warnings are issued in an event where the
+    * field type uses the implementation of java.lang.Object.
     *
-    * This method ignores static fields for generating the equals method, since they are ideally not meant
-    * to be used in these cases. Although transient fields could also be ignored, they are not since there is no
-    * mechanism to convey warnings (not errors) in this case.
+    * This method ignores static fields for generating the equals method, since they are ideally not meant to be used in
+    * these cases. Although transient fields could also be ignored, they are not since there is no mechanism to convey
+    * warnings (not errors) in this case.
     *
     * @param clazz class to be changed
     * @param fields fields to be used in the equals/hashCode methods
@@ -130,17 +130,20 @@
       {
          if (field == null)
          {
-            throw new IllegalArgumentException(""A supplied field was null. The equals and hashCode computation will be aborted."");
+            throw new IllegalArgumentException(
+                     ""A supplied field was null. The equals and hashCode computation will be aborted."");
          }
          if (field.isStatic())
          {
-            throw new IllegalArgumentException(""A static field was detected. The equals and hashCode computation will be aborted."");
+            throw new IllegalArgumentException(
+                     ""A static field was detected. The equals and hashCode computation will be aborted."");
          }
 
          String fieldName = field.getName();
          if (field.getType().isArray())
          {
-            fieldEqualityChecks.append(""if (!java.util.Arrays.equals("").append(fieldName).append("", other."").append(fieldName)
+            fieldEqualityChecks.append(""if (!java.util.Arrays.equals("").append(fieldName).append("", other."")
+                     .append(fieldName)
                      .append("")) {"");
             fieldEqualityChecks.append("" return false; }"");
          }
@@ -180,7 +183,7 @@
          }
       }
 
-      if (fieldEqualityChecks.length() < 1 )
+      if (fieldEqualityChecks.length() < 1)
       {
          throw new IllegalArgumentException(
                   ""A failure was detected when generating the equals and hashCode methods. Verify the type and modifiers of the provided fields."");
@@ -203,15 +206,15 @@
                         ""}"")
                .addAnnotation(Override.class);
    }
-   
+
    /**
-    * Create a <i>hashCode</i> implementation for the given class and fields. Callers must verify that
-    * the types of the fields override the default identity based hashcode implementation. No warnings are
-    * issued in an event where the field type uses the implementation of java.lang.Object.
+    * Create a <i>hashCode</i> implementation for the given class and fields. Callers must verify that the types of the
+    * fields override the default identity based hashcode implementation. No warnings are issued in an event where the
+    * field type uses the implementation of java.lang.Object.
     *
-    * This method ignores static fields for generating the equals method, since they are ideally not meant
-    * to be used in these cases. Although transient fields could also be ignored, they are not since there is no
-    * mechanism to convey warnings (not errors) in this case.
+    * This method ignores static fields for generating the equals method, since they are ideally not meant to be used in
+    * these cases. Although transient fields could also be ignored, they are not since there is no mechanism to convey
+    * warnings (not errors) in this case.
     *
     * @param clazz class to be changed
     * @param fields fields to be used in the equals/hashCode methods
@@ -239,17 +242,20 @@
       {
          if (field == null)
          {
-            throw new IllegalArgumentException(""A supplied field was null. The equals and hashCode computation will be aborted."");
+            throw new IllegalArgumentException(
+                     ""A supplied field was null. The equals and hashCode computation will be aborted."");
          }
          if (field.isStatic())
          {
-            throw new IllegalArgumentException(""A static field was detected. The equals and hashCode computation will be aborted."");
+            throw new IllegalArgumentException(
+                     ""A static field was detected. The equals and hashCode computation will be aborted."");
          }
 
          String fieldName = field.getName();
          if (field.getType().isArray())
          {
-            hashCodeComputation.append(""result = prime * result + java.util.Arrays.hashCode("").append(fieldName).append("");"");
+            hashCodeComputation.append(""result = prime * result + java.util.Arrays.hashCode("").append(fieldName)
+                     .append("");"");
          }
          else if (field.getType().isPrimitive())
          {
@@ -310,7 +316,7 @@
                         ""return result; }"")
                .addAnnotation(Override.class);
    }
-   
+
    /**
     * Create a <i>toString</i> implementation using all the fields in this class
     *
@@ -328,7 +334,8 @@
     * @param clazz
     * @param fields
     */
-   public static void createToStringFromFields(final JavaClassSource clazz, final FieldSource<JavaClassSource>... fields)
+   public static void createToStringFromFields(final JavaClassSource clazz,
+            final FieldSource<JavaClassSource>... fields)
    {
       createToStringFromFields(clazz, Arrays.asList(fields));
    }
@@ -339,7 +346,8 @@
     * @param clazz
     * @param fields
     */
-   public static void createToStringFromFields(final JavaClassSource clazz, final List<FieldSource<JavaClassSource>> fields)
+   public static void createToStringFromFields(final JavaClassSource clazz,
+            final List<FieldSource<JavaClassSource>> fields)
    {
       MethodSource<JavaClassSource> method = clazz.addMethod().setName(""toString"").setReturnType(String.class)
                .setPublic();
"
71eb3b17786b9fdd2068b100913ecdffc1364075,George Gastaldi,StringEscapeUtils.java,MODIFY,"escapeJava -> [Writer out, String str] | [String str]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/StringEscapeUtils.java b/api/src/main/java/org/jboss/forge/roaster/model/util/StringEscapeUtils.java
index 5557814..c8c8b06 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/StringEscapeUtils.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/StringEscapeUtils.java
@@ -45,7 +45,7 @@
  * @version $Id: StringEscapeUtils.java 1057072 2011-01-10 01:55:57Z niallp $
  */
 // *** THIS FILE HAS BEEN MODIFIED FROM THE ORIGINAL VERSION. IT PROVIDES ***
-// *** ONLY THE REQUIRED FUNCTIONALITY, WITH REDUCED ACCESSIBILITY.       ***
+// *** ONLY THE REQUIRED FUNCTIONALITY, WITH REDUCED ACCESSIBILITY. ***
 class StringEscapeUtils
 {
 
"
71eb3b17786b9fdd2068b100913ecdffc1364075,George Gastaldi,Strings.java,MODIFY,"getLevenshteinDistance -> [CharSequence s, CharSequence t, int threshold] | [CharSequence s, CharSequence t]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Strings.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Strings.java
index 2683801..2d6746e 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Strings.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Strings.java
@@ -180,7 +180,7 @@
        * (taking the minimum of the cost count to the left, up one, and diagonally up and to the left of the current
        * cost count being calculated). (Note that the arrays aren't really copied anymore, just switched...this is
        * clearly much better than cloning an array or doing a System.arraycopy() each time through the outer loop.)
-       *
+       * 
        * Effectively, the difference between the two implementations is this one does not cause an out of memory
        * condition when calculating the LD over two very large strings.
        */
@@ -300,27 +300,27 @@
        * reduce it to O(km) time by only computing a diagonal stripe of width 2k + 1 of the cost table. It is also
        * possible to use this to compute the unbounded Levenshtein distance by starting the threshold at 1 and doubling
        * each time until the distance is found; this is O(dm), where d is the distance.
-       *
+       * 
        * One subtlety comes from needing to ignore entries on the border of our stripe eg. p[] = |#|#|#|* d[] = *|#|#|#|
        * We must ignore the entry to the left of the leftmost member We must ignore the entry above the rightmost member
-       *
+       * 
        * Another subtlety comes from our stripe running off the matrix if the strings aren't of the same size. Since
        * string s is always swapped to be the shorter of the two, the stripe will always run off to the upper right
        * instead of the lower left of the matrix.
-       *
+       * 
        * As a concrete example, suppose s is of length 5, t is of length 7, and our threshold is 1. In this case we're
        * going to walk a stripe of length 3. The matrix would look like so:
-       *
+       * 
        * 1 2 3 4 5 1 |#|#| | | | 2 |#|#|#| | | 3 | |#|#|#| | 4 | | |#|#|#| 5 | | | |#|#| 6 | | | | |#| 7 | | | | | |
-       *
+       * 
        * Note how the stripe leads off the table as there is no possible way to turn a string of length 5 into one of
        * length 7 in edit distance of 1.
-       *
+       * 
        * Additionally, this implementation decreases memory usage by using two single-dimensional arrays and swapping
        * them back and forth instead of allocating an entire n by m matrix. This requires a few minor changes, such as
        * immediately returning when it's detected that the stripe has run off the matrix and initially filling the
        * arrays with large values so that entries we don't compute are ignored.
-       *
+       * 
        * See Algorithms on Strings, Trees and Sequences by Dan Gusfield for some discussion.
        */
 
"
71eb3b17786b9fdd2068b100913ecdffc1364075,George Gastaldi,AnnotationAccessor.java,MODIFY,"addAnnotation -> [AnnotationTargetSource target, List modifiers, String className] | [AnnotationTargetSource target, ASTNode body]","diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java b/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java
index e2d19a5..025394c 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java
@@ -192,7 +192,8 @@
       return getAnnotation(target, variableDeclaration.modifiers(), type.getName());
    }
 
-   public AnnotationSource<O> getAnnotation(final AnnotationTargetSource<O, T> target, final ASTNode body, final String type)
+   public AnnotationSource<O> getAnnotation(final AnnotationTargetSource<O, T> target, final ASTNode body,
+            final String type)
    {
       return getAnnotation(target, getModifiers(body), type);
    }
@@ -203,7 +204,8 @@
       return getAnnotation(target, variableDeclaration.modifiers(), type);
    }
 
-   private AnnotationSource<O> getAnnotation(final AnnotationTargetSource<O, T> target, final List<?> modifiers, final String type)
+   private AnnotationSource<O> getAnnotation(final AnnotationTargetSource<O, T> target, final List<?> modifiers,
+            final String type)
    {
       List<AnnotationSource<O>> annotations = getAnnotations(target, modifiers);
       for (AnnotationSource<O> annotation : annotations)
"
71eb3b17786b9fdd2068b100913ecdffc1364075,George Gastaldi,MethodFinderVisitor.java,MODIFY,visit -> [AnonymousClassDeclaration node] | [TypeDeclaration node],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/ast/MethodFinderVisitor.java b/impl/src/main/java/org/jboss/forge/roaster/model/ast/MethodFinderVisitor.java
index 687d8df..b730299 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/ast/MethodFinderVisitor.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/ast/MethodFinderVisitor.java
@@ -65,7 +65,7 @@
       addMethods(bodyDeclarations);
       return false;
    }
-   
+
    public List<MethodDeclaration> getMethods()
    {
       return Collections.unmodifiableList(methods);
"
71eb3b17786b9fdd2068b100913ecdffc1364075,George Gastaldi,AnnotationElementImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationElementImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationElementImpl.java
index c0b2716..08cf543 100755
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationElementImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationElementImpl.java
@@ -345,7 +345,8 @@
    }
 
    @Override
-   public AnnotationSource<JavaAnnotationSource> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
+   public AnnotationSource<JavaAnnotationSource> addAnnotation(
+            final Class<? extends java.lang.annotation.Annotation> clazz)
    {
       if (parent.requiresImport(clazz))
       {
@@ -379,7 +380,8 @@
    }
 
    @Override
-   public AnnotationSource<JavaAnnotationSource> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
+   public AnnotationSource<JavaAnnotationSource> getAnnotation(
+            final Class<? extends java.lang.annotation.Annotation> type)
    {
       return annotations.getAnnotation(this, member, type);
    }
"
71eb3b17786b9fdd2068b100913ecdffc1364075,George Gastaldi,JavaAnnotationImpl.java,MODIFY,addAnnotationElement -> [String declaration] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaAnnotationImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaAnnotationImpl.java
index 05e06ea..741c9de 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaAnnotationImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaAnnotationImpl.java
@@ -57,7 +57,7 @@
       @SuppressWarnings(""unchecked"")
       final ListIterator<BodyDeclaration> members = getBodyDeclaration().bodyDeclarations().listIterator();
 
-      //skip any members before annotation elements, i.e. nested types
+      // skip any members before annotation elements, i.e. nested types
       while (members.hasNext())
       {
          if (members.next() instanceof AnnotationTypeMemberDeclaration)
@@ -65,14 +65,14 @@
             break;
          }
       }
-      //find the last annotation element
+      // find the last annotation element
       while (members.hasNext())
       {
          if (members.next() instanceof AnnotationTypeMemberDeclaration)
          {
             continue;
          }
-         //back up a step
+         // back up a step
          members.previous();
          break;
       }
"
71eb3b17786b9fdd2068b100913ecdffc1364075,George Gastaldi,TypeImpl.java,MODIFY,isType -> [String name] | [Class type],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/TypeImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/TypeImpl.java
index e1f3a2f..8faf2fb 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/TypeImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/TypeImpl.java
@@ -199,7 +199,7 @@
    public int getArrayDimensions()
    {
       int result = 0;
-      
+
       if (type.isArrayType())
       {
          result += ((ArrayType) type).getDimensions();
"
df60e02194cf37ccbf63fd6a71b7d1c4be6c5c2a,George Gastaldi,AnnotationAccessor.java,MODIFY,"addAnnotation -> [AnnotationTargetSource target, List modifiers, String className] | [AnnotationTargetSource target, ASTNode body]","diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java b/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java
index 025394c..4637139 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java
@@ -87,7 +87,7 @@
    private AnnotationSource<O> addAnnotation(final AnnotationTargetSource<O, T> target, final List<?> modifiers,
             final String className)
    {
-      if (!target.getOrigin().hasImport(className) && Types.isQualified(className))
+      if (target.getOrigin().requiresImport(className) && !target.getOrigin().hasImport(className) && Types.isQualified(className))
       {
          target.getOrigin().addImport(className);
       }
"
1f3cdd2b35336c9f3855302dab43fc7d4093b0c2,George Gastaldi,Formatter.java,MODIFY,"format -> [Properties prefs, String source] | [File source]","diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java b/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
index bc62ac8..e753daf 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
@@ -55,7 +55,7 @@
    {
       Properties options = readConfig(prefs);
       if (options == null)
-         options = readConfigInternal(""org.eclipse.jdt.core.prefs"");
+         options = readConfigInternal();
 
       InputStream in = null;
       OutputStream out = null;
@@ -97,7 +97,7 @@
     */
    public static String format(String source)
    {
-      Properties options = readConfigInternal(""org.eclipse.jdt.core.prefs"");
+      Properties options = readConfigInternal();
       return format(options, source);
    }
 
@@ -170,18 +170,17 @@
       return modified;
    }
 
-   private static Properties readConfigInternal(String filename)
+   private static Properties readConfigInternal()
    {
       InputStream stream = new BufferedInputStream(org.jboss.forge.roaster.model.util.Formatter.class
-               .getResourceAsStream(filename));
+               .getResourceAsStream(""org.eclipse.jdt.core.prefs""));
       try
       {
          return parseConfig(stream);
       }
       catch (IOException e)
       {
-         throw new RuntimeException(""Error reading internal configuration: [""
-                  + filename + ""]"", e);
+         throw new RuntimeException(""Error reading internal configuration: [org.eclipse.jdt.core.prefs]"", e);
       }
       finally
       {
"
dc593b5fe155fd084d518430b5260b2217fd28af,George Gastaldi,Formatter.java,MODIFY,"format -> [Properties prefs, String source] | [File source]","diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java b/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
index e753daf..d85b009 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
@@ -22,6 +22,7 @@
 import org.eclipse.jdt.core.JavaCore;
 import org.eclipse.jdt.core.ToolFactory;
 import org.eclipse.jdt.core.formatter.CodeFormatter;
+import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
 import org.eclipse.jface.text.BadLocationException;
 import org.eclipse.jface.text.Document;
 import org.eclipse.jface.text.IDocument;
@@ -170,22 +171,19 @@
       return modified;
    }
 
+   /**
+    * The given options should at least provide the source level (JavaCore.COMPILER_SOURCE), the compiler compliance
+    * level (JavaCore.COMPILER_COMPLIANCE) and the target platform (JavaCore.COMPILER_CODEGEN_TARGET_PLATFORM).
+    * 
+    * Without these options, it is not possible for the code formatter to know what kind of source it needs to format.
+    */
    private static Properties readConfigInternal()
    {
-      InputStream stream = new BufferedInputStream(org.jboss.forge.roaster.model.util.Formatter.class
-               .getResourceAsStream(""org.eclipse.jdt.core.prefs""));
-      try
-      {
-         return parseConfig(stream);
-      }
-      catch (IOException e)
-      {
-         throw new RuntimeException(""Error reading internal configuration: [org.eclipse.jdt.core.prefs]"", e);
-      }
-      finally
-      {
-         Streams.closeQuietly(stream);
-      }
+      Properties properties = new Properties();
+      properties.setProperty(JavaCore.COMPILER_SOURCE, CompilerOptions.VERSION_1_8);
+      properties.setProperty(JavaCore.COMPILER_COMPLIANCE, CompilerOptions.VERSION_1_8);
+      properties.setProperty(JavaCore.COMPILER_CODEGEN_TARGET_PLATFORM, CompilerOptions.VERSION_1_8);
+      return properties;
    }
 
    private static Properties parseConfig(InputStream stream)
"
268eb0d4229c037816779f5836559b176aa9199c,George Gastaldi,Formatter.java,MODIFY,"format -> [Properties prefs, String source] | [File source]","diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java b/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
index d85b009..4c00359 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
@@ -107,24 +107,19 @@
     */
    public static String format(Properties prefs, String source)
    {
-      final CodeFormatter codeFormatter = ToolFactory.createCodeFormatter(prefs);
-      return _format(source, codeFormatter);
-   }
-
-   private static String _format(String contents, CodeFormatter codeFormatter)
-   {
-      IDocument doc = new Document(contents);
+      CodeFormatter codeFormatter = ToolFactory.createCodeFormatter(prefs);
+      IDocument doc = new Document(source);
       try
       {
          TextEdit edit = codeFormatter.format(CodeFormatter.K_COMPILATION_UNIT,
-                  contents, 0, contents.length(), 0, null);
+                  source, 0, source.length(), 0, null);
          if (edit != null)
          {
             edit.apply(doc);
          }
          else
          {
-            return contents;
+            return source;
          }
       }
       catch (BadLocationException e)
"
0f40999a18b95d02e65447be344ce37c7826e743,George Gastaldi,EnumConstantImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantImpl.java
index 3ddd578..f623120 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantImpl.java
@@ -146,7 +146,7 @@
    @Override
    public AnnotationSource<JavaEnumSource> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
    {
-      if (!parent.hasImport(clazz))
+      if (parent.requiresImport(clazz))
       {
          parent.addImport(clazz);
       }
"
0f40999a18b95d02e65447be344ce37c7826e743,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index c975d45..80d8854 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -121,7 +121,7 @@
    @Override
    public AnnotationSource<O> addAnnotation(final Class<? extends java.lang.annotation.Annotation> clazz)
    {
-      if (!parent.hasImport(clazz))
+      if (parent.requiresImport(clazz))
       {
          parent.addImport(clazz);
       }
"
f978da85eb21c27adbb34ebbf2701d27c2e7cb74,George Gastaldi,JavaEnumSource.java,MODIFY,addEnumConstant -> [String declaration] | [],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/JavaEnumSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/JavaEnumSource.java
index 5024c50..821b025 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/JavaEnumSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/JavaEnumSource.java
@@ -23,7 +23,7 @@
          InterfaceCapableSource<JavaEnumSource>,
          FieldHolderSource<JavaEnumSource>,
          MethodHolderSource<JavaEnumSource>,
-         PropertyHolderSource<JavaEnumSource>, TypeHolderSource<JavaEnumSource>
+         PropertyHolderSource<JavaEnumSource>, TypeHolderSource<JavaEnumSource>, StaticCapableSource<JavaEnumSource>
 {
    /**
     * Return the {@link EnumConstant} with the given name, or return null if no such constant exists.
"
f978da85eb21c27adbb34ebbf2701d27c2e7cb74,George Gastaldi,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
index 495c2ab..e27fac6 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
@@ -41,6 +41,7 @@
 import org.jboss.forge.roaster.model.source.Import;
 import org.jboss.forge.roaster.model.source.JavaDocSource;
 import org.jboss.forge.roaster.model.source.JavaSource;
+import org.jboss.forge.roaster.model.source.StaticCapableSource;
 import org.jboss.forge.roaster.model.source.TypeHolderSource;
 import org.jboss.forge.roaster.model.util.Formatter;
 import org.jboss.forge.roaster.model.util.Strings;
@@ -55,7 +56,7 @@
  */
 @SuppressWarnings(""unchecked"")
 public abstract class AbstractJavaSource<O extends JavaSource<O>> implements
-         JavaSource<O>, TypeHolderSource<O>
+         JavaSource<O>, TypeHolderSource<O>, StaticCapableSource<O>
 {
    private final AnnotationAccessor<O, O> annotations = new AnnotationAccessor<O, O>();
    private final ModifierAccessor modifiers = new ModifierAccessor();
@@ -895,6 +896,26 @@
       return body.getJavadoc() != null;
    }
 
+   @Override
+   public boolean isStatic()
+   {
+      return modifiers.hasModifier(getBodyDeclaration(), ModifierKeyword.STATIC_KEYWORD);
+   }
+
+   @Override
+   public O setStatic(boolean _static)
+   {
+      if (_static)
+      {
+         modifiers.addModifier(getBodyDeclaration(), ModifierKeyword.STATIC_KEYWORD);
+      }
+      else
+      {
+         modifiers.removeModifier(getBodyDeclaration(), ModifierKeyword.STATIC_KEYWORD);
+      }
+      return (O) this;
+   }
+
    private List<AbstractTypeDeclaration> getNestedDeclarations(BodyDeclaration body)
    {
       TypeDeclarationFinderVisitor typeDeclarationFinder = new TypeDeclarationFinderVisitor();
"
e6b51ddaaf76d7d6cb06296b43b671684c330d0a,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index 80d8854..fd3b6fc 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -347,6 +347,26 @@
    }
 
    @Override
+   public MethodSource<O> setSynchronized(boolean value)
+   {
+      if (value)
+      {
+         modifiers.addModifier(method, ModifierKeyword.SYNCHRONIZED_KEYWORD);
+      }
+      else
+      {
+         modifiers.removeModifier(method, ModifierKeyword.SYNCHRONIZED_KEYWORD);
+      }
+      return this;
+   }
+
+   @Override
+   public boolean isSynchronized()
+   {
+      return modifiers.hasModifier(method, ModifierKeyword.SYNCHRONIZED_KEYWORD);
+   }
+
+   @Override
    public MethodSource<O> setNative(boolean value)
    {
       if (value)
"
cdc1f17a9d85f1641463afa699382f27377792f0,George Gastaldi,MethodSource.java,MODIFY,setReturnType -> [JavaType type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/MethodSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/MethodSource.java
index 301f89f..73d0ffb 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/MethodSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/MethodSource.java
@@ -39,14 +39,6 @@
    MethodSource<O> setNative(boolean value);
 
    /**
-    * Sets this method be <b>abstract</b>
-    * 
-    * <b>IMPORTANT</b>: Setting it to true will remove the method body.
-    */
-   @Override
-   MethodSource<O> setAbstract(boolean abstrct);
-
-   /**
     * Set this {@link Method} to return the given type.
     */
    MethodSource<O> setReturnType(final Class<?> type);
"
541472e80de5d7ac08d25479254cecd3434ebc3e,George Gastaldi,Importer.java,MODIFY,hasImport -> [Import imprt] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/Importer.java b/api/src/main/java/org/jboss/forge/roaster/model/source/Importer.java
index f3e8e2c..6b2c02c 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/Importer.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/Importer.java
@@ -10,6 +10,7 @@
 import java.util.List;
 
 import org.jboss.forge.roaster.model.JavaType;
+import org.jboss.forge.roaster.model.Type;
 
 /**
  * Defines the aspect of {@link JavaSource} that handles type imports.
@@ -102,6 +103,18 @@
    public <T extends JavaType<?>> Import addImport(T type);
 
    /**
+    * Ensures the type passed as argument is included in the list of imports for this java source.
+    * The method will also recursively import parameter types. This method is idempotent: if a type has
+    * already been imported, no further action will be required.
+    * The method returns the name that can be used inside the code to reference the type. The name will be simple
+    * if no ambiguity exists with other types having the same (local) name, or fully qualified otherwise.
+    * @param type  The {@link org.jboss.forge.roaster.model.Type} to be imported.
+    * @return      The name (simple or fully qualified) that should be used to reference the imported type in the code
+    * @seeAlso     org.jboss.forge.roaster.model.Type
+    */
+   public Import addImport(Type<?> type);
+
+   /**
     * Remove any {@link Import} for the given fully-qualified class name, if it exists; otherwise, do nothing;
     */
    public O removeImport(String name);
"
541472e80de5d7ac08d25479254cecd3434ebc3e,George Gastaldi,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
index e27fac6..266abdf 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
@@ -25,6 +25,7 @@
 import org.eclipse.jdt.core.dom.Modifier.ModifierKeyword;
 import org.eclipse.jdt.core.dom.PackageDeclaration;
 import org.eclipse.jdt.core.dom.TypeDeclaration;
+import org.eclipse.jdt.core.dom.TypeParameter;
 import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
 import org.eclipse.jface.text.Document;
 import org.eclipse.text.edits.TextEdit;
@@ -33,6 +34,7 @@
 import org.jboss.forge.roaster.model.Annotation;
 import org.jboss.forge.roaster.model.JavaType;
 import org.jboss.forge.roaster.model.SyntaxError;
+import org.jboss.forge.roaster.model.Type;
 import org.jboss.forge.roaster.model.Visibility;
 import org.jboss.forge.roaster.model.ast.AnnotationAccessor;
 import org.jboss.forge.roaster.model.ast.ModifierAccessor;
@@ -448,7 +450,18 @@
    @Override
    public O setName(final String name)
    {
-      getBodyDeclaration().setName(unit.getAST().newSimpleName(name));
+      AbstractTypeDeclaration typeDeclaration = getBodyDeclaration();
+      TypeImpl<O> type = new TypeImpl(this,null,name);
+
+      typeDeclaration.setName( unit.getAST().newSimpleName(type.getName()) );
+      if (typeDeclaration instanceof TypeDeclaration) {
+         TypeDeclaration td = (TypeDeclaration) typeDeclaration;
+         for ( Type arg : type.getTypeArguments() ) {
+            TypeParameter typeParameter = unit.getAST().newTypeParameter();
+            typeParameter.setName(unit.getAST().newSimpleName(arg.getName()));
+            td.typeParameters().add(typeParameter);
+         }
+      }
       return updateTypeNames(name);
    }
 
@@ -936,4 +949,23 @@
       return result;
    }
 
+   public Import addImport(final Type<?> type)
+   {
+      Import imprt;
+      if (requiresImport(type.getQualifiedName()))
+      {
+         imprt = addImport(type.getQualifiedName());
+      } else {
+         imprt = getImport(type.getSimpleName());
+      }
+      for (Type<?> arg : type.getTypeArguments())
+      {
+         if (!arg.isWildcard() && arg.isQualified())
+         {
+            addImport(arg);
+         }
+      }
+      return imprt;
+   }
+
 }
\ No newline at end of file
"
541472e80de5d7ac08d25479254cecd3434ebc3e,George Gastaldi,EnumConstantBodyImpl.java,MODIFY,addImport -> [JavaType type] | [String className],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
index cf4b4b4..3e125ff 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
@@ -30,6 +30,7 @@
 import org.jboss.forge.roaster.model.Method;
 import org.jboss.forge.roaster.model.Parameter;
 import org.jboss.forge.roaster.model.SyntaxError;
+import org.jboss.forge.roaster.model.Type;
 import org.jboss.forge.roaster.model.Visibility;
 import org.jboss.forge.roaster.model.ast.MethodFinderVisitor;
 import org.jboss.forge.roaster.model.ast.TypeDeclarationFinderVisitor;
@@ -99,6 +100,7 @@
    }
 
    @Override
+
    public boolean isInterface()
    {
       return false;
@@ -886,6 +888,11 @@
    }
 
    @Override
+   public Import addImport(Type<?> type) {
+      return getEnclosingType().addImport(type);
+   }
+
+   @Override
    public JavaDocSource<Body> getJavaDoc()
    {
       BodyDeclaration body = getFirstBodyDeclaration();
"
541472e80de5d7ac08d25479254cecd3434ebc3e,George Gastaldi,FieldImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
index 63fcc17..c1f778e 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
@@ -27,7 +27,7 @@
 import org.jboss.forge.roaster.model.ast.ModifierAccessor;
 import org.jboss.forge.roaster.model.source.AnnotationSource;
 import org.jboss.forge.roaster.model.source.FieldSource;
-import org.jboss.forge.roaster.model.source.JavaClassSource;
+import org.jboss.forge.roaster.model.source.Import;
 import org.jboss.forge.roaster.model.source.JavaDocSource;
 import org.jboss.forge.roaster.model.source.JavaSource;
 import org.jboss.forge.roaster.model.util.Strings;
@@ -329,23 +329,13 @@
    }
 
    @Override
-   public FieldSource<O> setType(final String typeName)
+   public FieldSource<O> setType(String typeName)
    {
-      String simpleName = Types.toSimpleName(typeName);
-
       O origin = getOrigin();
-      if (!Strings.areEqual(typeName, simpleName) && origin.requiresImport(typeName))
-      {
-         origin.addImport(typeName);
-      }
-
-      String stub = ""public class Stub { "" + simpleName + "" field; }"";
-      JavaClassSource temp = (JavaClassSource) Roaster.parse(stub);
-      List<FieldSource<JavaClassSource>> fields = temp.getFields();
-      org.eclipse.jdt.core.dom.Type fieldType = ((FieldDeclaration) ((VariableDeclarationFragment) fields.get(0)
-               .getInternal()).getParent()).getType();
-
-      fieldType = (org.eclipse.jdt.core.dom.Type) ASTNode.copySubtree(field.getAST(), fieldType);
+      Type innerType = new TypeImpl<O>(origin,null,typeName);
+      Import imprt = getOrigin().addImport(innerType);
+      String resolvedType = imprt != null ? Types.rebuildGenericNameWithArrays(imprt.getSimpleName(),innerType) : Types.toSimpleName(typeName);
+      org.eclipse.jdt.core.dom.Type fieldType = TypeImpl.fromString(resolvedType,this.ast);
       field.setType(fieldType);
 
       return this;
"
541472e80de5d7ac08d25479254cecd3434ebc3e,George Gastaldi,JavaClassImpl.java,MODIFY,setSuperType -> [String type] | [JavaType type],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
index bd78db6..3926bb1 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
@@ -6,10 +6,12 @@
  */
 package org.jboss.forge.roaster.model.impl;
 
+import org.eclipse.jdt.core.dom.ArrayType;
 import org.eclipse.jdt.core.dom.BodyDeclaration;
 import org.eclipse.jdt.core.dom.CompilationUnit;
 import org.eclipse.jdt.core.dom.Modifier.ModifierKeyword;
 import org.eclipse.jdt.core.dom.SimpleType;
+import org.eclipse.jdt.core.dom.Type;
 import org.eclipse.jdt.core.dom.TypeDeclaration;
 import org.eclipse.jface.text.Document;
 import org.jboss.forge.roaster.model.JavaType;
@@ -152,9 +154,8 @@
 
          for (String typeP : typesGeneric.split("",""))
          {
-            pt.typeArguments().add(
-                     body.getAST().newSimpleType(body.getAST().newSimpleName(Types.toSimpleName(typeP.trim()))));
-
+            Type t = TypeImpl.fromString(Types.toSimpleName(typeP.trim()),body.getAST());
+            pt.typeArguments().add(t);
             if (!hasImport(typeP) && Types.isQualified(typeP))
             {
                addImport(typeP);
@@ -165,7 +166,7 @@
       }
       else
       {
-         SimpleType simpleType = body.getAST().newSimpleType(body.getAST().newSimpleName(Types.toSimpleName(type)));
+         SimpleType simpleType = body.getAST().newSimpleType( body.getAST().newSimpleName( Types.toSimpleName( type ) ) );
          getBodyDeclaration().setStructuralProperty(TypeDeclaration.SUPERCLASS_TYPE_PROPERTY, simpleType);
 
          if (!hasImport(type) && Types.isQualified(type))
"
541472e80de5d7ac08d25479254cecd3434ebc3e,George Gastaldi,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
index 937b8a7..5a2f7f7 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
@@ -23,6 +23,7 @@
 import org.jboss.forge.roaster.model.Annotation;
 import org.jboss.forge.roaster.model.JavaType;
 import org.jboss.forge.roaster.model.SyntaxError;
+import org.jboss.forge.roaster.model.Type;
 import org.jboss.forge.roaster.model.Visibility;
 import org.jboss.forge.roaster.model.ast.AnnotationAccessor;
 import org.jboss.forge.roaster.model.ast.ModifierAccessor;
@@ -722,6 +723,11 @@
    }
 
    @Override
+   public Import addImport(Type<?> type) {
+      return addImport(type.getQualifiedName());
+   }
+
+   @Override
    public JavaDocSource<JavaPackageInfoSource> getJavaDoc()
    {
       Javadoc javadoc = pkg.getJavadoc();
@@ -745,4 +751,12 @@
    {
       return pkg.getJavadoc() != null;
    }
+
+   public CompilationUnit getUnit() {
+      return unit;
+   }
+
+   public PackageDeclaration getPkg() {
+      return pkg;
+   }
 }
"
541472e80de5d7ac08d25479254cecd3434ebc3e,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index fd3b6fc..e9ee0f9 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -32,6 +32,7 @@
 import org.jboss.forge.roaster.model.ast.AnnotationAccessor;
 import org.jboss.forge.roaster.model.ast.ModifierAccessor;
 import org.jboss.forge.roaster.model.source.AnnotationSource;
+import org.jboss.forge.roaster.model.source.Import;
 import org.jboss.forge.roaster.model.source.JavaClassSource;
 import org.jboss.forge.roaster.model.source.JavaDocSource;
 import org.jboss.forge.roaster.model.source.JavaSource;
@@ -301,7 +302,7 @@
       {
          modifiers.addModifier(method, ModifierKeyword.ABSTRACT_KEYWORD);
          // Abstract methods do not specify a body
-         setBody(null);
+         setBody((String)null);
       }
       else
       {
@@ -373,7 +374,7 @@
       {
          modifiers.addModifier(method, ModifierKeyword.NATIVE_KEYWORD);
          // Native methods do not specify a body
-         setBody(null);
+         setBody((String)null);
       }
       else
       {
@@ -739,12 +740,11 @@
    @Override
    public ParameterSource<O> addParameter(String type, String name)
    {
-      if (getOrigin().requiresImport(type))
-      {
-         getOrigin().addImport(type);
-      }
-      String stub = ""public class Stub { public void method( "" + Types.toSimpleName(Types.fixArray(type, false)) + "" ""
-               + name + "" ) {} }"";
+      Type innerType = new TypeImpl<O>(getOrigin(),null,type);
+      Import imprt = getOrigin().addImport(innerType);
+      String resolvedType = imprt != null ? Types.rebuildGenericNameWithArrays( imprt.getSimpleName(),innerType) : Types.toSimpleName(type);
+
+      String stub = ""public class Stub { public void method( "" + resolvedType + "" "" + name + "" ) {} }"";
       JavaClassSource temp = (JavaClassSource) Roaster.parse(stub);
       List<MethodSource<JavaClassSource>> methods = temp.getMethods();
       List<VariableDeclaration> astParameters = ((MethodDeclaration) methods.get(0).getInternal()).parameters();
"
921beda4d444d9325630dc76ebf9bf627a6b3958,George Gastaldi,Type.java,MODIFY,isType -> [String name] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/Type.java b/api/src/main/java/org/jboss/forge/roaster/model/Type.java
index 9033355..daab701 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/Type.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/Type.java
@@ -19,29 +19,31 @@
    List<Type<O>> getTypeArguments();
 
    /**
-    * Returns the type's name after erasing any type parameters.
-    * Preserves array dimensions
+    * Returns the type's name after erasing any type parameters. Preserves array dimensions
+    * 
     * @return the type's name without type parameters
     */
    String getName();
 
    /**
-    * Returns the type's name, simplifying qualified names based on imports
-    * Preserves generic parameters, simplifying them recursively
-    * Preserves array dimensions
+    * Returns the type's name, simplifying qualified names based on imports Preserves generic parameters, simplifying
+    * them recursively Preserves array dimensions
+    * 
     * @return the type's simple name
     */
    String getSimpleName();
 
    /**
     * Returns the type's qualified name, expanding simple names according to imports
+    * 
     * @return the type's qualified name
     */
    String getQualifiedName();
 
    /**
-    * Returns the type's qualified name, preserving type parameters (which are also qualified)
-    * Preserves array dimensions.
+    * Returns the type's qualified name, preserving type parameters (which are also qualified) Preserves array
+    * dimensions.
+    * 
     * @return the type's qualified name, including type parameters
     */
    String getQualifiedNameWithGenerics();
"
921beda4d444d9325630dc76ebf9bf627a6b3958,George Gastaldi,Importer.java,MODIFY,hasImport -> [Import imprt] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/Importer.java b/api/src/main/java/org/jboss/forge/roaster/model/source/Importer.java
index 6b2c02c..280d5e3 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/Importer.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/Importer.java
@@ -103,14 +103,15 @@
    public <T extends JavaType<?>> Import addImport(T type);
 
    /**
-    * Ensures the type passed as argument is included in the list of imports for this java source.
-    * The method will also recursively import parameter types. This method is idempotent: if a type has
-    * already been imported, no further action will be required.
-    * The method returns the name that can be used inside the code to reference the type. The name will be simple
-    * if no ambiguity exists with other types having the same (local) name, or fully qualified otherwise.
-    * @param type  The {@link org.jboss.forge.roaster.model.Type} to be imported.
-    * @return      The name (simple or fully qualified) that should be used to reference the imported type in the code
-    * @seeAlso     org.jboss.forge.roaster.model.Type
+    * Ensures the type passed as argument is included in the list of imports for this java source. The method will also
+    * recursively import parameter types. This method is idempotent: if a type has already been imported, no further
+    * action will be required. The method returns the name that can be used inside the code to reference the type. The
+    * name will be simple if no ambiguity exists with other types having the same (local) name, or fully qualified
+    * otherwise.
+    * 
+    * @param type The {@link org.jboss.forge.roaster.model.Type} to be imported.
+    * @return The name (simple or fully qualified) that should be used to reference the imported type in the code
+    * @seeAlso org.jboss.forge.roaster.model.Type
     */
    public Import addImport(Type<?> type);
 
"
921beda4d444d9325630dc76ebf9bf627a6b3958,George Gastaldi,AnnotationAccessor.java,MODIFY,"addAnnotation -> [AnnotationTargetSource target, List modifiers, String className] | [AnnotationTargetSource target, ASTNode body]","diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java b/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java
index 4637139..175acc8 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java
@@ -87,7 +87,8 @@
    private AnnotationSource<O> addAnnotation(final AnnotationTargetSource<O, T> target, final List<?> modifiers,
             final String className)
    {
-      if (target.getOrigin().requiresImport(className) && !target.getOrigin().hasImport(className) && Types.isQualified(className))
+      if (target.getOrigin().requiresImport(className) && !target.getOrigin().hasImport(className)
+               && Types.isQualified(className))
       {
          target.getOrigin().addImport(className);
       }
"
921beda4d444d9325630dc76ebf9bf627a6b3958,George Gastaldi,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
index 266abdf..e64cdf1 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
@@ -451,12 +451,14 @@
    public O setName(final String name)
    {
       AbstractTypeDeclaration typeDeclaration = getBodyDeclaration();
-      TypeImpl<O> type = new TypeImpl(this,null,name);
+      TypeImpl<O> type = new TypeImpl(this, null, name);
 
-      typeDeclaration.setName( unit.getAST().newSimpleName(type.getName()) );
-      if (typeDeclaration instanceof TypeDeclaration) {
+      typeDeclaration.setName(unit.getAST().newSimpleName(type.getName()));
+      if (typeDeclaration instanceof TypeDeclaration)
+      {
          TypeDeclaration td = (TypeDeclaration) typeDeclaration;
-         for ( Type arg : type.getTypeArguments() ) {
+         for (Type arg : type.getTypeArguments())
+         {
             TypeParameter typeParameter = unit.getAST().newTypeParameter();
             typeParameter.setName(unit.getAST().newSimpleName(arg.getName()));
             td.typeParameters().add(typeParameter);
@@ -955,7 +957,9 @@
       if (requiresImport(type.getQualifiedName()))
       {
          imprt = addImport(type.getQualifiedName());
-      } else {
+      }
+      else
+      {
          imprt = getImport(type.getSimpleName());
       }
       for (Type<?> arg : type.getTypeArguments())
"
921beda4d444d9325630dc76ebf9bf627a6b3958,George Gastaldi,EnumConstantBodyImpl.java,MODIFY,addImport -> [Type type] | [String className],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
index 3e125ff..a43faf3 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
@@ -100,7 +100,6 @@
    }
 
    @Override
-
    public boolean isInterface()
    {
       return false;
@@ -888,7 +887,8 @@
    }
 
    @Override
-   public Import addImport(Type<?> type) {
+   public Import addImport(Type<?> type)
+   {
       return getEnclosingType().addImport(type);
    }
 
"
921beda4d444d9325630dc76ebf9bf627a6b3958,George Gastaldi,FieldImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
index c1f778e..aeb2d03 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
@@ -332,10 +332,11 @@
    public FieldSource<O> setType(String typeName)
    {
       O origin = getOrigin();
-      Type innerType = new TypeImpl<O>(origin,null,typeName);
+      Type innerType = new TypeImpl<O>(origin, null, typeName);
       Import imprt = getOrigin().addImport(innerType);
-      String resolvedType = imprt != null ? Types.rebuildGenericNameWithArrays(imprt.getSimpleName(),innerType) : Types.toSimpleName(typeName);
-      org.eclipse.jdt.core.dom.Type fieldType = TypeImpl.fromString(resolvedType,this.ast);
+      String resolvedType = imprt != null ? Types.rebuildGenericNameWithArrays(imprt.getSimpleName(), innerType)
+               : Types.toSimpleName(typeName);
+      org.eclipse.jdt.core.dom.Type fieldType = TypeImpl.fromString(resolvedType, this.ast);
       field.setType(fieldType);
 
       return this;
"
921beda4d444d9325630dc76ebf9bf627a6b3958,George Gastaldi,JavaClassImpl.java,MODIFY,setSuperType -> [String type] | [JavaType type],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
index 3926bb1..0d34e94 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
@@ -154,7 +154,7 @@
 
          for (String typeP : typesGeneric.split("",""))
          {
-            Type t = TypeImpl.fromString(Types.toSimpleName(typeP.trim()),body.getAST());
+            Type t = TypeImpl.fromString(Types.toSimpleName(typeP.trim()), body.getAST());
             pt.typeArguments().add(t);
             if (!hasImport(typeP) && Types.isQualified(typeP))
             {
@@ -166,7 +166,7 @@
       }
       else
       {
-         SimpleType simpleType = body.getAST().newSimpleType( body.getAST().newSimpleName( Types.toSimpleName( type ) ) );
+         SimpleType simpleType = body.getAST().newSimpleType(body.getAST().newSimpleName(Types.toSimpleName(type)));
          getBodyDeclaration().setStructuralProperty(TypeDeclaration.SUPERCLASS_TYPE_PROPERTY, simpleType);
 
          if (!hasImport(type) && Types.isQualified(type))
"
921beda4d444d9325630dc76ebf9bf627a6b3958,George Gastaldi,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
index 5a2f7f7..df57fc3 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
@@ -723,7 +723,8 @@
    }
 
    @Override
-   public Import addImport(Type<?> type) {
+   public Import addImport(Type<?> type)
+   {
       return addImport(type.getQualifiedName());
    }
 
@@ -752,11 +753,13 @@
       return pkg.getJavadoc() != null;
    }
 
-   public CompilationUnit getUnit() {
+   public CompilationUnit getUnit()
+   {
       return unit;
    }
 
-   public PackageDeclaration getPkg() {
+   public PackageDeclaration getPkg()
+   {
       return pkg;
    }
 }
"
921beda4d444d9325630dc76ebf9bf627a6b3958,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index e9ee0f9..a08b57a 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -302,7 +302,7 @@
       {
          modifiers.addModifier(method, ModifierKeyword.ABSTRACT_KEYWORD);
          // Abstract methods do not specify a body
-         setBody((String)null);
+         setBody((String) null);
       }
       else
       {
@@ -374,7 +374,7 @@
       {
          modifiers.addModifier(method, ModifierKeyword.NATIVE_KEYWORD);
          // Native methods do not specify a body
-         setBody((String)null);
+         setBody((String) null);
       }
       else
       {
@@ -740,9 +740,10 @@
    @Override
    public ParameterSource<O> addParameter(String type, String name)
    {
-      Type innerType = new TypeImpl<O>(getOrigin(),null,type);
+      Type innerType = new TypeImpl<O>(getOrigin(), null, type);
       Import imprt = getOrigin().addImport(innerType);
-      String resolvedType = imprt != null ? Types.rebuildGenericNameWithArrays( imprt.getSimpleName(),innerType) : Types.toSimpleName(type);
+      String resolvedType = imprt != null ? Types.rebuildGenericNameWithArrays(imprt.getSimpleName(), innerType)
+               : Types.toSimpleName(type);
 
       String stub = ""public class Stub { public void method( "" + resolvedType + "" "" + name + "" ) {} }"";
       JavaClassSource temp = (JavaClassSource) Roaster.parse(stub);
"
0fcff98300edc80ee547da822115124b2310c878,George Gastaldi,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
index e64cdf1..a4683ee 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
@@ -475,9 +475,8 @@
       JavaType<?> enclosingType = this;
       while (enclosingType != enclosingType.getEnclosingType())
       {
-         enclosingType = getEnclosingType();
-         result = enclosingType.getEnclosingType().getName() + ""."" + result;
          enclosingType = enclosingType.getEnclosingType();
+         result = enclosingType.getName() + ""."" + result;
       }
 
       if (!Strings.isNullOrEmpty(getPackage()))
@@ -499,9 +498,8 @@
       JavaType<?> enclosingType = this;
       while (enclosingType != enclosingType.getEnclosingType())
       {
-         enclosingType = getEnclosingType();
-         result = enclosingType.getEnclosingType().getName() + ""$"" + result;
          enclosingType = enclosingType.getEnclosingType();
+         result = enclosingType.getName() + ""$"" + result;
       }
 
       if (!Strings.isNullOrEmpty(getPackage()))
@@ -951,6 +949,7 @@
       return result;
    }
 
+   @Override
    public Import addImport(final Type<?> type)
    {
       Import imprt;
"
b115a4c733f34ca51264a71fd25595c7a180b148,George Gastaldi,FieldImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
index aeb2d03..c7c8a1b 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
@@ -332,7 +332,7 @@
    public FieldSource<O> setType(String typeName)
    {
       O origin = getOrigin();
-      Type innerType = new TypeImpl<O>(origin, null, typeName);
+      Type<O> innerType = new TypeImpl<O>(origin, null, typeName);
       Import imprt = getOrigin().addImport(innerType);
       String resolvedType = imprt != null ? Types.rebuildGenericNameWithArrays(imprt.getSimpleName(), innerType)
                : Types.toSimpleName(typeName);
"
5985450e7de732007c1045b3bb8bd19986c2a3ac,George Gastaldi,ParameterImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/ParameterImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/ParameterImpl.java
index afee53f..f8d01e7 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/ParameterImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/ParameterImpl.java
@@ -8,11 +8,13 @@
 
 import java.util.List;
 
+import org.eclipse.jdt.core.dom.Modifier.ModifierKeyword;
 import org.eclipse.jdt.core.dom.SimpleName;
 import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
 import org.jboss.forge.roaster.model.Annotation;
 import org.jboss.forge.roaster.model.Type;
 import org.jboss.forge.roaster.model.ast.AnnotationAccessor;
+import org.jboss.forge.roaster.model.ast.ModifierAccessor;
 import org.jboss.forge.roaster.model.source.AnnotationSource;
 import org.jboss.forge.roaster.model.source.JavaSource;
 import org.jboss.forge.roaster.model.source.ParameterSource;
@@ -26,6 +28,7 @@
    private final AnnotationAccessor<O, ParameterSource<O>> annotations = new AnnotationAccessor<O, ParameterSource<O>>();
    private final O parent;
    private final SingleVariableDeclaration param;
+   private final ModifierAccessor modifiers = new ModifierAccessor();
 
    public ParameterImpl(final O parent, final Object internal)
    {
@@ -116,6 +119,22 @@
    }
 
    @Override
+   public boolean isFinal()
+   {
+      return modifiers.hasModifier(param, ModifierKeyword.FINAL_KEYWORD);
+   }
+
+   @Override
+   public ParameterSource<O> setFinal(boolean finl)
+   {
+      if (finl)
+         modifiers.addModifier(param, ModifierKeyword.FINAL_KEYWORD);
+      else
+         modifiers.removeModifier(param, ModifierKeyword.FINAL_KEYWORD);
+      return this;
+   }
+
+   @Override
    public Object getInternal()
    {
       return param;
"
7b1790720ee94b75a6e659fa36ad3eebf238bcbb,George Gastaldi,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
index a4683ee..a415a11 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
@@ -628,6 +628,12 @@
    @Override
    public String toString()
    {
+      return Formatter.format(toUnformattedString());
+   }
+   
+   @Override
+   public String toUnformattedString()
+   {
       Document document = new Document(this.document.get());
 
       try
@@ -644,9 +650,10 @@
          throw new ParserException(""Could not modify source: "" + unit.toString(), e);
       }
 
-      return Formatter.format(document.get());
+      return document.get();
    }
 
+
    @Override
    public Object getInternal()
    {
"
7b1790720ee94b75a6e659fa36ad3eebf238bcbb,George Gastaldi,EnumConstantBodyImpl.java,MODIFY,addImport -> [Type type] | [String className],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
index a43faf3..22c95fd 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
@@ -922,4 +922,17 @@
    {
       return (BodyDeclaration) getBody().bodyDeclarations().get(0);
    }
+
+   /**
+    * Why? Is this a JavaType?
+    */
+   @Override
+   public String toUnformattedString() 
+   {
+	   //do something unknown...
+	   return toString(); 
+   }
+
+   
+   
 }
"
7b1790720ee94b75a6e659fa36ad3eebf238bcbb,George Gastaldi,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
index df57fc3..b1dffa1 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
@@ -590,19 +590,25 @@
    @Override
    public String toString()
    {
-      Document document = new Document(this.document.get());
+      return Formatter.format(toUnformattedString());
+   }
+   
 
-      try
-      {
-         TextEdit edit = unit.rewrite(document, null);
-         edit.apply(document);
-      }
-      catch (Exception e)
-      {
-         throw new ParserException(""Could not modify source: "" + unit.toString(), e);
-      }
+   @Override
+   public String toUnformattedString() {
+	   Document document = new Document(this.document.get());
 
-      return Formatter.format(document.get());
+	   try
+	   {
+		   TextEdit edit = unit.rewrite(document, null);
+		   edit.apply(document);
+	   }
+	   catch (Exception e)
+	   {
+		   throw new ParserException(""Could not modify source: "" + unit.toString(), e);
+	   }
+
+	   return document.get();
    }
 
    @Override
"
3fc4000519d442c417c16f0fa261969c665992d2,George Gastaldi,Strings.java,MODIFY,"getLevenshteinDistance -> [CharSequence s, CharSequence t, int threshold] | [CharSequence s, CharSequence t]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Strings.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Strings.java
index 2d6746e..cdca9af 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Strings.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Strings.java
@@ -134,15 +134,15 @@
     * </p>
     *
     * <p>
-    * The previous implementation of the Levenshtein distance algorithm was from <a
-    * href=""http://www.merriampark.com/ld.htm"">http://www.merriampark.com/ld.htm</a>
+    * The previous implementation of the Levenshtein distance algorithm was from
+    * <a href=""http://www.merriampark.com/ld.htm"">http://www.merriampark.com/ld.htm</a>
     * </p>
     *
     * <p>
     * Chas Emerick has written an implementation in Java, which avoids an OutOfMemoryError which can occur when my Java
     * implementation is used with very large strings.<br>
-    * This implementation of the Levenshtein distance algorithm is from <a
-    * href=""http://www.merriampark.com/ldjava.htm"">http://www.merriampark.com/ldjava.htm</a>
+    * This implementation of the Levenshtein distance algorithm is from
+    * <a href=""http://www.merriampark.com/ldjava.htm"">http://www.merriampark.com/ldjava.htm</a>
     * </p>
     *
     * <pre>
@@ -259,8 +259,8 @@
     *
     * <p>
     * This implementation follows from Algorithms on Strings, Trees and Sequences by Dan Gusfield and Chas Emerick's
-    * implementation of the Levenshtein distance algorithm from <a
-    * href=""http://www.merriampark.com/ld.htm"">http://www.merriampark.com/ld.htm</a>
+    * implementation of the Levenshtein distance algorithm from
+    * <a href=""http://www.merriampark.com/ld.htm"">http://www.merriampark.com/ld.htm</a>
     * </p>
     *
     * <pre>
"
3fc4000519d442c417c16f0fa261969c665992d2,George Gastaldi,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
index a415a11..ee39ac7 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
@@ -630,7 +630,7 @@
    {
       return Formatter.format(toUnformattedString());
    }
-   
+
    @Override
    public String toUnformattedString()
    {
@@ -653,7 +653,6 @@
       return document.get();
    }
 
-
    @Override
    public Object getInternal()
    {
"
3fc4000519d442c417c16f0fa261969c665992d2,George Gastaldi,AbstractJavaSourceMemberHolder.java,MODIFY,addField -> [Field field] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
index 6313c32..8de01ab 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
@@ -397,7 +397,9 @@
          Type interfaceType = JDTHelper.getInterfaces(
                   Roaster.parse(JavaInterfaceImpl.class,
                            ""public interface Mock extends "" + Types.toSimpleName(type)
-                                    + "" {}"").getBodyDeclaration()).get(0);
+                                    + "" {}"")
+                           .getBodyDeclaration())
+                  .get(0);
 
          if (this.hasInterface(Types.toSimpleName(type)) || this.hasImport(Types.toSimpleName(type)))
          {
"
3fc4000519d442c417c16f0fa261969c665992d2,George Gastaldi,EnumConstantBodyImpl.java,MODIFY,addImport -> [Type type] | [String className],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
index 22c95fd..3b0f272 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
@@ -927,12 +927,10 @@
     * Why? Is this a JavaType?
     */
    @Override
-   public String toUnformattedString() 
+   public String toUnformattedString()
    {
-	   //do something unknown...
-	   return toString(); 
+      // do something unknown...
+      return toString();
    }
 
-   
-   
 }
"
3fc4000519d442c417c16f0fa261969c665992d2,George Gastaldi,JavaAnnotationImpl.java,MODIFY,addAnnotationElement -> [String declaration] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaAnnotationImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaAnnotationImpl.java
index 741c9de..7fc02c4 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaAnnotationImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaAnnotationImpl.java
@@ -25,7 +25,7 @@
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  * 
  */
-public class JavaAnnotationImpl extends AbstractJavaSource<JavaAnnotationSource> implements JavaAnnotationSource
+public class JavaAnnotationImpl extends AbstractJavaSource<JavaAnnotationSource>implements JavaAnnotationSource
 {
 
    public JavaAnnotationImpl(JavaSource<?> enclosingType, final Document document, final CompilationUnit unit,
"
3fc4000519d442c417c16f0fa261969c665992d2,George Gastaldi,JavaClassImpl.java,MODIFY,setSuperType -> [String type] | [JavaType type],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
index 0d34e94..0b2f0ab 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
@@ -26,7 +26,7 @@
  * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
-public class JavaClassImpl extends AbstractGenericCapableJavaSource<JavaClassSource> implements JavaClassSource
+public class JavaClassImpl extends AbstractGenericCapableJavaSource<JavaClassSource>implements JavaClassSource
 {
    private final ModifierAccessor modifiers = new ModifierAccessor();
 
"
3fc4000519d442c417c16f0fa261969c665992d2,George Gastaldi,JavaEnumImpl.java,MODIFY,addEnumConstant -> [String declaration] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaEnumImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaEnumImpl.java
index c34ebcc..60620ea 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaEnumImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaEnumImpl.java
@@ -24,7 +24,7 @@
  *
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
-public class JavaEnumImpl extends AbstractJavaSourceMemberHolder<JavaEnumSource> implements JavaEnumSource
+public class JavaEnumImpl extends AbstractJavaSourceMemberHolder<JavaEnumSource>implements JavaEnumSource
 {
    public JavaEnumImpl(JavaSource<?> enclosingType, final Document document, final CompilationUnit unit,
             BodyDeclaration body)
"
3fc4000519d442c417c16f0fa261969c665992d2,George Gastaldi,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
index b1dffa1..64faf75 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
@@ -592,23 +592,23 @@
    {
       return Formatter.format(toUnformattedString());
    }
-   
 
    @Override
-   public String toUnformattedString() {
-	   Document document = new Document(this.document.get());
+   public String toUnformattedString()
+   {
+      Document document = new Document(this.document.get());
 
-	   try
-	   {
-		   TextEdit edit = unit.rewrite(document, null);
-		   edit.apply(document);
-	   }
-	   catch (Exception e)
-	   {
-		   throw new ParserException(""Could not modify source: "" + unit.toString(), e);
-	   }
+      try
+      {
+         TextEdit edit = unit.rewrite(document, null);
+         edit.apply(document);
+      }
+      catch (Exception e)
+      {
+         throw new ParserException(""Could not modify source: "" + unit.toString(), e);
+      }
 
-	   return document.get();
+      return document.get();
    }
 
    @Override
"
661c034dd1af85b0238d53ba94f2229851c43d75,George Gastaldi,JavaClassImpl.java,MODIFY,setSuperType -> [String type] | [JavaType type],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
index 0b2f0ab..556e2aa 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
@@ -6,7 +6,6 @@
  */
 package org.jboss.forge.roaster.model.impl;
 
-import org.eclipse.jdt.core.dom.ArrayType;
 import org.eclipse.jdt.core.dom.BodyDeclaration;
 import org.eclipse.jdt.core.dom.CompilationUnit;
 import org.eclipse.jdt.core.dom.Modifier.ModifierKeyword;
"
4171b04f7d4b2bf11e791f47fce6597e7436a8fa,George Gastaldi,Roaster.java,MODIFY,"parse -> [Class type, InputStream data] | [File file]","diff --git a/api/src/main/java/org/jboss/forge/roaster/Roaster.java b/api/src/main/java/org/jboss/forge/roaster/Roaster.java
index 6e2c4df..83dd246 100644
--- a/api/src/main/java/org/jboss/forge/roaster/Roaster.java
+++ b/api/src/main/java/org/jboss/forge/roaster/Roaster.java
@@ -19,6 +19,7 @@
 import java.util.ServiceLoader;
 
 import org.jboss.forge.roaster.model.JavaType;
+import org.jboss.forge.roaster.model.JavaUnit;
 import org.jboss.forge.roaster.model.source.JavaSource;
 import org.jboss.forge.roaster.spi.FormatterProvider;
 import org.jboss.forge.roaster.spi.JavaParser;
@@ -172,25 +173,48 @@
     * Read the given {@link InputStream} and parse its data into a new {@link JavaType} instance of the given type. The
     * caller is responsible for closing the stream.
     */
+   @SuppressWarnings(""unchecked"")
    public static <T extends JavaType<?>> T parse(final Class<T> type, final InputStream data)
    {
       for (JavaParser parser : getParsers())
       {
-         final JavaType<?> source = parser.parse(data);
+         final JavaUnit unit = parser.parseUnit(data);
 
-         if (type.isInstance(source))
+         if (type.isInstance(unit.getGoverningType()))
          {
-            @SuppressWarnings(""unchecked"")
-            final T result = (T) source;
+            final T result = (T) unit.getGoverningType();
             return result;
          }
-         else if (source != null)
+         else if (unit != null)
          {
             throw new ParserException(""Source does not represent a ["" + type.getSimpleName() + ""], instead was [""
-                     + source.getClass().getSimpleName() + ""] - Cannot convert."");
+                     + unit.getGoverningType().getClass().getSimpleName() + ""] - Cannot convert."");
          }
       }
-      throw new ParserException(""Cannot find JavaParserProvider capable of parsing the requested data"");
+      throw new ParserException(""Cannot find JavaParser capable of parsing the requested data"");
+   }
+
+   /**
+    * Read the given {@link String} and parse its data into a new {@link JavaUnit} instance of the given type.
+    */
+   public static JavaUnit parseUnit(final String data)
+   {
+      return parseUnit(Streams.fromString(data));
+   }
+
+   /**
+    * Read the given {@link InputStream} and parse its data into a new {@link JavaUnit} instance of the given type. The
+    * caller is responsible for closing the stream.
+    */
+   public static JavaUnit parseUnit(final InputStream data)
+   {
+      for (JavaParser parser : getParsers())
+      {
+         final JavaUnit unit = parser.parseUnit(data);
+         if (unit != null)
+            return unit;
+      }
+      throw new ParserException(""Cannot find JavaParser capable of parsing the requested data"");
    }
 
    /**
"
4171b04f7d4b2bf11e791f47fce6597e7436a8fa,George Gastaldi,JavaParserImpl.java,MODIFY,parse -> [String data] | [InputStream data],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/spi/JavaParserImpl.java b/impl/src/main/java/org/jboss/forge/roaster/spi/JavaParserImpl.java
index 1ee5596..3606acb 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/spi/JavaParserImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/spi/JavaParserImpl.java
@@ -9,6 +9,7 @@
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 
@@ -27,12 +28,14 @@
 import org.eclipse.jface.text.Document;
 import org.jboss.forge.roaster.ParserException;
 import org.jboss.forge.roaster.model.JavaType;
+import org.jboss.forge.roaster.model.JavaUnit;
 import org.jboss.forge.roaster.model.ast.TypeDeclarationFinderVisitor;
 import org.jboss.forge.roaster.model.impl.JavaAnnotationImpl;
 import org.jboss.forge.roaster.model.impl.JavaClassImpl;
 import org.jboss.forge.roaster.model.impl.JavaEnumImpl;
 import org.jboss.forge.roaster.model.impl.JavaInterfaceImpl;
 import org.jboss.forge.roaster.model.impl.JavaPackageInfoImpl;
+import org.jboss.forge.roaster.model.impl.JavaUnitImpl;
 import org.jboss.forge.roaster.model.source.JavaAnnotationSource;
 import org.jboss.forge.roaster.model.source.JavaClassSource;
 import org.jboss.forge.roaster.model.source.JavaEnumSource;
@@ -49,11 +52,17 @@
    @Override
    public JavaType<?> parse(final InputStream data)
    {
+      return parseUnit(data).getGoverningType();
+   }
+
+   @Override
+   public JavaUnit parseUnit(InputStream data)
+   {
       try
       {
          String encoding = System.getProperty(""file.encoding"", ""ISO8859_1"");
          char[] source = Util.getInputStreamAsCharArray(data, data.available(), encoding);
-         return parse(new String(source));
+         return parseUnit(new String(source));
       }
       catch (IOException e)
       {
@@ -66,7 +75,7 @@
    }
 
    @SuppressWarnings({ ""rawtypes"", ""unchecked"" })
-   private JavaType<?> parse(final String data)
+   private JavaUnit parseUnit(final String data)
    {
       Document document = new Document(data);
       ASTParser parser = ASTParser.newParser(AST.JLS8);
@@ -86,16 +95,27 @@
       unit.accept(visitor);
 
       List<AbstractTypeDeclaration> declarations = visitor.getTypeDeclarations();
+      List<JavaType<?>> types = new ArrayList<JavaType<?>>();
       if (!declarations.isEmpty())
       {
-         AbstractTypeDeclaration declaration = declarations.get(0);
-         return getJavaSource(null, document, unit, declaration);
+         for (AbstractTypeDeclaration declaration : declarations)
+         {
+            if (declaration.isPackageMemberTypeDeclaration())
+            {
+               types.add(getJavaSource(null, document, unit, declaration));
+            }
+         }
+         return new JavaUnitImpl(types);
       }
       else if (visitor.getPackageDeclaration() != null)
       {
-         return getJavaSource(null, document, unit, visitor.getPackageDeclaration());
+         types.add(getJavaSource(null, document, unit, visitor.getPackageDeclaration()));
+         return new JavaUnitImpl(types);
       }
-      throw new ParserException(""Could not find type declaration in Java source - is this actually code?"");
+      else
+      {
+         throw new ParserException(""Could not find type declaration in Java source - is this actually code?"");
+      }
    }
 
    /**
@@ -145,19 +165,19 @@
       if (type != null)
       {
          if (type.isAssignableFrom(JavaClassSource.class))
-            return (T) parse(""public class JavaClass { }"");
+            return (T) parseUnit(""public class JavaClass { }"").getGoverningType();
 
          if (type.isAssignableFrom(JavaEnumSource.class))
-            return (T) parse(""public enum JavaEnum { }"");
+            return (T) parseUnit(""public enum JavaEnum { }"").getGoverningType();
 
          if (type.isAssignableFrom(JavaAnnotationSource.class))
-            return (T) parse(""public @interface JavaAnnotation { }"");
+            return (T) parseUnit(""public @interface JavaAnnotation { }"").getGoverningType();
 
          if (type.isAssignableFrom(JavaInterfaceSource.class))
-            return (T) parse(""public interface JavaInterface { }"");
+            return (T) parseUnit(""public interface JavaInterface { }"").getGoverningType();
 
          if (type.isAssignableFrom(JavaPackageInfoSource.class))
-            return (T) parse(""package org.example;"");
+            return (T) parseUnit(""package org.example;"").getGoverningType();
       }
       return null;
    }
"
e936951f256aea4cbf23757430b069e5dcd4006c,George Gastaldi,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
index 64faf75..d76ffd2 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
@@ -422,7 +422,7 @@
    protected PackageDeclaration getPackageDeclaration()
    {
       if (pkg instanceof PackageDeclaration)
-         return (PackageDeclaration) pkg;
+         return pkg;
       throw new ParserException(""Source body was not of the expected type (PackageDeclaration)."");
    }
 
"
6c2d7c27913db55364f67c94154bed9d63c1a6bb,George Gastaldi,AnnotationImpl.java,MODIFY,getLiteralValue -> [String name] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
index fa7a8bd..d2bf9bd 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
@@ -139,7 +139,15 @@
    {
       if (isSingleValue())
       {
-         return ((SingleMemberAnnotation) annotation).getValue().toString();
+         Expression value = ((SingleMemberAnnotation) annotation).getValue();
+         if (value instanceof TypeLiteral)
+         {
+            return resolveTypeLiteralName((TypeLiteral) value);
+         }
+         else
+         {
+            return value.toString();
+         }
       }
       if (isNormal())
       {
@@ -172,7 +180,15 @@
                MemberValuePair pair = (MemberValuePair) v;
                if (pair.getName().getFullyQualifiedName().equals(name))
                {
-                  return pair.getValue().toString();
+                  Expression value = pair.getValue();
+                  if (value instanceof TypeLiteral)
+                  {
+                     return resolveTypeLiteralName((TypeLiteral) value);
+                  }
+                  else
+                  {
+                     return value.toString();
+                  }
                }
             }
          }
@@ -1104,6 +1120,27 @@
       return null;
    }
 
+   private String resolveTypeLiteralName(TypeLiteral typeLiteral)
+   {
+      final Type<O> type = new TypeImpl<O>(getOrigin(), typeLiteral.getType());
+      if (type.isPrimitive())
+      {
+         final Class<?>[] primitiveTypes = { boolean.class, byte.class, short.class, int.class, long.class,
+                  float.class, double.class };
+         for (Class<?> c : primitiveTypes)
+         {
+            if (c.getSimpleName().equals(type.getName()))
+            {
+               return c.getName();
+            }
+         }
+         return null;
+      }
+
+      final String classname = type.getQualifiedName();
+      return getOrigin().resolveType(classname);
+   }
+
    private Class<?> resolveTypeLiteral(TypeLiteral typeLiteral)
    {
       final Type<O> type = new TypeImpl<O>(getOrigin(), typeLiteral.getType());
@@ -1133,6 +1170,7 @@
       }
    }
 
+   @Override
    public boolean isTypeElementDefined(String name)
    {
       List<ValuePair> values = getValues();
"
307032de4bfc29b2f555af034e8be5d3c625f42b,George Gastaldi,AnnotationImpl.java,MODIFY,getLiteralValue -> [String name] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
index fa7a8bd..d2bf9bd 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
@@ -139,7 +139,15 @@
    {
       if (isSingleValue())
       {
-         return ((SingleMemberAnnotation) annotation).getValue().toString();
+         Expression value = ((SingleMemberAnnotation) annotation).getValue();
+         if (value instanceof TypeLiteral)
+         {
+            return resolveTypeLiteralName((TypeLiteral) value);
+         }
+         else
+         {
+            return value.toString();
+         }
       }
       if (isNormal())
       {
@@ -172,7 +180,15 @@
                MemberValuePair pair = (MemberValuePair) v;
                if (pair.getName().getFullyQualifiedName().equals(name))
                {
-                  return pair.getValue().toString();
+                  Expression value = pair.getValue();
+                  if (value instanceof TypeLiteral)
+                  {
+                     return resolveTypeLiteralName((TypeLiteral) value);
+                  }
+                  else
+                  {
+                     return value.toString();
+                  }
                }
             }
          }
@@ -1104,6 +1120,27 @@
       return null;
    }
 
+   private String resolveTypeLiteralName(TypeLiteral typeLiteral)
+   {
+      final Type<O> type = new TypeImpl<O>(getOrigin(), typeLiteral.getType());
+      if (type.isPrimitive())
+      {
+         final Class<?>[] primitiveTypes = { boolean.class, byte.class, short.class, int.class, long.class,
+                  float.class, double.class };
+         for (Class<?> c : primitiveTypes)
+         {
+            if (c.getSimpleName().equals(type.getName()))
+            {
+               return c.getName();
+            }
+         }
+         return null;
+      }
+
+      final String classname = type.getQualifiedName();
+      return getOrigin().resolveType(classname);
+   }
+
    private Class<?> resolveTypeLiteral(TypeLiteral typeLiteral)
    {
       final Type<O> type = new TypeImpl<O>(getOrigin(), typeLiteral.getType());
@@ -1133,6 +1170,7 @@
       }
    }
 
+   @Override
    public boolean isTypeElementDefined(String name)
    {
       List<ValuePair> values = getValues();
"
627d9d368eb4e0ccb6217b34bb69d419123498df,George Gastaldi,ExtendableSource.java,MODIFY,setSuperType -> [String type] | [JavaType type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java
index 6f229a2..6c4abe6 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java
@@ -33,6 +33,13 @@
    public O setSuperType(Class<?> type);
 
    /**
+    * Set this type's super class and import their methods.
+    * 
+    * @see #setSuperType(String)
+    */
+   public O setSuperType(Class<?> type, boolean importAbstractMethods);
+
+   /**
     * Set this type's super class.
     * <p>
     * <strong>For example:</strong><br/>
"
627d9d368eb4e0ccb6217b34bb69d419123498df,George Gastaldi,InterfaceCapableSource.java,MODIFY,addInterface -> [JavaInterface type] | [String type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/InterfaceCapableSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/InterfaceCapableSource.java
index 2b14f6e..3cc8429 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/InterfaceCapableSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/InterfaceCapableSource.java
@@ -22,6 +22,11 @@
 
    T addInterface(Class<?> type);
 
+   /**
+    * Adds the interface and imports the methods
+    */
+   T addInterface(Class<?> type, boolean importAbstractMethods);
+
    T addInterface(JavaInterface<?> type);
 
    T removeInterface(String type);
"
627d9d368eb4e0ccb6217b34bb69d419123498df,George Gastaldi,MethodHolderSource.java,MODIFY,"getMethod -> [String name, Class paramTypes] | [String name]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/MethodHolderSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/MethodHolderSource.java
index f9dfceb..a992df5 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/MethodHolderSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/MethodHolderSource.java
@@ -25,32 +25,32 @@
     * Return the {@link MethodSource} with the given name and zero parameters; otherwise return null.
     */
    @Override
-   public MethodSource<O> getMethod(final String name);
+   MethodSource<O> getMethod(final String name);
 
    /**
     * Return the {@link MethodSource} with the given name and signature types; otherwise return null.
     */
    @Override
-   public MethodSource<O> getMethod(final String name, String... paramTypes);
+   MethodSource<O> getMethod(final String name, String... paramTypes);
 
    /**
     * Return the {@link MethodSource} with the given name and signature types; otherwise return null.
     */
    @Override
-   public MethodSource<O> getMethod(final String name, Class<?>... paramTypes);
+   MethodSource<O> getMethod(final String name, Class<?>... paramTypes);
 
    /**
     * Get a {@link List} of all {@link MethodSource}s declared by this {@link O} instance, if any; otherwise, return an
     * empty {@link List}
     */
    @Override
-   public List<MethodSource<O>> getMethods();
+   List<MethodSource<O>> getMethods();
 
    /**
     * Add an uninitialized {@link MethodSource} declaration to this {@link O} instance. This {@link MethodSource} will
     * be a stub until further modified.
     */
-   public MethodSource<O> addMethod();
+   MethodSource<O> addMethod();
 
    /**
     * Add a new {@link MethodSource} declaration to this {@link O} instance, using the given {@link String} as the
@@ -59,12 +59,18 @@
     * <strong>For example:</strong><br>
     * <code>Method m = javaClass.addMethod(""public String method() {return \""hello!\"";}"")</code>
     */
-   public MethodSource<O> addMethod(final String method);
+   MethodSource<O> addMethod(final String method);
+
+   /**
+    * Add a new {@link MethodSource} declaration to this {@link O} instance, using the given
+    * {@link java.lang.reflect.Method} as the method declaration
+    */
+   MethodSource<O> addMethod(final java.lang.reflect.Method method);
 
    /**
     * Remove the given {@link MethodSource} declaration from this {@link O} instance, if it exists; otherwise, do
     * nothing.
     */
-   public O removeMethod(final Method<O, ?> method);
+   O removeMethod(final Method<O, ?> method);
 
 }
\ No newline at end of file
"
627d9d368eb4e0ccb6217b34bb69d419123498df,George Gastaldi,Refactory.java,MODIFY,"createHashCodeAndEquals -> [JavaClassSource clazz, FieldSource fields] | [JavaClassSource clazz]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
index 8d1f199..d34d608 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
@@ -6,12 +6,15 @@
  */
 package org.jboss.forge.roaster.model.util;
 
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 
 import org.jboss.forge.roaster.model.source.FieldSource;
 import org.jboss.forge.roaster.model.source.JavaClassSource;
+import org.jboss.forge.roaster.model.source.MethodHolderSource;
 import org.jboss.forge.roaster.model.source.MethodSource;
 
 /**
@@ -387,4 +390,30 @@
                ""return result;"";
       method.setBody(body);
    }
+
+   /**
+    * This will add the methods present in a class to the specified {@link MethodHolderSource}
+    * 
+    * @param methodHolder the {@link MethodHolderSource} where the methods will be exported
+    * @param source the {@link Class} where the methods will be imported
+    */
+
+   public static MethodSource<?>[] importAbstractMethods(final MethodHolderSource<?> methodHolder,
+            final Class<?> source)
+   {
+      Class<?> currentType = source;
+      List<MethodSource<?>> methods = new ArrayList<MethodSource<?>>();
+      for (Method m : currentType.getMethods())
+      {
+         if (m.getDeclaringClass() == Object.class)
+            continue;
+         if (Modifier.isAbstract(m.getModifiers())
+                  && methodHolder.getMethod(m.getName(), m.getParameterTypes()) == null)
+         {
+            MethodSource<?> newMethod = methodHolder.addMethod(m);
+            methods.add(newMethod);
+         }
+      }
+      return methods.toArray(new MethodSource<?>[methods.size()]);
+   }
 }
"
627d9d368eb4e0ccb6217b34bb69d419123498df,George Gastaldi,AbstractJavaSourceMemberHolder.java,MODIFY,addField -> [Field field] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
index 8de01ab..7d47ceb 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
@@ -40,6 +40,7 @@
 import org.jboss.forge.roaster.model.source.PropertyHolderSource;
 import org.jboss.forge.roaster.model.source.PropertySource;
 import org.jboss.forge.roaster.model.util.Assert;
+import org.jboss.forge.roaster.model.util.Refactory;
 import org.jboss.forge.roaster.model.util.Strings;
 import org.jboss.forge.roaster.model.util.Types;
 
@@ -351,6 +352,15 @@
 
    @Override
    @SuppressWarnings(""unchecked"")
+   public MethodSource<O> addMethod(java.lang.reflect.Method method)
+   {
+      MethodSource<O> m = new MethodImpl<O>((O) this, method);
+      getBodyDeclaration().bodyDeclarations().add(m.getInternal());
+      return m;
+   }
+
+   @Override
+   @SuppressWarnings(""unchecked"")
    public List<MethodSource<O>> getMethods()
    {
       List<MethodSource<O>> result = new ArrayList<MethodSource<O>>();
@@ -422,6 +432,21 @@
    }
 
    @Override
+   public O addInterface(Class<?> type, boolean importMethods)
+   {
+      O obj = addInterface(type);
+      if (importMethods)
+      {
+         MethodSource<?>[] methods = Refactory.importAbstractMethods(this, type);
+         for (MethodSource<?> methodSource : methods)
+         {
+            methodSource.addAnnotation(Override.class);
+         }
+      }
+      return obj;
+   }
+
+   @Override
    public O addInterface(final JavaInterface<?> type)
    {
       return addInterface(type.getQualifiedName());
"
627d9d368eb4e0ccb6217b34bb69d419123498df,George Gastaldi,EnumConstantBodyImpl.java,MODIFY,addImport -> [Type type] | [String className],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
index 3b0f272..ed2a1ea 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
@@ -706,6 +706,14 @@
    }
 
    @Override
+   public MethodSource<Body> addMethod(java.lang.reflect.Method method)
+   {
+      final MethodSource<Body> m = new MethodImpl<Body>(this, method);
+      getBody().bodyDeclarations().add(m.getInternal());
+      return m;
+   }
+
+   @Override
    public List<MethodSource<Body>> getMethods()
    {
       final List<MethodSource<Body>> result = new ArrayList<MethodSource<Body>>();
"
627d9d368eb4e0ccb6217b34bb69d419123498df,George Gastaldi,JavaClassImpl.java,MODIFY,setSuperType -> [String type] | [JavaType type],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
index 964dc19..4cb94af 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
@@ -18,6 +18,7 @@
 import org.jboss.forge.roaster.model.source.JavaClassSource;
 import org.jboss.forge.roaster.model.source.JavaSource;
 import org.jboss.forge.roaster.model.source.MethodSource;
+import org.jboss.forge.roaster.model.util.Refactory;
 import org.jboss.forge.roaster.model.util.Types;
 
 /**
@@ -135,6 +136,20 @@
       return setSuperType(type.getName());
    }
 
+   @Override
+   public JavaClassSource setSuperType(final Class<?> type, boolean importAbstractMethods)
+   {
+      setSuperType(type);
+      if (importAbstractMethods)
+      {
+         for (MethodSource<?> methodSource : Refactory.importAbstractMethods(this, type))
+         {
+            methodSource.addAnnotation(Override.class);
+         }
+      }
+      return this;
+   }
+
    @SuppressWarnings(""unchecked"")
    @Override
    public JavaClassSource setSuperType(final String type)
"
627d9d368eb4e0ccb6217b34bb69d419123498df,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index a08b57a..06a6359 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -6,6 +6,9 @@
  */
 package org.jboss.forge.roaster.model.impl;
 
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.lang.reflect.Parameter;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Iterator;
@@ -75,6 +78,58 @@
       method = (MethodDeclaration) internal;
    }
 
+   public MethodImpl(final O parent, final Method reflectMethod)
+   {
+      this(parent);
+      // Set method visibility
+      int mod = reflectMethod.getModifiers();
+      if (Modifier.isPublic(mod))
+      {
+         setPublic();
+      }
+      else if (Modifier.isProtected(mod))
+      {
+         setProtected();
+      }
+      else if (Modifier.isPrivate(mod))
+      {
+         setPrivate();
+      }
+      // setAbstract(Modifier.isAbstract(mod));
+      setSynchronized(Modifier.isSynchronized(mod));
+      setNative(Modifier.isNative(mod));
+      // Set method return type
+      if (reflectMethod.getReturnType() == Void.TYPE)
+      {
+         setReturnTypeVoid();
+      }
+      else
+      {
+         setReturnType(reflectMethod.getReturnType());
+      }
+      // Set method name
+      setName(reflectMethod.getName());
+      // Set method parameters
+      for (Parameter param : reflectMethod.getParameters())
+      {
+         addParameter(param.getType(), param.getName());
+      }
+      // Set method body
+      {
+         if (!getOrigin().isInterface())
+         {
+            if (!isReturnTypeVoid())
+               setBody(""return "" + Types.getDefaultValue(reflectMethod.getReturnType()) + "";"");
+            else
+               setBody("""");
+         }
+         else
+         {
+            setBody(null);
+         }
+      }
+   }
+
    public MethodImpl(final O parent, final String method)
    {
       init(parent);
@@ -740,7 +795,7 @@
    @Override
    public ParameterSource<O> addParameter(String type, String name)
    {
-      Type innerType = new TypeImpl<O>(getOrigin(), null, type);
+      Type<?> innerType = new TypeImpl<O>(getOrigin(), null, type);
       Import imprt = getOrigin().addImport(innerType);
       String resolvedType = imprt != null ? Types.rebuildGenericNameWithArrays(imprt.getSimpleName(), innerType)
                : Types.toSimpleName(type);
"
d6958017c2a5a474c3e84b6b34f38447b8f97373,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index 06a6359..fbb5d31 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -8,7 +8,6 @@
 
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
-import java.lang.reflect.Parameter;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Iterator;
@@ -110,9 +109,9 @@
       // Set method name
       setName(reflectMethod.getName());
       // Set method parameters
-      for (Parameter param : reflectMethod.getParameters())
+      for (Class<?> paramType : reflectMethod.getParameterTypes())
       {
-         addParameter(param.getType(), param.getName());
+         addParameter(paramType, ""arg"" + method.parameters().size());
       }
       // Set method body
       {
"
e9bc446ef14f84204872bf608d6691d105afdcee,George Gastaldi,ExtendableSource.java,MODIFY,setSuperType -> [String type] | [JavaType type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java
index 6c4abe6..bcce9af 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java
@@ -9,6 +9,7 @@
 
 import org.jboss.forge.roaster.model.Extendable;
 import org.jboss.forge.roaster.model.JavaType;
+import org.jboss.forge.roaster.model.util.Refactory;
 
 /**
  * Represents a {@link JavaSource} that can extend other types (Java inheritance and interfaces).
@@ -33,9 +34,10 @@
    public O setSuperType(Class<?> type);
 
    /**
-    * Set this type's super class and import their methods.
+    * Set this type's super class and import their abstract methods, if any.
     * 
     * @see #setSuperType(String)
+    * @see Refactory#importAbstractMethods(MethodHolderSource, Class)
     */
    public O setSuperType(Class<?> type, boolean importAbstractMethods);
 
"
e9bc446ef14f84204872bf608d6691d105afdcee,George Gastaldi,InterfaceCapableSource.java,MODIFY,addInterface -> [JavaInterface type] | [String type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/InterfaceCapableSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/InterfaceCapableSource.java
index 3cc8429..1bf576e 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/InterfaceCapableSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/InterfaceCapableSource.java
@@ -9,6 +9,7 @@
 
 import org.jboss.forge.roaster.model.InterfaceCapable;
 import org.jboss.forge.roaster.model.JavaInterface;
+import org.jboss.forge.roaster.model.util.Refactory;
 
 /**
  * Represents a {@link JavaSource} that may implement one or more interfaces.
@@ -18,20 +19,62 @@
  */
 public interface InterfaceCapableSource<T extends JavaSource<T>> extends InterfaceCapable
 {
+   /**
+    * Implements the specified interface name
+    * 
+    * @param type the interface FQN
+    * @return this object
+    */
    T addInterface(String type);
 
+   /**
+    * Implements the specified {@link Class} interface
+    * 
+    * @param type the interface {@link Class} reference
+    * @return this object
+    */
    T addInterface(Class<?> type);
 
    /**
-    * Adds the interface and imports the methods
+    * Implements the specified {@link Class} interface and import their abstract methods, if any.
+    * 
+    * @param type the interface {@link Class} reference
+    * @param importAbstractMethods whether the abstract methods should be imported.
+    * @return this object
+    * 
+    * @see Refactory#importAbstractMethods(MethodHolderSource, Class)
     */
    T addInterface(Class<?> type, boolean importAbstractMethods);
 
+   /**
+    * Implements the specified {@link JavaInterface}
+    * 
+    * @param type the interface
+    * @return this object
+    */
    T addInterface(JavaInterface<?> type);
 
+   /**
+    * Removes the specified interface FQN
+    * 
+    * @param type the interface FQN
+    * @return this object
+    */
    T removeInterface(String type);
 
+   /**
+    * Removes the specified interface
+    * 
+    * @param type the interface {@link Class}
+    * @return this object
+    */
    T removeInterface(Class<?> type);
 
+   /**
+    * Removes the specified interface
+    * 
+    * @param type the interface {@link JavaInterface}
+    * @return this object
+    */
    T removeInterface(JavaInterface<?> type);
 }
\ No newline at end of file
"
e9bc446ef14f84204872bf608d6691d105afdcee,George Gastaldi,Refactory.java,MODIFY,"createHashCodeAndEquals -> [JavaClassSource clazz, FieldSource fields] | [JavaClassSource clazz]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
index d34d608..6325235 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
@@ -392,7 +392,7 @@
    }
 
    /**
-    * This will add the methods present in a class to the specified {@link MethodHolderSource}
+    * This will add the abstract methods present in a {@link Class} to the specified {@link MethodHolderSource}
     * 
     * @param methodHolder the {@link MethodHolderSource} where the methods will be exported
     * @param source the {@link Class} where the methods will be imported
"
706792621d289a13ac166e2fa097583576ff3b91,George Gastaldi,ExtendableSource.java,MODIFY,setSuperType -> [String type] | [JavaType type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java
index bcce9af..3068e97 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java
@@ -9,7 +9,7 @@
 
 import org.jboss.forge.roaster.model.Extendable;
 import org.jboss.forge.roaster.model.JavaType;
-import org.jboss.forge.roaster.model.util.Refactory;
+import org.jboss.forge.roaster.model.util.Methods;
 
 /**
  * Represents a {@link JavaSource} that can extend other types (Java inheritance and interfaces).
@@ -37,7 +37,7 @@
     * Set this type's super class and import their abstract methods, if any.
     * 
     * @see #setSuperType(String)
-    * @see Refactory#importAbstractMethods(MethodHolderSource, Class)
+    * @see Methods#addInheritedAbstractMethods(Class, MethodHolderSource)
     */
    public O setSuperType(Class<?> type, boolean importAbstractMethods);
 
"
706792621d289a13ac166e2fa097583576ff3b91,George Gastaldi,InterfaceCapableSource.java,MODIFY,addInterface -> [JavaInterface type] | [String type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/InterfaceCapableSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/InterfaceCapableSource.java
index 1bf576e..fad42c5 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/InterfaceCapableSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/InterfaceCapableSource.java
@@ -9,7 +9,7 @@
 
 import org.jboss.forge.roaster.model.InterfaceCapable;
 import org.jboss.forge.roaster.model.JavaInterface;
-import org.jboss.forge.roaster.model.util.Refactory;
+import org.jboss.forge.roaster.model.util.Methods;
 
 /**
  * Represents a {@link JavaSource} that may implement one or more interfaces.
@@ -42,9 +42,9 @@
     * @param importAbstractMethods whether the abstract methods should be imported.
     * @return this object
     * 
-    * @see Refactory#importAbstractMethods(MethodHolderSource, Class)
+    * @see Methods#addInheritedAbstractMethods(Class, MethodHolderSource)
     */
-   T addInterface(Class<?> type, boolean importAbstractMethods);
+   T addInterface(Class<?> type, boolean addInheritedAbstractMethods);
 
    /**
     * Implements the specified {@link JavaInterface}
"
706792621d289a13ac166e2fa097583576ff3b91,George Gastaldi,Refactory.java,MODIFY,"createHashCodeAndEquals -> [JavaClassSource clazz, FieldSource fields] | [JavaClassSource clazz]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
index 6325235..8d1f199 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
@@ -6,15 +6,12 @@
  */
 package org.jboss.forge.roaster.model.util;
 
-import java.lang.reflect.Method;
-import java.lang.reflect.Modifier;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 
 import org.jboss.forge.roaster.model.source.FieldSource;
 import org.jboss.forge.roaster.model.source.JavaClassSource;
-import org.jboss.forge.roaster.model.source.MethodHolderSource;
 import org.jboss.forge.roaster.model.source.MethodSource;
 
 /**
@@ -390,30 +387,4 @@
                ""return result;"";
       method.setBody(body);
    }
-
-   /**
-    * This will add the abstract methods present in a {@link Class} to the specified {@link MethodHolderSource}
-    * 
-    * @param methodHolder the {@link MethodHolderSource} where the methods will be exported
-    * @param source the {@link Class} where the methods will be imported
-    */
-
-   public static MethodSource<?>[] importAbstractMethods(final MethodHolderSource<?> methodHolder,
-            final Class<?> source)
-   {
-      Class<?> currentType = source;
-      List<MethodSource<?>> methods = new ArrayList<MethodSource<?>>();
-      for (Method m : currentType.getMethods())
-      {
-         if (m.getDeclaringClass() == Object.class)
-            continue;
-         if (Modifier.isAbstract(m.getModifiers())
-                  && methodHolder.getMethod(m.getName(), m.getParameterTypes()) == null)
-         {
-            MethodSource<?> newMethod = methodHolder.addMethod(m);
-            methods.add(newMethod);
-         }
-      }
-      return methods.toArray(new MethodSource<?>[methods.size()]);
-   }
 }
"
706792621d289a13ac166e2fa097583576ff3b91,George Gastaldi,AbstractJavaSourceMemberHolder.java,MODIFY,addField -> [Field field] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
index 7d47ceb..2f10ce0 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
@@ -40,7 +40,7 @@
 import org.jboss.forge.roaster.model.source.PropertyHolderSource;
 import org.jboss.forge.roaster.model.source.PropertySource;
 import org.jboss.forge.roaster.model.util.Assert;
-import org.jboss.forge.roaster.model.util.Refactory;
+import org.jboss.forge.roaster.model.util.Methods;
 import org.jboss.forge.roaster.model.util.Strings;
 import org.jboss.forge.roaster.model.util.Types;
 
@@ -437,7 +437,7 @@
       O obj = addInterface(type);
       if (importMethods)
       {
-         MethodSource<?>[] methods = Refactory.importAbstractMethods(this, type);
+         MethodSource<?>[] methods = Methods.addInheritedAbstractMethods(type, this);
          for (MethodSource<?> methodSource : methods)
          {
             methodSource.addAnnotation(Override.class);
"
706792621d289a13ac166e2fa097583576ff3b91,George Gastaldi,JavaClassImpl.java,MODIFY,setSuperType -> [String type] | [JavaType type],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
index 4cb94af..deb029f 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
@@ -18,7 +18,7 @@
 import org.jboss.forge.roaster.model.source.JavaClassSource;
 import org.jboss.forge.roaster.model.source.JavaSource;
 import org.jboss.forge.roaster.model.source.MethodSource;
-import org.jboss.forge.roaster.model.util.Refactory;
+import org.jboss.forge.roaster.model.util.Methods;
 import org.jboss.forge.roaster.model.util.Types;
 
 /**
@@ -142,7 +142,7 @@
       setSuperType(type);
       if (importAbstractMethods)
       {
-         for (MethodSource<?> methodSource : Refactory.importAbstractMethods(this, type))
+         for (MethodSource<?> methodSource : Methods.addInheritedAbstractMethods(type, this))
          {
             methodSource.addAnnotation(Override.class);
          }
"
9536b432346720d992258326cbaf8f728766507e,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index fbb5d31..9ff6043 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -41,6 +41,7 @@
 import org.jboss.forge.roaster.model.source.MethodSource;
 import org.jboss.forge.roaster.model.source.ParameterSource;
 import org.jboss.forge.roaster.model.source.TypeVariableSource;
+import org.jboss.forge.roaster.model.util.Methods;
 import org.jboss.forge.roaster.model.util.Strings;
 import org.jboss.forge.roaster.model.util.Types;
 
@@ -109,9 +110,11 @@
       // Set method name
       setName(reflectMethod.getName());
       // Set method parameters
-      for (Class<?> paramType : reflectMethod.getParameterTypes())
+      Class<?>[] paramTypes = reflectMethod.getParameterTypes();
+      String[] paramNames = Methods.generateParameterNames(paramTypes);
+      for (int i = 0; i < paramTypes.length; i++)
       {
-         addParameter(paramType, ""arg"" + method.parameters().size());
+         addParameter(paramTypes[i], paramNames[i]);
       }
       // Set method body
       {
"
8f268866cd6900118e77383f6a1a7042c2c9ffb0,George Gastaldi,ExtendableSource.java,MODIFY,setSuperType -> [String type] | [JavaType type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java
index 3068e97..1db8004 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java
@@ -39,7 +39,7 @@
     * @see #setSuperType(String)
     * @see Methods#addInheritedAbstractMethods(Class, MethodHolderSource)
     */
-   public O setSuperType(Class<?> type, boolean importAbstractMethods);
+   public O implementSuperType(Class<?> type);
 
    /**
     * Set this type's super class.
"
8f268866cd6900118e77383f6a1a7042c2c9ffb0,George Gastaldi,InterfaceCapableSource.java,MODIFY,addInterface -> [JavaInterface type] | [String type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/InterfaceCapableSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/InterfaceCapableSource.java
index fad42c5..2fa719d 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/InterfaceCapableSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/InterfaceCapableSource.java
@@ -39,12 +39,11 @@
     * Implements the specified {@link Class} interface and import their abstract methods, if any.
     * 
     * @param type the interface {@link Class} reference
-    * @param importAbstractMethods whether the abstract methods should be imported.
     * @return this object
     * 
     * @see Methods#addInheritedAbstractMethods(Class, MethodHolderSource)
     */
-   T addInterface(Class<?> type, boolean addInheritedAbstractMethods);
+   T implementsInterface(Class<?> type);
 
    /**
     * Implements the specified {@link JavaInterface}
"
8f268866cd6900118e77383f6a1a7042c2c9ffb0,George Gastaldi,AbstractJavaSourceMemberHolder.java,MODIFY,addField -> [Field field] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
index 2f10ce0..c6c484a 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
@@ -432,16 +432,13 @@
    }
 
    @Override
-   public O addInterface(Class<?> type, boolean importMethods)
+   public O implementsInterface(Class<?> type)
    {
       O obj = addInterface(type);
-      if (importMethods)
+      MethodSource<?>[] methods = Methods.addInheritedAbstractMethods(type, this);
+      for (MethodSource<?> methodSource : methods)
       {
-         MethodSource<?>[] methods = Methods.addInheritedAbstractMethods(type, this);
-         for (MethodSource<?> methodSource : methods)
-         {
-            methodSource.addAnnotation(Override.class);
-         }
+         methodSource.addAnnotation(Override.class);
       }
       return obj;
    }
"
8f268866cd6900118e77383f6a1a7042c2c9ffb0,George Gastaldi,JavaClassImpl.java,MODIFY,setSuperType -> [String type] | [JavaType type],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
index deb029f..2eb9565 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
@@ -137,15 +137,12 @@
    }
 
    @Override
-   public JavaClassSource setSuperType(final Class<?> type, boolean importAbstractMethods)
+   public JavaClassSource implementSuperType(final Class<?> type)
    {
       setSuperType(type);
-      if (importAbstractMethods)
+      for (MethodSource<?> methodSource : Methods.addInheritedAbstractMethods(type, this))
       {
-         for (MethodSource<?> methodSource : Methods.addInheritedAbstractMethods(type, this))
-         {
-            methodSource.addAnnotation(Override.class);
-         }
+         methodSource.addAnnotation(Override.class);
       }
       return this;
    }
"
8116b2c29c8ce0f7c0948f16ed802c0c245e0e55,George Gastaldi,InterfaceCapableSource.java,MODIFY,addInterface -> [JavaInterface type] | [String type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/InterfaceCapableSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/InterfaceCapableSource.java
index 2fa719d..7363252 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/InterfaceCapableSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/InterfaceCapableSource.java
@@ -43,7 +43,7 @@
     * 
     * @see Methods#addInheritedAbstractMethods(Class, MethodHolderSource)
     */
-   T implementsInterface(Class<?> type);
+   T implementInterface(Class<?> type);
 
    /**
     * Implements the specified {@link JavaInterface}
"
8116b2c29c8ce0f7c0948f16ed802c0c245e0e55,George Gastaldi,AbstractJavaSourceMemberHolder.java,MODIFY,addField -> [Field field] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
index c6c484a..034e440 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
@@ -432,7 +432,7 @@
    }
 
    @Override
-   public O implementsInterface(Class<?> type)
+   public O implementInterface(Class<?> type)
    {
       O obj = addInterface(type);
       MethodSource<?>[] methods = Methods.addInheritedAbstractMethods(type, this);
"
a17f14c1a1222b16286faec3f0252447c9d2e020,George Gastaldi,ExtendableSource.java,MODIFY,setSuperType -> [String type] | [JavaType type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java
index 1db8004..5a48e30 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java
@@ -39,7 +39,7 @@
     * @see #setSuperType(String)
     * @see Methods#addInheritedAbstractMethods(Class, MethodHolderSource)
     */
-   public O implementSuperType(Class<?> type);
+   public O extendSuperType(Class<?> type);
 
    /**
     * Set this type's super class.
"
a17f14c1a1222b16286faec3f0252447c9d2e020,George Gastaldi,JavaClassImpl.java,MODIFY,setSuperType -> [String type] | [JavaType type],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
index 2eb9565..77d932a 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
@@ -137,7 +137,7 @@
    }
 
    @Override
-   public JavaClassSource implementSuperType(final Class<?> type)
+   public JavaClassSource extendSuperType(final Class<?> type)
    {
       setSuperType(type);
       for (MethodSource<?> methodSource : Methods.addInheritedAbstractMethods(type, this))
"
42fd9dedbaef3af9d67cd20fb00c8a8bdaca6c65,George Gastaldi,AbstractJavaSourceMemberHolder.java,MODIFY,addField -> [Field field] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
index 034e440..ab88ba3 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
@@ -435,7 +435,7 @@
    public O implementInterface(Class<?> type)
    {
       O obj = addInterface(type);
-      MethodSource<?>[] methods = Methods.addInheritedAbstractMethods(type, this);
+      List<MethodSource<?>> methods = Methods.addInheritedAbstractMethods(type, this);
       for (MethodSource<?> methodSource : methods)
       {
          methodSource.addAnnotation(Override.class);
"
42fd9dedbaef3af9d67cd20fb00c8a8bdaca6c65,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index 9ff6043..e1830d8 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -117,17 +117,19 @@
          addParameter(paramTypes[i], paramNames[i]);
       }
       // Set method body
+      if (getOrigin().isInterface())
       {
-         if (!getOrigin().isInterface())
+         setBody(null);
+      }
+      else
+      {
+         if (isReturnTypeVoid())
          {
-            if (!isReturnTypeVoid())
-               setBody(""return "" + Types.getDefaultValue(reflectMethod.getReturnType()) + "";"");
-            else
-               setBody("""");
+            setBody("""");
          }
          else
          {
-            setBody(null);
+            setBody(""return "" + Types.getDefaultValue(reflectMethod.getReturnType()) + "";"");
          }
       }
    }
"
497f14ad14d0bab31b2eaef8fe2fd8327e90d28a,George Gastaldi,MethodHolderSource.java,MODIFY,"getMethod -> [String name, Class paramTypes] | [String name]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/MethodHolderSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/MethodHolderSource.java
index a992df5..2bc37f2 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/MethodHolderSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/MethodHolderSource.java
@@ -11,6 +11,8 @@
 
 import org.jboss.forge.roaster.model.Method;
 import org.jboss.forge.roaster.model.MethodHolder;
+import org.jboss.forge.roaster.model.util.Methods;
+import org.jboss.forge.roaster.model.util.Types;
 
 /**
  * Represents a {@link JavaSource} that may declare methods.
@@ -63,7 +65,16 @@
 
    /**
     * Add a new {@link MethodSource} declaration to this {@link O} instance, using the given
-    * {@link java.lang.reflect.Method} as the method declaration
+    * {@link java.lang.reflect.Method} as the method declaration.
+    * 
+    * Abstract {@link java.lang.reflect.Method} objects are implemented in this method.
+    * 
+    * @param method The {@link java.lang.reflect.Method} to be added
+    * @return the method implementation based on the {@link java.lang.reflect.Method} parameter. The generated method
+    *         body (unless the origin is an interface) returns the default value for the return type as defined in
+    *         {@link Types#getDefaultValue(Class)}.
+    * @see Methods#addInheritedAbstractMethods(Class, MethodHolderSource)
+    * @see Types#getDefaultValue(Class)
     */
    MethodSource<O> addMethod(final java.lang.reflect.Method method);
 
"
91f33e48fc30be77b3b0f988d1fd2f07370d1fa0,George Gastaldi,ExtendableSource.java,MODIFY,setSuperType -> [String type] | [JavaType type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java
index 5a48e30..e843d34 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java
@@ -37,7 +37,7 @@
     * Set this type's super class and import their abstract methods, if any.
     * 
     * @see #setSuperType(String)
-    * @see Methods#addInheritedAbstractMethods(Class, MethodHolderSource)
+    * @see Methods#addAbstractMethods(Class, MethodHolderSource)
     */
    public O extendSuperType(Class<?> type);
 
"
91f33e48fc30be77b3b0f988d1fd2f07370d1fa0,George Gastaldi,InterfaceCapableSource.java,MODIFY,addInterface -> [JavaInterface type] | [String type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/InterfaceCapableSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/InterfaceCapableSource.java
index 7363252..60a092b 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/InterfaceCapableSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/InterfaceCapableSource.java
@@ -41,7 +41,7 @@
     * @param type the interface {@link Class} reference
     * @return this object
     * 
-    * @see Methods#addInheritedAbstractMethods(Class, MethodHolderSource)
+    * @see Methods#addAbstractMethods(Class, MethodHolderSource)
     */
    T implementInterface(Class<?> type);
 
"
91f33e48fc30be77b3b0f988d1fd2f07370d1fa0,George Gastaldi,MethodHolderSource.java,MODIFY,"getMethod -> [String name, Class paramTypes] | [String name]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/MethodHolderSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/MethodHolderSource.java
index 2bc37f2..0b8df4f 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/MethodHolderSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/MethodHolderSource.java
@@ -12,7 +12,6 @@
 import org.jboss.forge.roaster.model.Method;
 import org.jboss.forge.roaster.model.MethodHolder;
 import org.jboss.forge.roaster.model.util.Methods;
-import org.jboss.forge.roaster.model.util.Types;
 
 /**
  * Represents a {@link JavaSource} that may declare methods.
@@ -67,14 +66,12 @@
     * Add a new {@link MethodSource} declaration to this {@link O} instance, using the given
     * {@link java.lang.reflect.Method} as the method declaration.
     * 
-    * Abstract {@link java.lang.reflect.Method} objects are implemented in this method.
+    * Abstract {@link java.lang.reflect.Method} objects are not implemented in this method. See
+    * {@link Methods#implementMethod(MethodSource)} for more information
     * 
     * @param method The {@link java.lang.reflect.Method} to be added
-    * @return the method implementation based on the {@link java.lang.reflect.Method} parameter. The generated method
-    *         body (unless the origin is an interface) returns the default value for the return type as defined in
-    *         {@link Types#getDefaultValue(Class)}.
-    * @see Methods#addInheritedAbstractMethods(Class, MethodHolderSource)
-    * @see Types#getDefaultValue(Class)
+    * @return a {@link MethodSource} declaration based on the {@link java.lang.reflect.Method} parameter.
+    * @see Methods#implementMethod(MethodSource)
     */
    MethodSource<O> addMethod(final java.lang.reflect.Method method);
 
"
91f33e48fc30be77b3b0f988d1fd2f07370d1fa0,George Gastaldi,Types.java,MODIFY,getDefaultValue -> [Class type] | [String type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
index 430eb7d..4738e2d 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
@@ -572,4 +572,31 @@
       }
       return result;
    }
+
+   /**
+    * Returns the default value for a given type
+    * 
+    * @param type
+    * @return
+    */
+   public static String getDefaultValue(String type)
+   {
+      final String result;
+      if (Types.isPrimitive(type))
+      {
+         if (""boolean"".equals(type) || Boolean.TYPE.getName().equals(type))
+         {
+            result = ""false"";
+         }
+         else
+         {
+            result = ""0"";
+         }
+      }
+      else
+      {
+         result = ""null"";
+      }
+      return result;
+   }
 }
\ No newline at end of file
"
91f33e48fc30be77b3b0f988d1fd2f07370d1fa0,George Gastaldi,AbstractJavaSourceMemberHolder.java,MODIFY,addField -> [Field field] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
index ab88ba3..6049b59 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
@@ -435,7 +435,7 @@
    public O implementInterface(Class<?> type)
    {
       O obj = addInterface(type);
-      List<MethodSource<?>> methods = Methods.addInheritedAbstractMethods(type, this);
+      List<MethodSource<?>> methods = Methods.addAbstractMethods(type, this);
       for (MethodSource<?> methodSource : methods)
       {
          methodSource.addAnnotation(Override.class);
"
91f33e48fc30be77b3b0f988d1fd2f07370d1fa0,George Gastaldi,JavaClassImpl.java,MODIFY,setSuperType -> [String type] | [JavaType type],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
index 77d932a..cb72e10 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
@@ -140,7 +140,7 @@
    public JavaClassSource extendSuperType(final Class<?> type)
    {
       setSuperType(type);
-      for (MethodSource<?> methodSource : Methods.addInheritedAbstractMethods(type, this))
+      for (MethodSource<?> methodSource : Methods.addAbstractMethods(type, this))
       {
          methodSource.addAnnotation(Override.class);
       }
"
91f33e48fc30be77b3b0f988d1fd2f07370d1fa0,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index e1830d8..a571fed 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -95,7 +95,7 @@
       {
          setPrivate();
       }
-      // setAbstract(Modifier.isAbstract(mod));
+      setAbstract(Modifier.isAbstract(mod));
       setSynchronized(Modifier.isSynchronized(mod));
       setNative(Modifier.isNative(mod));
       // Set method return type
@@ -117,20 +117,9 @@
          addParameter(paramTypes[i], paramNames[i]);
       }
       // Set method body
-      if (getOrigin().isInterface())
+      if (!isAbstract())
       {
-         setBody(null);
-      }
-      else
-      {
-         if (isReturnTypeVoid())
-         {
-            setBody("""");
-         }
-         else
-         {
-            setBody(""return "" + Types.getDefaultValue(reflectMethod.getReturnType()) + "";"");
-         }
+         Methods.implementMethod(this);
       }
    }
 
"
e7a25440374bf469ceff32b58a8cd879babcafff,George Gastaldi,MethodHolderSource.java,MODIFY,"getMethod -> [String name, Class paramTypes] | [String name]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/MethodHolderSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/MethodHolderSource.java
index 0b8df4f..5949696 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/MethodHolderSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/MethodHolderSource.java
@@ -76,6 +76,19 @@
    MethodSource<O> addMethod(final java.lang.reflect.Method method);
 
    /**
+    * Add a new {@link MethodSource} declaration to this {@link O} instance, using the given {@link Method} as the
+    * method declaration.
+    * 
+    * Abstract {@link java.lang.reflect.Method} objects are not implemented in this method. See
+    * {@link Methods#implementMethod(MethodSource)} for more information
+    * 
+    * @param method The {@link Method} to be added
+    * @return a {@link MethodSource} declaration based on the {@link java.lang.reflect.Method} parameter.
+    * @see Methods#implementMethod(MethodSource)
+    */
+   MethodSource<O> addMethod(final Method<?, ?> method);
+
+   /**
     * Remove the given {@link MethodSource} declaration from this {@link O} instance, if it exists; otherwise, do
     * nothing.
     */
"
e7a25440374bf469ceff32b58a8cd879babcafff,George Gastaldi,AbstractJavaSourceMemberHolder.java,MODIFY,addField -> [Field field] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
index 6049b59..e63a38b 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
@@ -361,6 +361,15 @@
 
    @Override
    @SuppressWarnings(""unchecked"")
+   public MethodSource<O> addMethod(Method<?, ?> method)
+   {
+      MethodSource<O> m = new MethodImpl<O>((O) this, method.toString());
+      getBodyDeclaration().bodyDeclarations().add(m.getInternal());
+      return m;
+   }
+
+   @Override
+   @SuppressWarnings(""unchecked"")
    public List<MethodSource<O>> getMethods()
    {
       List<MethodSource<O>> result = new ArrayList<MethodSource<O>>();
"
e7a25440374bf469ceff32b58a8cd879babcafff,George Gastaldi,EnumConstantBodyImpl.java,MODIFY,addImport -> [Type type] | [String className],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
index ed2a1ea..ec29a50 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
@@ -714,6 +714,14 @@
    }
 
    @Override
+   public MethodSource<Body> addMethod(Method<?, ?> method)
+   {
+      MethodSource<Body> m = new MethodImpl<Body>(this, method.toString());
+      getBody().bodyDeclarations().add(m.getInternal());
+      return m;
+   }
+
+   @Override
    public List<MethodSource<Body>> getMethods()
    {
       final List<MethodSource<Body>> result = new ArrayList<MethodSource<Body>>();
"
87a822ff0af42dd8feb9726bc57bf8ce1f6c13fb,George Gastaldi,MethodHolderSource.java,MODIFY,"getMethod -> [String name, Class paramTypes] | [String name]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/MethodHolderSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/MethodHolderSource.java
index 5949696..acb6edc 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/MethodHolderSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/MethodHolderSource.java
@@ -79,11 +79,11 @@
     * Add a new {@link MethodSource} declaration to this {@link O} instance, using the given {@link Method} as the
     * method declaration.
     * 
-    * Abstract {@link java.lang.reflect.Method} objects are not implemented in this method. See
+    * Abstract {@link Method} objects are not implemented in this method. See
     * {@link Methods#implementMethod(MethodSource)} for more information
     * 
     * @param method The {@link Method} to be added
-    * @return a {@link MethodSource} declaration based on the {@link java.lang.reflect.Method} parameter.
+    * @return a {@link MethodSource} declaration based on the {@link Method} parameter.
     * @see Methods#implementMethod(MethodSource)
     */
    MethodSource<O> addMethod(final Method<?, ?> method);
"
a030cf39407cbec6e9677803e4c4f9b257cf961d,George Gastaldi,ExtendableSource.java,MODIFY,setSuperType -> [String type] | [JavaType type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java
index e843d34..3555928 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java
@@ -37,7 +37,7 @@
     * Set this type's super class and import their abstract methods, if any.
     * 
     * @see #setSuperType(String)
-    * @see Methods#addAbstractMethods(Class, MethodHolderSource)
+    * @see Methods#implementAbstractMethods(Class, MethodHolderSource)
     */
    public O extendSuperType(Class<?> type);
 
"
a030cf39407cbec6e9677803e4c4f9b257cf961d,George Gastaldi,InterfaceCapableSource.java,MODIFY,addInterface -> [JavaInterface type] | [String type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/InterfaceCapableSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/InterfaceCapableSource.java
index 60a092b..4d59209 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/InterfaceCapableSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/InterfaceCapableSource.java
@@ -41,7 +41,7 @@
     * @param type the interface {@link Class} reference
     * @return this object
     * 
-    * @see Methods#addAbstractMethods(Class, MethodHolderSource)
+    * @see Methods#implementAbstractMethods(Class, MethodHolderSource)
     */
    T implementInterface(Class<?> type);
 
"
a030cf39407cbec6e9677803e4c4f9b257cf961d,George Gastaldi,AbstractJavaSourceMemberHolder.java,MODIFY,addField -> [Field field] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
index e63a38b..d6b8e6e 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
@@ -444,8 +444,7 @@
    public O implementInterface(Class<?> type)
    {
       O obj = addInterface(type);
-      List<MethodSource<?>> methods = Methods.addAbstractMethods(type, this);
-      for (MethodSource<?> methodSource : methods)
+      for (MethodSource<?> methodSource : Methods.implementAbstractMethods(type, this))
       {
          methodSource.addAnnotation(Override.class);
       }
"
a030cf39407cbec6e9677803e4c4f9b257cf961d,George Gastaldi,JavaClassImpl.java,MODIFY,setSuperType -> [String type] | [JavaType type],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
index cb72e10..801b936 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
@@ -140,7 +140,7 @@
    public JavaClassSource extendSuperType(final Class<?> type)
    {
       setSuperType(type);
-      for (MethodSource<?> methodSource : Methods.addAbstractMethods(type, this))
+      for (MethodSource<?> methodSource : Methods.implementAbstractMethods(type, this))
       {
          methodSource.addAnnotation(Override.class);
       }
"
b8d229cf9ffe8d67ffe89fd8deb55b30c47fce2d,George Gastaldi,ExtendableSource.java,MODIFY,setSuperType -> [String type] | [JavaType type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java
index 3555928..ee733da 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java
@@ -8,6 +8,7 @@
 package org.jboss.forge.roaster.model.source;
 
 import org.jboss.forge.roaster.model.Extendable;
+import org.jboss.forge.roaster.model.JavaClass;
 import org.jboss.forge.roaster.model.JavaType;
 import org.jboss.forge.roaster.model.util.Methods;
 
@@ -42,6 +43,14 @@
    public O extendSuperType(Class<?> type);
 
    /**
+    * Set this type's super class and import their abstract methods, if any.
+    * 
+    * @see #setSuperType(String)
+    * @see Methods#implementAbstractMethods(Class, MethodHolderSource)
+    */
+   public O extendSuperType(JavaClass<?> type);
+
+   /**
     * Set this type's super class.
     * <p>
     * <strong>For example:</strong><br/>
"
b8d229cf9ffe8d67ffe89fd8deb55b30c47fce2d,George Gastaldi,InterfaceCapableSource.java,MODIFY,addInterface -> [JavaInterface type] | [String type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/InterfaceCapableSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/InterfaceCapableSource.java
index 4d59209..917eb3d 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/InterfaceCapableSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/InterfaceCapableSource.java
@@ -46,6 +46,16 @@
    T implementInterface(Class<?> type);
 
    /**
+    * Implements the specified {@link JavaInterface} and import their abstract methods, if any.
+    * 
+    * @param type the interface {@link JavaInterface} reference
+    * @return this object
+    * 
+    * @see Methods#implementAbstractMethods(JavaInterface, MethodHolderSource)
+    */
+   T implementInterface(JavaInterface<?> type);
+
+   /**
     * Implements the specified {@link JavaInterface}
     * 
     * @param type the interface
"
b8d229cf9ffe8d67ffe89fd8deb55b30c47fce2d,George Gastaldi,Methods.java,MODIFY,"implementAbstractMethods -> [Class source, MethodHolderSource target] | [MethodHolder source, MethodHolderSource target]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Methods.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Methods.java
index 2b0b786..a8acbac 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Methods.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Methods.java
@@ -7,11 +7,12 @@
 
 package org.jboss.forge.roaster.model.util;
 
-import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.util.ArrayList;
 import java.util.List;
 
+import org.jboss.forge.roaster.model.Method;
+import org.jboss.forge.roaster.model.MethodHolder;
 import org.jboss.forge.roaster.model.source.MethodHolderSource;
 import org.jboss.forge.roaster.model.source.MethodSource;
 
@@ -22,9 +23,32 @@
  */
 public class Methods
 {
+   /**
+    * Implement the abstract methods present in a {@link MethodHolder} to the specified {@link MethodHolderSource}
+    * 
+    * @param source the {@link MethodHolder} where the methods will be imported from
+    * @param target the {@link MethodHolderSource} where the methods will be exported to
+    * @return a {@link List} of the implemented methods added to the provided {@link MethodHolderSource}
+    */
+   @SuppressWarnings({ ""rawtypes"", ""unchecked"" })
+   public static List<MethodSource<?>> implementAbstractMethods(final MethodHolder<?> source,
+            final MethodHolderSource<?> target)
+   {
+      List<MethodSource<?>> methods = new ArrayList<MethodSource<?>>();
+      for (Method method : source.getMethods())
+      {
+         if (method.isAbstract() && !target.hasMethod(method))
+         {
+            MethodSource<?> newMethod = target.addMethod(method);
+            implementMethod(newMethod);
+            methods.add(newMethod);
+         }
+      }
+      return methods;
+   }
 
    /**
-    * This will add the abstract methods present in a {@link Class} to the specified {@link MethodHolderSource}
+    * Implement the abstract methods present in a {@link Class} to the specified {@link MethodHolderSource}
     * 
     * @param source the {@link Class} where the methods will be imported from
     * @param target the {@link MethodHolderSource} where the methods will be exported to
@@ -33,9 +57,8 @@
    public static List<MethodSource<?>> implementAbstractMethods(final Class<?> source,
             final MethodHolderSource<?> target)
    {
-      Class<?> currentType = source;
       List<MethodSource<?>> methods = new ArrayList<MethodSource<?>>();
-      for (Method m : currentType.getMethods())
+      for (java.lang.reflect.Method m : source.getMethods())
       {
          if (m.getDeclaringClass() == Object.class)
             continue;
@@ -125,4 +148,5 @@
          name.replace(0, i, name.substring(0, i).toLowerCase());
       return name.toString();
    }
+
 }
"
b8d229cf9ffe8d67ffe89fd8deb55b30c47fce2d,George Gastaldi,AbstractJavaSourceMemberHolder.java,MODIFY,addField -> [Field field] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
index d6b8e6e..ade0cb6 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
@@ -452,6 +452,17 @@
    }
 
    @Override
+   public O implementInterface(JavaInterface<?> type)
+   {
+      O obj = addInterface(type);
+      for (MethodSource<?> methodSource : Methods.implementAbstractMethods(type, this))
+      {
+         methodSource.addAnnotation(Override.class);
+      }
+      return obj;
+   }
+
+   @Override
    public O addInterface(final JavaInterface<?> type)
    {
       return addInterface(type.getQualifiedName());
"
b8d229cf9ffe8d67ffe89fd8deb55b30c47fce2d,George Gastaldi,JavaClassImpl.java,MODIFY,setSuperType -> [String type] | [JavaType type],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
index 801b936..24f2e0d 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
@@ -13,6 +13,7 @@
 import org.eclipse.jdt.core.dom.Type;
 import org.eclipse.jdt.core.dom.TypeDeclaration;
 import org.eclipse.jface.text.Document;
+import org.jboss.forge.roaster.model.JavaClass;
 import org.jboss.forge.roaster.model.JavaType;
 import org.jboss.forge.roaster.model.ast.ModifierAccessor;
 import org.jboss.forge.roaster.model.source.JavaClassSource;
@@ -147,6 +148,17 @@
       return this;
    }
 
+   @Override
+   public JavaClassSource extendSuperType(JavaClass<?> type)
+   {
+      setSuperType(type);
+      for (MethodSource<?> methodSource : Methods.implementAbstractMethods(type, this))
+      {
+         methodSource.addAnnotation(Override.class);
+      }
+      return this;
+   }
+
    @SuppressWarnings(""unchecked"")
    @Override
    public JavaClassSource setSuperType(final String type)
"
851f0ef886667e4e810a1ef358818ac1da9bca49,Jeremie Bresson,Formatter.java,MODIFY,"format -> [Properties prefs, String source] | [File source]","diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java b/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
index 4c00359..2992d7a 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
@@ -111,7 +111,7 @@
       IDocument doc = new Document(source);
       try
       {
-         TextEdit edit = codeFormatter.format(CodeFormatter.K_COMPILATION_UNIT,
+         TextEdit edit = codeFormatter.format(CodeFormatter.K_COMPILATION_UNIT | CodeFormatter.F_INCLUDE_COMMENTS,
                   source, 0, source.length(), 0, null);
          if (edit != null)
          {
"
c40cefd23a435fbc9de4c0e8c2b94c9ddbd36be8,George Gastaldi,Formatter.java,MODIFY,"format -> [Properties prefs, String source] | [File source]","diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java b/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
index 4c00359..2992d7a 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
@@ -111,7 +111,7 @@
       IDocument doc = new Document(source);
       try
       {
-         TextEdit edit = codeFormatter.format(CodeFormatter.K_COMPILATION_UNIT,
+         TextEdit edit = codeFormatter.format(CodeFormatter.K_COMPILATION_UNIT | CodeFormatter.F_INCLUDE_COMMENTS,
                   source, 0, source.length(), 0, null);
          if (edit != null)
          {
"
b14901b8880db7a192927b409edbad620cf282c6,George Gastaldi,Roaster.java,MODIFY,"parse -> [Class type, InputStream data] | [File file]","diff --git a/api/src/main/java/org/jboss/forge/roaster/Roaster.java b/api/src/main/java/org/jboss/forge/roaster/Roaster.java
index 83dd246..a434927 100644
--- a/api/src/main/java/org/jboss/forge/roaster/Roaster.java
+++ b/api/src/main/java/org/jboss/forge/roaster/Roaster.java
@@ -164,17 +164,8 @@
    /**
     * Read the given string and parse its data into a new {@link JavaType} instance of the given type.
     */
-   public static <T extends JavaType<?>> T parse(final Class<T> type, final String data)
-   {
-      return parse(type, Streams.fromString(data));
-   }
-
-   /**
-    * Read the given {@link InputStream} and parse its data into a new {@link JavaType} instance of the given type. The
-    * caller is responsible for closing the stream.
-    */
    @SuppressWarnings(""unchecked"")
-   public static <T extends JavaType<?>> T parse(final Class<T> type, final InputStream data)
+   public static <T extends JavaType<?>> T parse(final Class<T> type, final String data)
    {
       for (JavaParser parser : getParsers())
       {
@@ -195,18 +186,18 @@
    }
 
    /**
-    * Read the given {@link String} and parse its data into a new {@link JavaUnit} instance of the given type.
+    * Read the given {@link InputStream} and parse its data into a new {@link JavaType} instance of the given type. The
+    * caller is responsible for closing the stream.
     */
-   public static JavaUnit parseUnit(final String data)
+   public static <T extends JavaType<?>> T parse(final Class<T> type, final InputStream data)
    {
-      return parseUnit(Streams.fromString(data));
+      return parse(type, Streams.toString(data));
    }
 
    /**
-    * Read the given {@link InputStream} and parse its data into a new {@link JavaUnit} instance of the given type. The
-    * caller is responsible for closing the stream.
+    * Read the given {@link String} and parse its data into a new {@link JavaUnit} instance of the given type.
     */
-   public static JavaUnit parseUnit(final InputStream data)
+   public static JavaUnit parseUnit(final String data)
    {
       for (JavaParser parser : getParsers())
       {
@@ -218,6 +209,15 @@
    }
 
    /**
+    * Read the given {@link InputStream} and parse its data into a new {@link JavaUnit} instance of the given type. The
+    * caller is responsible for closing the stream.
+    */
+   public static JavaUnit parseUnit(final InputStream data)
+   {
+      return parseUnit(Streams.toString(data));
+   }
+
+   /**
     * Format the given {@link String} as a Java source file, using the built in code format style.
     * 
     * @param source a java source code
"
b14901b8880db7a192927b409edbad620cf282c6,George Gastaldi,JavaParser.java,MODIFY,parseUnit -> [InputStream data] | [String data],"diff --git a/api/src/main/java/org/jboss/forge/roaster/spi/JavaParser.java b/api/src/main/java/org/jboss/forge/roaster/spi/JavaParser.java
index 427530f..a4bbd55 100644
--- a/api/src/main/java/org/jboss/forge/roaster/spi/JavaParser.java
+++ b/api/src/main/java/org/jboss/forge/roaster/spi/JavaParser.java
@@ -6,15 +6,14 @@
  */
 package org.jboss.forge.roaster.spi;
 
-import java.io.InputStream;
-
-import org.jboss.forge.roaster.model.JavaType;
 import org.jboss.forge.roaster.model.JavaUnit;
 import org.jboss.forge.roaster.model.source.JavaSource;
 
 /**
- * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
+ * Roaster SPI for parser implementations
  * 
+ * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
+ * @author <a href=""mailto:ggastald@redhat.com"">George Gastaldi</a>
  */
 public interface JavaParser
 {
@@ -28,21 +27,10 @@
    <T extends JavaSource<?>> T create(final Class<T> type);
 
    /**
-    * Read the given {@link InputStream} and parse the data into a new {@link JavaUnit} instance.
+    * Read the given {@link String} and parse the data into a new {@link JavaUnit} instance.
     * 
     * @param data to parse
     * @return {@link JavaUnit}, {@code null} if the data format is not recognized by this {@link JavaParser}.
     */
-   JavaUnit parseUnit(final InputStream data);
-
-   /**
-    * Read the given {@link InputStream} and parse the data into a new {@link JavaType} instance.
-    * 
-    * @param data to parse
-    * @return {@link JavaType}, {@code null} if the data format is not recognized by this {@link JavaParser}.
-    * @deprecated {@link #parseUnit(InputStream)} should be used instead, as the JLS allows several types to be defined
-    *             in a single file
-    */
-   @Deprecated
-   JavaType<?> parse(final InputStream data);
+   JavaUnit parseUnit(final String data);
 }
\ No newline at end of file
"
84697c0b37a728d1132ffe8a00293cba3c80a31e,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index a571fed..ca1d769 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -561,10 +561,6 @@
       return Visibility.set(this, scope);
    }
 
-   /*
-    * Interfaces
-    */
-
    @Override
    public String toString()
    {
"
84697c0b37a728d1132ffe8a00293cba3c80a31e,George Gastaldi,ParameterImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/ParameterImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/ParameterImpl.java
index f8d01e7..680d803 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/ParameterImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/ParameterImpl.java
@@ -135,6 +135,19 @@
    }
 
    @Override
+   public ParameterSource<O> setVarArgs(boolean variableArity)
+   {
+      param.setVarargs(variableArity);
+      return this;
+   }
+
+   @Override
+   public boolean isVarArgs()
+   {
+      return param.isVarargs();
+   }
+
+   @Override
    public Object getInternal()
    {
       return param;
"
f305a0f1c07ee7565c6a86eb01c063dc6fb1c5c3,George Gastaldi,MethodSource.java,MODIFY,setReturnType -> [JavaType type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/MethodSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/MethodSource.java
index 73d0ffb..1762296 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/MethodSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/MethodSource.java
@@ -44,17 +44,6 @@
    MethodSource<O> setReturnType(final Class<?> type);
 
    /**
-    * Set the inner body of this {@link Method}
-    */
-   MethodSource<O> setBody(final String body);
-
-   /**
-    * Toggle this method as a constructor. If true, and the name of the {@link Method} is not the same as the name of
-    * its parent {@link JavaClass} , update the name of the method to match.
-    */
-   MethodSource<O> setConstructor(final boolean constructor);
-
-   /**
     * Set this {@link Method} to return the given type.
     */
    MethodSource<O> setReturnType(final String type);
@@ -70,6 +59,17 @@
    MethodSource<O> setReturnTypeVoid();
 
    /**
+    * Set the inner body of this {@link Method}
+    */
+   MethodSource<O> setBody(final String body);
+
+   /**
+    * Toggle this method as a constructor. If true, and the name of the {@link Method} is not the same as the name of
+    * its parent {@link JavaClass} , update the name of the method to match.
+    */
+   MethodSource<O> setConstructor(final boolean constructor);
+
+   /**
     * Set this {@link Method}'s parameters.
     */
    MethodSource<O> setParameters(String string);
"
f305a0f1c07ee7565c6a86eb01c063dc6fb1c5c3,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index ca1d769..9735a2f 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -301,7 +301,7 @@
    @Override
    public MethodSource<O> setReturnType(final Class<?> type)
    {
-      return setReturnType(type.getSimpleName());
+      return setReturnType(type.getCanonicalName());
    }
 
    @Override
"
2d577bd50cb22095d7f172b44b00e6e7b371fc47,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index 9735a2f..bcb2653 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -621,22 +621,22 @@
    @Override
    public MethodSource<O> addThrows(final Class<? extends Exception> type)
    {
-      return addThrows(type.getName());
+      return addThrows(type.getCanonicalName());
    }
 
    @Override
    @SuppressWarnings({ ""unchecked"", ""rawtypes"" })
    public MethodSource<O> addThrows(final String type)
    {
-      String packg = Types.getPackage(type);
-      String name = Types.toSimpleName(type);
+      String simpleTypeName = Types.toSimpleName(type);
 
-      if (!packg.isEmpty())
+      O origin = getOrigin();
+      if (!Strings.areEqual(type, simpleTypeName) && origin.requiresImport(type))
       {
-         getOrigin().addImport(type);
+         origin.addImport(type);
       }
 
-      SimpleName simpleName = method.getAST().newSimpleName(name);
+      SimpleName simpleName = method.getAST().newSimpleName(simpleTypeName);
 
       List list = (List) method.getStructuralProperty(MethodDeclaration.THROWN_EXCEPTION_TYPES_PROPERTY);
       list.add(method.getAST().newSimpleType(simpleName));
"
0e7fe81165f902fb7898592e4fee80b59bdcaca6,George Gastaldi,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
index ee39ac7..a4326e6 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
@@ -885,12 +885,6 @@
    }
 
    @Override
-   public List<JavaSource<?>> getNestedClasses()
-   {
-      return getNestedTypes();
-   }
-
-   @Override
    public JavaDocSource<O> getJavaDoc()
    {
       Javadoc javadoc = body.getJavadoc();
"
0e7fe81165f902fb7898592e4fee80b59bdcaca6,George Gastaldi,EnumConstantBodyImpl.java,MODIFY,addImport -> [Type type] | [String className],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
index ec29a50..449ca8a 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
@@ -897,12 +897,6 @@
    }
 
    @Override
-   public List<JavaSource<?>> getNestedClasses()
-   {
-      return getNestedTypes();
-   }
-
-   @Override
    public Import addImport(Type<?> type)
    {
       return getEnclosingType().addImport(type);
"
0e7fe81165f902fb7898592e4fee80b59bdcaca6,George Gastaldi,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
index d76ffd2..98e6961 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
@@ -723,12 +723,6 @@
    }
 
    @Override
-   public List<JavaSource<?>> getNestedClasses()
-   {
-      return Collections.emptyList();
-   }
-
-   @Override
    public Import addImport(Type<?> type)
    {
       return addImport(type.getQualifiedName());
"
7dafd4048036dfbaf495ce9a99c6f4f2d6957dec,George Gastaldi,JavaDocImpl.java,MODIFY,getTags -> [String tagName] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaDocImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaDocImpl.java
index c659c4c..4dfa5aa 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaDocImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaDocImpl.java
@@ -79,10 +79,16 @@
       for (TagElement tagElement : tagList)
       {
          if (tagElement.getTagName() != null)
-            text.append(tagElement.getTagName());
-         for (Object fragment : tagElement.fragments())
          {
+            text.append(tagElement.getTagName());
+         }
+         List<Object> fragments = tagElement.fragments();
+         for (Iterator<Object> iterator = fragments.iterator(); iterator.hasNext();)
+         {
+            Object fragment = iterator.next();
             text.append(fragment);
+            if (iterator.hasNext())
+               text.append(' ');
          }
          text.append(System.getProperty(""line.separator""));
       }
"
1b99c8e14354c81ab1d0247a0747e300d0664bbb,George Gastaldi,AbstractJavaSourceMemberHolder.java,MODIFY,addField -> [Field field] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
index ade0cb6..0f25a21 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
@@ -263,7 +263,7 @@
             List<ParameterSource<O>> localParams = local.getParameters();
             if (paramTypes != null)
             {
-               if (localParams.isEmpty() || (localParams.size() == paramTypes.length))
+               if (localParams.size() == paramTypes.length)
                {
                   boolean matches = true;
                   for (int i = 0; i < localParams.size(); i++)
"
f204c298579fc66784c41eb255069d60e4e701dc,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index bcb2653..a28ab66 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -380,6 +380,22 @@
    }
 
    @Override
+   public boolean isDefault()
+   {
+      return modifiers.hasModifier(method, ModifierKeyword.DEFAULT_KEYWORD);
+   }
+
+   @Override
+   public MethodSource<O> setDefault(boolean value)
+   {
+      if (value)
+         modifiers.addModifier(method, ModifierKeyword.DEFAULT_KEYWORD);
+      else
+         modifiers.removeModifier(method, ModifierKeyword.DEFAULT_KEYWORD);
+      return this;
+   }
+
+   @Override
    public boolean isStatic()
    {
       return modifiers.hasModifier(method, ModifierKeyword.STATIC_KEYWORD);
"
22fbf7685e39060e9125aa58264991fbe87de931,"Lincoln Baxter, III",Types.java,MODIFY,getDefaultValue -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
index 4738e2d..46a7cb7 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
@@ -298,7 +298,12 @@
       StringTokenizer tok = new StringTokenizer(typeArgs, "", "");
       while (tok.hasMoreTokens())
       {
-         if (!validateNameWithGenerics(tok.nextToken()))
+         String typeArg = tok.nextToken();
+         while (incompleteGenerics(typeArg) && tok.hasMoreElements()) {
+            typeArg += tok.nextToken();
+         }
+
+         if (!validateNameWithGenerics(typeArg))
          {
             return false;
          }
@@ -311,6 +316,13 @@
       return isGeneric(name) || validateName(name) || WILDCARD_AWARE_TYPE_PATTERN.matcher(name).matches();
    }
 
+   private static boolean incompleteGenerics(String name)
+   {
+      final int ltCount = name.length() - name.replaceAll(""<"", """").length();
+      final int gtCount = name.length() - name.replaceAll("">"", """").length();
+      return ltCount != gtCount;
+   }
+
    private static boolean validateName(String name)
    {
       return IDENTIFIER_PATTERN.matcher(name).matches();
"
6100d2c68d645332ce10eea1784592f5ac218ccf,George Gastaldi,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
index a4326e6..f54837c 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
@@ -672,7 +672,7 @@
       int result = 1;
       result = prime * result + ((body == null) ? 0 : body.hashCode());
       result = prime * result + ((document == null) ? 0 : document.hashCode());
-      result = prime * result + ((enclosingType == null) ? 0 : enclosingType.hashCode());
+      result = prime * result + ((enclosingType == null || enclosingType == this) ? 0 : enclosingType.hashCode());
       result = prime * result + ((unit == null) ? 0 : unit.hashCode());
       return result;
    }
"
af0d55e3c831900430fc66a037cca826e4ef6a98,radai-rosenblatt,AbstractJavaSourceMemberHolder.java,MODIFY,addField -> [Field field] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
index 0f25a21..81ba355 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
@@ -562,7 +562,7 @@
    @Override
    public PropertySource<O> addProperty(Class<?> type, String name)
    {
-      return addProperty(type.getName(), name);
+      return addProperty(type.getCanonicalName(), name);
    }
 
    @Override
"
c71bfe71a81c0046a7c355b79b112524b4f1faa1,George Gastaldi,AbstractJavaSourceMemberHolder.java,MODIFY,addField -> [Field field] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
index 0f25a21..81ba355 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
@@ -562,7 +562,7 @@
    @Override
    public PropertySource<O> addProperty(Class<?> type, String name)
    {
-      return addProperty(type.getName(), name);
+      return addProperty(type.getCanonicalName(), name);
    }
 
    @Override
"
47ed24a6c01daa56eefef6375a77f0b76857c144,George Gastaldi,FieldImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
index c7c8a1b..e9ae8aa 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
@@ -12,6 +12,7 @@
 
 import org.eclipse.jdt.core.dom.AST;
 import org.eclipse.jdt.core.dom.ASTNode;
+import org.eclipse.jdt.core.dom.CompilationUnit;
 import org.eclipse.jdt.core.dom.Expression;
 import org.eclipse.jdt.core.dom.FieldDeclaration;
 import org.eclipse.jdt.core.dom.Javadoc;
@@ -45,16 +46,13 @@
    private AST ast;
    private final FieldDeclaration field;
    private final VariableDeclarationFragment fragment;
-
-   private void init(final O parent)
-   {
-      this.parent = parent;
-      ast = ((ASTNode) parent.getInternal()).getAST();
-   }
+   private final CompilationUnit cu;
 
    public FieldImpl(final O parent)
    {
-      init(parent);
+      this.parent = parent;
+      this.cu = (CompilationUnit) parent.getInternal();
+      this.ast = cu.getAST();
       this.fragment = ast.newVariableDeclarationFragment();
       this.field = ast.newFieldDeclaration(this.fragment);
    }
@@ -67,7 +65,9 @@
    @SuppressWarnings(""unchecked"")
    public FieldImpl(final O parent, final Object internal, boolean copy)
    {
-      init(parent);
+      this.parent = parent;
+      this.cu = (CompilationUnit) parent.getInternal();
+      this.ast = cu.getAST();
       if (copy)
       {
          VariableDeclarationFragment newFieldFragment = (VariableDeclarationFragment) internal;
@@ -465,4 +465,28 @@
       }
       return new JavaDocImpl<FieldSource<O>>(this, javadoc);
    }
+
+   @Override
+   public int getStartPosition()
+   {
+      return field.getStartPosition();
+   }
+
+   @Override
+   public int getEndPosition()
+   {
+      return getStartPosition() + field.getLength();
+   }
+
+   @Override
+   public int getLineNumber()
+   {
+      return cu.getLineNumber(getStartPosition());
+   }
+
+   @Override
+   public int getColumnNumber()
+   {
+      return cu.getColumnNumber(getStartPosition());
+   }
 }
"
47ed24a6c01daa56eefef6375a77f0b76857c144,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index a28ab66..aa8f2e3 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -908,4 +908,28 @@
       }
       return new JavaDocImpl<MethodSource<O>>(this, javadoc);
    }
-}
+
+   @Override
+   public int getStartPosition()
+   {
+      return method.getStartPosition();
+   }
+
+   @Override
+   public int getEndPosition()
+   {
+      return getStartPosition() + method.getLength();
+   }
+
+   @Override
+   public int getLineNumber()
+   {
+      return cu.getLineNumber(getStartPosition());
+   }
+
+   @Override
+   public int getColumnNumber()
+   {
+      return cu.getColumnNumber(getStartPosition());
+   }
+}
\ No newline at end of file
"
05431c1c362bd4a2dee0ca7e05a21a40beb8eebf,George Gastaldi,FieldImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
index e9ae8aa..1a494f8 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
@@ -475,7 +475,8 @@
    @Override
    public int getEndPosition()
    {
-      return getStartPosition() + field.getLength();
+      int startPosition = getStartPosition();
+      return (startPosition == -1) ? -1 : startPosition + field.getLength();
    }
 
    @Override
"
05431c1c362bd4a2dee0ca7e05a21a40beb8eebf,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index aa8f2e3..740cc42 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -918,7 +918,8 @@
    @Override
    public int getEndPosition()
    {
-      return getStartPosition() + method.getLength();
+      int startPosition = getStartPosition();
+      return (startPosition == -1) ? -1 : startPosition + method.getLength();
    }
 
    @Override
"
ccecc2d82c5792ee01436dc6106f43b9152efda7,George Gastaldi,Methods.java,MODIFY,"implementAbstractMethods -> [Class source, MethodHolderSource target] | [MethodHolder source, MethodHolderSource target]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Methods.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Methods.java
index a8acbac..f8dc8a7 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Methods.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Methods.java
@@ -127,7 +127,7 @@
    static String toParamName(String type)
    {
       // Special case for java.lang types
-      if (Types.isJavaLang(type))
+      if (Types.isBasicType(type) || Types.isJavaLang(type))
       {
          return String.valueOf(type.charAt(0)).toLowerCase();
       }
"
6e807e98e596a15599a564d76330e19cd5ddfa3d,nchallut,AnnotationTargetSource.java,MODIFY,getAnnotation -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationTargetSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationTargetSource.java
index 17f02b9..3fa77fb 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationTargetSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationTargetSource.java
@@ -51,4 +51,9 @@
     * Remove an annotation instance from this {@link T}.
     */
    T removeAnnotation(Annotation<O> annotation);
+   
+   /**
+    * Remove all annotations instance from this {@link T}.
+    */
+   void removeAnnotations();
 }
\ No newline at end of file
"
6e807e98e596a15599a564d76330e19cd5ddfa3d,nchallut,Methods.java,MODIFY,"implementAbstractMethods -> [Class source, MethodHolderSource target] | [MethodHolder source, MethodHolderSource target]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Methods.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Methods.java
index f8dc8a7..23b3b91 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Methods.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Methods.java
@@ -15,6 +15,7 @@
 import org.jboss.forge.roaster.model.MethodHolder;
 import org.jboss.forge.roaster.model.source.MethodHolderSource;
 import org.jboss.forge.roaster.model.source.MethodSource;
+import org.jboss.forge.roaster.model.source.ParameterSource;
 
 /**
  * Utility methods for {@link MethodSource} objects
@@ -41,12 +42,22 @@
          {
             MethodSource<?> newMethod = target.addMethod(method);
             implementMethod(newMethod);
+            removeAnnotations(newMethod);
             methods.add(newMethod);
          }
       }
       return methods;
    }
 
+   public static void removeAnnotations(final MethodSource<?> source)
+   {
+      source.removeAnnotations();
+      for (ParameterSource<?> parameterSource : source.getParameters())
+      {
+         parameterSource.removeAnnotations();
+      }
+   }
+
    /**
     * Implement the abstract methods present in a {@link Class} to the specified {@link MethodHolderSource}
     * 
@@ -67,6 +78,7 @@
          {
             MethodSource<?> newMethod = target.addMethod(m);
             implementMethod(newMethod);
+            removeAnnotations(newMethod);
             methods.add(newMethod);
          }
       }
@@ -149,4 +161,4 @@
       return name.toString();
    }
 
-}
+}
\ No newline at end of file
"
6e807e98e596a15599a564d76330e19cd5ddfa3d,nchallut,AnnotationAccessor.java,MODIFY,"addAnnotation -> [AnnotationTargetSource target, List modifiers, String className] | [AnnotationTargetSource target, ASTNode body]","diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java b/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java
index 175acc8..176c51c 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java
@@ -149,6 +149,29 @@
       return target;
    }
 
+   public void removeAnnotations(final ASTNode body)
+   {
+      removeAnnotation(getModifiers(body));
+
+   }
+
+   public void removeAnnotations(final SingleVariableDeclaration variableDeclaration)
+   {
+      removeAnnotation(variableDeclaration.modifiers());
+   }
+
+   private void removeAnnotation(final List<?> modifiers)
+   {
+      List<?> modifiersCopy = new ArrayList<Object>(modifiers);
+      for (Object object : modifiersCopy)
+      {
+         if(object instanceof org.eclipse.jdt.core.dom.Annotation)
+         {
+            modifiers.remove(object);
+         }
+      }
+   }
+
    public <E extends AnnotationTargetSource<O, T>> boolean hasAnnotation(final E target, final ASTNode body,
             final String type)
    {
@@ -231,4 +254,4 @@
       }
       return Collections.emptyList();
    }
-}
+}
\ No newline at end of file
"
6e807e98e596a15599a564d76330e19cd5ddfa3d,nchallut,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
index f54837c..4c5f7e0 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
@@ -129,6 +129,12 @@
    {
       return (O) annotations.removeAnnotation(this, getBodyDeclaration(), annotation);
    }
+   
+   @Override
+   public void removeAnnotations()
+   {
+     annotations.removeAnnotations(getBodyDeclaration());
+   }
 
    @Override
    public AnnotationSource<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
"
6e807e98e596a15599a564d76330e19cd5ddfa3d,nchallut,AnnotationElementImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationElementImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationElementImpl.java
index 08cf543..e55ba82 100755
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationElementImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationElementImpl.java
@@ -397,6 +397,12 @@
    {
       return annotations.removeAnnotation(this, member, annotation);
    }
+   
+   @Override
+   public void removeAnnotations()
+   {
+      annotations.removeAnnotations(member);
+   }
 
    @Override
    public String toString()
@@ -539,4 +545,4 @@
       }
       return true;
    }
-}
+}
\ No newline at end of file
"
6e807e98e596a15599a564d76330e19cd5ddfa3d,nchallut,EnumConstantBodyImpl.java,MODIFY,addImport -> [Type type] | [String className],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
index 449ca8a..31f0d6d 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
@@ -405,6 +405,13 @@
    }
 
    @Override
+   public void removeAnnotations()
+   {
+      // could pass through to enumConstant, but would require then pretending its Annotation was ours
+      // which should cause no problem at the moment, but could theoretically do so in the future
+   }
+
+   @Override
    public Object getInternal()
    {
       return javaEnum.getInternal();
@@ -943,4 +950,4 @@
       return toString();
    }
 
-}
+}
\ No newline at end of file
"
6e807e98e596a15599a564d76330e19cd5ddfa3d,nchallut,EnumConstantImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantImpl.java
index f623120..2bdf08e 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantImpl.java
@@ -184,6 +184,12 @@
    }
 
    @Override
+   public void removeAnnotations()
+   {
+      annotations.removeAnnotations(enumConstant);
+   }
+
+   @Override
    public AnnotationSource<JavaEnumSource> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
    {
       return annotations.getAnnotation(this, enumConstant, type);
@@ -252,4 +258,4 @@
    {
       return enumConstant.toString();
    }
-}
+}
\ No newline at end of file
"
6e807e98e596a15599a564d76330e19cd5ddfa3d,nchallut,FieldImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
index 1a494f8..9c01c51 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
@@ -171,6 +171,12 @@
    }
 
    @Override
+   public void removeAnnotations()
+   {
+      annotations.removeAnnotations(field);
+   }
+
+   @Override
    public String toString()
    {
       return field.toString();
@@ -490,4 +496,4 @@
    {
       return cu.getColumnNumber(getStartPosition());
    }
-}
+}
\ No newline at end of file
"
6e807e98e596a15599a564d76330e19cd5ddfa3d,nchallut,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
index 98e6961..7d6d097 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
@@ -117,6 +117,12 @@
    }
 
    @Override
+   public void removeAnnotations()
+   {
+      annotations.removeAnnotations(getPackageDeclaration());
+   }
+
+   @Override
    public AnnotationSource<JavaPackageInfoSource> getAnnotation(
             final Class<? extends java.lang.annotation.Annotation> type)
    {
@@ -762,4 +768,4 @@
    {
       return pkg;
    }
-}
+}
\ No newline at end of file
"
6e807e98e596a15599a564d76330e19cd5ddfa3d,nchallut,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index 740cc42..e0eb177 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -206,6 +206,12 @@
    {
       return annotations.removeAnnotation(this, method, annotation);
    }
+   
+   @Override
+   public void removeAnnotations()
+   {
+      annotations.removeAnnotations(method);
+   }
 
    @Override
    public AnnotationSource<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
"
6e807e98e596a15599a564d76330e19cd5ddfa3d,nchallut,ParameterImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/ParameterImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/ParameterImpl.java
index 680d803..ef9aceb 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/ParameterImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/ParameterImpl.java
@@ -117,6 +117,12 @@
    {
       return annotations.removeAnnotation(this, param, annotation);
    }
+   
+   @Override
+   public void removeAnnotations()
+   {
+     annotations.removeAnnotations(param);
+   }
 
    @Override
    public boolean isFinal()
@@ -158,4 +164,4 @@
    {
       return parent.getOrigin();
    }
-}
+}
\ No newline at end of file
"
a42f3821d861ccc124f198af5800c3e3490feb80,nchallut,AnnotationTargetSource.java,MODIFY,getAnnotation -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationTargetSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationTargetSource.java
index 3fa77fb..e1cb114 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationTargetSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationTargetSource.java
@@ -55,5 +55,5 @@
    /**
     * Remove all annotations instance from this {@link T}.
     */
-   void removeAnnotations();
+   void removeAllAnnotations();
 }
\ No newline at end of file
"
a42f3821d861ccc124f198af5800c3e3490feb80,nchallut,Methods.java,MODIFY,"implementAbstractMethods -> [Class source, MethodHolderSource target] | [MethodHolder source, MethodHolderSource target]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Methods.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Methods.java
index 23b3b91..1068971 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Methods.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Methods.java
@@ -42,19 +42,19 @@
          {
             MethodSource<?> newMethod = target.addMethod(method);
             implementMethod(newMethod);
-            removeAnnotations(newMethod);
+            removeAllAnnotations(newMethod);
             methods.add(newMethod);
          }
       }
       return methods;
    }
 
-   public static void removeAnnotations(final MethodSource<?> source)
+   public static void removeAllAnnotations(final MethodSource<?> source)
    {
-      source.removeAnnotations();
+      source.removeAllAnnotations();
       for (ParameterSource<?> parameterSource : source.getParameters())
       {
-         parameterSource.removeAnnotations();
+         parameterSource.removeAllAnnotations();
       }
    }
 
@@ -78,7 +78,7 @@
          {
             MethodSource<?> newMethod = target.addMethod(m);
             implementMethod(newMethod);
-            removeAnnotations(newMethod);
+            removeAllAnnotations(newMethod);
             methods.add(newMethod);
          }
       }
"
a42f3821d861ccc124f198af5800c3e3490feb80,nchallut,AnnotationAccessor.java,MODIFY,"addAnnotation -> [AnnotationTargetSource target, List modifiers, String className] | [AnnotationTargetSource target, ASTNode body]","diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java b/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java
index 176c51c..f9d7ba9 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java
@@ -9,6 +9,7 @@
 
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.Iterator;
 import java.util.List;
 import java.util.ListIterator;
 
@@ -149,25 +150,26 @@
       return target;
    }
 
-   public void removeAnnotations(final ASTNode body)
+   public void removeAllAnnotations(final ASTNode body)
    {
-      removeAnnotation(getModifiers(body));
+      removeAllAnnotations(getModifiers(body));
 
    }
 
-   public void removeAnnotations(final SingleVariableDeclaration variableDeclaration)
+   public void removeAllAnnotations(final SingleVariableDeclaration variableDeclaration)
    {
-      removeAnnotation(variableDeclaration.modifiers());
+      removeAllAnnotations(variableDeclaration.modifiers());
    }
 
-   private void removeAnnotation(final List<?> modifiers)
+   private void removeAllAnnotations(final List<?> modifiers)
    {
-      List<?> modifiersCopy = new ArrayList<Object>(modifiers);
-      for (Object object : modifiersCopy)
+      Iterator<?> iterator = modifiers.iterator();
+      while (iterator.hasNext())
       {
-         if(object instanceof org.eclipse.jdt.core.dom.Annotation)
+         Object object = iterator.next();
+         if (object instanceof org.eclipse.jdt.core.dom.Annotation)
          {
-            modifiers.remove(object);
+            iterator.remove();
          }
       }
    }
"
a42f3821d861ccc124f198af5800c3e3490feb80,nchallut,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
index 4c5f7e0..183d7a4 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
@@ -131,9 +131,9 @@
    }
    
    @Override
-   public void removeAnnotations()
+   public void removeAllAnnotations()
    {
-     annotations.removeAnnotations(getBodyDeclaration());
+     annotations.removeAllAnnotations(getBodyDeclaration());
    }
 
    @Override
"
a42f3821d861ccc124f198af5800c3e3490feb80,nchallut,AnnotationElementImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationElementImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationElementImpl.java
index e55ba82..54dfd02 100755
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationElementImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationElementImpl.java
@@ -399,9 +399,9 @@
    }
    
    @Override
-   public void removeAnnotations()
+   public void removeAllAnnotations()
    {
-      annotations.removeAnnotations(member);
+      annotations.removeAllAnnotations(member);
    }
 
    @Override
"
a42f3821d861ccc124f198af5800c3e3490feb80,nchallut,EnumConstantBodyImpl.java,MODIFY,addImport -> [Type type] | [String className],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
index 31f0d6d..e30722a 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
@@ -405,7 +405,7 @@
    }
 
    @Override
-   public void removeAnnotations()
+   public void removeAllAnnotations()
    {
       // could pass through to enumConstant, but would require then pretending its Annotation was ours
       // which should cause no problem at the moment, but could theoretically do so in the future
"
a42f3821d861ccc124f198af5800c3e3490feb80,nchallut,EnumConstantImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantImpl.java
index 2bdf08e..576a9a9 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantImpl.java
@@ -184,9 +184,9 @@
    }
 
    @Override
-   public void removeAnnotations()
+   public void removeAllAnnotations()
    {
-      annotations.removeAnnotations(enumConstant);
+      annotations.removeAllAnnotations(enumConstant);
    }
 
    @Override
"
a42f3821d861ccc124f198af5800c3e3490feb80,nchallut,FieldImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
index 9c01c51..a55a692 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
@@ -171,9 +171,9 @@
    }
 
    @Override
-   public void removeAnnotations()
+   public void removeAllAnnotations()
    {
-      annotations.removeAnnotations(field);
+      annotations.removeAllAnnotations(field);
    }
 
    @Override
"
a42f3821d861ccc124f198af5800c3e3490feb80,nchallut,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
index 7d6d097..b95eec9 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
@@ -117,9 +117,9 @@
    }
 
    @Override
-   public void removeAnnotations()
+   public void removeAllAnnotations()
    {
-      annotations.removeAnnotations(getPackageDeclaration());
+      annotations.removeAllAnnotations(getPackageDeclaration());
    }
 
    @Override
"
a42f3821d861ccc124f198af5800c3e3490feb80,nchallut,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index e0eb177..2b6140c 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -208,9 +208,9 @@
    }
    
    @Override
-   public void removeAnnotations()
+   public void removeAllAnnotations()
    {
-      annotations.removeAnnotations(method);
+      annotations.removeAllAnnotations(method);
    }
 
    @Override
"
a42f3821d861ccc124f198af5800c3e3490feb80,nchallut,ParameterImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/ParameterImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/ParameterImpl.java
index ef9aceb..98a5ff1 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/ParameterImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/ParameterImpl.java
@@ -119,9 +119,9 @@
    }
    
    @Override
-   public void removeAnnotations()
+   public void removeAllAnnotations()
    {
-     annotations.removeAnnotations(param);
+     annotations.removeAllAnnotations(param);
    }
 
    @Override
"
4f3d81e1c20d9658c2b909e399cbb76db4b04677,George Gastaldi,AnnotationTargetSource.java,MODIFY,getAnnotation -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationTargetSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationTargetSource.java
index 17f02b9..e1cb114 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationTargetSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationTargetSource.java
@@ -51,4 +51,9 @@
     * Remove an annotation instance from this {@link T}.
     */
    T removeAnnotation(Annotation<O> annotation);
+   
+   /**
+    * Remove all annotations instance from this {@link T}.
+    */
+   void removeAllAnnotations();
 }
\ No newline at end of file
"
4f3d81e1c20d9658c2b909e399cbb76db4b04677,George Gastaldi,Methods.java,MODIFY,"implementAbstractMethods -> [Class source, MethodHolderSource target] | [MethodHolder source, MethodHolderSource target]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Methods.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Methods.java
index f8dc8a7..1068971 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Methods.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Methods.java
@@ -15,6 +15,7 @@
 import org.jboss.forge.roaster.model.MethodHolder;
 import org.jboss.forge.roaster.model.source.MethodHolderSource;
 import org.jboss.forge.roaster.model.source.MethodSource;
+import org.jboss.forge.roaster.model.source.ParameterSource;
 
 /**
  * Utility methods for {@link MethodSource} objects
@@ -41,12 +42,22 @@
          {
             MethodSource<?> newMethod = target.addMethod(method);
             implementMethod(newMethod);
+            removeAllAnnotations(newMethod);
             methods.add(newMethod);
          }
       }
       return methods;
    }
 
+   public static void removeAllAnnotations(final MethodSource<?> source)
+   {
+      source.removeAllAnnotations();
+      for (ParameterSource<?> parameterSource : source.getParameters())
+      {
+         parameterSource.removeAllAnnotations();
+      }
+   }
+
    /**
     * Implement the abstract methods present in a {@link Class} to the specified {@link MethodHolderSource}
     * 
@@ -67,6 +78,7 @@
          {
             MethodSource<?> newMethod = target.addMethod(m);
             implementMethod(newMethod);
+            removeAllAnnotations(newMethod);
             methods.add(newMethod);
          }
       }
@@ -149,4 +161,4 @@
       return name.toString();
    }
 
-}
+}
\ No newline at end of file
"
4f3d81e1c20d9658c2b909e399cbb76db4b04677,George Gastaldi,AnnotationAccessor.java,MODIFY,"addAnnotation -> [AnnotationTargetSource target, List modifiers, String className] | [AnnotationTargetSource target, ASTNode body]","diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java b/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java
index 175acc8..f9d7ba9 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java
@@ -9,6 +9,7 @@
 
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.Iterator;
 import java.util.List;
 import java.util.ListIterator;
 
@@ -149,6 +150,30 @@
       return target;
    }
 
+   public void removeAllAnnotations(final ASTNode body)
+   {
+      removeAllAnnotations(getModifiers(body));
+
+   }
+
+   public void removeAllAnnotations(final SingleVariableDeclaration variableDeclaration)
+   {
+      removeAllAnnotations(variableDeclaration.modifiers());
+   }
+
+   private void removeAllAnnotations(final List<?> modifiers)
+   {
+      Iterator<?> iterator = modifiers.iterator();
+      while (iterator.hasNext())
+      {
+         Object object = iterator.next();
+         if (object instanceof org.eclipse.jdt.core.dom.Annotation)
+         {
+            iterator.remove();
+         }
+      }
+   }
+
    public <E extends AnnotationTargetSource<O, T>> boolean hasAnnotation(final E target, final ASTNode body,
             final String type)
    {
@@ -231,4 +256,4 @@
       }
       return Collections.emptyList();
    }
-}
+}
\ No newline at end of file
"
4f3d81e1c20d9658c2b909e399cbb76db4b04677,George Gastaldi,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
index f54837c..183d7a4 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
@@ -129,6 +129,12 @@
    {
       return (O) annotations.removeAnnotation(this, getBodyDeclaration(), annotation);
    }
+   
+   @Override
+   public void removeAllAnnotations()
+   {
+     annotations.removeAllAnnotations(getBodyDeclaration());
+   }
 
    @Override
    public AnnotationSource<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
"
4f3d81e1c20d9658c2b909e399cbb76db4b04677,George Gastaldi,AnnotationElementImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationElementImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationElementImpl.java
index 08cf543..54dfd02 100755
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationElementImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationElementImpl.java
@@ -397,6 +397,12 @@
    {
       return annotations.removeAnnotation(this, member, annotation);
    }
+   
+   @Override
+   public void removeAllAnnotations()
+   {
+      annotations.removeAllAnnotations(member);
+   }
 
    @Override
    public String toString()
@@ -539,4 +545,4 @@
       }
       return true;
    }
-}
+}
\ No newline at end of file
"
4f3d81e1c20d9658c2b909e399cbb76db4b04677,George Gastaldi,EnumConstantBodyImpl.java,MODIFY,addImport -> [Type type] | [String className],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
index 449ca8a..e30722a 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
@@ -405,6 +405,13 @@
    }
 
    @Override
+   public void removeAllAnnotations()
+   {
+      // could pass through to enumConstant, but would require then pretending its Annotation was ours
+      // which should cause no problem at the moment, but could theoretically do so in the future
+   }
+
+   @Override
    public Object getInternal()
    {
       return javaEnum.getInternal();
@@ -943,4 +950,4 @@
       return toString();
    }
 
-}
+}
\ No newline at end of file
"
4f3d81e1c20d9658c2b909e399cbb76db4b04677,George Gastaldi,EnumConstantImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantImpl.java
index f623120..576a9a9 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantImpl.java
@@ -184,6 +184,12 @@
    }
 
    @Override
+   public void removeAllAnnotations()
+   {
+      annotations.removeAllAnnotations(enumConstant);
+   }
+
+   @Override
    public AnnotationSource<JavaEnumSource> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
    {
       return annotations.getAnnotation(this, enumConstant, type);
@@ -252,4 +258,4 @@
    {
       return enumConstant.toString();
    }
-}
+}
\ No newline at end of file
"
4f3d81e1c20d9658c2b909e399cbb76db4b04677,George Gastaldi,FieldImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
index 1a494f8..a55a692 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
@@ -171,6 +171,12 @@
    }
 
    @Override
+   public void removeAllAnnotations()
+   {
+      annotations.removeAllAnnotations(field);
+   }
+
+   @Override
    public String toString()
    {
       return field.toString();
@@ -490,4 +496,4 @@
    {
       return cu.getColumnNumber(getStartPosition());
    }
-}
+}
\ No newline at end of file
"
4f3d81e1c20d9658c2b909e399cbb76db4b04677,George Gastaldi,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
index 98e6961..b95eec9 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
@@ -117,6 +117,12 @@
    }
 
    @Override
+   public void removeAllAnnotations()
+   {
+      annotations.removeAllAnnotations(getPackageDeclaration());
+   }
+
+   @Override
    public AnnotationSource<JavaPackageInfoSource> getAnnotation(
             final Class<? extends java.lang.annotation.Annotation> type)
    {
@@ -762,4 +768,4 @@
    {
       return pkg;
    }
-}
+}
\ No newline at end of file
"
4f3d81e1c20d9658c2b909e399cbb76db4b04677,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index 740cc42..2b6140c 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -206,6 +206,12 @@
    {
       return annotations.removeAnnotation(this, method, annotation);
    }
+   
+   @Override
+   public void removeAllAnnotations()
+   {
+      annotations.removeAllAnnotations(method);
+   }
 
    @Override
    public AnnotationSource<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
"
4f3d81e1c20d9658c2b909e399cbb76db4b04677,George Gastaldi,ParameterImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/ParameterImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/ParameterImpl.java
index 680d803..98a5ff1 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/ParameterImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/ParameterImpl.java
@@ -117,6 +117,12 @@
    {
       return annotations.removeAnnotation(this, param, annotation);
    }
+   
+   @Override
+   public void removeAllAnnotations()
+   {
+     annotations.removeAllAnnotations(param);
+   }
 
    @Override
    public boolean isFinal()
@@ -158,4 +164,4 @@
    {
       return parent.getOrigin();
    }
-}
+}
\ No newline at end of file
"
fa5eb991cda3145b129613206fa835a2e7ab12f7,George Kankava,Refactory.java,MODIFY,"createHashCodeAndEquals -> [JavaClassSource clazz, FieldSource fields] | [JavaClassSource clazz]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
index 8d1f199..7e067d2 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
@@ -23,7 +23,9 @@
  */
 public class Refactory
 {
-   /**
+   private static final String RETURN_FALSE = "" return false;"";
+
+/**
     * Generates a getXXX and setXXX method for the supplied field
     *
     * @param clazz
@@ -154,7 +156,7 @@
                fieldEqualityChecks.append(""if (Float.floatToIntBits("").append(fieldName)
                         .append("") != Float.floatToIntBits(other."").append(fieldName)
                         .append("")) { "");
-               fieldEqualityChecks.append("" return false;"");
+               fieldEqualityChecks.append(RETURN_FALSE);
                fieldEqualityChecks.append(""} "");
 
             }
@@ -163,14 +165,14 @@
                fieldEqualityChecks.append(""if (Double.doubleToLongBits("").append(fieldName)
                         .append("") != Double.doubleToLongBits(other."").append(fieldName)
                         .append("")) { "");
-               fieldEqualityChecks.append("" return false;"");
+               fieldEqualityChecks.append(RETURN_FALSE);
                fieldEqualityChecks.append(""} "");
             }
             else
             {
                fieldEqualityChecks.append(""if ("").append(fieldName).append("" != other."").append(fieldName)
                         .append("") { "");
-               fieldEqualityChecks.append("" return false;"");
+               fieldEqualityChecks.append(RETURN_FALSE);
                fieldEqualityChecks.append(""} "");
             }
          }
"
fa5eb991cda3145b129613206fa835a2e7ab12f7,George Kankava,Types.java,MODIFY,getDefaultValue -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
index 46a7cb7..720419f 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
@@ -25,7 +25,9 @@
  */
 public class Types
 {
-   // [B=byte,
+   private static final String BOOLEAN = ""boolean"";
+
+// [B=byte,
    // [F=float,
    // [C=char,
    // [D=double,
@@ -482,7 +484,7 @@
             result = ""short"";
             break;
          case 'Z':
-            result = ""boolean"";
+            result = BOOLEAN;
             break;
          case 'L':
             result = matcher.group(2);
@@ -500,7 +502,7 @@
 
    public static boolean isPrimitive(final String result)
    {
-      return Arrays.asList(""byte"", ""short"", ""int"", ""long"", ""float"", ""double"", ""boolean"", ""char"").contains(result);
+      return Arrays.asList(""byte"", ""short"", ""int"", ""long"", ""float"", ""double"", BOOLEAN, ""char"").contains(result);
    }
 
    /**
@@ -596,7 +598,7 @@
       final String result;
       if (Types.isPrimitive(type))
       {
-         if (""boolean"".equals(type) || Boolean.TYPE.getName().equals(type))
+         if (BOOLEAN.equals(type) || Boolean.TYPE.getName().equals(type))
          {
             result = ""false"";
          }
"
fa5eb991cda3145b129613206fa835a2e7ab12f7,George Kankava,AnnotationImpl.java,MODIFY,getLiteralValue -> [String name] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
index d2bf9bd..8544a45 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
@@ -42,7 +42,13 @@
  */
 public class AnnotationImpl<O extends JavaSource<O>, T> implements AnnotationSource<O>
 {
-   private class Nested extends AnnotationImpl<O, T>
+   private static final String NULL_VALUE_NOT_ACCEPTED = ""null value not accepted"";
+
+private static final String NULL_ARRAY_NOT_ACCEPTED = ""null array not accepted"";
+
+private static final String NULL_NOT_ACCEPTED = ""null not accepted"";
+
+private class Nested extends AnnotationImpl<O, T>
    {
       Nested(AnnotationImpl<O, T> owner)
       {
@@ -304,7 +310,7 @@
    @Override
    public AnnotationSource<O> setLiteralValue(final String value)
    {
-      Assert.notNull(value, ""null not accepted"");
+      Assert.notNull(value, NULL_NOT_ACCEPTED);
 
       if (isMarker())
       {
@@ -335,7 +341,7 @@
    @SuppressWarnings(""unchecked"")
    public AnnotationSource<O> setLiteralValue(final String name, final String value)
    {
-      Assert.notNull(value, ""null not accepted"");
+      Assert.notNull(value, NULL_NOT_ACCEPTED);
 
       if (!isNormal() && !DEFAULT_VALUE.equals(name))
       {
@@ -440,13 +446,13 @@
    @Override
    public AnnotationSource<O> setEnumArrayValue(String name, final Enum<?>... values)
    {
-      Assert.notNull(values, ""null array not accepted"");
+      Assert.notNull(values, NULL_ARRAY_NOT_ACCEPTED);
 
       final List<String> literals = new ArrayList<String>();
 
       for (Enum<?> value : values)
       {
-         Assert.notNull(value, ""null value not accepted"");
+         Assert.notNull(value, NULL_VALUE_NOT_ACCEPTED);
          getOrigin().addImport(value.getDeclaringClass());
          literals.add(value.getDeclaringClass().getSimpleName() + ""."" + value.name());
       }
@@ -1029,7 +1035,7 @@
    @Override
    public AnnotationSource<O> setClassValue(String name, Class<?> value)
    {
-      Assert.notNull(value, ""null not accepted"");
+      Assert.notNull(value, NULL_NOT_ACCEPTED);
 
       if (!value.isPrimitive())
       {
@@ -1059,13 +1065,13 @@
    @Override
    public AnnotationSource<O> setStringArrayValue(String name, String[] values)
    {
-      Assert.notNull(values, ""null array not accepted"");
+      Assert.notNull(values, NULL_ARRAY_NOT_ACCEPTED);
 
       final List<String> literals = new ArrayList<String>();
 
       for (String value : values)
       {
-         Assert.notNull(value, ""null value not accepted"");
+         Assert.notNull(value, NULL_VALUE_NOT_ACCEPTED);
          literals.add(Strings.enquote(value));
       }
       return setLiteralValue(name,
@@ -1075,13 +1081,13 @@
    @Override
    public AnnotationSource<O> setClassArrayValue(String name, Class<?>... values)
    {
-      Assert.notNull(values, ""null array not accepted"");
+      Assert.notNull(values, NULL_ARRAY_NOT_ACCEPTED);
 
       final List<String> literals = new ArrayList<String>();
 
       for (Class<?> value : values)
       {
-         Assert.notNull(value, ""null value not accepted"");
+         Assert.notNull(value, NULL_VALUE_NOT_ACCEPTED);
 
          if (!value.isPrimitive())
          {
"
fa5eb991cda3145b129613206fa835a2e7ab12f7,George Kankava,EnumConstantBodyImpl.java,MODIFY,addImport -> [Type type] | [String className],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
index e30722a..e4a0e9f 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
@@ -53,7 +53,8 @@
 @SuppressWarnings(""unchecked"")
 class EnumConstantBodyImpl implements EnumConstantSource.Body
 {
-   private final EnumConstantSource enumConstant;
+   private static final String ENUM_CONSTANTS_BODY_ALLOW_ONLY_CLASSES_TO_BE_ADDED = ""Enum constants body allow only classes to be added "";
+private final EnumConstantSource enumConstant;
    private final JavaEnumSource javaEnum;
 
    EnumConstantBodyImpl(EnumConstantSource enumConstant)
@@ -853,7 +854,7 @@
    {
       if (type != JavaClassSource.class)
       {
-         throw new IllegalArgumentException(""Enum constants body allow only classes to be added "");
+         throw new IllegalArgumentException(ENUM_CONSTANTS_BODY_ALLOW_ONLY_CLASSES_TO_BE_ADDED);
       }
       JavaSource<?> nestedType = Roaster.create(type);
       return (NESTED_TYPE) addNestedType(nestedType);
@@ -865,7 +866,7 @@
       JavaType<?> source = Roaster.parse(declaration);
       if (!source.isClass())
       {
-         throw new IllegalArgumentException(""Enum constants body allow only classes to be added "");
+         throw new IllegalArgumentException(ENUM_CONSTANTS_BODY_ALLOW_ONLY_CLASSES_TO_BE_ADDED);
       }
       JavaSource<?> nestedType = Roaster.parse(JavaSource.class, declaration);
       return (NESTED_TYPE) addNestedType(nestedType);
@@ -888,7 +889,7 @@
    {
       if (!type.isClass())
       {
-         throw new IllegalArgumentException(""Enum constants body allow only classes to be added "");
+         throw new IllegalArgumentException(ENUM_CONSTANTS_BODY_ALLOW_ONLY_CLASSES_TO_BE_ADDED);
       }
       if (type instanceof AbstractJavaSource)
       {
"
fa5eb991cda3145b129613206fa835a2e7ab12f7,George Kankava,JavaDocImpl.java,MODIFY,getTags -> [String tagName] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaDocImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaDocImpl.java
index 4dfa5aa..814ef48 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaDocImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaDocImpl.java
@@ -30,7 +30,8 @@
 @SuppressWarnings(""unchecked"")
 public class JavaDocImpl<O> implements JavaDocSource<O>
 {
-   private final O origin;
+   private static final String TAG_NAME_CANNOT_BE_NULL = ""Tag name cannot be null"";
+private final O origin;
    private final Javadoc javadoc;
 
    public JavaDocImpl(O origin, Javadoc javadoc)
@@ -125,7 +126,7 @@
    @Override
    public List<JavaDocTag> getTags(String tagName)
    {
-      Assert.notNull(tagName, ""Tag name cannot be null"");
+      Assert.notNull(tagName, TAG_NAME_CANNOT_BE_NULL);
       List<JavaDocTag> tags = new ArrayList<JavaDocTag>();
       List<TagElement> tagElements = javadoc.tags();
       for (TagElement tagElement : tagElements)
@@ -174,7 +175,7 @@
    @Override
    public JavaDocSource<O> addTagValue(String tagName, String tagValue)
    {
-      Assert.notNull(tagName, ""Tag name cannot be null"");
+      Assert.notNull(tagName, TAG_NAME_CANNOT_BE_NULL);
       TagElement tagElement = javadoc.getAST().newTagElement();
       TextElement textElement = javadoc.getAST().newTextElement();
 
@@ -197,7 +198,7 @@
    @Override
    public JavaDocSource<O> removeTags(String tagName)
    {
-      Assert.notNull(tagName, ""Tag name cannot be null"");
+      Assert.notNull(tagName, TAG_NAME_CANNOT_BE_NULL);
       List<TagElement> tags = javadoc.tags();
       Iterator<TagElement> iterator = tags.iterator();
       while (iterator.hasNext())
"
17e18ad33b3f061e93a0f0e730941b364faa7429,George Kankava,Refactory.java,MODIFY,"createHashCodeAndEquals -> [JavaClassSource clazz, FieldSource fields] | [JavaClassSource clazz]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
index 7e067d2..98a713a 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
@@ -25,7 +25,7 @@
 {
    private static final String RETURN_FALSE = "" return false;"";
 
-/**
+    /**
     * Generates a getXXX and setXXX method for the supplied field
     *
     * @param clazz
"
17e18ad33b3f061e93a0f0e730941b364faa7429,George Kankava,Types.java,MODIFY,getDefaultValue -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
index 720419f..4907a96 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
@@ -27,7 +27,7 @@
 {
    private static final String BOOLEAN = ""boolean"";
 
-// [B=byte,
+   // [B=byte,
    // [F=float,
    // [C=char,
    // [D=double,
"
17e18ad33b3f061e93a0f0e730941b364faa7429,George Kankava,AnnotationImpl.java,MODIFY,getLiteralValue -> [String name] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
index 8544a45..7f44631 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
@@ -43,10 +43,8 @@
 public class AnnotationImpl<O extends JavaSource<O>, T> implements AnnotationSource<O>
 {
    private static final String NULL_VALUE_NOT_ACCEPTED = ""null value not accepted"";
-
-private static final String NULL_ARRAY_NOT_ACCEPTED = ""null array not accepted"";
-
-private static final String NULL_NOT_ACCEPTED = ""null not accepted"";
+   private static final String NULL_ARRAY_NOT_ACCEPTED = ""null array not accepted"";
+   private static final String NULL_NOT_ACCEPTED = ""null not accepted"";
 
 private class Nested extends AnnotationImpl<O, T>
    {
"
17e18ad33b3f061e93a0f0e730941b364faa7429,George Kankava,EnumConstantBodyImpl.java,MODIFY,addImport -> [Type type] | [String className],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
index e4a0e9f..40d6a1c 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
@@ -54,7 +54,7 @@
 class EnumConstantBodyImpl implements EnumConstantSource.Body
 {
    private static final String ENUM_CONSTANTS_BODY_ALLOW_ONLY_CLASSES_TO_BE_ADDED = ""Enum constants body allow only classes to be added "";
-private final EnumConstantSource enumConstant;
+   private final EnumConstantSource enumConstant;
    private final JavaEnumSource javaEnum;
 
    EnumConstantBodyImpl(EnumConstantSource enumConstant)
"
17e18ad33b3f061e93a0f0e730941b364faa7429,George Kankava,JavaDocImpl.java,MODIFY,getTags -> [String tagName] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaDocImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaDocImpl.java
index 814ef48..946ba02 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaDocImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaDocImpl.java
@@ -31,7 +31,7 @@
 public class JavaDocImpl<O> implements JavaDocSource<O>
 {
    private static final String TAG_NAME_CANNOT_BE_NULL = ""Tag name cannot be null"";
-private final O origin;
+   private final O origin;
    private final Javadoc javadoc;
 
    public JavaDocImpl(O origin, Javadoc javadoc)
"
ef0b4b40dd0d6cac67264fa8dd268e308d0c3efd,George Kankava,AnnotationImpl.java,MODIFY,getLiteralValue -> [String name] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
index 7f44631..33f8695 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
@@ -46,7 +46,7 @@
    private static final String NULL_ARRAY_NOT_ACCEPTED = ""null array not accepted"";
    private static final String NULL_NOT_ACCEPTED = ""null not accepted"";
 
-private class Nested extends AnnotationImpl<O, T>
+   private class Nested extends AnnotationImpl<O, T>
    {
       Nested(AnnotationImpl<O, T> owner)
       {
"
2c4c3df6c285170971806991ec7dccb10f3a7b21,George Kankava,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
index 183d7a4..6dd7aad 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
@@ -561,7 +561,7 @@
    @Override
    public boolean isPackagePrivate()
    {
-      return (!isPublic() && !isPrivate() && !isProtected());
+      return !isPublic() && !isPrivate() && !isProtected();
    }
 
    @Override
"
2c4c3df6c285170971806991ec7dccb10f3a7b21,George Kankava,FieldImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
index a55a692..0463b67 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
@@ -221,7 +221,7 @@
    @Override
    public boolean isPackagePrivate()
    {
-      return (!isPublic() && !isPrivate() && !isProtected());
+      return !isPublic() && !isPrivate() && !isProtected();
    }
 
    @Override
"
2c4c3df6c285170971806991ec7dccb10f3a7b21,George Kankava,JavaEnumImpl.java,MODIFY,addEnumConstant -> [String declaration] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaEnumImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaEnumImpl.java
index 60620ea..61514f1 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaEnumImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaEnumImpl.java
@@ -37,7 +37,7 @@
    {
       List<EnumConstantSource> result = new ArrayList<EnumConstantSource>();
 
-      for (Object o : (((EnumDeclaration) getBodyDeclaration()).enumConstants()))
+      for (Object o : ((EnumDeclaration) getBodyDeclaration()).enumConstants())
       {
          EnumConstantDeclaration constant = (EnumConstantDeclaration) o;
          result.add(new EnumConstantImpl(this, constant));
"
2c4c3df6c285170971806991ec7dccb10f3a7b21,George Kankava,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
index b95eec9..6339316 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
@@ -523,7 +523,7 @@
    @Override
    public boolean isPackagePrivate()
    {
-      return (!isPublic() && !isPrivate() && !isProtected());
+      return !isPublic() && !isPrivate() && !isProtected();
    }
 
    @Override
"
2c4c3df6c285170971806991ec7dccb10f3a7b21,George Kankava,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index 2b6140c..9c3b935 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -139,8 +139,8 @@
    public String toSignature()
    {
       StringBuilder signature = new StringBuilder();
-      signature.append((Visibility.PACKAGE_PRIVATE.equals(this.getVisibility().scope()) ? """" : this.getVisibility()
-               .scope()));
+      signature.append(Visibility.PACKAGE_PRIVATE.equals(this.getVisibility().scope()) ? """" : this.getVisibility()
+               .scope());
       signature.append("" "");
       signature.append(this.getName()).append(""("");
       List<ParameterSource<O>> parameters = this.getParameters();
@@ -519,7 +519,7 @@
    @Override
    public boolean isPackagePrivate()
    {
-      return (!isPublic() && !isPrivate() && !isProtected());
+      return !isPublic() && !isPrivate() && !isProtected();
    }
 
    @Override
@@ -747,7 +747,7 @@
       {
          if (Strings.areEqual(name, typeParameter.getName().getIdentifier()))
          {
-            return (new TypeVariableImpl<O>(parent, typeParameter));
+            return new TypeVariableImpl<O>(parent, typeParameter);
          }
       }
       return null;
"
5abb0fcb8f8725908c2fb100be3a6ac258117554,George Kankava,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
index 183d7a4..8702e20 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
@@ -478,11 +478,11 @@
    {
       String result = getName();
 
-      JavaType<?> enclosingType = this;
-      while (enclosingType != enclosingType.getEnclosingType())
+      JavaType<?> enclosingTypeLocal = this;
+      while (enclosingTypeLocal != enclosingTypeLocal.getEnclosingType())
       {
-         enclosingType = enclosingType.getEnclosingType();
-         result = enclosingType.getName() + ""."" + result;
+         enclosingTypeLocal = enclosingTypeLocal.getEnclosingType();
+         result = enclosingTypeLocal.getName() + ""."" + result;
       }
 
       if (!Strings.isNullOrEmpty(getPackage()))
@@ -501,11 +501,11 @@
    {
       String result = getName();
 
-      JavaType<?> enclosingType = this;
-      while (enclosingType != enclosingType.getEnclosingType())
+      JavaType<?> enclosingTypeLocal = this;
+      while (enclosingTypeLocal != enclosingTypeLocal.getEnclosingType())
       {
-         enclosingType = enclosingType.getEnclosingType();
-         result = enclosingType.getName() + ""$"" + result;
+         enclosingTypeLocal = enclosingTypeLocal.getEnclosingType();
+         result = enclosingTypeLocal.getName() + ""$"" + result;
       }
 
       if (!Strings.isNullOrEmpty(getPackage()))
@@ -640,7 +640,7 @@
    @Override
    public String toUnformattedString()
    {
-      Document document = new Document(this.document.get());
+      Document documentLocal = new Document(this.document.get());
 
       try
       {
@@ -648,15 +648,15 @@
          Map options = JavaCore.getOptions();
          options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_7);
          options.put(CompilerOptions.OPTION_Encoding, ""UTF-8"");
-         TextEdit edit = unit.rewrite(document, options);
-         edit.apply(document);
+         TextEdit edit = unit.rewrite(documentLocal, options);
+         edit.apply(documentLocal);
       }
       catch (Exception e)
       {
          throw new ParserException(""Could not modify source: "" + unit.toString(), e);
       }
 
-      return document.get();
+      return documentLocal.get();
    }
 
    @Override
"
5abb0fcb8f8725908c2fb100be3a6ac258117554,George Kankava,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
index b95eec9..383784b 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
@@ -443,12 +443,12 @@
    {
       String result = getName();
 
-      JavaType<?> enclosingType = this;
-      while (enclosingType != enclosingType.getEnclosingType())
+      JavaType<?> enclosingTypeLocal = this;
+      while (enclosingTypeLocal != enclosingTypeLocal.getEnclosingType())
       {
-         enclosingType = getEnclosingType();
-         result = enclosingType.getEnclosingType().getName() + ""."" + result;
-         enclosingType = enclosingType.getEnclosingType();
+         enclosingTypeLocal = getEnclosingType();
+         result = enclosingTypeLocal.getEnclosingType().getName() + ""."" + result;
+         enclosingTypeLocal = enclosingTypeLocal.getEnclosingType();
       }
 
       if (!Strings.isNullOrEmpty(getPackage()))
@@ -462,12 +462,12 @@
    {
       String result = getName();
 
-      JavaType<?> enclosingType = this;
-      while (enclosingType != enclosingType.getEnclosingType())
+      JavaType<?> enclosingTypeLocal = this;
+      while (enclosingTypeLocal != enclosingTypeLocal.getEnclosingType())
       {
-         enclosingType = getEnclosingType();
-         result = enclosingType.getEnclosingType().getName() + ""$"" + result;
-         enclosingType = enclosingType.getEnclosingType();
+         enclosingTypeLocal = getEnclosingType();
+         result = enclosingTypeLocal.getEnclosingType().getName() + ""$"" + result;
+         enclosingTypeLocal = enclosingTypeLocal.getEnclosingType();
       }
 
       if (!Strings.isNullOrEmpty(getPackage()))
@@ -482,10 +482,10 @@
    @Override
    public String getPackage()
    {
-      PackageDeclaration pkg = unit.getPackage();
-      if (pkg != null)
+      PackageDeclaration pkgLocal = unit.getPackage();
+      if (pkgLocal != null)
       {
-         return pkg.getName().getFullyQualifiedName();
+         return pkgLocal.getName().getFullyQualifiedName();
       }
       else
       {
@@ -602,19 +602,19 @@
    @Override
    public String toUnformattedString()
    {
-      Document document = new Document(this.document.get());
+      Document documentLocal = new Document(this.document.get());
 
       try
       {
-         TextEdit edit = unit.rewrite(document, null);
-         edit.apply(document);
+         TextEdit edit = unit.rewrite(documentLocal, null);
+         edit.apply(documentLocal);
       }
       catch (Exception e)
       {
          throw new ParserException(""Could not modify source: "" + unit.toString(), e);
       }
 
-      return document.get();
+      return documentLocal.get();
    }
 
    @Override
"
5abb0fcb8f8725908c2fb100be3a6ac258117554,George Kankava,TypeImpl.java,MODIFY,isType -> [String name] | [Class type],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/TypeImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/TypeImpl.java
index 4357977..9217103 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/TypeImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/TypeImpl.java
@@ -83,17 +83,17 @@
    @SuppressWarnings(""unchecked"")
    public List<Type<O>> getTypeArguments()
    {
-      org.eclipse.jdt.core.dom.Type type = this.type;
+      org.eclipse.jdt.core.dom.Type typeLocal = this.type;
 
-      if (type.isArrayType())
+      if (typeLocal.isArrayType())
       {
-         type = ((ArrayType) type).getElementType();
+         typeLocal = ((ArrayType) typeLocal).getElementType();
       }
 
-      if (type instanceof ParameterizedType)
+      if (typeLocal instanceof ParameterizedType)
       {
          List<Type<O>> result = new ArrayList<Type<O>>();
-         List<org.eclipse.jdt.core.dom.Type> arguments = ((ParameterizedType) type).typeArguments();
+         List<org.eclipse.jdt.core.dom.Type> arguments = ((ParameterizedType) typeLocal).typeArguments();
          for (org.eclipse.jdt.core.dom.Type t : arguments)
          {
             result.add(new TypeImpl<O>(origin, this, t));
@@ -269,10 +269,10 @@
 
    private int getExtraDimensions()
    {
-      ASTNode parent = type.getParent();
-      if (parent instanceof FieldDeclaration)
+      ASTNode parentLocal = type.getParent();
+      if (parentLocal instanceof FieldDeclaration)
       {
-         for (Object f : ((FieldDeclaration) parent).fragments())
+         for (Object f : ((FieldDeclaration) parentLocal).fragments())
          {
             if (f instanceof VariableDeclarationFragment)
             {
"
55d95b0ece62a8be2072d2bc2b1b88aa9760b22b,George Gastaldi,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
index 183d7a4..8702e20 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
@@ -478,11 +478,11 @@
    {
       String result = getName();
 
-      JavaType<?> enclosingType = this;
-      while (enclosingType != enclosingType.getEnclosingType())
+      JavaType<?> enclosingTypeLocal = this;
+      while (enclosingTypeLocal != enclosingTypeLocal.getEnclosingType())
       {
-         enclosingType = enclosingType.getEnclosingType();
-         result = enclosingType.getName() + ""."" + result;
+         enclosingTypeLocal = enclosingTypeLocal.getEnclosingType();
+         result = enclosingTypeLocal.getName() + ""."" + result;
       }
 
       if (!Strings.isNullOrEmpty(getPackage()))
@@ -501,11 +501,11 @@
    {
       String result = getName();
 
-      JavaType<?> enclosingType = this;
-      while (enclosingType != enclosingType.getEnclosingType())
+      JavaType<?> enclosingTypeLocal = this;
+      while (enclosingTypeLocal != enclosingTypeLocal.getEnclosingType())
       {
-         enclosingType = enclosingType.getEnclosingType();
-         result = enclosingType.getName() + ""$"" + result;
+         enclosingTypeLocal = enclosingTypeLocal.getEnclosingType();
+         result = enclosingTypeLocal.getName() + ""$"" + result;
       }
 
       if (!Strings.isNullOrEmpty(getPackage()))
@@ -640,7 +640,7 @@
    @Override
    public String toUnformattedString()
    {
-      Document document = new Document(this.document.get());
+      Document documentLocal = new Document(this.document.get());
 
       try
       {
@@ -648,15 +648,15 @@
          Map options = JavaCore.getOptions();
          options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_7);
          options.put(CompilerOptions.OPTION_Encoding, ""UTF-8"");
-         TextEdit edit = unit.rewrite(document, options);
-         edit.apply(document);
+         TextEdit edit = unit.rewrite(documentLocal, options);
+         edit.apply(documentLocal);
       }
       catch (Exception e)
       {
          throw new ParserException(""Could not modify source: "" + unit.toString(), e);
       }
 
-      return document.get();
+      return documentLocal.get();
    }
 
    @Override
"
55d95b0ece62a8be2072d2bc2b1b88aa9760b22b,George Gastaldi,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
index b95eec9..383784b 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
@@ -443,12 +443,12 @@
    {
       String result = getName();
 
-      JavaType<?> enclosingType = this;
-      while (enclosingType != enclosingType.getEnclosingType())
+      JavaType<?> enclosingTypeLocal = this;
+      while (enclosingTypeLocal != enclosingTypeLocal.getEnclosingType())
       {
-         enclosingType = getEnclosingType();
-         result = enclosingType.getEnclosingType().getName() + ""."" + result;
-         enclosingType = enclosingType.getEnclosingType();
+         enclosingTypeLocal = getEnclosingType();
+         result = enclosingTypeLocal.getEnclosingType().getName() + ""."" + result;
+         enclosingTypeLocal = enclosingTypeLocal.getEnclosingType();
       }
 
       if (!Strings.isNullOrEmpty(getPackage()))
@@ -462,12 +462,12 @@
    {
       String result = getName();
 
-      JavaType<?> enclosingType = this;
-      while (enclosingType != enclosingType.getEnclosingType())
+      JavaType<?> enclosingTypeLocal = this;
+      while (enclosingTypeLocal != enclosingTypeLocal.getEnclosingType())
       {
-         enclosingType = getEnclosingType();
-         result = enclosingType.getEnclosingType().getName() + ""$"" + result;
-         enclosingType = enclosingType.getEnclosingType();
+         enclosingTypeLocal = getEnclosingType();
+         result = enclosingTypeLocal.getEnclosingType().getName() + ""$"" + result;
+         enclosingTypeLocal = enclosingTypeLocal.getEnclosingType();
       }
 
       if (!Strings.isNullOrEmpty(getPackage()))
@@ -482,10 +482,10 @@
    @Override
    public String getPackage()
    {
-      PackageDeclaration pkg = unit.getPackage();
-      if (pkg != null)
+      PackageDeclaration pkgLocal = unit.getPackage();
+      if (pkgLocal != null)
       {
-         return pkg.getName().getFullyQualifiedName();
+         return pkgLocal.getName().getFullyQualifiedName();
       }
       else
       {
@@ -602,19 +602,19 @@
    @Override
    public String toUnformattedString()
    {
-      Document document = new Document(this.document.get());
+      Document documentLocal = new Document(this.document.get());
 
       try
       {
-         TextEdit edit = unit.rewrite(document, null);
-         edit.apply(document);
+         TextEdit edit = unit.rewrite(documentLocal, null);
+         edit.apply(documentLocal);
       }
       catch (Exception e)
       {
          throw new ParserException(""Could not modify source: "" + unit.toString(), e);
       }
 
-      return document.get();
+      return documentLocal.get();
    }
 
    @Override
"
55d95b0ece62a8be2072d2bc2b1b88aa9760b22b,George Gastaldi,TypeImpl.java,MODIFY,isType -> [String name] | [Class type],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/TypeImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/TypeImpl.java
index 4357977..9217103 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/TypeImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/TypeImpl.java
@@ -83,17 +83,17 @@
    @SuppressWarnings(""unchecked"")
    public List<Type<O>> getTypeArguments()
    {
-      org.eclipse.jdt.core.dom.Type type = this.type;
+      org.eclipse.jdt.core.dom.Type typeLocal = this.type;
 
-      if (type.isArrayType())
+      if (typeLocal.isArrayType())
       {
-         type = ((ArrayType) type).getElementType();
+         typeLocal = ((ArrayType) typeLocal).getElementType();
       }
 
-      if (type instanceof ParameterizedType)
+      if (typeLocal instanceof ParameterizedType)
       {
          List<Type<O>> result = new ArrayList<Type<O>>();
-         List<org.eclipse.jdt.core.dom.Type> arguments = ((ParameterizedType) type).typeArguments();
+         List<org.eclipse.jdt.core.dom.Type> arguments = ((ParameterizedType) typeLocal).typeArguments();
          for (org.eclipse.jdt.core.dom.Type t : arguments)
          {
             result.add(new TypeImpl<O>(origin, this, t));
@@ -269,10 +269,10 @@
 
    private int getExtraDimensions()
    {
-      ASTNode parent = type.getParent();
-      if (parent instanceof FieldDeclaration)
+      ASTNode parentLocal = type.getParent();
+      if (parentLocal instanceof FieldDeclaration)
       {
-         for (Object f : ((FieldDeclaration) parent).fragments())
+         for (Object f : ((FieldDeclaration) parentLocal).fragments())
          {
             if (f instanceof VariableDeclarationFragment)
             {
"
f4b1cca58e3c9d195ba68c02db3159cb97a5f4cb,George Gastaldi,Refactory.java,MODIFY,"createHashCodeAndEquals -> [JavaClassSource clazz, FieldSource fields] | [JavaClassSource clazz]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
index 8d1f199..98a713a 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
@@ -23,7 +23,9 @@
  */
 public class Refactory
 {
-   /**
+   private static final String RETURN_FALSE = "" return false;"";
+
+    /**
     * Generates a getXXX and setXXX method for the supplied field
     *
     * @param clazz
@@ -154,7 +156,7 @@
                fieldEqualityChecks.append(""if (Float.floatToIntBits("").append(fieldName)
                         .append("") != Float.floatToIntBits(other."").append(fieldName)
                         .append("")) { "");
-               fieldEqualityChecks.append("" return false;"");
+               fieldEqualityChecks.append(RETURN_FALSE);
                fieldEqualityChecks.append(""} "");
 
             }
@@ -163,14 +165,14 @@
                fieldEqualityChecks.append(""if (Double.doubleToLongBits("").append(fieldName)
                         .append("") != Double.doubleToLongBits(other."").append(fieldName)
                         .append("")) { "");
-               fieldEqualityChecks.append("" return false;"");
+               fieldEqualityChecks.append(RETURN_FALSE);
                fieldEqualityChecks.append(""} "");
             }
             else
             {
                fieldEqualityChecks.append(""if ("").append(fieldName).append("" != other."").append(fieldName)
                         .append("") { "");
-               fieldEqualityChecks.append("" return false;"");
+               fieldEqualityChecks.append(RETURN_FALSE);
                fieldEqualityChecks.append(""} "");
             }
          }
"
f4b1cca58e3c9d195ba68c02db3159cb97a5f4cb,George Gastaldi,Types.java,MODIFY,getDefaultValue -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
index 46a7cb7..4907a96 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
@@ -25,6 +25,8 @@
  */
 public class Types
 {
+   private static final String BOOLEAN = ""boolean"";
+
    // [B=byte,
    // [F=float,
    // [C=char,
@@ -482,7 +484,7 @@
             result = ""short"";
             break;
          case 'Z':
-            result = ""boolean"";
+            result = BOOLEAN;
             break;
          case 'L':
             result = matcher.group(2);
@@ -500,7 +502,7 @@
 
    public static boolean isPrimitive(final String result)
    {
-      return Arrays.asList(""byte"", ""short"", ""int"", ""long"", ""float"", ""double"", ""boolean"", ""char"").contains(result);
+      return Arrays.asList(""byte"", ""short"", ""int"", ""long"", ""float"", ""double"", BOOLEAN, ""char"").contains(result);
    }
 
    /**
@@ -596,7 +598,7 @@
       final String result;
       if (Types.isPrimitive(type))
       {
-         if (""boolean"".equals(type) || Boolean.TYPE.getName().equals(type))
+         if (BOOLEAN.equals(type) || Boolean.TYPE.getName().equals(type))
          {
             result = ""false"";
          }
"
f4b1cca58e3c9d195ba68c02db3159cb97a5f4cb,George Gastaldi,AnnotationImpl.java,MODIFY,getLiteralValue -> [String name] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
index d2bf9bd..33f8695 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
@@ -42,6 +42,10 @@
  */
 public class AnnotationImpl<O extends JavaSource<O>, T> implements AnnotationSource<O>
 {
+   private static final String NULL_VALUE_NOT_ACCEPTED = ""null value not accepted"";
+   private static final String NULL_ARRAY_NOT_ACCEPTED = ""null array not accepted"";
+   private static final String NULL_NOT_ACCEPTED = ""null not accepted"";
+
    private class Nested extends AnnotationImpl<O, T>
    {
       Nested(AnnotationImpl<O, T> owner)
@@ -304,7 +308,7 @@
    @Override
    public AnnotationSource<O> setLiteralValue(final String value)
    {
-      Assert.notNull(value, ""null not accepted"");
+      Assert.notNull(value, NULL_NOT_ACCEPTED);
 
       if (isMarker())
       {
@@ -335,7 +339,7 @@
    @SuppressWarnings(""unchecked"")
    public AnnotationSource<O> setLiteralValue(final String name, final String value)
    {
-      Assert.notNull(value, ""null not accepted"");
+      Assert.notNull(value, NULL_NOT_ACCEPTED);
 
       if (!isNormal() && !DEFAULT_VALUE.equals(name))
       {
@@ -440,13 +444,13 @@
    @Override
    public AnnotationSource<O> setEnumArrayValue(String name, final Enum<?>... values)
    {
-      Assert.notNull(values, ""null array not accepted"");
+      Assert.notNull(values, NULL_ARRAY_NOT_ACCEPTED);
 
       final List<String> literals = new ArrayList<String>();
 
       for (Enum<?> value : values)
       {
-         Assert.notNull(value, ""null value not accepted"");
+         Assert.notNull(value, NULL_VALUE_NOT_ACCEPTED);
          getOrigin().addImport(value.getDeclaringClass());
          literals.add(value.getDeclaringClass().getSimpleName() + ""."" + value.name());
       }
@@ -1029,7 +1033,7 @@
    @Override
    public AnnotationSource<O> setClassValue(String name, Class<?> value)
    {
-      Assert.notNull(value, ""null not accepted"");
+      Assert.notNull(value, NULL_NOT_ACCEPTED);
 
       if (!value.isPrimitive())
       {
@@ -1059,13 +1063,13 @@
    @Override
    public AnnotationSource<O> setStringArrayValue(String name, String[] values)
    {
-      Assert.notNull(values, ""null array not accepted"");
+      Assert.notNull(values, NULL_ARRAY_NOT_ACCEPTED);
 
       final List<String> literals = new ArrayList<String>();
 
       for (String value : values)
       {
-         Assert.notNull(value, ""null value not accepted"");
+         Assert.notNull(value, NULL_VALUE_NOT_ACCEPTED);
          literals.add(Strings.enquote(value));
       }
       return setLiteralValue(name,
@@ -1075,13 +1079,13 @@
    @Override
    public AnnotationSource<O> setClassArrayValue(String name, Class<?>... values)
    {
-      Assert.notNull(values, ""null array not accepted"");
+      Assert.notNull(values, NULL_ARRAY_NOT_ACCEPTED);
 
       final List<String> literals = new ArrayList<String>();
 
       for (Class<?> value : values)
       {
-         Assert.notNull(value, ""null value not accepted"");
+         Assert.notNull(value, NULL_VALUE_NOT_ACCEPTED);
 
          if (!value.isPrimitive())
          {
"
f4b1cca58e3c9d195ba68c02db3159cb97a5f4cb,George Gastaldi,EnumConstantBodyImpl.java,MODIFY,addImport -> [Type type] | [String className],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
index e30722a..40d6a1c 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
@@ -53,6 +53,7 @@
 @SuppressWarnings(""unchecked"")
 class EnumConstantBodyImpl implements EnumConstantSource.Body
 {
+   private static final String ENUM_CONSTANTS_BODY_ALLOW_ONLY_CLASSES_TO_BE_ADDED = ""Enum constants body allow only classes to be added "";
    private final EnumConstantSource enumConstant;
    private final JavaEnumSource javaEnum;
 
@@ -853,7 +854,7 @@
    {
       if (type != JavaClassSource.class)
       {
-         throw new IllegalArgumentException(""Enum constants body allow only classes to be added "");
+         throw new IllegalArgumentException(ENUM_CONSTANTS_BODY_ALLOW_ONLY_CLASSES_TO_BE_ADDED);
       }
       JavaSource<?> nestedType = Roaster.create(type);
       return (NESTED_TYPE) addNestedType(nestedType);
@@ -865,7 +866,7 @@
       JavaType<?> source = Roaster.parse(declaration);
       if (!source.isClass())
       {
-         throw new IllegalArgumentException(""Enum constants body allow only classes to be added "");
+         throw new IllegalArgumentException(ENUM_CONSTANTS_BODY_ALLOW_ONLY_CLASSES_TO_BE_ADDED);
       }
       JavaSource<?> nestedType = Roaster.parse(JavaSource.class, declaration);
       return (NESTED_TYPE) addNestedType(nestedType);
@@ -888,7 +889,7 @@
    {
       if (!type.isClass())
       {
-         throw new IllegalArgumentException(""Enum constants body allow only classes to be added "");
+         throw new IllegalArgumentException(ENUM_CONSTANTS_BODY_ALLOW_ONLY_CLASSES_TO_BE_ADDED);
       }
       if (type instanceof AbstractJavaSource)
       {
"
f4b1cca58e3c9d195ba68c02db3159cb97a5f4cb,George Gastaldi,JavaDocImpl.java,MODIFY,getTags -> [String tagName] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaDocImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaDocImpl.java
index 4dfa5aa..946ba02 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaDocImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaDocImpl.java
@@ -30,6 +30,7 @@
 @SuppressWarnings(""unchecked"")
 public class JavaDocImpl<O> implements JavaDocSource<O>
 {
+   private static final String TAG_NAME_CANNOT_BE_NULL = ""Tag name cannot be null"";
    private final O origin;
    private final Javadoc javadoc;
 
@@ -125,7 +126,7 @@
    @Override
    public List<JavaDocTag> getTags(String tagName)
    {
-      Assert.notNull(tagName, ""Tag name cannot be null"");
+      Assert.notNull(tagName, TAG_NAME_CANNOT_BE_NULL);
       List<JavaDocTag> tags = new ArrayList<JavaDocTag>();
       List<TagElement> tagElements = javadoc.tags();
       for (TagElement tagElement : tagElements)
@@ -174,7 +175,7 @@
    @Override
    public JavaDocSource<O> addTagValue(String tagName, String tagValue)
    {
-      Assert.notNull(tagName, ""Tag name cannot be null"");
+      Assert.notNull(tagName, TAG_NAME_CANNOT_BE_NULL);
       TagElement tagElement = javadoc.getAST().newTagElement();
       TextElement textElement = javadoc.getAST().newTextElement();
 
@@ -197,7 +198,7 @@
    @Override
    public JavaDocSource<O> removeTags(String tagName)
    {
-      Assert.notNull(tagName, ""Tag name cannot be null"");
+      Assert.notNull(tagName, TAG_NAME_CANNOT_BE_NULL);
       List<TagElement> tags = javadoc.tags();
       Iterator<TagElement> iterator = tags.iterator();
       while (iterator.hasNext())
"
26fd6dcc1b262c4fddf3ad907cc6536566be0276,George Gastaldi,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
index 8702e20..a7a0d23 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
@@ -561,7 +561,7 @@
    @Override
    public boolean isPackagePrivate()
    {
-      return (!isPublic() && !isPrivate() && !isProtected());
+      return !isPublic() && !isPrivate() && !isProtected();
    }
 
    @Override
"
26fd6dcc1b262c4fddf3ad907cc6536566be0276,George Gastaldi,FieldImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
index a55a692..0463b67 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
@@ -221,7 +221,7 @@
    @Override
    public boolean isPackagePrivate()
    {
-      return (!isPublic() && !isPrivate() && !isProtected());
+      return !isPublic() && !isPrivate() && !isProtected();
    }
 
    @Override
"
26fd6dcc1b262c4fddf3ad907cc6536566be0276,George Gastaldi,JavaEnumImpl.java,MODIFY,addEnumConstant -> [String declaration] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaEnumImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaEnumImpl.java
index 60620ea..61514f1 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaEnumImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaEnumImpl.java
@@ -37,7 +37,7 @@
    {
       List<EnumConstantSource> result = new ArrayList<EnumConstantSource>();
 
-      for (Object o : (((EnumDeclaration) getBodyDeclaration()).enumConstants()))
+      for (Object o : ((EnumDeclaration) getBodyDeclaration()).enumConstants())
       {
          EnumConstantDeclaration constant = (EnumConstantDeclaration) o;
          result.add(new EnumConstantImpl(this, constant));
"
26fd6dcc1b262c4fddf3ad907cc6536566be0276,George Gastaldi,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
index 383784b..d07eb99 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
@@ -523,7 +523,7 @@
    @Override
    public boolean isPackagePrivate()
    {
-      return (!isPublic() && !isPrivate() && !isProtected());
+      return !isPublic() && !isPrivate() && !isProtected();
    }
 
    @Override
"
26fd6dcc1b262c4fddf3ad907cc6536566be0276,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index 2b6140c..9c3b935 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -139,8 +139,8 @@
    public String toSignature()
    {
       StringBuilder signature = new StringBuilder();
-      signature.append((Visibility.PACKAGE_PRIVATE.equals(this.getVisibility().scope()) ? """" : this.getVisibility()
-               .scope()));
+      signature.append(Visibility.PACKAGE_PRIVATE.equals(this.getVisibility().scope()) ? """" : this.getVisibility()
+               .scope());
       signature.append("" "");
       signature.append(this.getName()).append(""("");
       List<ParameterSource<O>> parameters = this.getParameters();
@@ -519,7 +519,7 @@
    @Override
    public boolean isPackagePrivate()
    {
-      return (!isPublic() && !isPrivate() && !isProtected());
+      return !isPublic() && !isPrivate() && !isProtected();
    }
 
    @Override
@@ -747,7 +747,7 @@
       {
          if (Strings.areEqual(name, typeParameter.getName().getIdentifier()))
          {
-            return (new TypeVariableImpl<O>(parent, typeParameter));
+            return new TypeVariableImpl<O>(parent, typeParameter);
          }
       }
       return null;
"
a2f6e99ba793e591f6429162eed43bb009113951,George Gastaldi,AnnotationTargetSource.java,MODIFY,getAnnotation -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationTargetSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationTargetSource.java
index 17f02b9..e1cb114 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationTargetSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationTargetSource.java
@@ -51,4 +51,9 @@
     * Remove an annotation instance from this {@link T}.
     */
    T removeAnnotation(Annotation<O> annotation);
+   
+   /**
+    * Remove all annotations instance from this {@link T}.
+    */
+   void removeAllAnnotations();
 }
\ No newline at end of file
"
a2f6e99ba793e591f6429162eed43bb009113951,George Gastaldi,Methods.java,MODIFY,"implementAbstractMethods -> [Class source, MethodHolderSource target] | [MethodHolder source, MethodHolderSource target]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Methods.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Methods.java
index f8dc8a7..1068971 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Methods.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Methods.java
@@ -15,6 +15,7 @@
 import org.jboss.forge.roaster.model.MethodHolder;
 import org.jboss.forge.roaster.model.source.MethodHolderSource;
 import org.jboss.forge.roaster.model.source.MethodSource;
+import org.jboss.forge.roaster.model.source.ParameterSource;
 
 /**
  * Utility methods for {@link MethodSource} objects
@@ -41,12 +42,22 @@
          {
             MethodSource<?> newMethod = target.addMethod(method);
             implementMethod(newMethod);
+            removeAllAnnotations(newMethod);
             methods.add(newMethod);
          }
       }
       return methods;
    }
 
+   public static void removeAllAnnotations(final MethodSource<?> source)
+   {
+      source.removeAllAnnotations();
+      for (ParameterSource<?> parameterSource : source.getParameters())
+      {
+         parameterSource.removeAllAnnotations();
+      }
+   }
+
    /**
     * Implement the abstract methods present in a {@link Class} to the specified {@link MethodHolderSource}
     * 
@@ -67,6 +78,7 @@
          {
             MethodSource<?> newMethod = target.addMethod(m);
             implementMethod(newMethod);
+            removeAllAnnotations(newMethod);
             methods.add(newMethod);
          }
       }
@@ -149,4 +161,4 @@
       return name.toString();
    }
 
-}
+}
\ No newline at end of file
"
a2f6e99ba793e591f6429162eed43bb009113951,George Gastaldi,Refactory.java,MODIFY,"createHashCodeAndEquals -> [JavaClassSource clazz, FieldSource fields] | [JavaClassSource clazz]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
index 8d1f199..98a713a 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
@@ -23,7 +23,9 @@
  */
 public class Refactory
 {
-   /**
+   private static final String RETURN_FALSE = "" return false;"";
+
+    /**
     * Generates a getXXX and setXXX method for the supplied field
     *
     * @param clazz
@@ -154,7 +156,7 @@
                fieldEqualityChecks.append(""if (Float.floatToIntBits("").append(fieldName)
                         .append("") != Float.floatToIntBits(other."").append(fieldName)
                         .append("")) { "");
-               fieldEqualityChecks.append("" return false;"");
+               fieldEqualityChecks.append(RETURN_FALSE);
                fieldEqualityChecks.append(""} "");
 
             }
@@ -163,14 +165,14 @@
                fieldEqualityChecks.append(""if (Double.doubleToLongBits("").append(fieldName)
                         .append("") != Double.doubleToLongBits(other."").append(fieldName)
                         .append("")) { "");
-               fieldEqualityChecks.append("" return false;"");
+               fieldEqualityChecks.append(RETURN_FALSE);
                fieldEqualityChecks.append(""} "");
             }
             else
             {
                fieldEqualityChecks.append(""if ("").append(fieldName).append("" != other."").append(fieldName)
                         .append("") { "");
-               fieldEqualityChecks.append("" return false;"");
+               fieldEqualityChecks.append(RETURN_FALSE);
                fieldEqualityChecks.append(""} "");
             }
          }
"
a2f6e99ba793e591f6429162eed43bb009113951,George Gastaldi,Types.java,MODIFY,getDefaultValue -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
index 46a7cb7..4907a96 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
@@ -25,6 +25,8 @@
  */
 public class Types
 {
+   private static final String BOOLEAN = ""boolean"";
+
    // [B=byte,
    // [F=float,
    // [C=char,
@@ -482,7 +484,7 @@
             result = ""short"";
             break;
          case 'Z':
-            result = ""boolean"";
+            result = BOOLEAN;
             break;
          case 'L':
             result = matcher.group(2);
@@ -500,7 +502,7 @@
 
    public static boolean isPrimitive(final String result)
    {
-      return Arrays.asList(""byte"", ""short"", ""int"", ""long"", ""float"", ""double"", ""boolean"", ""char"").contains(result);
+      return Arrays.asList(""byte"", ""short"", ""int"", ""long"", ""float"", ""double"", BOOLEAN, ""char"").contains(result);
    }
 
    /**
@@ -596,7 +598,7 @@
       final String result;
       if (Types.isPrimitive(type))
       {
-         if (""boolean"".equals(type) || Boolean.TYPE.getName().equals(type))
+         if (BOOLEAN.equals(type) || Boolean.TYPE.getName().equals(type))
          {
             result = ""false"";
          }
"
a2f6e99ba793e591f6429162eed43bb009113951,George Gastaldi,AnnotationAccessor.java,MODIFY,"addAnnotation -> [AnnotationTargetSource target, List modifiers, String className] | [AnnotationTargetSource target, ASTNode body]","diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java b/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java
index 175acc8..f9d7ba9 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java
@@ -9,6 +9,7 @@
 
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.Iterator;
 import java.util.List;
 import java.util.ListIterator;
 
@@ -149,6 +150,30 @@
       return target;
    }
 
+   public void removeAllAnnotations(final ASTNode body)
+   {
+      removeAllAnnotations(getModifiers(body));
+
+   }
+
+   public void removeAllAnnotations(final SingleVariableDeclaration variableDeclaration)
+   {
+      removeAllAnnotations(variableDeclaration.modifiers());
+   }
+
+   private void removeAllAnnotations(final List<?> modifiers)
+   {
+      Iterator<?> iterator = modifiers.iterator();
+      while (iterator.hasNext())
+      {
+         Object object = iterator.next();
+         if (object instanceof org.eclipse.jdt.core.dom.Annotation)
+         {
+            iterator.remove();
+         }
+      }
+   }
+
    public <E extends AnnotationTargetSource<O, T>> boolean hasAnnotation(final E target, final ASTNode body,
             final String type)
    {
@@ -231,4 +256,4 @@
       }
       return Collections.emptyList();
    }
-}
+}
\ No newline at end of file
"
a2f6e99ba793e591f6429162eed43bb009113951,George Gastaldi,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
index f54837c..a7a0d23 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
@@ -129,6 +129,12 @@
    {
       return (O) annotations.removeAnnotation(this, getBodyDeclaration(), annotation);
    }
+   
+   @Override
+   public void removeAllAnnotations()
+   {
+     annotations.removeAllAnnotations(getBodyDeclaration());
+   }
 
    @Override
    public AnnotationSource<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
@@ -472,11 +478,11 @@
    {
       String result = getName();
 
-      JavaType<?> enclosingType = this;
-      while (enclosingType != enclosingType.getEnclosingType())
+      JavaType<?> enclosingTypeLocal = this;
+      while (enclosingTypeLocal != enclosingTypeLocal.getEnclosingType())
       {
-         enclosingType = enclosingType.getEnclosingType();
-         result = enclosingType.getName() + ""."" + result;
+         enclosingTypeLocal = enclosingTypeLocal.getEnclosingType();
+         result = enclosingTypeLocal.getName() + ""."" + result;
       }
 
       if (!Strings.isNullOrEmpty(getPackage()))
@@ -495,11 +501,11 @@
    {
       String result = getName();
 
-      JavaType<?> enclosingType = this;
-      while (enclosingType != enclosingType.getEnclosingType())
+      JavaType<?> enclosingTypeLocal = this;
+      while (enclosingTypeLocal != enclosingTypeLocal.getEnclosingType())
       {
-         enclosingType = enclosingType.getEnclosingType();
-         result = enclosingType.getName() + ""$"" + result;
+         enclosingTypeLocal = enclosingTypeLocal.getEnclosingType();
+         result = enclosingTypeLocal.getName() + ""$"" + result;
       }
 
       if (!Strings.isNullOrEmpty(getPackage()))
@@ -555,7 +561,7 @@
    @Override
    public boolean isPackagePrivate()
    {
-      return (!isPublic() && !isPrivate() && !isProtected());
+      return !isPublic() && !isPrivate() && !isProtected();
    }
 
    @Override
@@ -634,7 +640,7 @@
    @Override
    public String toUnformattedString()
    {
-      Document document = new Document(this.document.get());
+      Document documentLocal = new Document(this.document.get());
 
       try
       {
@@ -642,15 +648,15 @@
          Map options = JavaCore.getOptions();
          options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_7);
          options.put(CompilerOptions.OPTION_Encoding, ""UTF-8"");
-         TextEdit edit = unit.rewrite(document, options);
-         edit.apply(document);
+         TextEdit edit = unit.rewrite(documentLocal, options);
+         edit.apply(documentLocal);
       }
       catch (Exception e)
       {
          throw new ParserException(""Could not modify source: "" + unit.toString(), e);
       }
 
-      return document.get();
+      return documentLocal.get();
    }
 
    @Override
"
a2f6e99ba793e591f6429162eed43bb009113951,George Gastaldi,AnnotationElementImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationElementImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationElementImpl.java
index 08cf543..54dfd02 100755
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationElementImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationElementImpl.java
@@ -397,6 +397,12 @@
    {
       return annotations.removeAnnotation(this, member, annotation);
    }
+   
+   @Override
+   public void removeAllAnnotations()
+   {
+      annotations.removeAllAnnotations(member);
+   }
 
    @Override
    public String toString()
@@ -539,4 +545,4 @@
       }
       return true;
    }
-}
+}
\ No newline at end of file
"
a2f6e99ba793e591f6429162eed43bb009113951,George Gastaldi,AnnotationImpl.java,MODIFY,getLiteralValue -> [String name] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
index d2bf9bd..33f8695 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
@@ -42,6 +42,10 @@
  */
 public class AnnotationImpl<O extends JavaSource<O>, T> implements AnnotationSource<O>
 {
+   private static final String NULL_VALUE_NOT_ACCEPTED = ""null value not accepted"";
+   private static final String NULL_ARRAY_NOT_ACCEPTED = ""null array not accepted"";
+   private static final String NULL_NOT_ACCEPTED = ""null not accepted"";
+
    private class Nested extends AnnotationImpl<O, T>
    {
       Nested(AnnotationImpl<O, T> owner)
@@ -304,7 +308,7 @@
    @Override
    public AnnotationSource<O> setLiteralValue(final String value)
    {
-      Assert.notNull(value, ""null not accepted"");
+      Assert.notNull(value, NULL_NOT_ACCEPTED);
 
       if (isMarker())
       {
@@ -335,7 +339,7 @@
    @SuppressWarnings(""unchecked"")
    public AnnotationSource<O> setLiteralValue(final String name, final String value)
    {
-      Assert.notNull(value, ""null not accepted"");
+      Assert.notNull(value, NULL_NOT_ACCEPTED);
 
       if (!isNormal() && !DEFAULT_VALUE.equals(name))
       {
@@ -440,13 +444,13 @@
    @Override
    public AnnotationSource<O> setEnumArrayValue(String name, final Enum<?>... values)
    {
-      Assert.notNull(values, ""null array not accepted"");
+      Assert.notNull(values, NULL_ARRAY_NOT_ACCEPTED);
 
       final List<String> literals = new ArrayList<String>();
 
       for (Enum<?> value : values)
       {
-         Assert.notNull(value, ""null value not accepted"");
+         Assert.notNull(value, NULL_VALUE_NOT_ACCEPTED);
          getOrigin().addImport(value.getDeclaringClass());
          literals.add(value.getDeclaringClass().getSimpleName() + ""."" + value.name());
       }
@@ -1029,7 +1033,7 @@
    @Override
    public AnnotationSource<O> setClassValue(String name, Class<?> value)
    {
-      Assert.notNull(value, ""null not accepted"");
+      Assert.notNull(value, NULL_NOT_ACCEPTED);
 
       if (!value.isPrimitive())
       {
@@ -1059,13 +1063,13 @@
    @Override
    public AnnotationSource<O> setStringArrayValue(String name, String[] values)
    {
-      Assert.notNull(values, ""null array not accepted"");
+      Assert.notNull(values, NULL_ARRAY_NOT_ACCEPTED);
 
       final List<String> literals = new ArrayList<String>();
 
       for (String value : values)
       {
-         Assert.notNull(value, ""null value not accepted"");
+         Assert.notNull(value, NULL_VALUE_NOT_ACCEPTED);
          literals.add(Strings.enquote(value));
       }
       return setLiteralValue(name,
@@ -1075,13 +1079,13 @@
    @Override
    public AnnotationSource<O> setClassArrayValue(String name, Class<?>... values)
    {
-      Assert.notNull(values, ""null array not accepted"");
+      Assert.notNull(values, NULL_ARRAY_NOT_ACCEPTED);
 
       final List<String> literals = new ArrayList<String>();
 
       for (Class<?> value : values)
       {
-         Assert.notNull(value, ""null value not accepted"");
+         Assert.notNull(value, NULL_VALUE_NOT_ACCEPTED);
 
          if (!value.isPrimitive())
          {
"
a2f6e99ba793e591f6429162eed43bb009113951,George Gastaldi,EnumConstantBodyImpl.java,MODIFY,addImport -> [Type type] | [String className],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
index 449ca8a..40d6a1c 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantBodyImpl.java
@@ -53,6 +53,7 @@
 @SuppressWarnings(""unchecked"")
 class EnumConstantBodyImpl implements EnumConstantSource.Body
 {
+   private static final String ENUM_CONSTANTS_BODY_ALLOW_ONLY_CLASSES_TO_BE_ADDED = ""Enum constants body allow only classes to be added "";
    private final EnumConstantSource enumConstant;
    private final JavaEnumSource javaEnum;
 
@@ -405,6 +406,13 @@
    }
 
    @Override
+   public void removeAllAnnotations()
+   {
+      // could pass through to enumConstant, but would require then pretending its Annotation was ours
+      // which should cause no problem at the moment, but could theoretically do so in the future
+   }
+
+   @Override
    public Object getInternal()
    {
       return javaEnum.getInternal();
@@ -846,7 +854,7 @@
    {
       if (type != JavaClassSource.class)
       {
-         throw new IllegalArgumentException(""Enum constants body allow only classes to be added "");
+         throw new IllegalArgumentException(ENUM_CONSTANTS_BODY_ALLOW_ONLY_CLASSES_TO_BE_ADDED);
       }
       JavaSource<?> nestedType = Roaster.create(type);
       return (NESTED_TYPE) addNestedType(nestedType);
@@ -858,7 +866,7 @@
       JavaType<?> source = Roaster.parse(declaration);
       if (!source.isClass())
       {
-         throw new IllegalArgumentException(""Enum constants body allow only classes to be added "");
+         throw new IllegalArgumentException(ENUM_CONSTANTS_BODY_ALLOW_ONLY_CLASSES_TO_BE_ADDED);
       }
       JavaSource<?> nestedType = Roaster.parse(JavaSource.class, declaration);
       return (NESTED_TYPE) addNestedType(nestedType);
@@ -881,7 +889,7 @@
    {
       if (!type.isClass())
       {
-         throw new IllegalArgumentException(""Enum constants body allow only classes to be added "");
+         throw new IllegalArgumentException(ENUM_CONSTANTS_BODY_ALLOW_ONLY_CLASSES_TO_BE_ADDED);
       }
       if (type instanceof AbstractJavaSource)
       {
@@ -943,4 +951,4 @@
       return toString();
    }
 
-}
+}
\ No newline at end of file
"
a2f6e99ba793e591f6429162eed43bb009113951,George Gastaldi,EnumConstantImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantImpl.java
index f623120..576a9a9 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantImpl.java
@@ -184,6 +184,12 @@
    }
 
    @Override
+   public void removeAllAnnotations()
+   {
+      annotations.removeAllAnnotations(enumConstant);
+   }
+
+   @Override
    public AnnotationSource<JavaEnumSource> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
    {
       return annotations.getAnnotation(this, enumConstant, type);
@@ -252,4 +258,4 @@
    {
       return enumConstant.toString();
    }
-}
+}
\ No newline at end of file
"
a2f6e99ba793e591f6429162eed43bb009113951,George Gastaldi,FieldImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
index 1a494f8..0463b67 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
@@ -171,6 +171,12 @@
    }
 
    @Override
+   public void removeAllAnnotations()
+   {
+      annotations.removeAllAnnotations(field);
+   }
+
+   @Override
    public String toString()
    {
       return field.toString();
@@ -215,7 +221,7 @@
    @Override
    public boolean isPackagePrivate()
    {
-      return (!isPublic() && !isPrivate() && !isProtected());
+      return !isPublic() && !isPrivate() && !isProtected();
    }
 
    @Override
@@ -490,4 +496,4 @@
    {
       return cu.getColumnNumber(getStartPosition());
    }
-}
+}
\ No newline at end of file
"
a2f6e99ba793e591f6429162eed43bb009113951,George Gastaldi,JavaDocImpl.java,MODIFY,getTags -> [String tagName] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaDocImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaDocImpl.java
index 4dfa5aa..946ba02 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaDocImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaDocImpl.java
@@ -30,6 +30,7 @@
 @SuppressWarnings(""unchecked"")
 public class JavaDocImpl<O> implements JavaDocSource<O>
 {
+   private static final String TAG_NAME_CANNOT_BE_NULL = ""Tag name cannot be null"";
    private final O origin;
    private final Javadoc javadoc;
 
@@ -125,7 +126,7 @@
    @Override
    public List<JavaDocTag> getTags(String tagName)
    {
-      Assert.notNull(tagName, ""Tag name cannot be null"");
+      Assert.notNull(tagName, TAG_NAME_CANNOT_BE_NULL);
       List<JavaDocTag> tags = new ArrayList<JavaDocTag>();
       List<TagElement> tagElements = javadoc.tags();
       for (TagElement tagElement : tagElements)
@@ -174,7 +175,7 @@
    @Override
    public JavaDocSource<O> addTagValue(String tagName, String tagValue)
    {
-      Assert.notNull(tagName, ""Tag name cannot be null"");
+      Assert.notNull(tagName, TAG_NAME_CANNOT_BE_NULL);
       TagElement tagElement = javadoc.getAST().newTagElement();
       TextElement textElement = javadoc.getAST().newTextElement();
 
@@ -197,7 +198,7 @@
    @Override
    public JavaDocSource<O> removeTags(String tagName)
    {
-      Assert.notNull(tagName, ""Tag name cannot be null"");
+      Assert.notNull(tagName, TAG_NAME_CANNOT_BE_NULL);
       List<TagElement> tags = javadoc.tags();
       Iterator<TagElement> iterator = tags.iterator();
       while (iterator.hasNext())
"
a2f6e99ba793e591f6429162eed43bb009113951,George Gastaldi,JavaEnumImpl.java,MODIFY,addEnumConstant -> [String declaration] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaEnumImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaEnumImpl.java
index 60620ea..61514f1 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaEnumImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaEnumImpl.java
@@ -37,7 +37,7 @@
    {
       List<EnumConstantSource> result = new ArrayList<EnumConstantSource>();
 
-      for (Object o : (((EnumDeclaration) getBodyDeclaration()).enumConstants()))
+      for (Object o : ((EnumDeclaration) getBodyDeclaration()).enumConstants())
       {
          EnumConstantDeclaration constant = (EnumConstantDeclaration) o;
          result.add(new EnumConstantImpl(this, constant));
"
a2f6e99ba793e591f6429162eed43bb009113951,George Gastaldi,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
index 98e6961..d07eb99 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
@@ -117,6 +117,12 @@
    }
 
    @Override
+   public void removeAllAnnotations()
+   {
+      annotations.removeAllAnnotations(getPackageDeclaration());
+   }
+
+   @Override
    public AnnotationSource<JavaPackageInfoSource> getAnnotation(
             final Class<? extends java.lang.annotation.Annotation> type)
    {
@@ -437,12 +443,12 @@
    {
       String result = getName();
 
-      JavaType<?> enclosingType = this;
-      while (enclosingType != enclosingType.getEnclosingType())
+      JavaType<?> enclosingTypeLocal = this;
+      while (enclosingTypeLocal != enclosingTypeLocal.getEnclosingType())
       {
-         enclosingType = getEnclosingType();
-         result = enclosingType.getEnclosingType().getName() + ""."" + result;
-         enclosingType = enclosingType.getEnclosingType();
+         enclosingTypeLocal = getEnclosingType();
+         result = enclosingTypeLocal.getEnclosingType().getName() + ""."" + result;
+         enclosingTypeLocal = enclosingTypeLocal.getEnclosingType();
       }
 
       if (!Strings.isNullOrEmpty(getPackage()))
@@ -456,12 +462,12 @@
    {
       String result = getName();
 
-      JavaType<?> enclosingType = this;
-      while (enclosingType != enclosingType.getEnclosingType())
+      JavaType<?> enclosingTypeLocal = this;
+      while (enclosingTypeLocal != enclosingTypeLocal.getEnclosingType())
       {
-         enclosingType = getEnclosingType();
-         result = enclosingType.getEnclosingType().getName() + ""$"" + result;
-         enclosingType = enclosingType.getEnclosingType();
+         enclosingTypeLocal = getEnclosingType();
+         result = enclosingTypeLocal.getEnclosingType().getName() + ""$"" + result;
+         enclosingTypeLocal = enclosingTypeLocal.getEnclosingType();
       }
 
       if (!Strings.isNullOrEmpty(getPackage()))
@@ -476,10 +482,10 @@
    @Override
    public String getPackage()
    {
-      PackageDeclaration pkg = unit.getPackage();
-      if (pkg != null)
+      PackageDeclaration pkgLocal = unit.getPackage();
+      if (pkgLocal != null)
       {
-         return pkg.getName().getFullyQualifiedName();
+         return pkgLocal.getName().getFullyQualifiedName();
       }
       else
       {
@@ -517,7 +523,7 @@
    @Override
    public boolean isPackagePrivate()
    {
-      return (!isPublic() && !isPrivate() && !isProtected());
+      return !isPublic() && !isPrivate() && !isProtected();
    }
 
    @Override
@@ -596,19 +602,19 @@
    @Override
    public String toUnformattedString()
    {
-      Document document = new Document(this.document.get());
+      Document documentLocal = new Document(this.document.get());
 
       try
       {
-         TextEdit edit = unit.rewrite(document, null);
-         edit.apply(document);
+         TextEdit edit = unit.rewrite(documentLocal, null);
+         edit.apply(documentLocal);
       }
       catch (Exception e)
       {
          throw new ParserException(""Could not modify source: "" + unit.toString(), e);
       }
 
-      return document.get();
+      return documentLocal.get();
    }
 
    @Override
@@ -762,4 +768,4 @@
    {
       return pkg;
    }
-}
+}
\ No newline at end of file
"
a2f6e99ba793e591f6429162eed43bb009113951,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index 740cc42..9c3b935 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -139,8 +139,8 @@
    public String toSignature()
    {
       StringBuilder signature = new StringBuilder();
-      signature.append((Visibility.PACKAGE_PRIVATE.equals(this.getVisibility().scope()) ? """" : this.getVisibility()
-               .scope()));
+      signature.append(Visibility.PACKAGE_PRIVATE.equals(this.getVisibility().scope()) ? """" : this.getVisibility()
+               .scope());
       signature.append("" "");
       signature.append(this.getName()).append(""("");
       List<ParameterSource<O>> parameters = this.getParameters();
@@ -206,6 +206,12 @@
    {
       return annotations.removeAnnotation(this, method, annotation);
    }
+   
+   @Override
+   public void removeAllAnnotations()
+   {
+      annotations.removeAllAnnotations(method);
+   }
 
    @Override
    public AnnotationSource<O> getAnnotation(final Class<? extends java.lang.annotation.Annotation> type)
@@ -513,7 +519,7 @@
    @Override
    public boolean isPackagePrivate()
    {
-      return (!isPublic() && !isPrivate() && !isProtected());
+      return !isPublic() && !isPrivate() && !isProtected();
    }
 
    @Override
@@ -741,7 +747,7 @@
       {
          if (Strings.areEqual(name, typeParameter.getName().getIdentifier()))
          {
-            return (new TypeVariableImpl<O>(parent, typeParameter));
+            return new TypeVariableImpl<O>(parent, typeParameter);
          }
       }
       return null;
"
a2f6e99ba793e591f6429162eed43bb009113951,George Gastaldi,ParameterImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/ParameterImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/ParameterImpl.java
index 680d803..98a5ff1 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/ParameterImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/ParameterImpl.java
@@ -117,6 +117,12 @@
    {
       return annotations.removeAnnotation(this, param, annotation);
    }
+   
+   @Override
+   public void removeAllAnnotations()
+   {
+     annotations.removeAllAnnotations(param);
+   }
 
    @Override
    public boolean isFinal()
@@ -158,4 +164,4 @@
    {
       return parent.getOrigin();
    }
-}
+}
\ No newline at end of file
"
a2f6e99ba793e591f6429162eed43bb009113951,George Gastaldi,TypeImpl.java,MODIFY,isType -> [String name] | [Class type],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/TypeImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/TypeImpl.java
index 4357977..9217103 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/TypeImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/TypeImpl.java
@@ -83,17 +83,17 @@
    @SuppressWarnings(""unchecked"")
    public List<Type<O>> getTypeArguments()
    {
-      org.eclipse.jdt.core.dom.Type type = this.type;
+      org.eclipse.jdt.core.dom.Type typeLocal = this.type;
 
-      if (type.isArrayType())
+      if (typeLocal.isArrayType())
       {
-         type = ((ArrayType) type).getElementType();
+         typeLocal = ((ArrayType) typeLocal).getElementType();
       }
 
-      if (type instanceof ParameterizedType)
+      if (typeLocal instanceof ParameterizedType)
       {
          List<Type<O>> result = new ArrayList<Type<O>>();
-         List<org.eclipse.jdt.core.dom.Type> arguments = ((ParameterizedType) type).typeArguments();
+         List<org.eclipse.jdt.core.dom.Type> arguments = ((ParameterizedType) typeLocal).typeArguments();
          for (org.eclipse.jdt.core.dom.Type t : arguments)
          {
             result.add(new TypeImpl<O>(origin, this, t));
@@ -269,10 +269,10 @@
 
    private int getExtraDimensions()
    {
-      ASTNode parent = type.getParent();
-      if (parent instanceof FieldDeclaration)
+      ASTNode parentLocal = type.getParent();
+      if (parentLocal instanceof FieldDeclaration)
       {
-         for (Object f : ((FieldDeclaration) parent).fragments())
+         for (Object f : ((FieldDeclaration) parentLocal).fragments())
          {
             if (f instanceof VariableDeclarationFragment)
             {
"
9ce0a11d0164e683efc7ef7eeb9073a45beeea84,George Gastaldi,Types.java,MODIFY,getDefaultValue -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
index 4907a96..dea1d61 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
@@ -45,6 +45,8 @@
    private static final Pattern WILDCARD_AWARE_TYPE_PATTERN = Pattern
             .compile(""\\?|^\\s*(\\?\\s+(?:extends|super)\\s+)?([A-Za-z$_]\\S*)\\s*$"");
 
+   private static final Pattern GENERIC_TYPE_PATTERN = Pattern.compile(""<|>|,"");
+
    private static final List<String> LANG_TYPES = Arrays.asList(
             // Interfaces
             ""Appendable"",
@@ -199,9 +201,10 @@
       if (isGeneric(type))
       {
          final List<String> simpleParameters = new ArrayList<String>();
-         for (String typeParameter : getGenericsTypeParameter(type).split("", ""))
+         for (String typeParameter : getGenericsTypeParameter(type).split("",""))
          {
             String simpleType;
+            typeParameter = typeParameter.trim();
             if (""?"".equals(typeParameter))
             {
                simpleType = typeParameter;
@@ -222,7 +225,7 @@
             }
             simpleParameters.add(simpleType);
          }
-         result += new StringBuilder(""<>"").insert(1, Strings.join(simpleParameters, "", "")).toString();
+         result += new StringBuilder(""<>"").insert(1, Strings.join(simpleParameters, "","")).toString();
       }
       return result;
    }
@@ -301,7 +304,8 @@
       while (tok.hasMoreTokens())
       {
          String typeArg = tok.nextToken();
-         while (incompleteGenerics(typeArg) && tok.hasMoreElements()) {
+         while (incompleteGenerics(typeArg) && tok.hasMoreElements())
+         {
             typeArg += tok.nextToken();
          }
 
@@ -613,4 +617,22 @@
       }
       return result;
    }
+
+   /**
+    * 
+    * Returns the available generics as a String array
+    * 
+    * @param typeName
+    * @return
+    */
+   public static String[] splitGenerics(String typeName)
+   {
+      int begin = typeName.indexOf('<');
+      int end = typeName.indexOf('>');
+      if (begin == -1 || end == -1)
+      {
+         return new String[0];
+      }
+      return GENERIC_TYPE_PATTERN.split(typeName.substring(begin + 1, end));
+   }
 }
\ No newline at end of file
"
9ce0a11d0164e683efc7ef7eeb9073a45beeea84,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index 9c3b935..6b81c37 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -206,7 +206,7 @@
    {
       return annotations.removeAnnotation(this, method, annotation);
    }
-   
+
    @Override
    public void removeAllAnnotations()
    {
@@ -326,6 +326,13 @@
       {
          origin.addImport(typeName);
       }
+      for (String genericType : Types.splitGenerics(typeName))
+      {
+         if (origin.requiresImport(genericType))
+         {
+            origin.addImport(genericType);
+         }
+      }
       String stub = ""public class Stub { public "" + simpleName + "" method() {} }"";
       JavaClassSource temp = (JavaClassSource) Roaster.parse(stub);
       List<MethodSource<JavaClassSource>> methods = temp.getMethods();
"
427f1b4bf6dcbaded0311ac4e2fc670ef048aa38,George Gastaldi,Formatter.java,MODIFY,"format -> [Properties prefs, String source] | [File source]","diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java b/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
index 2992d7a..3326835 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
@@ -22,6 +22,7 @@
 import org.eclipse.jdt.core.JavaCore;
 import org.eclipse.jdt.core.ToolFactory;
 import org.eclipse.jdt.core.formatter.CodeFormatter;
+import org.eclipse.jdt.core.formatter.DefaultCodeFormatterConstants;
 import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
 import org.eclipse.jface.text.BadLocationException;
 import org.eclipse.jface.text.Document;
@@ -178,6 +179,8 @@
       properties.setProperty(JavaCore.COMPILER_SOURCE, CompilerOptions.VERSION_1_8);
       properties.setProperty(JavaCore.COMPILER_COMPLIANCE, CompilerOptions.VERSION_1_8);
       properties.setProperty(JavaCore.COMPILER_CODEGEN_TARGET_PLATFORM, CompilerOptions.VERSION_1_8);
+      // ROASTER-96: Add a blank line after imports. ""1"" is equivalent to TRUE in the formatter XML file
+      properties.setProperty(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_AFTER_IMPORTS, ""1"");
       return properties;
    }
 
"
f7a5444ea6b2e163e0559842190127d65eb79488,George Kankava,Strings.java,MODIFY,"getLevenshteinDistance -> [CharSequence s, CharSequence t, int threshold] | [CharSequence s, CharSequence t]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Strings.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Strings.java
index cdca9af..2149d95 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Strings.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Strings.java
@@ -207,9 +207,9 @@
          m = t.length();
       }
 
-      int p[] = new int[n + 1]; // 'previous' cost array, horizontally
-      int d[] = new int[n + 1]; // cost array, horizontally
-      int _d[]; // placeholder to assist in swapping p and d
+      int[] p = new int[n + 1]; // 'previous' cost array, horizontally
+      int[] d = new int[n + 1]; // cost array, horizontally
+      int[] _d; // placeholder to assist in swapping p and d
 
       // indexes into strings s and t
       int i; // iterates through s
@@ -347,9 +347,9 @@
          m = t.length();
       }
 
-      int p[] = new int[n + 1]; // 'previous' cost array, horizontally
-      int d[] = new int[n + 1]; // cost array, horizontally
-      int _d[]; // placeholder to assist in swapping p and d
+      int[] p = new int[n + 1]; // 'previous' cost array, horizontally
+      int[] d = new int[n + 1]; // cost array, horizontally
+      int[] _d; // placeholder to assist in swapping p and d
 
       // fill in starting table values
       int boundary = Math.min(n, threshold) + 1;
"
946c4d18110df221aea9744adc6b068271778b30,George Kankava,Roaster.java,MODIFY,"parse -> [Class type, InputStream data] | [File file]","diff --git a/api/src/main/java/org/jboss/forge/roaster/Roaster.java b/api/src/main/java/org/jboss/forge/roaster/Roaster.java
index a434927..8714640 100644
--- a/api/src/main/java/org/jboss/forge/roaster/Roaster.java
+++ b/api/src/main/java/org/jboss/forge/roaster/Roaster.java
@@ -31,6 +31,8 @@
  */
 public final class Roaster
 {
+   private Roaster() {}
+
    private static List<JavaParser> parsers;
    private static List<FormatterProvider> formatters;
 
@@ -46,7 +48,7 @@
                parsers.add(p);
             }
          }
-         if (parsers.size() == 0)
+         if (parsers.isEmpty())
          {
             throw new IllegalStateException(""No instances of ["" + JavaParser.class.getName()
                      + ""] were found on the classpath."");
@@ -67,7 +69,7 @@
                formatters.add(p);
             }
          }
-         if (formatters.size() == 0)
+         if (formatters.isEmpty())
          {
             throw new IllegalStateException(""No instances of ["" + FormatterProvider.class.getName()
                      + ""] were found on the classpath."");
@@ -173,8 +175,7 @@
 
          if (type.isInstance(unit.getGoverningType()))
          {
-            final T result = (T) unit.getGoverningType();
-            return result;
+            return (T) unit.getGoverningType();
          }
          else if (unit != null)
          {
"
6a3c3f09313bfbd782ec3aa4fea79e49a8ce2604,George Gastaldi,Strings.java,MODIFY,"getLevenshteinDistance -> [CharSequence s, CharSequence t, int threshold] | [CharSequence s, CharSequence t]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Strings.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Strings.java
index cdca9af..2149d95 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Strings.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Strings.java
@@ -207,9 +207,9 @@
          m = t.length();
       }
 
-      int p[] = new int[n + 1]; // 'previous' cost array, horizontally
-      int d[] = new int[n + 1]; // cost array, horizontally
-      int _d[]; // placeholder to assist in swapping p and d
+      int[] p = new int[n + 1]; // 'previous' cost array, horizontally
+      int[] d = new int[n + 1]; // cost array, horizontally
+      int[] _d; // placeholder to assist in swapping p and d
 
       // indexes into strings s and t
       int i; // iterates through s
@@ -347,9 +347,9 @@
          m = t.length();
       }
 
-      int p[] = new int[n + 1]; // 'previous' cost array, horizontally
-      int d[] = new int[n + 1]; // cost array, horizontally
-      int _d[]; // placeholder to assist in swapping p and d
+      int[] p = new int[n + 1]; // 'previous' cost array, horizontally
+      int[] d = new int[n + 1]; // cost array, horizontally
+      int[] _d; // placeholder to assist in swapping p and d
 
       // fill in starting table values
       int boundary = Math.min(n, threshold) + 1;
"
4a6a5485319f2cb13609fb4df0bb780a6b3585b1,George Kankava,Methods.java,MODIFY,"implementAbstractMethods -> [Class source, MethodHolderSource target] | [MethodHolder source, MethodHolderSource target]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Methods.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Methods.java
index 1068971..b35df25 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Methods.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Methods.java
@@ -24,6 +24,8 @@
  */
 public class Methods
 {
+   private Methods() {}
+
    /**
     * Implement the abstract methods present in a {@link MethodHolder} to the specified {@link MethodHolderSource}
     * 
"
4a6a5485319f2cb13609fb4df0bb780a6b3585b1,George Kankava,Refactory.java,MODIFY,"createHashCodeAndEquals -> [JavaClassSource clazz, FieldSource fields] | [JavaClassSource clazz]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
index 98a713a..f8c6051 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
@@ -25,6 +25,8 @@
 {
    private static final String RETURN_FALSE = "" return false;"";
 
+   private Refactory() {}
+
     /**
     * Generates a getXXX and setXXX method for the supplied field
     *
"
4a6a5485319f2cb13609fb4df0bb780a6b3585b1,George Kankava,Types.java,MODIFY,getDefaultValue -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
index dea1d61..154bb65 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
@@ -151,6 +151,8 @@
             ""SafeVarargs"",
             ""SuppressWarnings"");
 
+   private Types() {}
+
    public static boolean areEquivalent(String left, String right)
    {
       if ((left == null) && (right == null))
"
f3f80ee7d2301dafb02e867cc144a09acce74f59,George Gastaldi,Methods.java,MODIFY,"implementAbstractMethods -> [Class source, MethodHolderSource target] | [MethodHolder source, MethodHolderSource target]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Methods.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Methods.java
index 1068971..b35df25 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Methods.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Methods.java
@@ -24,6 +24,8 @@
  */
 public class Methods
 {
+   private Methods() {}
+
    /**
     * Implement the abstract methods present in a {@link MethodHolder} to the specified {@link MethodHolderSource}
     * 
"
f3f80ee7d2301dafb02e867cc144a09acce74f59,George Gastaldi,Refactory.java,MODIFY,"createHashCodeAndEquals -> [JavaClassSource clazz, FieldSource fields] | [JavaClassSource clazz]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
index 98a713a..f8c6051 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
@@ -25,6 +25,8 @@
 {
    private static final String RETURN_FALSE = "" return false;"";
 
+   private Refactory() {}
+
     /**
     * Generates a getXXX and setXXX method for the supplied field
     *
"
f3f80ee7d2301dafb02e867cc144a09acce74f59,George Gastaldi,Types.java,MODIFY,getDefaultValue -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
index dea1d61..154bb65 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
@@ -151,6 +151,8 @@
             ""SafeVarargs"",
             ""SuppressWarnings"");
 
+   private Types() {}
+
    public static boolean areEquivalent(String left, String right)
    {
       if ((left == null) && (right == null))
"
b12228dbb94a485011b078d01a51077f84bee7c9,George Gastaldi,Roaster.java,MODIFY,"parse -> [Class type, InputStream data] | [File file]","diff --git a/api/src/main/java/org/jboss/forge/roaster/Roaster.java b/api/src/main/java/org/jboss/forge/roaster/Roaster.java
index a434927..8714640 100644
--- a/api/src/main/java/org/jboss/forge/roaster/Roaster.java
+++ b/api/src/main/java/org/jboss/forge/roaster/Roaster.java
@@ -31,6 +31,8 @@
  */
 public final class Roaster
 {
+   private Roaster() {}
+
    private static List<JavaParser> parsers;
    private static List<FormatterProvider> formatters;
 
@@ -46,7 +48,7 @@
                parsers.add(p);
             }
          }
-         if (parsers.size() == 0)
+         if (parsers.isEmpty())
          {
             throw new IllegalStateException(""No instances of ["" + JavaParser.class.getName()
                      + ""] were found on the classpath."");
@@ -67,7 +69,7 @@
                formatters.add(p);
             }
          }
-         if (formatters.size() == 0)
+         if (formatters.isEmpty())
          {
             throw new IllegalStateException(""No instances of ["" + FormatterProvider.class.getName()
                      + ""] were found on the classpath."");
@@ -173,8 +175,7 @@
 
          if (type.isInstance(unit.getGoverningType()))
          {
-            final T result = (T) unit.getGoverningType();
-            return result;
+            return (T) unit.getGoverningType();
          }
          else if (unit != null)
          {
"
d420de4f7d765a2fc8f917c07ad7ebac3b0ab782,George Kankava,AnnotationAccessor.java,MODIFY,"addAnnotation -> [AnnotationTargetSource target, List modifiers, String className] | [AnnotationTargetSource target, ASTNode body]","diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java b/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java
index f9d7ba9..61a3856 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java
@@ -161,7 +161,7 @@
       removeAllAnnotations(variableDeclaration.modifiers());
    }
 
-   private void removeAllAnnotations(final List<?> modifiers)
+   private static void removeAllAnnotations(final List<?> modifiers)
    {
       Iterator<?> iterator = modifiers.iterator();
       while (iterator.hasNext())
@@ -244,7 +244,7 @@
       return null;
    }
 
-   private List<?> getModifiers(final ASTNode body)
+   private static List<?> getModifiers(final ASTNode body)
    {
       if (body instanceof BodyDeclaration)
       {
"
d420de4f7d765a2fc8f917c07ad7ebac3b0ab782,George Kankava,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
index a7a0d23..672041e 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
@@ -368,10 +368,9 @@
       }
 
       // No import matches and no wild-card/on-demand import matches means this class is in the same package.
-      if (Types.isSimpleName(result))
+      if (Types.isSimpleName(result) && getPackage() != null)
       {
-         if (getPackage() != null)
-            result = getPackage() + ""."" + result;
+         result = getPackage() + ""."" + result;
       }
 
       return result;
@@ -387,7 +386,7 @@
             resolvers.add(r);
          }
       }
-      if (resolvers.size() == 0)
+      if (resolvers.isEmpty())
       {
          throw new IllegalStateException(""No instances of ["" + WildcardImportResolver.class.getName()
                   + ""] were found on the classpath."");
"
d9a1f337fc2ab06947583f58bd8415ccbf3a86ef,George Gastaldi,AnnotationAccessor.java,MODIFY,"addAnnotation -> [AnnotationTargetSource target, List modifiers, String className] | [AnnotationTargetSource target, ASTNode body]","diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java b/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java
index f9d7ba9..61a3856 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java
@@ -161,7 +161,7 @@
       removeAllAnnotations(variableDeclaration.modifiers());
    }
 
-   private void removeAllAnnotations(final List<?> modifiers)
+   private static void removeAllAnnotations(final List<?> modifiers)
    {
       Iterator<?> iterator = modifiers.iterator();
       while (iterator.hasNext())
@@ -244,7 +244,7 @@
       return null;
    }
 
-   private List<?> getModifiers(final ASTNode body)
+   private static List<?> getModifiers(final ASTNode body)
    {
       if (body instanceof BodyDeclaration)
       {
"
d9a1f337fc2ab06947583f58bd8415ccbf3a86ef,George Gastaldi,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
index a7a0d23..672041e 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
@@ -368,10 +368,9 @@
       }
 
       // No import matches and no wild-card/on-demand import matches means this class is in the same package.
-      if (Types.isSimpleName(result))
+      if (Types.isSimpleName(result) && getPackage() != null)
       {
-         if (getPackage() != null)
-            result = getPackage() + ""."" + result;
+         result = getPackage() + ""."" + result;
       }
 
       return result;
@@ -387,7 +386,7 @@
             resolvers.add(r);
          }
       }
-      if (resolvers.size() == 0)
+      if (resolvers.isEmpty())
       {
          throw new IllegalStateException(""No instances of ["" + WildcardImportResolver.class.getName()
                   + ""] were found on the classpath."");
"
37810b02ed100d700b6a0913cd2e236d9cb92384,George Gastaldi,JavaDocImpl.java,MODIFY,getTags -> [String tagName] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaDocImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaDocImpl.java
index 946ba02..83fff3e 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaDocImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaDocImpl.java
@@ -14,6 +14,7 @@
 import java.util.Set;
 
 import org.eclipse.jdt.core.dom.Javadoc;
+import org.eclipse.jdt.core.dom.SimpleName;
 import org.eclipse.jdt.core.dom.TagElement;
 import org.eclipse.jdt.core.dom.TextElement;
 import org.jboss.forge.roaster.model.JavaDocTag;
@@ -87,9 +88,19 @@
          for (Iterator<Object> iterator = fragments.iterator(); iterator.hasNext();)
          {
             Object fragment = iterator.next();
-            text.append(fragment);
-            if (iterator.hasNext())
-               text.append(' ');
+            if (fragment instanceof SimpleName)
+            {
+               // Param name
+               text.append(' ').append(fragment);
+            }
+            else
+            {
+               text.append(fragment);
+               if (iterator.hasNext())
+               {
+                  text.append(' ');
+               }
+            }
          }
          text.append(System.getProperty(""line.separator""));
       }
"
4688ad57a3baa3babaae0d43e3bfcfdf653ca313,George Gastaldi,AnnotationAccessor.java,MODIFY,"addAnnotation -> [AnnotationTargetSource target, List modifiers, String className] | [AnnotationTargetSource target, ASTNode body]","diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java b/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java
index f9d7ba9..61a3856 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/ast/AnnotationAccessor.java
@@ -161,7 +161,7 @@
       removeAllAnnotations(variableDeclaration.modifiers());
    }
 
-   private void removeAllAnnotations(final List<?> modifiers)
+   private static void removeAllAnnotations(final List<?> modifiers)
    {
       Iterator<?> iterator = modifiers.iterator();
       while (iterator.hasNext())
@@ -244,7 +244,7 @@
       return null;
    }
 
-   private List<?> getModifiers(final ASTNode body)
+   private static List<?> getModifiers(final ASTNode body)
    {
       if (body instanceof BodyDeclaration)
       {
"
4688ad57a3baa3babaae0d43e3bfcfdf653ca313,George Gastaldi,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
index a7a0d23..672041e 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
@@ -368,10 +368,9 @@
       }
 
       // No import matches and no wild-card/on-demand import matches means this class is in the same package.
-      if (Types.isSimpleName(result))
+      if (Types.isSimpleName(result) && getPackage() != null)
       {
-         if (getPackage() != null)
-            result = getPackage() + ""."" + result;
+         result = getPackage() + ""."" + result;
       }
 
       return result;
@@ -387,7 +386,7 @@
             resolvers.add(r);
          }
       }
-      if (resolvers.size() == 0)
+      if (resolvers.isEmpty())
       {
          throw new IllegalStateException(""No instances of ["" + WildcardImportResolver.class.getName()
                   + ""] were found on the classpath."");
"
9d0a099bff5657460000e349abf8663f48265e46,George Gastaldi,Methods.java,MODIFY,"implementAbstractMethods -> [Class source, MethodHolderSource target] | [MethodHolder source, MethodHolderSource target]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Methods.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Methods.java
index b35df25..167dc3e 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Methods.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Methods.java
@@ -24,7 +24,9 @@
  */
 public class Methods
 {
-   private Methods() {}
+   private Methods()
+   {
+   }
 
    /**
     * Implement the abstract methods present in a {@link MethodHolder} to the specified {@link MethodHolderSource}
"
e63e0b76518a2435652d94fa0d8ffb7ddb6fc43b,George Gastaldi,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
index 672041e..96ed6dc 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
@@ -129,11 +129,11 @@
    {
       return (O) annotations.removeAnnotation(this, getBodyDeclaration(), annotation);
    }
-   
+
    @Override
    public void removeAllAnnotations()
    {
-     annotations.removeAllAnnotations(getBodyDeclaration());
+      annotations.removeAllAnnotations(getBodyDeclaration());
    }
 
    @Override
@@ -452,6 +452,7 @@
       return getBodyDeclaration().getName().getIdentifier();
    }
 
+   @SuppressWarnings(""rawtypes"")
    @Override
    public O setName(final String name)
    {
"
e63e0b76518a2435652d94fa0d8ffb7ddb6fc43b,George Gastaldi,AbstractJavaSourceMemberHolder.java,MODIFY,addField -> [Field field] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
index 81ba355..8659507 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
@@ -437,7 +437,7 @@
    @Override
    public O addInterface(final Class<?> type)
    {
-      return addInterface(type.getName());
+      return addInterface(type.getCanonicalName());
    }
 
    @Override
@@ -484,7 +484,7 @@
    @Override
    public boolean hasInterface(final Class<?> type)
    {
-      return hasInterface(type.getName());
+      return hasInterface(type.getCanonicalName());
    }
 
    @Override
@@ -512,7 +512,7 @@
    @Override
    public O removeInterface(final Class<?> type)
    {
-      return removeInterface(type.getName());
+      return removeInterface(type.getCanonicalName());
    }
 
    @Override
"
1441ae023ef8a9dc384ed47b02aaa09c50669f81,George Gastaldi,MethodSource.java,MODIFY,setReturnType -> [JavaType type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/MethodSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/MethodSource.java
index 8863118..0d9c0fb 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/MethodSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/MethodSource.java
@@ -12,6 +12,7 @@
 import org.jboss.forge.roaster.model.JavaClass;
 import org.jboss.forge.roaster.model.JavaType;
 import org.jboss.forge.roaster.model.Method;
+import org.jboss.forge.roaster.model.Type;
 
 /**
  * Represents a Java Method in source form.
@@ -62,6 +63,11 @@
    MethodSource<O> setReturnType(JavaType<?> type);
 
    /**
+    * Set this {@link Method} to return the given {@link Type}
+    */
+   MethodSource<O> setReturnType(Type<?> type);
+
+   /**
     * Set this {@link Method} to return 'void'
     */
    MethodSource<O> setReturnTypeVoid();
"
1441ae023ef8a9dc384ed47b02aaa09c50669f81,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index 6b81c37..80c4a65 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -305,6 +305,12 @@
    }
 
    @Override
+   public MethodSource<O> setReturnType(Type<?> type)
+   {
+      return setReturnType(type.getQualifiedNameWithGenerics());
+   }
+
+   @Override
    public MethodSource<O> setReturnType(final Class<?> type)
    {
       return setReturnType(type.getCanonicalName());
@@ -322,13 +328,14 @@
       String simpleName = Types.toSimpleName(typeName);
 
       O origin = getOrigin();
-      if (!Strings.areEqual(typeName, simpleName) && origin.requiresImport(typeName))
+      if (!hasTypeVariable(typeName) && !Strings.areEqual(typeName, simpleName)
+               && origin.requiresImport(typeName))
       {
          origin.addImport(typeName);
       }
       for (String genericType : Types.splitGenerics(typeName))
       {
-         if (origin.requiresImport(genericType))
+         if (!hasTypeVariable(genericType) && origin.requiresImport(genericType))
          {
             origin.addImport(genericType);
          }
@@ -730,10 +737,10 @@
    }
 
    @Override
+   @SuppressWarnings(""unchecked"")
    public List<TypeVariableSource<O>> getTypeVariables()
    {
       List<TypeVariableSource<O>> result = new ArrayList<TypeVariableSource<O>>();
-      @SuppressWarnings(""unchecked"")
       List<TypeParameter> typeParameters = method.typeParameters();
       if (typeParameters != null)
       {
@@ -746,9 +753,9 @@
    }
 
    @Override
+   @SuppressWarnings(""unchecked"")
    public TypeVariableSource<O> getTypeVariable(String name)
    {
-      @SuppressWarnings(""unchecked"")
       List<TypeParameter> typeParameters = method.typeParameters();
       for (TypeParameter typeParameter : typeParameters)
       {
@@ -762,6 +769,22 @@
 
    @SuppressWarnings(""unchecked"")
    @Override
+   public boolean hasTypeVariable(String name)
+   {
+      List<TypeParameter> typeParameters = method.typeParameters();
+      for (TypeParameter typeParameter : typeParameters)
+      {
+         if (Strings.areEqual(name, typeParameter.getName().getIdentifier()))
+         {
+            return true;
+         }
+      }
+      return false;
+
+   }
+
+   @SuppressWarnings(""unchecked"")
+   @Override
    public TypeVariableSource<O> addTypeVariable()
    {
       TypeParameter tp2 = method.getAST().newTypeParameter();
@@ -813,10 +836,14 @@
    @Override
    public ParameterSource<O> addParameter(String type, String name)
    {
-      Type<?> innerType = new TypeImpl<O>(getOrigin(), null, type);
-      Import imprt = getOrigin().addImport(innerType);
-      String resolvedType = imprt != null ? Types.rebuildGenericNameWithArrays(imprt.getSimpleName(), innerType)
-               : Types.toSimpleName(type);
+      String resolvedType = type;
+      if (!hasTypeVariable(type) && getOrigin().requiresImport(type))
+      {
+         Type<?> innerType = new TypeImpl<O>(getOrigin(), null, type);
+         Import imprt = getOrigin().addImport(innerType);
+         resolvedType = imprt != null ? Types.rebuildGenericNameWithArrays(imprt.getSimpleName(), innerType)
+                  : Types.toSimpleName(type);
+      }
 
       String stub = ""public class Stub { public void method( "" + resolvedType + "" "" + name + "" ) {} }"";
       JavaClassSource temp = (JavaClassSource) Roaster.parse(stub);
"
2c55134832e5a2444effe66d8fef66eb7bf039c4,evanchooly,TypeImpl.java,MODIFY,isType -> [String name] | [Class type],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/TypeImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/TypeImpl.java
index 9217103..582fb20 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/TypeImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/TypeImpl.java
@@ -17,6 +17,7 @@
 import org.eclipse.jdt.core.dom.FieldDeclaration;
 import org.eclipse.jdt.core.dom.MethodDeclaration;
 import org.eclipse.jdt.core.dom.ParameterizedType;
+import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
 import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
 import org.jboss.forge.roaster.Roaster;
 import org.jboss.forge.roaster.model.JavaType;
@@ -280,6 +281,10 @@
             }
          }
       }
+      if (parentLocal instanceof SingleVariableDeclaration)
+      {
+         return ((SingleVariableDeclaration) parentLocal).getExtraDimensions();
+      }
       return 0;
    }
 
"
2c55134832e5a2444effe66d8fef66eb7bf039c4,evanchooly,MethodSignatureTest.java,MODIFY,"assertVisibility -> [String visibility, MethodSource method] | [Visibility visibility, MethodSource method]","diff --git a/tests/src/test/java/org/jboss/forge/test/roaster/model/MethodSignatureTest.java b/tests/src/test/java/org/jboss/forge/test/roaster/model/MethodSignatureTest.java
index 177a129..033b1bf 100644
--- a/tests/src/test/java/org/jboss/forge/test/roaster/model/MethodSignatureTest.java
+++ b/tests/src/test/java/org/jboss/forge/test/roaster/model/MethodSignatureTest.java
@@ -44,11 +44,17 @@
    public void testMethodParams() throws Exception
    {
       MethodSource<JavaClassSource> method = Roaster.create(JavaClassSource.class).addMethod(
-               ""public void hello(String foo, int bar)"");
+               ""public void hello(String foo, int bar, char[] array, char value[])"");
       List<ParameterSource<JavaClassSource>> parameters = method.getParameters();
 
       Assert.assertEquals(""String"", parameters.get(0).getType().toString());
       Assert.assertEquals(""int"", parameters.get(1).getType().toString());
+
+      Assert.assertEquals(""char[]"", parameters.get(2).getType().toString());
+      Assert.assertTrue(parameters.get(2).getType().isArray());
+
+      Assert.assertEquals(""char"", parameters.get(3).getType().toString());
+      Assert.assertTrue(parameters.get(3).getType().isArray());
    }
 
    @Test(expected = UnsupportedOperationException.class)
"
c235200a5e643fbb9472105f992187884c2bf3bd,George Gastaldi,TypeImpl.java,MODIFY,isType -> [String name] | [Class type],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/TypeImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/TypeImpl.java
index 9217103..582fb20 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/TypeImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/TypeImpl.java
@@ -17,6 +17,7 @@
 import org.eclipse.jdt.core.dom.FieldDeclaration;
 import org.eclipse.jdt.core.dom.MethodDeclaration;
 import org.eclipse.jdt.core.dom.ParameterizedType;
+import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
 import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
 import org.jboss.forge.roaster.Roaster;
 import org.jboss.forge.roaster.model.JavaType;
@@ -280,6 +281,10 @@
             }
          }
       }
+      if (parentLocal instanceof SingleVariableDeclaration)
+      {
+         return ((SingleVariableDeclaration) parentLocal).getExtraDimensions();
+      }
       return 0;
    }
 
"
c235200a5e643fbb9472105f992187884c2bf3bd,George Gastaldi,MethodSignatureTest.java,MODIFY,"assertVisibility -> [String visibility, MethodSource method] | [Visibility visibility, MethodSource method]","diff --git a/tests/src/test/java/org/jboss/forge/test/roaster/model/MethodSignatureTest.java b/tests/src/test/java/org/jboss/forge/test/roaster/model/MethodSignatureTest.java
index 177a129..033b1bf 100644
--- a/tests/src/test/java/org/jboss/forge/test/roaster/model/MethodSignatureTest.java
+++ b/tests/src/test/java/org/jboss/forge/test/roaster/model/MethodSignatureTest.java
@@ -44,11 +44,17 @@
    public void testMethodParams() throws Exception
    {
       MethodSource<JavaClassSource> method = Roaster.create(JavaClassSource.class).addMethod(
-               ""public void hello(String foo, int bar)"");
+               ""public void hello(String foo, int bar, char[] array, char value[])"");
       List<ParameterSource<JavaClassSource>> parameters = method.getParameters();
 
       Assert.assertEquals(""String"", parameters.get(0).getType().toString());
       Assert.assertEquals(""int"", parameters.get(1).getType().toString());
+
+      Assert.assertEquals(""char[]"", parameters.get(2).getType().toString());
+      Assert.assertTrue(parameters.get(2).getType().isArray());
+
+      Assert.assertEquals(""char"", parameters.get(3).getType().toString());
+      Assert.assertTrue(parameters.get(3).getType().isArray());
    }
 
    @Test(expected = UnsupportedOperationException.class)
"
487d9014ba10e035ba088d15b6bb754988682761,George Gastaldi,AbstractJavaSourceMemberHolder.java,MODIFY,addField -> [Field field] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
index 8659507..790985e 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
@@ -12,6 +12,7 @@
 import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Set;
+import java.util.regex.Pattern;
 
 import org.eclipse.jdt.core.dom.ASTNode;
 import org.eclipse.jdt.core.dom.BodyDeclaration;
@@ -46,11 +47,13 @@
 
 /**
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
- *
  */
-public abstract class AbstractJavaSourceMemberHolder<O extends JavaSource<O> & PropertyHolderSource<O>> extends AbstractJavaSource<O>
+public abstract class AbstractJavaSourceMemberHolder<O extends JavaSource<O> & PropertyHolderSource<O>>
+         extends AbstractJavaSource<O>
          implements InterfaceCapableSource<O>, PropertyHolderSource<O>
 {
+   private static final Pattern GET_SET_PATTERN = Pattern.compile(""^[gs]et.+$"");
+
    protected AbstractJavaSourceMemberHolder(JavaSource<?> enclosingType, final Document document,
             final CompilationUnit unit, BodyDeclaration declaration)
    {
@@ -627,7 +630,7 @@
 
    private String extractPropertyName(Method<O, ?> method)
    {
-      if (method.getName().matches(""^[gs]et.+$""))
+      if (GET_SET_PATTERN.matcher(method.getName()).matches())
       {
          return Strings.uncapitalize(method.getName().substring(3));
       }
"
1024ad2e6de2a21076a4aba577f34a3e58463ba2,George Gastaldi,Types.java,MODIFY,getDefaultValue -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
index 154bb65..625ea01 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
@@ -629,6 +629,7 @@
     */
    public static String[] splitGenerics(String typeName)
    {
+      typeName = typeName.replaceAll("" "","""");
       int begin = typeName.indexOf('<');
       int end = typeName.indexOf('>');
       if (begin == -1 || end == -1)
"
d045f3966f2ac26e5435d7f171e9e88fc2742e05,CRC-Mismatch,Types.java,MODIFY,getDefaultValue -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
index 625ea01..b2263eb 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
@@ -629,7 +629,7 @@
     */
    public static String[] splitGenerics(String typeName)
    {
-      typeName = typeName.replaceAll("" "","""");
+      typeName = typeName.replaceAll(""\\s"","""");
       int begin = typeName.indexOf('<');
       int end = typeName.indexOf('>');
       if (begin == -1 || end == -1)
"
2e1c181e0250f724aeaeeaa8218c1f5926148d03,George Gastaldi,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
index 96ed6dc..7f0b38a 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
@@ -396,7 +396,7 @@
 
    private boolean validImport(final String type)
    {
-      return !Strings.isNullOrEmpty(type) && !Types.isPrimitive(type);
+      return !Strings.isNullOrEmpty(type) && !Types.isPrimitive(type) && !Strings.isNullOrEmpty(Types.getPackage(type));
    }
 
    @Override
"
2e1c181e0250f724aeaeeaa8218c1f5926148d03,George Gastaldi,AbstractJavaSourceMemberHolder.java,MODIFY,addField -> [Field field] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
index 790985e..ef7aa76 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
@@ -48,8 +48,7 @@
 /**
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
-public abstract class AbstractJavaSourceMemberHolder<O extends JavaSource<O> & PropertyHolderSource<O>>
-         extends AbstractJavaSource<O>
+public abstract class AbstractJavaSourceMemberHolder<O extends JavaSource<O> & PropertyHolderSource<O>> extends AbstractJavaSource<O>
          implements InterfaceCapableSource<O>, PropertyHolderSource<O>
 {
    private static final Pattern GET_SET_PATTERN = Pattern.compile(""^[gs]et.+$"");
@@ -541,7 +540,20 @@
    {
       Assert.isFalse(hasProperty(name), ""Cannot create existing property "" + name);
 
-      final org.jboss.forge.roaster.model.Type<O> typeObject = new TypeImpl<O>(getOrigin(), null, type);
+      O origin = getOrigin();
+      if (origin.requiresImport(type))
+      {
+         origin.addImport(type);
+      }
+      for (String genericType : Types.splitGenerics(type))
+      {
+         if (origin.requiresImport(genericType))
+         {
+            origin.addImport(genericType);
+         }
+      }
+      final org.jboss.forge.roaster.model.Type<O> typeObject = new TypeImpl<O>(getOrigin(), null,
+               Types.toSimpleName(type));
       final PropertySource<O> result = new PropertyImpl<O>(name, getOrigin())
       {
          @Override
"
2e1c181e0250f724aeaeeaa8218c1f5926148d03,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index 80c4a65..9c3ef93 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -780,7 +780,6 @@
          }
       }
       return false;
-
    }
 
    @SuppressWarnings(""unchecked"")
"
41504724bdd0c0500accbfcddbe35fab3e57d986,Jeroen Meijer,Types.java,MODIFY,getDefaultValue -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
index b2263eb..97aa461 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
@@ -227,7 +227,15 @@
             }
             simpleParameters.add(simpleType);
          }
-         result += new StringBuilder(""<>"").insert(1, Strings.join(simpleParameters, "","")).toString();
+         final String generics = new StringBuilder(""<>"").insert(1, Strings.join(simpleParameters, "","")).toString();
+         if (isArray(result))
+         {
+             result = new StringBuilder(result).insert(result.indexOf(""[""), generics).toString();
+         }
+         else
+         {
+            result += generics;
+         }
       }
       return result;
    }
"
65ecc5753ff4b75e78f7390e1bf063a4e4c00bed,GitHub,Types.java,MODIFY,getDefaultValue -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
index b2263eb..97aa461 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
@@ -227,7 +227,15 @@
             }
             simpleParameters.add(simpleType);
          }
-         result += new StringBuilder(""<>"").insert(1, Strings.join(simpleParameters, "","")).toString();
+         final String generics = new StringBuilder(""<>"").insert(1, Strings.join(simpleParameters, "","")).toString();
+         if (isArray(result))
+         {
+             result = new StringBuilder(result).insert(result.indexOf(""[""), generics).toString();
+         }
+         else
+         {
+            result += generics;
+         }
       }
       return result;
    }
"
3b9ab3e8ce46d1259cd46fc86db51836a54b402f,George Gastaldi,Types.java,MODIFY,getDefaultValue -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
index 97aa461..1802681 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
@@ -151,7 +151,9 @@
             ""SafeVarargs"",
             ""SuppressWarnings"");
 
-   private Types() {}
+   private Types()
+   {
+   }
 
    public static boolean areEquivalent(String left, String right)
    {
@@ -230,7 +232,7 @@
          final String generics = new StringBuilder(""<>"").insert(1, Strings.join(simpleParameters, "","")).toString();
          if (isArray(result))
          {
-             result = new StringBuilder(result).insert(result.indexOf(""[""), generics).toString();
+            result = new StringBuilder(result).insert(result.indexOf(""[""), generics).toString();
          }
          else
          {
@@ -637,7 +639,7 @@
     */
    public static String[] splitGenerics(String typeName)
    {
-      typeName = typeName.replaceAll(""\\s"","""");
+      typeName = typeName.replaceAll(""\\s"", """");
       int begin = typeName.indexOf('<');
       int end = typeName.indexOf('>');
       if (begin == -1 || end == -1)
"
603274a7d5d1f809a88b53c519abb3b3c51ce5d8,George Gastaldi,Types.java,MODIFY,getDefaultValue -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
index 1802681..322f98a 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
@@ -354,11 +354,11 @@
       }
       if (isGeneric(type))
       {
-         return type.substring(0, type.indexOf('<')) + type.substring(type.lastIndexOf('>') + 1);
+         return type.substring(0, type.indexOf('<')) + type.substring(type.lastIndexOf('>') + 1).trim();
       }
       else
       {
-         return type;
+         return type.trim();
       }
    }
 
"
603274a7d5d1f809a88b53c519abb3b3c51ce5d8,George Gastaldi,JavaClassImpl.java,MODIFY,setSuperType -> [String type] | [JavaType type],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
index 24f2e0d..f889b09 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
@@ -27,7 +27,7 @@
  * 
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
-public class JavaClassImpl extends AbstractGenericCapableJavaSource<JavaClassSource>implements JavaClassSource
+public class JavaClassImpl extends AbstractGenericCapableJavaSource<JavaClassSource> implements JavaClassSource
 {
    private final ModifierAccessor modifiers = new ModifierAccessor();
 
@@ -118,7 +118,7 @@
       Object superType = getBodyDeclaration().getStructuralProperty(TypeDeclaration.SUPERCLASS_TYPE_PROPERTY);
       if (superType == null)
          superType = Object.class.getName();
-      return resolveType(superType.toString());
+      return resolveType(superType.toString()) + Types.getGenerics(superType.toString());
    }
 
    @Override
"
f09017124aebfe9f49bbe376da18cb8a2c4ee18c,George Gastaldi,AbstractJavaSourceMemberHolder.java,MODIFY,addField -> [Field field] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
index ef7aa76..388b798 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
@@ -448,7 +448,7 @@
       O obj = addInterface(type);
       for (MethodSource<?> methodSource : Methods.implementAbstractMethods(type, this))
       {
-         methodSource.addAnnotation(Override.class);
+         methodSource.setPublic().addAnnotation(Override.class);
       }
       return obj;
    }
@@ -459,7 +459,7 @@
       O obj = addInterface(type);
       for (MethodSource<?> methodSource : Methods.implementAbstractMethods(type, this))
       {
-         methodSource.addAnnotation(Override.class);
+         methodSource.setPublic().addAnnotation(Override.class);
       }
       return obj;
    }
"
e88653754315464c4fb64d97e769e96ae30bf321,George Gastaldi,Formatter.java,MODIFY,"format -> [Properties prefs, String source] | [File source]","diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java b/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
index 3326835..6c714ed 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
@@ -16,7 +16,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
-import java.util.Map.Entry;
 import java.util.Properties;
 
 import org.eclipse.jdt.core.JavaCore;
@@ -155,13 +154,20 @@
       return null;
    }
 
-   public static Properties applyShadedPackageName(Properties config)
+   public static Properties applyShadedPackageName(final Properties config)
    {
       Properties modified = new Properties();
       String shadePackage = JavaCore.class.getPackage().getName().replaceAll(""org\\.eclipse.*$"", """");
-      for (Entry<Object, Object> property : config.entrySet())
+      for (String property : config.stringPropertyNames())
       {
-         modified.put(shadePackage + property.getKey(), property.getValue());
+         if (property.startsWith(shadePackage))
+         {
+            modified.put(property, config.getProperty(property));
+         }
+         else
+         {
+            modified.put(shadePackage + property, config.getProperty(property));
+         }
       }
 
       return modified;
"
c3321bf150e7963850a009cafa1a780dac37c0bb,Stephan Windmüller,Types.java,MODIFY,getDefaultValue -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
index 322f98a..5c3c51d 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
@@ -205,8 +205,15 @@
       if (isGeneric(type))
       {
          final List<String> simpleParameters = new ArrayList<String>();
-         for (String typeParameter : getGenericsTypeParameter(type).split("",""))
+         StringTokenizer tok = new StringTokenizer(getGenericsTypeParameter(type), "","");
+         while (tok.hasMoreTokens())
          {
+            String typeParameter = tok.nextToken();
+            while (incompleteGenerics(typeParameter) && tok.hasMoreElements())
+            {
+               typeParameter += ',' + tok.nextToken();
+            }
+
             String simpleType;
             typeParameter = typeParameter.trim();
             if (""?"".equals(typeParameter))
@@ -318,7 +325,7 @@
          String typeArg = tok.nextToken();
          while (incompleteGenerics(typeArg) && tok.hasMoreElements())
          {
-            typeArg += tok.nextToken();
+            typeArg += ',' + tok.nextToken();
          }
 
          if (!validateNameWithGenerics(typeArg))
"
9a2389159324f1531c53bc64bf0a2bff98e33a0d,GitHub,Types.java,MODIFY,getDefaultValue -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
index 322f98a..5c3c51d 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
@@ -205,8 +205,15 @@
       if (isGeneric(type))
       {
          final List<String> simpleParameters = new ArrayList<String>();
-         for (String typeParameter : getGenericsTypeParameter(type).split("",""))
+         StringTokenizer tok = new StringTokenizer(getGenericsTypeParameter(type), "","");
+         while (tok.hasMoreTokens())
          {
+            String typeParameter = tok.nextToken();
+            while (incompleteGenerics(typeParameter) && tok.hasMoreElements())
+            {
+               typeParameter += ',' + tok.nextToken();
+            }
+
             String simpleType;
             typeParameter = typeParameter.trim();
             if (""?"".equals(typeParameter))
@@ -318,7 +325,7 @@
          String typeArg = tok.nextToken();
          while (incompleteGenerics(typeArg) && tok.hasMoreElements())
          {
-            typeArg += tok.nextToken();
+            typeArg += ',' + tok.nextToken();
          }
 
          if (!validateNameWithGenerics(typeArg))
"
96b5f84e460c753316476524e7cbb1a430e189b8,George Gastaldi,AbstractJavaSourceMemberHolder.java,MODIFY,addField -> [Field field] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
index 388b798..7448a54 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
@@ -8,6 +8,7 @@
 
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.HashSet;
 import java.util.Iterator;
 import java.util.LinkedHashSet;
 import java.util.List;
@@ -34,6 +35,7 @@
 import org.jboss.forge.roaster.model.source.Import;
 import org.jboss.forge.roaster.model.source.InterfaceCapableSource;
 import org.jboss.forge.roaster.model.source.JavaClassSource;
+import org.jboss.forge.roaster.model.source.JavaInterfaceSource;
 import org.jboss.forge.roaster.model.source.JavaSource;
 import org.jboss.forge.roaster.model.source.MemberSource;
 import org.jboss.forge.roaster.model.source.MethodSource;
@@ -457,6 +459,38 @@
    public O implementInterface(JavaInterface<?> type)
    {
       O obj = addInterface(type);
+
+      if (type instanceof JavaInterfaceSource) {
+         Set<Import> usedImports = new HashSet<Import>();
+
+         JavaInterfaceSource interfaceSource = (JavaInterfaceSource) type;
+         for (MethodSource<JavaInterfaceSource> method : interfaceSource.getMethods())
+         {
+            if (method.isDefault()) {
+               // Do not add default implementations
+               continue;
+            }
+
+            if (!method.isReturnTypeVoid())
+            {
+               usedImports.add(interfaceSource.getImport(method.getReturnType().getQualifiedName()));
+            }
+
+            for (ParameterSource<JavaInterfaceSource> parameter : method.getParameters())
+            {
+               usedImports.add(interfaceSource.getImport(parameter.getType().getQualifiedName()));
+            }
+         }
+
+         for (Import imprt : interfaceSource.getImports())
+         {
+            if (usedImports.contains(imprt))
+            {
+               addImport(imprt);
+            }
+         }
+      }
+
       for (MethodSource<?> methodSource : Methods.implementAbstractMethods(type, this))
       {
          methodSource.setPublic().addAnnotation(Override.class);
"
45dce4cbe9be6a06d43c891d4014eaa6cfffea58,George Gastaldi,FieldHolder.java,MODIFY,hasField -> [Field field] | [String name],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/FieldHolder.java b/api/src/main/java/org/jboss/forge/roaster/model/FieldHolder.java
index ace6c9a..a7244f3 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/FieldHolder.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/FieldHolder.java
@@ -20,21 +20,21 @@
    /**
     * Return whether or not this {@link O} declares a {@link Field} with the given name.
     */
-   public boolean hasField(String name);
+   boolean hasField(String name);
 
    /**
     * Return whether or not this {@link O} declares the given {@link Field} instance.
     */
-   public boolean hasField(Field<O> field);
+   boolean hasField(Field<O> field);
 
    /**
     * Get the {@link Field} with the given name and return it, otherwise, return null.
     */
-   public Field<O> getField(String name);
+   Field<O> getField(String name);
 
    /**
     * Get a list of all {@link Field}s declared by this {@link O}, or return an empty list if no {@link Field}s are
     * declared.
     */
-   public List<? extends Field<O>> getFields();
+   List<? extends Field<O>> getFields();
 }
"
45dce4cbe9be6a06d43c891d4014eaa6cfffea58,George Gastaldi,JavaAnnotation.java,MODIFY,hasAnnotationElement -> [AnnotationElement annotationElement] | [String name],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/JavaAnnotation.java b/api/src/main/java/org/jboss/forge/roaster/model/JavaAnnotation.java
index 00ea7cf..1f359d9 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/JavaAnnotation.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/JavaAnnotation.java
@@ -23,21 +23,21 @@
    /**
     * Return whether or not this {@link JavaAnnotation} declares an {@link AnnotationElement} with the given name.
     */
-   public boolean hasAnnotationElement(String name);
+   boolean hasAnnotationElement(String name);
 
    /**
     * Return whether or not this {@link JavaAnnotation} declares the given {@link AnnotationElement} instance.
     */
-   public boolean hasAnnotationElement(AnnotationElement<?> annotationElement);
+   boolean hasAnnotationElement(AnnotationElement<?> annotationElement);
 
    /**
     * Get the {@link AnnotationElement} with the given name and return it, otherwise, return null.
     */
-   public AnnotationElement<O> getAnnotationElement(String name);
+   AnnotationElement<O> getAnnotationElement(String name);
 
    /**
     * Get a list of all {@link AnnotationElement}s declared by this {@link JavaAnnotation}, or return an empty list if
     * no {@link AnnotationElement}s are declared.
     */
-   public List<? extends AnnotationElement<O>> getAnnotationElements();
+   List<? extends AnnotationElement<O>> getAnnotationElements();
 }
\ No newline at end of file
"
45dce4cbe9be6a06d43c891d4014eaa6cfffea58,George Gastaldi,MethodHolder.java,MODIFY,"hasMethodSignature -> [String name, Class paramTypes] | [Method method]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/MethodHolder.java b/api/src/main/java/org/jboss/forge/roaster/model/MethodHolder.java
index 9e8b31e..c8f8486 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/MethodHolder.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/MethodHolder.java
@@ -20,46 +20,46 @@
    /**
     * Return true if this {@link O} has a method with the given name and zero parameters; otherwise return false.
     */
-   public boolean hasMethod(final Method<O, ?> name);
+   boolean hasMethod(final Method<O, ?> name);
 
    /**
     * Return true if this {@link O} has a method with signature matching the given method's signature.
     */
-   public boolean hasMethodSignature(final Method<?, ?> method);
+   boolean hasMethodSignature(final Method<?, ?> method);
 
    /**
     * Return true if this {@link O} has a method with the given name and zero parameters; otherwise return false.
     */
-   public boolean hasMethodSignature(final String name);
+   boolean hasMethodSignature(final String name);
 
    /**
     * Return true if this {@link O} has a method with the given name and signature types; otherwise return false.
     */
-   public boolean hasMethodSignature(final String name, String... paramTypes);
+   boolean hasMethodSignature(final String name, String... paramTypes);
 
    /**
     * Return true if this {@link O} has a method with the given name and signature types; otherwise return false.
     */
-   public boolean hasMethodSignature(final String name, Class<?>... paramTypes);
+   boolean hasMethodSignature(final String name, Class<?>... paramTypes);
 
    /**
     * Return the {@link Method} with the given name and zero parameters; otherwise return null.
     */
-   public Method<O, ?> getMethod(final String name);
+   Method<O, ?> getMethod(final String name);
 
    /**
     * Return the {@link Method} with the given name and signature types; otherwise return null.
     */
-   public Method<O, ?> getMethod(final String name, String... paramTypes);
+   Method<O, ?> getMethod(final String name, String... paramTypes);
 
    /**
     * Return the {@link Method} with the given name and signature types; otherwise return null.
     */
-   public Method<O, ?> getMethod(final String name, Class<?>... paramTypes);
+   Method<O, ?> getMethod(final String name, Class<?>... paramTypes);
 
    /**
     * Get a {@link List} of all {@link Method}s declared by this {@link O} instance, if any; otherwise, return an empty
     * {@link List}
     */
-   public List<? extends Method<O, ?>> getMethods();
+   List<? extends Method<O, ?>> getMethods();
 }
\ No newline at end of file
"
45dce4cbe9be6a06d43c891d4014eaa6cfffea58,George Gastaldi,PropertyHolder.java,MODIFY,hasProperty -> [Property property] | [String name],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/PropertyHolder.java b/api/src/main/java/org/jboss/forge/roaster/model/PropertyHolder.java
index 7870f31..fc9a000 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/PropertyHolder.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/PropertyHolder.java
@@ -33,6 +33,12 @@
    Property<O> getProperty(String name);
 
    /**
+    * Get a list of all {@link Property Properties} declared by this {@link O} with the given type,
+    * or return an empty list if no matching {@link Property Properties} are declared.
+    */
+   List<? extends Property<O>> getProperties(Class<?> type);
+
+   /**
     * Get a list of all {@link Property Properties} declared by this {@link O}, or return an empty list if no
     * {@link Property Properties} are declared.
     */
"
45dce4cbe9be6a06d43c891d4014eaa6cfffea58,George Gastaldi,AnnotationElementSource.java,MODIFY,setType -> [JavaType entity] | [Class clazz],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationElementSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationElementSource.java
index eb4d779..b26a9dc 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationElementSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/AnnotationElementSource.java
@@ -22,7 +22,7 @@
    /**
     * Represents the default value of an {@link AnnotationElementSource} and provides mechanisms to set that value.
     */
-   public interface DefaultValue extends AnnotationElement.ReadDefaultValue<JavaAnnotationSource>
+   interface DefaultValue extends AnnotationElement.ReadDefaultValue<JavaAnnotationSource>
    {
       @Override
       AnnotationSource<JavaAnnotationSource> getAnnotation();
"
45dce4cbe9be6a06d43c891d4014eaa6cfffea58,George Gastaldi,ExtendableSource.java,MODIFY,setSuperType -> [String type] | [JavaType type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java
index ee733da..fec0acc 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/ExtendableSource.java
@@ -25,14 +25,14 @@
     * 
     * @see #setSuperType(String)
     */
-   public O setSuperType(JavaType<?> type);
+   O setSuperType(JavaType<?> type);
 
    /**
     * Set this type's super class.
     * 
     * @see #setSuperType(String)
     */
-   public O setSuperType(Class<?> type);
+   O setSuperType(Class<?> type);
 
    /**
     * Set this type's super class and import their abstract methods, if any.
@@ -40,7 +40,7 @@
     * @see #setSuperType(String)
     * @see Methods#implementAbstractMethods(Class, MethodHolderSource)
     */
-   public O extendSuperType(Class<?> type);
+   O extendSuperType(Class<?> type);
 
    /**
     * Set this type's super class and import their abstract methods, if any.
@@ -48,7 +48,7 @@
     * @see #setSuperType(String)
     * @see Methods#implementAbstractMethods(Class, MethodHolderSource)
     */
-   public O extendSuperType(JavaClass<?> type);
+   O extendSuperType(JavaClass<?> type);
 
    /**
     * Set this type's super class.
@@ -60,5 +60,5 @@
     * Attempt to add an import statement to this object's {@link O} if required. (Note that the given className must be
     * fully-qualified in order to properly import required classes)
     */
-   public O setSuperType(String type);
+   O setSuperType(String type);
 }
\ No newline at end of file
"
45dce4cbe9be6a06d43c891d4014eaa6cfffea58,George Gastaldi,FieldHolderSource.java,MODIFY,addField -> [String declaration] | [],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/FieldHolderSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/FieldHolderSource.java
index 86d7807..e47d5b4 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/FieldHolderSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/FieldHolderSource.java
@@ -24,7 +24,7 @@
    /**
     * Add a new Java {@link Field} to this {@link O} instance. This field will be a stub until further modified.
     */
-   public FieldSource<O> addField();
+   FieldSource<O> addField();
 
    /**
     * Add a new {@link Field} declaration to this {@link O} instance, using the given {@link String} as the declaration.
@@ -32,23 +32,23 @@
     * <strong>For example:</strong><br>
     * <code>Field f = javaClass.addField(""private String newField;"");</code>
     */
-   public FieldSource<O> addField(final String declaration);
+   FieldSource<O> addField(final String declaration);
 
    /**
     * Remove the given {@link Field} from this {@link O} instance, if it exists; otherwise, do nothing.
     */
-   public O removeField(final Field<O> field);
+   O removeField(final Field<O> field);
 
    /**
     * Get the {@link Field} with the given name and return it, otherwise, return null.
     */
    @Override
-   public FieldSource<O> getField(String name);
+   FieldSource<O> getField(String name);
 
    /**
     * Get a list of all {@link Field}s declared by this {@link O}, or return an empty list if no {@link Field}s are
     * declared.
     */
    @Override
-   public List<FieldSource<O>> getFields();
+   List<FieldSource<O>> getFields();
 }
\ No newline at end of file
"
45dce4cbe9be6a06d43c891d4014eaa6cfffea58,George Gastaldi,Importer.java,MODIFY,hasImport -> [Import imprt] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/Importer.java b/api/src/main/java/org/jboss/forge/roaster/model/source/Importer.java
index 280d5e3..c801292 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/Importer.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/Importer.java
@@ -43,64 +43,64 @@
    /**
     * Return whether or not this {@link O} has an import for the given {@link T} type.
     */
-   public <T extends JavaType<T>> boolean hasImport(T type);
+   <T extends JavaType<T>> boolean hasImport(T type);
 
    /**
     * Return whether or not this {@link O} has the given {@link Import} type.
     */
-   public boolean hasImport(Import imprt);
+   boolean hasImport(Import imprt);
 
    /**
     * Get the {@link Import} for the given fully-qualified class name, if it exists; otherwise, return null;
     */
-   public Import getImport(String literalValue);
+   Import getImport(String literalValue);
 
    /**
     * Get the {@link Import} for the given {@link Class} type, if it exists; otherwise, return null;
     */
-   public Import getImport(Class<?> type);
+   Import getImport(Class<?> type);
 
    /**
     * Get the {@link Import} for the given {@link T} type, if it exists; otherwise, return null;
     */
-   public <T extends JavaType<?>> Import getImport(T type);
+   <T extends JavaType<?>> Import getImport(T type);
 
    /**
     * Get the {@link Import} of the given {@link Import} type, if it exists; otherwise, return null;
     */
-   public Import getImport(Import imprt);
+   Import getImport(Import imprt);
 
    /**
     * Get an immutable list of all {@link Import}s currently imported by this {@link O}
     */
-   public List<Import> getImports();
+   List<Import> getImports();
 
    /**
     * Given a simple or qualified type, resolve that type against the available imports and return the referenced type.
     * If the type cannot be resolved, return the given type unchanged.
     */
-   public String resolveType(String type);
+   String resolveType(String type);
 
    /**
     * Add an import by qualified class name. (E.g: ""com.example.Imported"") unless it is in the provided 'java.lang.*'
     * package.
     */
-   public Import addImport(final String className);
+   Import addImport(final String className);
 
    /**
     * Add an import for the given {@link Class} type.
     */
-   public Import addImport(final Class<?> type);
+   Import addImport(final Class<?> type);
 
    /**
     * Add an import for the given {@link Import} type.
     */
-   public Import addImport(Import imprt);
+   Import addImport(Import imprt);
 
    /**
     * Add an import for the given {@link JavaType} type.
     */
-   public <T extends JavaType<?>> Import addImport(T type);
+   <T extends JavaType<?>> Import addImport(T type);
 
    /**
     * Ensures the type passed as argument is included in the list of imports for this java source. The method will also
@@ -113,26 +113,26 @@
     * @return The name (simple or fully qualified) that should be used to reference the imported type in the code
     * @seeAlso org.jboss.forge.roaster.model.Type
     */
-   public Import addImport(Type<?> type);
+   Import addImport(Type<?> type);
 
    /**
     * Remove any {@link Import} for the given fully-qualified class name, if it exists; otherwise, do nothing;
     */
-   public O removeImport(String name);
+   O removeImport(String name);
 
    /**
     * Remove any {@link Import} for the given {@link Class} type, if it exists; otherwise, do nothing;
     */
-   public O removeImport(Class<?> type);
+   O removeImport(Class<?> type);
 
    /**
     * Remove any {@link Import} for the given {@link T} type, if it exists; otherwise, do nothing;
     */
-   public <T extends JavaType<?>> O removeImport(T type);
+   <T extends JavaType<?>> O removeImport(T type);
 
    /**
     * Remove the given {@link Import} from this {@link O} instance, if it exists; otherwise, do nothing;
     */
-   public O removeImport(Import imprt);
+   O removeImport(Import imprt);
 
 }
\ No newline at end of file
"
45dce4cbe9be6a06d43c891d4014eaa6cfffea58,George Gastaldi,JavaAnnotationSource.java,MODIFY,addAnnotationElement -> [String declaration] | [],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/JavaAnnotationSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/JavaAnnotationSource.java
index 5dc9925..3994575 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/JavaAnnotationSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/JavaAnnotationSource.java
@@ -26,20 +26,20 @@
     * Get the {@link AnnotationElementSource} with the given name and return it, otherwise, return null.
     */
    @Override
-   public AnnotationElementSource getAnnotationElement(String name);
+   AnnotationElementSource getAnnotationElement(String name);
 
    /**
     * Get a list of all {@link AnnotationElementSource}s declared by this {@link JavaAnnotation}, or return an empty
     * list if no {@link AnnotationElementSource}s are declared.
     */
    @Override
-   public List<AnnotationElementSource> getAnnotationElements();
+   List<AnnotationElementSource> getAnnotationElements();
 
    /**
     * Add a new Java {@link AnnotationElementSource} to this {@link JavaAnnotationSource} instance. This will be a stub
     * until further modified.
     */
-   public AnnotationElementSource addAnnotationElement();
+   AnnotationElementSource addAnnotationElement();
 
    /**
     * Add a new {@link AnnotationElementSource} declaration to this {@link JavaAnnotationSource} instance, using the
@@ -48,11 +48,11 @@
     * <strong>For example:</strong><br>
     * <code>AnnotationElement e = javaClass.addAnnotationElement(""String newAnnotationElement();"");</code>
     */
-   public AnnotationElementSource addAnnotationElement(final String declaration);
+   AnnotationElementSource addAnnotationElement(final String declaration);
 
    /**
     * Remove the given {@link AnnotationElement} from this {@link JavaAnnotationSource} instance, if it exists;
     * otherwise, do nothing.
     */
-   public JavaAnnotationSource removeAnnotationElement(final AnnotationElement<?> annotationElement);
+   JavaAnnotationSource removeAnnotationElement(final AnnotationElement<?> annotationElement);
 }
\ No newline at end of file
"
45dce4cbe9be6a06d43c891d4014eaa6cfffea58,George Gastaldi,PropertyHolderSource.java,MODIFY,"addProperty -> [JavaType type, String name] | [String type, String name]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/PropertyHolderSource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/PropertyHolderSource.java
index 1ac5244..aef0d27 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/PropertyHolderSource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/PropertyHolderSource.java
@@ -45,5 +45,8 @@
    List<PropertySource<O>> getProperties();
 
    @Override
+   List<PropertySource<O>> getProperties(Class<?> type);
+
+   @Override
    PropertySource<O> getProperty(String name);
 }
"
45dce4cbe9be6a06d43c891d4014eaa6cfffea58,George Gastaldi,AbstractJavaSourceMemberHolder.java,MODIFY,addField -> [Field field] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
index 7448a54..e7739e7 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
@@ -664,6 +664,32 @@
       return result;
    }
 
+   @Override
+   public List<PropertySource<O>> getProperties(Class<?> type)
+   {
+      final Set<String> propertyNames = new LinkedHashSet<String>();
+      for (MethodSource<O> method : getMethods())
+      {
+         if ((isAccessor(method) || isMutator(method)) && method.getReturnType().getQualifiedName().equals(type.getCanonicalName()))
+         {
+            propertyNames.add(extractPropertyName(method));
+         }
+      }
+      for (FieldSource<O> field : getFields())
+      {
+         if (!field.isStatic() && field.getType().getQualifiedName().equals(type.getCanonicalName()))
+         {
+            propertyNames.add(field.getName());
+         }
+      }
+      final List<PropertySource<O>> result = new ArrayList<PropertySource<O>>(propertyNames.size());
+      for (String name : propertyNames)
+      {
+         result.add(new PropertyImpl<O>(name, getOrigin()));
+      }
+      return result;
+   }
+
    private boolean isAccessor(Method<O, ?> method)
    {
       return extractPropertyName(method) != null && method.getParameters().isEmpty() && !method.isReturnTypeVoid();
"
d9a17b8ea9e6cb4f430cdea434875424a040ca73,George Gastaldi,PropertySource.java,MODIFY,setType -> [JavaType entity] | [Class clazz],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/source/PropertySource.java b/api/src/main/java/org/jboss/forge/roaster/model/source/PropertySource.java
index 2689606..19ccc37 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/source/PropertySource.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/source/PropertySource.java
@@ -9,6 +9,7 @@
 
 import org.jboss.forge.roaster.model.JavaType;
 import org.jboss.forge.roaster.model.Property;
+import org.jboss.forge.roaster.model.util.Refactory;
 
 /**
  * Source variant of {@link Property} interface.
@@ -23,6 +24,9 @@
    /**
     * Set the type of this {@link Property} to the given {@link Class} type. Attempt to add an import statement to this
     * Property's base {@link O} if required.
+    *
+    * It is the caller's responsibility to create new {@code equals(Object)} and {@code hashCode()} methods,
+    * e.g. by using {@link Refactory#createHashCodeAndEquals(JavaClassSource, FieldSource[])}
     */
    PropertySource<O> setType(Class<?> clazz);
 
@@ -30,12 +34,18 @@
     * Set the type of this {@link Property} to the given type. Attempt to add an import statement to this Property's
     * base {@link O} if required. (Note that the given className must be fully-qualified in order to properly import
     * required classes)
+    *
+    * It is the caller's responsibility to create new {@code equals(Object)} and {@code hashCode()} methods,
+    * e.g. by using {@link Refactory#createHashCodeAndEquals(JavaClassSource, FieldSource[])}
     */
    PropertySource<O> setType(String type);
 
    /**
     * Set the type of this {@link Property} to the given {@link JavaType<?>} type. Attempt to add an import statement to
     * this field's base {@link O} if required.
+    *
+    * It is the caller's responsibility to create new {@code equals(Object)} and {@code hashCode()} methods,
+    * e.g. by using {@link Refactory#createHashCodeAndEquals(JavaClassSource, FieldSource[])}
     */
    PropertySource<O> setType(JavaType<?> entity);
 
"
d9a17b8ea9e6cb4f430cdea434875424a040ca73,George Gastaldi,Refactory.java,MODIFY,"createHashCodeAndEquals -> [JavaClassSource clazz, FieldSource fields] | [JavaClassSource clazz]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
index f8c6051..e403fb0 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Refactory.java
@@ -203,7 +203,7 @@
       clazz.addMethod(
                ""public boolean equals(Object obj) { "" +
                         ""if (this == obj) { return true; } "" +
-                        superEqualsCheck.toString() +
+                        superEqualsCheck +
                         typeCheckAndAssignment.toString() +
                         fieldEqualityChecks.toString() +
                         ""return true; "" +
"
d9a17b8ea9e6cb4f430cdea434875424a040ca73,George Gastaldi,Strings.java,MODIFY,"getLevenshteinDistance -> [CharSequence s, CharSequence t, int threshold] | [CharSequence s, CharSequence t]","diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Strings.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Strings.java
index 2149d95..35ccc30 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Strings.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Strings.java
@@ -78,7 +78,7 @@
 
    public static boolean isTrue(final String value)
    {
-      return value == null ? false : ""true"".equalsIgnoreCase(value.trim());
+      return value != null && ""true"".equalsIgnoreCase(value.trim());
    }
 
    public static boolean areEqual(final String left, final String right)
"
d9a17b8ea9e6cb4f430cdea434875424a040ca73,George Gastaldi,Types.java,MODIFY,getDefaultValue -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
index 5c3c51d..b7aedd6 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
@@ -175,11 +175,7 @@
 
       if (l.equals(r))
       {
-         if (!lp.isEmpty() && !rp.isEmpty())
-         {
-            return false;
-         }
-         return true;
+         return !(!lp.isEmpty() && !rp.isEmpty());
       }
 
       return false;
@@ -267,7 +263,7 @@
 
    public static String getPackage(final String className)
    {
-      if (className.indexOf(""."") > -1)
+      if (className.contains("".""))
       {
          return className.substring(0, className.lastIndexOf("".""));
       }
"
d9a17b8ea9e6cb4f430cdea434875424a040ca73,George Gastaldi,TypeDeclarationFinderVisitor.java,MODIFY,visit -> [PackageDeclaration node] | [TypeDeclaration node],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/ast/TypeDeclarationFinderVisitor.java b/impl/src/main/java/org/jboss/forge/roaster/model/ast/TypeDeclarationFinderVisitor.java
index 2286fae..f951a7e 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/ast/TypeDeclarationFinderVisitor.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/ast/TypeDeclarationFinderVisitor.java
@@ -21,7 +21,7 @@
  */
 public class TypeDeclarationFinderVisitor extends ASTVisitor
 {
-   private List<AbstractTypeDeclaration> declarations = new ArrayList<AbstractTypeDeclaration>();
+   private final List<AbstractTypeDeclaration> declarations = new ArrayList<AbstractTypeDeclaration>();
 
    private PackageDeclaration packageDeclaration;
 
"
d9a17b8ea9e6cb4f430cdea434875424a040ca73,George Gastaldi,AbstractJavaSource.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
index 7f0b38a..f7d8cb5 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSource.java
@@ -293,14 +293,10 @@
       {
          resultType = Types.stripGenerics(resultType);
       }
-      if (!validImport(resultType)
+      return !(!validImport(resultType)
                || hasImport(resultType)
                || Types.isJavaLang(resultType)
-               || Strings.areEqual(getPackage(), Types.getPackage(resultType)))
-      {
-         return false;
-      }
-      return true;
+               || Strings.areEqual(getPackage(), Types.getPackage(resultType)));
    }
 
    @Override
"
d9a17b8ea9e6cb4f430cdea434875424a040ca73,George Gastaldi,AnnotationElementImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationElementImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationElementImpl.java
index 54dfd02..80ed7fa 100755
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationElementImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationElementImpl.java
@@ -289,8 +289,8 @@
 
    private final AnnotationAccessor<JavaAnnotationSource, AnnotationElementSource> annotations = new AnnotationAccessor<JavaAnnotationSource, AnnotationElementSource>();
 
-   private JavaAnnotationSource parent;
-   private AST ast;
+   private final JavaAnnotationSource parent;
+   private final AST ast;
    private final AnnotationTypeMemberDeclaration member;
 
    public AnnotationElementImpl(final JavaAnnotationSource parent)
"
d9a17b8ea9e6cb4f430cdea434875424a040ca73,George Gastaldi,EnumConstantImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantImpl.java
index 576a9a9..db31485 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/EnumConstantImpl.java
@@ -30,7 +30,7 @@
    private final AnnotationAccessor<JavaEnumSource, EnumConstantSource> annotations = new AnnotationAccessor<JavaEnumSource, EnumConstantSource>();
    private JavaEnumSource parent;
    private AST ast;
-   private EnumConstantDeclaration enumConstant;
+   private final EnumConstantDeclaration enumConstant;
 
    private void init(final JavaEnumSource parent)
    {
"
d9a17b8ea9e6cb4f430cdea434875424a040ca73,George Gastaldi,FieldImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
index 0463b67..0974a5c 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/FieldImpl.java
@@ -42,8 +42,8 @@
    private final AnnotationAccessor<O, FieldSource<O>> annotations = new AnnotationAccessor<O, FieldSource<O>>();
    private final ModifierAccessor modifiers = new ModifierAccessor();
 
-   private O parent;
-   private AST ast;
+   private final O parent;
+   private final AST ast;
    private final FieldDeclaration field;
    private final VariableDeclarationFragment fragment;
    private final CompilationUnit cu;
"
d9a17b8ea9e6cb4f430cdea434875424a040ca73,George Gastaldi,JavaPackageInfoImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
index d07eb99..24a001a 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaPackageInfoImpl.java
@@ -282,13 +282,9 @@
       {
          resultType = Types.stripGenerics(resultType);
       }
-      if (!validImport(resultType)
+      return !(!validImport(resultType)
                || hasImport(resultType)
-               || Types.isJavaLang(resultType))
-      {
-         return false;
-      }
-      return true;
+               || Types.isJavaLang(resultType));
    }
 
    @Override
"
d9a17b8ea9e6cb4f430cdea434875424a040ca73,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index 9c3ef93..e3d73b2 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -153,7 +153,7 @@
          }
       }
 
-      signature.append("") : "" + (this.getReturnType() == null ? ""void"" : this.getReturnType().getName()));
+      signature.append("") : "").append((this.getReturnType() == null ? ""void"" : this.getReturnType().getName()));
       return signature.toString();
    }
 
"
d9a17b8ea9e6cb4f430cdea434875424a040ca73,George Gastaldi,Formatter.java,MODIFY,"format -> [Properties prefs, String source] | [File source]","diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java b/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
index 6c714ed..0fc297f 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/util/Formatter.java
@@ -209,8 +209,8 @@
    {
       String newLine = System.getProperty(""line.separator"");
 
-      if (content.indexOf(""\n"") != -1
-               && content.indexOf(newLine) == -1)
+      if (content.contains(""\n"")
+               && !content.contains(newLine))
          return content.replaceAll(""\n"", newLine);
 
       return content;
"
3843e8d142436437449a703fde732b777cb5c3df,George Gastaldi,JavaClassImpl.java,MODIFY,setSuperType -> [String type] | [JavaType type],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
index f889b09..238be5d 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/JavaClassImpl.java
@@ -9,7 +9,8 @@
 import org.eclipse.jdt.core.dom.BodyDeclaration;
 import org.eclipse.jdt.core.dom.CompilationUnit;
 import org.eclipse.jdt.core.dom.Modifier.ModifierKeyword;
-import org.eclipse.jdt.core.dom.SimpleType;
+import org.eclipse.jdt.core.dom.Name;
+import org.eclipse.jdt.core.dom.SimpleName;
 import org.eclipse.jdt.core.dom.Type;
 import org.eclipse.jdt.core.dom.TypeDeclaration;
 import org.eclipse.jface.text.Document;
@@ -24,7 +25,7 @@
 
 /**
  * Represents a Java Source File
- * 
+ *
  * @author <a href=""mailto:lincolnbaxter@gmail.com"">Lincoln Baxter, III</a>
  */
 public class JavaClassImpl extends AbstractGenericCapableJavaSource<JavaClassSource> implements JavaClassSource
@@ -170,11 +171,11 @@
       else if (Types.isGeneric(type))
       {
          String typeD = Types.stripGenerics(type);
-         String sympleTypeDName = Types.toSimpleName(typeD);
+         String simpleTypeDName = Types.toSimpleName(typeD);
          String typesGeneric = Types.getGenericsTypeParameter(type);
 
          org.eclipse.jdt.core.dom.ParameterizedType pt = body.getAST().newParameterizedType(
-                  body.getAST().newSimpleType(body.getAST().newSimpleName(sympleTypeDName)));
+                  body.getAST().newSimpleType(body.getAST().newSimpleName(simpleTypeDName)));
 
          if (!hasImport(typeD) && Types.isQualified(typeD))
          {
@@ -195,13 +196,27 @@
       }
       else
       {
-         SimpleType simpleType = body.getAST().newSimpleType(body.getAST().newSimpleName(Types.toSimpleName(type)));
-         getBodyDeclaration().setStructuralProperty(TypeDeclaration.SUPERCLASS_TYPE_PROPERTY, simpleType);
+         final SimpleName simpleName = body.getAST().newSimpleName(Types.toSimpleName(type));
 
-         if (!hasImport(type) && Types.isQualified(type))
+         final Type superType;
+
+         if (!hasImport(type) && hasImport(simpleName.getIdentifier()) && Types.isQualified(type))
          {
-            addImport(type);
+            // Conflicting import found, use qualified name for new super type
+            final Name qualifier = body.getAST().newName(Types.getPackage(type));
+            superType = body.getAST().newNameQualifiedType(qualifier, simpleName);
          }
+         else
+         {
+            // Same type as existing import or not qualified at all (maybe from same package)
+            superType = body.getAST().newSimpleType(simpleName);
+            if (Types.isQualified(type))
+            {
+               addImport(type);
+            }
+         }
+
+         getBodyDeclaration().setStructuralProperty(TypeDeclaration.SUPERCLASS_TYPE_PROPERTY, superType);
       }
 
       return this;
"
0d0b93b3dd4b46b656aa1eeadbc149e7ad64f2a9,George Gastaldi,AbstractJavaSourceMemberHolder.java,MODIFY,addField -> [Field field] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
index e7739e7..ce7331d 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
@@ -417,20 +417,24 @@
    {
       if (!this.hasInterface(type))
       {
+         final String simpleName = Types.toSimpleName(type);
+
          Type interfaceType = JDTHelper.getInterfaces(
                   Roaster.parse(JavaInterfaceImpl.class,
-                           ""public interface Mock extends "" + Types.toSimpleName(type)
-                                    + "" {}"")
+                           ""public interface Mock extends "" + simpleName + "" {}"")
                            .getBodyDeclaration())
                   .get(0);
 
-         if (this.hasInterface(Types.toSimpleName(type)) || this.hasImport(Types.toSimpleName(type)))
+         if (this.hasInterface(simpleName) || this.hasImport(simpleName))
          {
             interfaceType = JDTHelper.getInterfaces(Roaster.parse(JavaInterfaceImpl.class,
                      ""public interface Mock extends "" + type + "" {}"").getBodyDeclaration()).get(0);
          }
 
-         this.addImport(type);
+         if (!this.hasImport(simpleName))
+         {
+            this.addImport(type);
+         }
 
          ASTNode node = ASTNode.copySubtree(unit.getAST(), interfaceType);
          JDTHelper.getInterfaces(getBodyDeclaration()).add((Type) node);
"
ec80034c8a87f8070abee8f7e597a50a2d2369fa,George Gastaldi,AbstractJavaSourceMemberHolder.java,MODIFY,addField -> [Field field] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
index ce7331d..2d1b422 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
@@ -397,9 +397,10 @@
       for (Type type : superTypes)
       {
          String name = JDTHelper.getTypeName(type);
-         if (Types.isSimpleName(name) && this.hasImport(name))
+         String rawName = Types.stripGenerics(name);
+         if (Types.isSimpleName(rawName) && this.hasImport(rawName))
          {
-            Import imprt = this.getImport(name);
+            Import imprt = this.getImport(rawName);
             String pkg = imprt.getPackage();
             if (!Strings.isNullOrEmpty(pkg))
             {
@@ -464,13 +465,15 @@
    {
       O obj = addInterface(type);
 
-      if (type instanceof JavaInterfaceSource) {
+      if (type instanceof JavaInterfaceSource)
+      {
          Set<Import> usedImports = new HashSet<Import>();
 
          JavaInterfaceSource interfaceSource = (JavaInterfaceSource) type;
          for (MethodSource<JavaInterfaceSource> method : interfaceSource.getMethods())
          {
-            if (method.isDefault()) {
+            if (method.isDefault())
+            {
                // Do not add default implementations
                continue;
             }
@@ -674,7 +677,8 @@
       final Set<String> propertyNames = new LinkedHashSet<String>();
       for (MethodSource<O> method : getMethods())
       {
-         if ((isAccessor(method) || isMutator(method)) && method.getReturnType().getQualifiedName().equals(type.getCanonicalName()))
+         if ((isAccessor(method) || isMutator(method))
+                  && method.getReturnType().getQualifiedName().equals(type.getCanonicalName()))
          {
             propertyNames.add(extractPropertyName(method));
          }
"
8e64b52b48800512ce65d011e06e5b95b56afc04,George Gastaldi,AnnotationImpl.java,MODIFY,getLiteralValue -> [String name] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
index 33f8695..75aa97b 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
@@ -1023,9 +1023,12 @@
       {
          literalValue = literalValue.substring(1, literalValue.length() - 1);
       }
-      for (String value : literalValue.split("",""))
+      if (!Strings.isNullOrEmpty(literalValue))
       {
-         result.add(Strings.unquote(value));
+         for (String value : literalValue.split("",""))
+         {
+            result.add(Strings.unquote(value));
+         }
       }
       return result.toArray(new String[result.size()]);
    }
"
8a3551c9a73894d0312e43fc1ebbf2dabd5037dd,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index e3d73b2..d042a73 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -10,9 +10,12 @@
 import java.lang.reflect.Modifier;
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.Hashtable;
 import java.util.Iterator;
 import java.util.List;
 
+import org.eclipse.jdt.core.JavaCore;
+import org.eclipse.jdt.core.compiler.CategorizedProblem;
 import org.eclipse.jdt.core.dom.AST;
 import org.eclipse.jdt.core.dom.ASTNode;
 import org.eclipse.jdt.core.dom.Block;
@@ -25,6 +28,10 @@
 import org.eclipse.jdt.core.dom.Statement;
 import org.eclipse.jdt.core.dom.TypeParameter;
 import org.eclipse.jdt.core.dom.VariableDeclaration;
+import org.eclipse.jdt.internal.compiler.CompilationResult;
+import org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration;
+import org.eclipse.jdt.internal.core.util.CodeSnippetParsingUtil;
+import org.jboss.forge.roaster.ParserException;
 import org.jboss.forge.roaster.Roaster;
 import org.jboss.forge.roaster.model.Annotation;
 import org.jboss.forge.roaster.model.JavaType;
@@ -251,6 +258,7 @@
       }
    }
 
+   @SuppressWarnings({ ""rawtypes"", ""unchecked"" })
    @Override
    public MethodSource<O> setBody(final String body)
    {
@@ -260,11 +268,27 @@
       }
       else
       {
+         Hashtable options = JavaCore.getOptions();
+         options.put(JavaCore.COMPILER_SOURCE, JavaCore.VERSION_1_8);
+         options.put(JavaCore.CORE_ENCODING, ""UTF-8"");
+         CodeSnippetParsingUtil codeSnippetParsingUtil = new CodeSnippetParsingUtil(false);
+         ConstructorDeclaration constructorDeclaration = codeSnippetParsingUtil.parseStatements(body.toCharArray(), 0,
+                  body.length(), options, true, false);
+         CompilationResult compilationResult = constructorDeclaration.compilationResult();
+         if (compilationResult.hasErrors())
+         {
+            StringBuilder sb = new StringBuilder(""PROBLEMS:\n"");
+            for (CategorizedProblem problem : compilationResult.getErrors())
+            {
+               sb.append(""\t - "").append(problem.getMessage()).append('\n');
+            }
+            throw new ParserException(sb.toString());
+         }
+         // TODO: Reuse ConstructorDeclaration somehow
          String stub = ""public class Stub { public void method() {"" + body + ""} }"";
          JavaClassSource temp = (JavaClassSource) Roaster.parse(stub);
          List<MethodSource<JavaClassSource>> methods = temp.getMethods();
          Block block = ((MethodDeclaration) methods.get(0).getInternal()).getBody();
-
          block = (Block) ASTNode.copySubtree(method.getAST(), block);
          method.setBody(block);
       }
"
05535112856752eed16a52b09815b7a4275ec67d,George Gastaldi,Roaster.java,MODIFY,"parse -> [Class type, InputStream data] | [File file]","diff --git a/api/src/main/java/org/jboss/forge/roaster/Roaster.java b/api/src/main/java/org/jboss/forge/roaster/Roaster.java
index 8714640..5a56f54 100644
--- a/api/src/main/java/org/jboss/forge/roaster/Roaster.java
+++ b/api/src/main/java/org/jboss/forge/roaster/Roaster.java
@@ -31,7 +31,9 @@
  */
 public final class Roaster
 {
-   private Roaster() {}
+   private Roaster()
+   {
+   }
 
    private static List<JavaParser> parsers;
    private static List<FormatterProvider> formatters;
@@ -164,6 +166,21 @@
    }
 
    /**
+    * Validates a code snippet and returns a {@link List} of {@link Problem}. Never returns <code>null</code>.
+    * 
+    * @param snippet any Java code
+    * @throws ParserException if no {@link JavaParser} implementation could be found
+    */
+   public static List<Problem> validateSnippet(String snippet) throws ParserException
+   {
+      for (JavaParser parser : getParsers())
+      {
+         return parser.validateSnippet(snippet);
+      }
+      throw new ParserException(""Cannot find JavaParser capable of validating the requested data"");
+   }
+
+   /**
     * Read the given string and parse its data into a new {@link JavaType} instance of the given type.
     */
    @SuppressWarnings(""unchecked"")
"
05535112856752eed16a52b09815b7a4275ec67d,George Gastaldi,MethodImpl.java,MODIFY,addAnnotation -> [String className] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
index d042a73..cb74cb1 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/MethodImpl.java
@@ -10,12 +10,9 @@
 import java.lang.reflect.Modifier;
 import java.util.ArrayList;
 import java.util.Collections;
-import java.util.Hashtable;
 import java.util.Iterator;
 import java.util.List;
 
-import org.eclipse.jdt.core.JavaCore;
-import org.eclipse.jdt.core.compiler.CategorizedProblem;
 import org.eclipse.jdt.core.dom.AST;
 import org.eclipse.jdt.core.dom.ASTNode;
 import org.eclipse.jdt.core.dom.Block;
@@ -28,10 +25,8 @@
 import org.eclipse.jdt.core.dom.Statement;
 import org.eclipse.jdt.core.dom.TypeParameter;
 import org.eclipse.jdt.core.dom.VariableDeclaration;
-import org.eclipse.jdt.internal.compiler.CompilationResult;
-import org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration;
-import org.eclipse.jdt.internal.core.util.CodeSnippetParsingUtil;
 import org.jboss.forge.roaster.ParserException;
+import org.jboss.forge.roaster.Problem;
 import org.jboss.forge.roaster.Roaster;
 import org.jboss.forge.roaster.model.Annotation;
 import org.jboss.forge.roaster.model.JavaType;
@@ -258,7 +253,6 @@
       }
    }
 
-   @SuppressWarnings({ ""rawtypes"", ""unchecked"" })
    @Override
    public MethodSource<O> setBody(final String body)
    {
@@ -268,23 +262,11 @@
       }
       else
       {
-         Hashtable options = JavaCore.getOptions();
-         options.put(JavaCore.COMPILER_SOURCE, JavaCore.VERSION_1_8);
-         options.put(JavaCore.CORE_ENCODING, ""UTF-8"");
-         CodeSnippetParsingUtil codeSnippetParsingUtil = new CodeSnippetParsingUtil(false);
-         ConstructorDeclaration constructorDeclaration = codeSnippetParsingUtil.parseStatements(body.toCharArray(), 0,
-                  body.length(), options, true, false);
-         CompilationResult compilationResult = constructorDeclaration.compilationResult();
-         if (compilationResult.hasErrors())
+         List<Problem> problems = Roaster.validateSnippet(body);
+         if (problems.size() > 0)
          {
-            StringBuilder sb = new StringBuilder(""PROBLEMS:\n"");
-            for (CategorizedProblem problem : compilationResult.getErrors())
-            {
-               sb.append(""\t - "").append(problem.getMessage()).append('\n');
-            }
-            throw new ParserException(sb.toString());
+            throw new ParserException(problems);
          }
-         // TODO: Reuse ConstructorDeclaration somehow
          String stub = ""public class Stub { public void method() {"" + body + ""} }"";
          JavaClassSource temp = (JavaClassSource) Roaster.parse(stub);
          List<MethodSource<JavaClassSource>> methods = temp.getMethods();
"
fe838b3fe34153477a1a01dbb986dd49658a1d25,George Gastaldi,AnnotationImpl.java,MODIFY,getLiteralValue -> [String name] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
index 75aa97b..93c3052 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AnnotationImpl.java
@@ -305,6 +305,7 @@
       return this;
    }
 
+   @SuppressWarnings(""unchecked"")
    @Override
    public AnnotationSource<O> setLiteralValue(final String value)
    {
@@ -317,15 +318,33 @@
 
       if (isSingleValue())
       {
-         SingleMemberAnnotation sa = (SingleMemberAnnotation) annotation;
 
          String stub = ""@"" + getName() + ""("" + value + "") public class Stub { }"";
          JavaClass<?> temp = Roaster.parse(JavaClass.class, stub);
 
-         SingleMemberAnnotation anno = (SingleMemberAnnotation) temp.getAnnotations().get(0).getInternal();
+         Object internal = temp.getAnnotations().get(0).getInternal();
+         if (internal instanceof SingleMemberAnnotation)
+         {
+            SingleMemberAnnotation sa = (SingleMemberAnnotation) annotation;
+            Expression expression = ((SingleMemberAnnotation) internal).getValue();
+            sa.setValue((Expression) ASTNode.copySubtree(ast, expression));
+         }
+         else if (internal instanceof NormalAnnotation)
+         {
+            NormalAnnotation anno = (NormalAnnotation) internal;
+            convertTo(AnnotationType.NORMAL);
+            NormalAnnotation na = (NormalAnnotation) annotation;
 
-         Expression expression = anno.getValue();
-         sa.setValue((Expression) ASTNode.copySubtree(ast, expression));
+            for (MemberValuePair mvp : (List<MemberValuePair>) anno.values())
+            {
+               na.values().add(ASTNode.copySubtree(annotation.getAST(), mvp));
+            }
+         }
+         else
+         {
+            throw new IllegalArgumentException(
+                     ""Type "" + internal.getClass().getName() + "" cannot be handled in this method"");
+         }
       }
       else
       {
"
b0cb17d7e995debc98715677fd71af84ba5e2bf5,George Gastaldi,Types.java,MODIFY,getDefaultValue -> [String type] | [Class type],"diff --git a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
index b7aedd6..67b79d4 100644
--- a/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
+++ b/api/src/main/java/org/jboss/forge/roaster/model/util/Types.java
@@ -421,10 +421,14 @@
       {
          return false;
       }
-      if (CLASS_ARRAY_PATTERN.matcher(type).matches())
+      if (type.charAt(0) == '[' && CLASS_ARRAY_PATTERN.matcher(type).matches())
       {
          return true;
       }
+      if(!type.endsWith(""]""))
+      {
+          return false;
+      }
       Matcher matcher = SIMPLE_ARRAY_PATTERN.matcher(type);
       if (matcher.find())
       {
@@ -468,6 +472,10 @@
 
    private static boolean isClassArray(String type)
    {
+      if( type == null || type.length() == 0 || type.charAt(0) != '[' )
+      {
+          return false;
+      }
       Matcher matcher = CLASS_ARRAY_PATTERN.matcher(type);
       return matcher.find();
    }
"
b0cb17d7e995debc98715677fd71af84ba5e2bf5,George Gastaldi,TypeImpl.java,MODIFY,isType -> [String name] | [Class type],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/TypeImpl.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/TypeImpl.java
index 582fb20..0c13814 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/TypeImpl.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/TypeImpl.java
@@ -222,16 +222,20 @@
    @Override
    public boolean isType(final Class<?> type)
    {
-      final String qualifiedName = getQualifiedName();
+      final String simpleName = type.getSimpleName();
+      if(!getName().contains(simpleName))
+      {
+         return false;
+      }
 
-      if (Strings.areEqual(type.getName(), qualifiedName))
+      if (isPrimitive() && type.isPrimitive() && simpleName.equals(getName()))
       {
          return true;
       }
 
-      final String simpleName = type.getSimpleName();
+      final String qualifiedName = getQualifiedName();
 
-      if (isPrimitive() && type.isPrimitive() && simpleName.equals(getName()))
+      if (Strings.areEqual(type.getName(), qualifiedName))
       {
          return true;
       }
"
7daf73cc9790a5c369796181efe23320f98c12f2,George Gastaldi,AbstractJavaSourceMemberHolder.java,MODIFY,addField -> [Field field] | [],"diff --git a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
index 2d1b422..2339251 100644
--- a/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
+++ b/impl/src/main/java/org/jboss/forge/roaster/model/impl/AbstractJavaSourceMemberHolder.java
@@ -398,10 +398,18 @@
       {
          String name = JDTHelper.getTypeName(type);
          String rawName = Types.stripGenerics(name);
-         if (Types.isSimpleName(rawName) && this.hasImport(rawName))
+         if (Types.isSimpleName(rawName))
          {
-            Import imprt = this.getImport(rawName);
-            String pkg = imprt.getPackage();
+            String pkg;
+            if (this.hasImport(rawName))
+            {
+               Import imprt = this.getImport(rawName);
+               pkg = imprt.getPackage();
+            }
+            else
+            {
+               pkg = this.getPackage();
+            }
             if (!Strings.isNullOrEmpty(pkg))
             {
                name = pkg + ""."" + name;
"
